<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-綜合資訊]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="https://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-綜合資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 02 Dec 2023 00:00:46 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[支持 Upsert、Kafka Connector、集成 Airbyte，Milvus 助力高效數據流處理]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Milvus 已支持 Upsert、 Kafka Connector、Airbyte！</p><p>在上週的文章中《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzUzMDI5OTA5NQ%3D%3D%26mid%3D2247499457%26idx%3D1%26sn%3D210ed71ffaa36d4220df3907a9a0ab41%26chksm%3Dfa515f79cd26d66f573354b0dc98dba492b925b1db63fbf5e5ad8b4cafb3f3b315d2bf6c5502%26scene%3D21%23wechat_redirect" target="_blank">登陸 Azure、發佈新版本……Zilliz 昨夜今晨發生了什麼？</a>》，我們已經透露過 Milvus（Zilliz Cloud）為提高數據流處理效率， 先後支持了 Upsert、 Kafka Connector、Airbyte，而這些功能的作用都是簡化數據處理和集成流程，為開發人員提供更高效的工具來管理複雜的數據，今天我們將向大家一一介紹。</p><h2>01.Upsert：簡化數據更新流程</h2><p>Upsert 功能上線以前，在 Milvus 中的更新數據需要兩個步驟：刪除數據，然後再插入新數據。雖然這種方法也可行，但無法確保數據原子性，且操作過於繁瑣。Milvus 2.3 版本發佈了全新的 Upsert 功能。（Zilliz Cloud 海外版也已上線 Upsert 功能 Beta 版）。</p><p>可以説，Upsert 功能重新定義了數據更新和管理方式。使用 Upsert 時，Milvus 會判斷數據是否已經存在。如果數據不存在則插入數據，如果已存在則更新數據。這種具有原子性的方法對 Milvus 這樣單獨管理插入和刪除數據的系統中尤為重要。</p><p>Upsert 具體的順序為：先插入數據，然後刪除重複數據。這樣可以確保了操作期間的數據仍然可見。</p><p>此外，Upsert 功能還特別考慮了修改主鍵的場景。在數據更新過程中無法更改主鍵列。這與 Milvus 根據主鍵哈希跨分片（shard）管理數據的原則一致。這種限制避免了跨 Shard 操作帶來的複雜性和潛在的數據不一致性。</p><p>Upsert 使用方法簡單，類似於插入操作。用户可以輕鬆將 Upsert 集成到現有的工作流程中，無需對原有流程進行大改。在 Pymilvus 等 SDK 中，Upsert 命令調用和插入命令完全一致。熟悉 Milvus 的用户使用起來沒有任何難度，可以獲得一致和絲滑的用户體驗。</p><p><img src="https://oscimg.oschina.net/oscnet/up-f41551a015823f1b2df852545459520d410.png" alt="" referrerpolicy="no-referrer"></p><p>執行命令時，Upsert 會提供關於操作成功與否以及受影響的數據的反饋，進一步增加了開發者的使用便利性。這種易於使用且穩定的功能能夠助力數據管理。更多詳情，請查看 Upsert 文檔。</p><p>但是使用 Upsert 功能時還需要考慮以下兩點：</p><ul><li><p>AutoID 限制：使用 Upsert 功能的前提條件是將 AutoID 設置為 false。如果 Collection Schema 中將 AutoID 設置為 true，則無法執行 Upsert 操作。我們設置了這個限制的主要考量是，Upsert 也包含數據更新操作，更新的數據需要有新的主鍵值。如果用户提供的主鍵值與 AutoID 自動生成的主鍵值發生衝突，那可能會導致數據被覆蓋。所以，已經開啓了 AutoID 的 Collection 不可使用 Upsert 功能。後續新版本中我們可能會取消這一限制。</p></li><li><p>性能開銷：Upsert 可能會導致性能成本。Milvus 使用 WAL 架構，過多刪除操作可能會導致性能下滑。Milvus 中的刪除操作不會立即清除數據，而是為數據打上刪除標記。隨後在數據壓縮過程中才會根據這些標記真正清除數據。因此，頻繁的刪除操作可能會導致數據膨脹，影響性能。我們建議不要太過於頻繁地使用 Upsert 功能，以確保最佳性能。</p></li></ul><h2>02.Kafka Connector：賦能實時數據處理</h2><p>近期，Milvus 和 Zilliz Cloud 接入了 Kafka Sink Connector，向量數據可以無縫絲滑地通過 Confluent/Kafka 實時導入 Milvus 或 Zilliz Cloud 向量數據庫中。本次集成能夠進一步釋放向量數據庫潛能，助力實時生成式 AI 應用，尤其是使用 OpenAI GPT-4 這種大模型的場景。</p><p>如今，我們所獲取的信息中，非結構化數據已佔據 80% 以上，且這類數據還在呈爆炸式增長。Zilliz 與 Confluent 的合作標誌着非結構化數據管理和分析的重大進步，我們能夠更高效存儲、處理實時向量數據流，將其轉化為易於搜索的數據。</p><p>Kafka Connector + Milvus / Zilliz Cloud 的常見用例包括：</p><p>增強生成式 AI：為 GenAI 應用提供最新的向量數據，從而確保生成的準確性和及時性。這兩點對於金融和媒體等領域尤為重要，因為都需要實時處理各種來源的流式數據。</p><p>優化電商推薦系統：電商平台需要實時根據庫存和客户行為動態調整其推薦商品或內容以提升用户體驗。</p><p>在 Zilliz Cloud 中使用 Kafka Connector 的步驟也十分簡單：</p><ul><li><p>從 GitHub 或 Confluent Hub 下載 Kafka Sink Connector。</p></li><li><p>配置 Confluent 和 Zilliz Cloud 賬號。</p></li><li><p>閲讀在 GitHub 倉庫中提供的指南並配置 Kafka Connector。</p></li><li><p>運行 Kafka Connector，將實時流數據導入 Zilliz Cloud。</p></li></ul><p>如需更深入瞭解如何設置 Kafka Connector 和相關用例，請前往 GitHub 倉庫或訪問此網頁。</p><h2>03.集成 Airbyte：數據處理更高效</h2><p>近期，Milvus 與 Airbyte 團隊合作，在 Milvus 中集成 Airbyte，增強了大語言模型（LLM）和向量數據庫中的數據獲取和使用流程。本次集成能增強開發者存儲、索引和搜索高維向量數據的能力，大大簡化生成式聊天機器人和產品推薦等應用搭建流程。</p><p>本次集成的主要亮點包括：</p><ul><li><p>數據傳輸更高效：Airbyte 能夠無縫將數據從各種來源傳輸到 Milvus 或 Zilliz Cloud，即時將數據轉化為 Embedding 向量，簡化了數據處理流程。</p></li><li><p>搜索功能更強大：此次集成增強了向量數據庫的語義搜索能力。基於 Embedding 向量，系統可以自動識別並搜索出語義相似性高的相關內容，能夠為需要高效檢索非結構化數據的應用賦能。</p></li><li><p>設置過程更簡單：設置 Milvus 集羣和配置 Airbyte 同步數據的步驟十分簡單。如果需要使用 Streamlit 和 OpenAI Embedding API 構建應用也是同樣的設置步驟。</p></li></ul><p>此次集成簡化了數據傳輸和處理，釋放實時 AI 應用的無限可能性。例如，在客户支持系統中，使用 Milvus 或 Zilliz Cloud 集成 Airbyte 可以創建基於語義搜索的智能技術支持工單系統，從而為用户提供即時、有用的信息，減少人工幹預，提升用户體驗。</p><p>Zilliz 始終致力於提升非結構化數據管理和處理能力和技術，本次推出的 Upsert、Kafka Connector、Airbyte 等工具的集成都展現了這一點。後續，我們將進一步優化數據獲取和數據 Pipeline 功能，敬請期待！</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 08:57:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4209276/blog/10315720</guid>
            <link>https://my.oschina.net/u/4209276/blog/10315720</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[算力基礎設施領域國家標準發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0; margin-right:0">2023 年 11 月 27 日，國家標準 GB/T 43331-2023《互聯網數據中心（IDC）技術和分級要求》正式發佈。中國信息通信研究院（簡稱「中國信通院」）聯合多家企事業單位編制的這一國家標準正契合當前國家算力基礎設施建設和算力產業高質量發展需要。</p><p style="margin-left:0; margin-right:0"><img alt="" height="292" src="https://oscimg.oschina.net/oscnet/up-cc1753c1d4186d7e0e332aeaa3974d09ff3.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0">該標準規定了互聯網數據中心（IDC）在綠色、可用性、安全性、服務能力、算力算效、低碳等六大方面的技術及分級要求，適用於互聯網數據中心（IDC）的規劃、設計、建設、運維和評估，期望更好的為不同行業深化賦能作用。</p><p style="margin-left:0; margin-right:0">2013 年以來，中國信通院雲計算與大數據研究所數據中心團隊基於中國通信標準化協會編制發佈了數項數據中心評級通信行業標準，對數據中心的綠色、可靠和安全性進行分級分類。經過多年實踐迭代，團隊聯合業界眾多使用方、設計方和供應方共同編制了該國家標準，以期更好地指導我國數據中心的健康發展。</p><p style="margin-left:0; margin-right:0">高能效一直是數據中心發展過程中廣受關注的問題，該國家標準將在綠色技術應用和運維制度管理等方面提出促進數據中心能效水平提升的具體要求；服務能力是數據中心對外服務的綜合體現，通過對服務能力的客觀評價，有利於數據中心的自我改進提升，也有利於客户根據業務需求選擇合適的數據中心；可用性方面，通過提高設備冗餘，可以在架構方面更好地保障數據中心應對突發情況的能力；安全性有助於保障數據中心設備運行及人員的安全。通過綜合評估數據中心等級情況，有利於運營者加強自我瞭解，更有利於行業按需選擇。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 08:46:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269062</guid>
            <link>https://www.oschina.net/news/269062</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[國產編程語言 MoonBit（月兔）需要支持中文關鍵字嗎？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>MoonBit（月兔）是中國開發者團隊創建的編程語言，由粵港澳大灣區數字經濟研究院（IDEA 研究院）基礎軟件中心負責人張宏波領導的團隊開發。</p><p>張宏波本人不僅為多種編程語言做出了貢獻，包括 OCaml、ReScript（原 ReasonML/BuckleScript）和 Flow，還曾是 Rescript 語言工具鏈幾乎所有關鍵組件的作者，包括高速編譯器、標準庫以及構建系統等。</p><blockquote><p>MoonBit 專為雲計算、邊緣計算設計，是一個用於雲計算和邊緣計算的 WebAssembly 端到端編程語言工具鏈，集開發、編譯、測試、部署於一體 —— 涵蓋了通用程序語言設計、編譯器、構建系統、IDE、部署工具等。在語言設計、編譯器和構建系統上實現高度的垂直整合，為用户提供更佳的開發體驗和性能，致力打造未來世界級的基礎軟件生態。</p><p><img src="https://oscimg.oschina.net/oscnet/up-8f1d876877f96c97b9e12b93fb1fef4c7ec.gif" referrerpolicy="no-referrer"></p></blockquote><p>昨天，張宏波在知乎發表提問：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F632589892" target="_blank">《MoonBit 國產編程語言提供中文關鍵字的可能性？》</a></u>，希望收集一些關於為 MoonBit 提供中文關鍵字支持的反饋，主要是有兩方面考慮：一是支持中文關鍵字從社區來説會帶來什麼潛在的負面作用？另外就是了解下真實的中文編程用户有多少。</p><p>張宏波説道：</p><blockquote><p>對於專業人士來説，中文確實不是學習編程的主要難點，但是從討論熱烈的程度來説，好像對一部分人來説或多或少是個門檻。<strong>從技術實現來講，可能就是一個上午就能大概支持了</strong>。</p><p>我提這個問題是想從兩方面收集一些反饋：<strong>一方面是支持中文關鍵字從社區來説會帶來什麼潛在的負面作用？另一方面是瞭解下真實的中文編程用户有多少，你會因問 MoonBit 支持中文關鍵字而更多地使用或者推薦給其他人嗎？</strong></p></blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-11a36224f77741f56eab1b317a5008a9d60.png" referrerpolicy="no-referrer"></p><p>下面是用 MoonBit 語言實現<code>fib</code>函數的示例代碼：</p><pre><code>// Moonbit
func fib(num : Int) -&gt; Int {
  fn aux(n, acc1, acc2) {
    match n {
      0 =&gt; acc1
      1 =&gt; acc2
      _ =&gt; aux(n - 1, acc2, acc1 + acc2)
    }
  }

  aux(num, 0, 1)
}
</code></pre><p><strong>延伸閲讀：</strong></p><ul><li><strong><em><u><a href="https://www.oschina.net/news/255951/moonbit-first-announce" target="_blank">中國開發者團隊創建的編程語言：MoonBit（月兔）</a></u></em></strong></li><li><strong><em><u><a href="https://www.oschina.net/project/awesome?columnId=20" target="_blank">中國人主導編程語言列表</a></u></em></strong></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 08:04:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269052</guid>
            <link>https://www.oschina.net/news/269052</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[AYANEO 新品復古 Mini PC：R3 3200U/R7 5700U 可選]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">遊戲硬件公司 Ayaneo 於近日<span style="background-color:#ffffff">正式發佈了旗下首款迷你主機：</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.ayaneo.com%2Fproduct%2FAYANEO-Retro-Mini-PC-AM01.html" target="_blank">Ayaneo Retro Mini PC AM01</a>，號稱引領 Mini PC 2.0 時代。該公司全新的 Mini PC 系列旨在滿足玩家的多樣化需求，打造無縫的遊戲體驗。</span></p><p><span style="color:#000000">Retro Mini PC AM01 整體設計致敬了蘋果公司經典的&nbsp;Macintosh。精緻復古的造型設計搭配<span style="background-color:#ffffff">僅 1L 的小巧體積，輕巧且便攜，Bare System 重量約為 466 克。機身正面帶有一個可自主更換的磁吸裝飾件，虛擬屏幕（僅用於裝飾目的，不可拆卸）同樣也可以使用自定義貼紙進行裝飾。</span></span></p><p><span style="color:#000000">雖然&nbsp;<span style="background-color:#ffffff">Ayaneo Retro Mini PC 具有蘋果風格的外觀，但實際上運行的卻是 Windows 11；支持安裝 Windows 和 Ubuntu、Debian 等 Linux 系統，以及 Steam OS 和 Batocera 等遊戲系統。它可以配置為軟件路由器或個人 NAS 系統使用。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">核心配置方面，AYANEO Retro Mini PC AM01&nbsp;配備 AMD Ryzen 3 3200U 或 Ryzen 7 5700U，提供多種處理器選項以適應各種用途需要。並且具有良好的可擴展性，配備五個 USB 端口（一個 USB-C 和四個 USB-A），另外還有 HDMI、DisplayPort、耳機插孔、以太網、藍牙和 Wi-Fi。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">散熱方面採用了高性能四銅管導熱結構、35W 大尺寸高壓渦輪風扇、60008 mm² 鋁製散熱片的設計；</span></span><span style="color:#000000"><span style="background-color:#ffffff">立體環繞進排氣</span></span><span style="color:#000000"><span style="background-color:#ffffff">系統，智能風扇控制。</span></span></p><p><img height="430" src="https://oscimg.oschina.net/oscnet/up-d080ffb024ee9f3cec60c28fd06a4058905.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">AM01 的<span style="background-color:#ffffff">早鳥優惠價格為 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.indiegogo.com%2Fprojects%2Fayaneo-retro-mini-pc-creator-of-mini-pc-2-0-era%23%2F" target="_blank">149 美元起</a>，最高為 459 美元。</span>現已接受預訂，官方計劃於 12 月開始發貨。<span style="background-color:#ffffff">具體的價格矩陣如下所示：</span></span></p><p><img alt="" height="267" src="https://oscimg.oschina.net/oscnet/up-0cd8ae66a9a0393d2fb33a48f61a185f409.jpg" width="500" referrerpolicy="no-referrer"></p><p><strong>外觀：</strong></p><p><img alt="" height="359" src="https://oscimg.oschina.net/oscnet/up-f8a5d7972d50038132cff8a992237d7b940.webp" width="500" referrerpolicy="no-referrer"></p><p><img height="376" src="https://oscimg.oschina.net/oscnet/up-e356e6ca490bb95486b9e1c3f8430ed747b.png" width="500" referrerpolicy="no-referrer"></p><p><img alt="" height="399" src="https://oscimg.oschina.net/oscnet/up-062ac361b585bde3beff445262346fb83b7.webp" width="500" referrerpolicy="no-referrer"></p><p><img alt="" height="472" src="https://oscimg.oschina.net/oscnet/up-79b4dd3419f6dc327dc82be45836609e8cb.webp" width="500" referrerpolicy="no-referrer"></p><p><img alt="" height="115" src="https://oscimg.oschina.net/oscnet/up-9517c76acb34e140a6044d3e7472437369f.webp" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">詳情可查看<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.ayaneo.com%2Fproduct%2FAYANEO-Retro-Mini-PC-AM01.html" target="_blank">官網</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 07:35:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269045/ayaneo-retro-mini-pc-am01</guid>
            <link>https://www.oschina.net/news/269045/ayaneo-retro-mini-pc-am01</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Turbo Pascal 誕生 40 年]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Turbo Pascal <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.marcocantu.com%2Fblog%2F2023-november-turbopascal40.html" target="_blank">迎來了 40 歲生日</a></u>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-48365f6b4678042d953b96727360a44c28a.png" referrerpolicy="no-referrer"></p><p>1983 年 11 月 20 日，Borland 公司發佈了 Turbo Pascal 的第一個版本。<strong>該版本的編譯器核心部分由&nbsp;<span style="background-color:#ffffff; color:#333333">Anders Hejlsberg&nbsp;</span>授權給 Borland 公司</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-55fee9e8e268162cefc3a9f34a094250bdc.png" referrerpolicy="no-referrer"></p><p>來源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwinworldpc.com%2Fproduct%2Fturbo-pascal%2F100" target="_blank">https://winworldpc.com/product/turbo-pascal/100</a></u></em></p><p>Anders Hejlsberg 為 MS-DOS 和 CP/M 設計了 Pascal 編譯器，Borland 買下該編譯器並改稱 <strong>Turbo Pascal</strong>，之後 Anders Hejlsberg 也加入了 Borland 公司，並且是後來所有 Turbo Pascal 版本與 Delphi 前 3 個版本的架構師。</p><p>再後來 Anders Hejlsberg 被比爾·蓋茨下重本挖到了微軟，先後創造了 Visual J++、.NET、C#&nbsp;和&nbsp;TypeScript。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-f1f3c48731e272b9d855120589ccc1969de.png" referrerpolicy="no-referrer"></p><p>説回 Turbo Pascal，它作為一種結構化編程語言對計算機編程產生了重大影響，併成為了許多程序員的入門語言。</p><p>Turbo Pascal 的設計目標是提供一種易於學習和使用的編程語言，同時具有高效的編譯器和強大的功能。它採用了 Pascal 語言的語法和結構，但在性能和功能上進行了優化和擴展。Turbo Pascal 的編譯器非常快速，可以在幾秒鐘內將源代碼編譯成可執行文件。這使得程序員能夠快速地進行開發和調試。</p><p>Turbo Pascal 在教育領域也非常受歡迎。許多學校和大學使用 Turbo Pascal 作為計算機科學課程的教學工具。它的簡單易學的語法和清晰的結構使得初學者能夠快速上手，並理解編程的基本概念。</p><hr><p>延伸閲讀</p><ul><li><a href="https://www.oschina.net/news/130871/26-years-of-delphi" target="news">Delphi 26 歲</a></li><li><a href="https://www.oschina.net/news/241121/delphi-11-n-cbuilder-11-ce-released" target="news">Delphi 11 和 C++Builder 11 社區版發佈</a></li><li><a href="https://www.oschina.net/news/265941/rad-studio-12-athens" target="news">Delphi 12 &amp; C++ Builder 12、RAD Studio 12 發佈</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 06:55:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269027/turbo-pascal-turns-40</guid>
            <link>https://www.oschina.net/news/269027/turbo-pascal-turns-40</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Sailfish OS 開發商 Jolla 已被其前管理層收購]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>芬蘭科技公司 Jolla 的前管理層收購了 Jolla Ltd. 的全部業務和員工。</p><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjolla.com%2Fcontent%2Fuploads%2F2023%2F11%2FFormer_leadership_buys_Jolla_Business_Pressrelease_271123_.pdf" target="_blank">根據 Jolla 發佈的新聞稿</a></u>，Jolla Ltd 專注於操作系統和汽車軟件的全部業務和員工將被轉移到一家新公司，這家新公司已被 Jolla 前管理層收購。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-a0fea2cd154728b4d75b4df0ee0fe5f1894.png" referrerpolicy="no-referrer"></p></blockquote><p>由於烏克蘭戰爭，<strong>俄羅斯在 Jolla 集團結構中的所有權成為員工和客户面臨的一個緊迫問題</strong>，最終導致該公司於 2023 年春季開始實施企業重組計劃。2023 年 11 月 24 日，Pirkanmaa 地方法院就重組計劃做出了決定，並責成將業務完全出售給另一家公司。目前 Jolla 的前管理層已經收購了該公司。</p><p>Jolla 是一家曾經致力於開發智能手機和平板電腦的公司，但是這些產品並沒有取得成功。後來 Jolla 將重心轉向了基於 Linux 的 Sailfish OS<span style="background-color:#ffffff; color:#333333">（旗魚）</span>，並將其應用於現有設備上。<span style="background-color:#ffffff; color:#333333">Sailfish OS 是由 Jolla 在 MeeGo 基礎上開發的移動操作系統。</span></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-11949d06737c31b962048e00e7e15b11d7f.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-7f799a724c401bfe3018e347c698e78405b.png" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p><img height="1476" src="https://oscimg.oschina.net/oscnet/up-7b2f29a69cf34959186e9e7746927ce1a22.png" width="3226" referrerpolicy="no-referrer"></p><p>新公司將繼續致力於開發 Sailfish OS，並向全球客户銷售。他們還計劃將 Sailfish OS 引入新的「人工智能時代」。Jolla 還將通過自己的子公司 Seafarix 為汽車行業提供軟件。</p><p><strong>延伸閲讀：<em><u><a href="https://www.oschina.net/news/266231">俄羅斯操作系統 Aurora OS 5.0 全新 UI 亮相</a></u></em></strong></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 06:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269024/jolla-acquired-by-management</guid>
            <link>https://www.oschina.net/news/269024/jolla-acquired-by-management</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[JumpServer 開源堡壘機 V2 社區版即將停止維護]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#000000; text-align:start">尊敬的 JumpServer 開源堡壘機用户：您好！</p><p style="color:#000000; text-align:start">如《關於 JumpServer 開源堡壘機 V2 版本產品生命週期的相關説明》所示，<span style="color:#3e3e3e">JumpServer 開源堡壘機 V2 版本（社區版）將於</span><strong><span style="color:#28937c">2023 年 12 月 31 日</span></strong>停止維護支持。</p><p style="color:#000000; text-align:start">在過去兩年多的時間裏，JumpServer 開源堡壘機 V2 版本獲得了眾多用户的支持和喜愛。出於產品自身迭代和用户需求升級的要求，<strong>2023 年 2 月 27 日，JumpServer 開源堡壘機正式發佈 v3.0 版本，目前已更新至 v3.9.2 版本。</strong>JumpServer 開源項目組<strong><span style="color:#28937c">建議社區版和企業版用户更新至 JumpServe v3.x 版本</span></strong>，以使用更多的新增功能並獲取更好的軟件使用體驗。</p><p style="color:#000000; text-align:start">JumpServer V2 版本（企業版）維護支持截止日期為<strong><span style="color:#28937c">2025 年 12 月 31 日</span></strong>。</p><p style="color:#000000; text-align:start">aJumpServer 開源堡壘機 V2 版本產品生命週期具體如下，廣大用户可以根據時間表合理安排系統升級及遷移工作。</p><p style="color:#000000; text-align:start"><img alt="" src="https://oscimg.oschina.net/oscnet/up-3c2a04eded6684a1a8f9948a1e26454f4ef.jpg" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:start"><span>▲ JumpServer 開源堡壘機 V2 版本產品生命週期</span></p><p style="color:#000000; text-align:start">感謝您長期以來對 JumpServer 開源項目的支持與厚愛。如果您在升級過程中遇到問題，可以聯繫 JumpServer 開源項目組獲取升級建議和指導。</p><p style="color:#000000; text-align:right"><span><span style="color:#000000">JumpServer 開源項目組</span></span></p><p style="color:#000000; text-align:right"><span><span style="color:#000000">2023 年 12 月 1 日</span></span></p><p style="color:#000000; text-align:start"><span><strong><span style="color:#000000">關於 JumpServer 開源堡壘機</span></strong></span></p><p style="color:#000000; text-align:start"><span><span style="color:#000000">JumpServer（jumpserver.org）是廣受歡迎的開源堡壘機，遵循 GPL v3 開源許可協議，是符合 4A（包含認證 Authentication 、授權 Authorization、 賬號 Accounting 和審計 Auditing）規範的運維安全審計系統。它通過企業版或者軟硬件一體機的方式，向企業級用户交付開源增值的運維安全審計解決方案。</span></span></p><p style="color:#000000; text-align:start"><span><span style="color:#000000">JumpServer 開源堡壘機在分佈式架構設計、多雲環境支持、大規模資產納管、容器化部署、使用體驗等方面極具領先性，能夠很好地滿足企業用户在混合 IT 環境中運維安全審計需求。</span></span></p><p style="color:#000000; text-align:start"><span><span style="color:#000000">目前，JumpServer 開源項目在代碼託管平台 Github 上的 Star 數量已經超過 22,400 個。在中國的企業用户羣中，JumpServer 堡壘機擁有廣泛的安裝基礎，社區版軟件的累計安裝部署次數超過 250,000 次，用户遍及金融、製造、物流、媒體、互聯網等各行各業。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 06:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4736111/blog/10315623</guid>
            <link>https://my.oschina.net/u/4736111/blog/10315623</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[阿里雲開源通義千問 720 億參數模型 Qwen-72B]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>今天，阿里雲舉辦通義千問發佈會，開源通義千問 720 億參數模型 Qwen-72B。</p><p>地址：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmodelscope.cn%2Fmodels%2Fqwen%2FQwen-72B%2Fsummary" target="_blank">https://modelscope.cn/models/qwen/Qwen-72B/</a></u></em></p><p>據介紹，Qwen-72B 在 10 個權威基準測評創下開源模型最優成績，<strong>成為業界最強開源大模型</strong>，性能超越開源標杆 Llama 2-70B 和大部分商用閉源模型。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-dbe96cabe4027456789b8a9e0043edf0f57.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-dbb7cbd494ee0a9564f0102e1d5aa832bb9.png" referrerpolicy="no-referrer"></p><p>通義千問-72B (Qwen-72B) 主要特性：</p><ol><li><strong>大規模高質量訓練語料</strong>：使用超過 3 萬億 tokens 的數據進行預訓練，包含高質量中、英、多語言、代碼、數學等數據，涵蓋通用及專業領域的訓練語料。通過大量對比實驗對預訓練語料分佈進行了優化。</li><li><strong>強大的性能</strong>：Qwen-72B 在多箇中英文下游評測任務上（涵蓋常識推理、代碼、數學、翻譯等），效果顯著超越現有的開源模型。具體評測結果請詳見下文。</li><li><strong>覆蓋更全面的詞表</strong>：相比目前以中英詞表為主的開源模型，</li></ol><p>通義千問還開源了 18 億參數模型 Qwen-1.8B 和音頻大模型 Qwen-Audio。至此，通義千問共開源 18 億、70 億、140 億、720 億參數的 4 款大語言模型，以及視覺理解、音頻理解兩款多模態大模型，實現「全尺寸、全模態」開源。</p><p><img height="727" src="https://static.oschina.net/uploads/space/2023/1201/134056_Rt7C_2720166.png" width="1280" referrerpolicy="no-referrer"></p><p><img src="https://static.oschina.net/uploads/space/2023/1201/134308_ZNwt_2720166.png" referrerpolicy="no-referrer"></p><p>來源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FlFeZToVywbkDUvKhsrKY7A" target="_blank">https://mp.weixin.qq.com/s/lFeZToVywbkDUvKhsrKY7A</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 05:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269015</guid>
            <link>https://www.oschina.net/news/269015</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Rust std fs 比 Python 慢！真的嗎！？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote><p>作者：Xuanwo</p><p>Databend Labs 成員，數據庫研發工程師</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxuanwo" target="_blank">https://github.com/xuanwo</a></p></blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-380bdbcb15f94b1c42039337e7daa46badb.png" alt="" referrerpolicy="no-referrer"></p><p>我即將分享一個冗長的故事，從 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fincubator-opendal" target="_blank">OpenDAL</a> 的 <code>op.read()</code>開始，以一個意想不到的轉折結束。這個過程對我來説非常有啓發性，我希望你也能感受到。我會盡力重現這個經歷，並附上我一路學到的教訓。讓我們開始吧！</p><blockquote><p>所有的代碼片段和腳本都可以在 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FXuanwo%2Fwhen-i-find-rust-is-slow" target="_blank">Xuanwo/when-i-find-rust-is-slow</a> 中找到。</p></blockquote><h2>OpenDAL Python 綁定比 Python 慢？</h2><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fincubator-opendal" target="_blank">OpenDAL</a> 是一個數據訪問層，允許用户以統一的方式從各種存儲服務中輕鬆高效地獲取數據。我們通過 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FPyO3%2Fpyo3" target="_blank">pyo3</a> 為 OpenDAL 提供了 python 綁定。</p><p>有一天，@beldathas 在 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdiscord.com%2Fchannels%2F1081052318650339399%2F1174840499576770560" target="_blank">discord</a> 向我報告了一個案例，即 OpenDAL 的 python 綁定比 python 慢：</p><pre><code>import&nbsp;pathlib
import&nbsp;timeit

import&nbsp;opendal

root&nbsp;=&nbsp;pathlib.Path(__file__).parent
op&nbsp;=&nbsp;opendal.Operator("fs",&nbsp;root=str(root))
filename&nbsp;=&nbsp;"lorem_ipsum_150mb.txt"

def&nbsp;read_file_with_opendal()&nbsp;-&gt;&nbsp;bytes:
&nbsp;&nbsp;&nbsp;&nbsp;with&nbsp;op.open(filename,&nbsp;"rb")&nbsp;as&nbsp;fp:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;fp.read()
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result

def&nbsp;read_file_with_normal()&nbsp;-&gt;&nbsp;bytes:
&nbsp;&nbsp;&nbsp;&nbsp;with&nbsp;open(root&nbsp;/&nbsp;filename,&nbsp;"rb")&nbsp;as&nbsp;fp:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;fp.read()
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result

if&nbsp;__name__&nbsp;==&nbsp;"__main__":
&nbsp;&nbsp;&nbsp;&nbsp;print("normal:&nbsp;",&nbsp;timeit.timeit(read_file_with_normal,&nbsp;number=100))
&nbsp;&nbsp;&nbsp;&nbsp;print("opendal:&nbsp;",&nbsp;timeit.timeit(read_file_with_opendal,&nbsp;number=100))
</code></pre><p>結果顯示</p><pre><code>(venv)&nbsp;$&nbsp;python&nbsp;benchmark.py
normal:&nbsp;&nbsp;4.470868484000675
opendal:&nbsp;&nbsp;8.993250704006641
&nbsp;&nbsp;&nbsp;&nbsp;
</code></pre><p>Emmm，我對這些結果有點尷尬。以下是一些快速的假設：</p><ul><li><p>Python 是否有內部緩存可以重複使用相同的內存？</p></li><li><p>Python 是否擁有加速文件讀取的一些技巧？</p></li><li><p>PyO3 是否引入了額外的開銷？</p></li></ul><p>我將代碼重構如下：</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FXuanwo%2Fwhen-i-find-rust-is-slow%2Fblob%2Fmain%2Fpython-fs-read%2Ftest.py" target="_blank">python-fs-read</a></p><pre><code>with&nbsp;open("/tmp/file",&nbsp;"rb")&nbsp;as&nbsp;fp:
&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;fp.read()
assert&nbsp;len(result)&nbsp;==&nbsp;64&nbsp;*&nbsp;1024&nbsp;*&nbsp;1024
</code></pre><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FXuanwo%2Fwhen-i-find-rust-is-slow%2Fblob%2Fmain%2Fpython-opendal-read%2Ftest.py" target="_blank">python-opendal-read</a></p><pre><code>import&nbsp;opendal

op&nbsp;=&nbsp;opendal.Operator("fs",&nbsp;root=str("/tmp"))

result&nbsp;=&nbsp;op.read("file")
assert&nbsp;len(result)&nbsp;==&nbsp;64&nbsp;*&nbsp;1024&nbsp;*&nbsp;1024
</code></pre><p>結果顯示，Python 比 OpenDAL 快得多：</p><pre><code>Benchmark&nbsp;1:&nbsp;python-fs-read/test.py
&nbsp;&nbsp;Time&nbsp;(mean&nbsp;±&nbsp;σ):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;15.9&nbsp;ms&nbsp;±&nbsp;&nbsp;&nbsp;0.7&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;[User:&nbsp;5.6&nbsp;ms,&nbsp;System:&nbsp;10.1&nbsp;ms]
&nbsp;&nbsp;Range&nbsp;(min&nbsp;…&nbsp;max):&nbsp;&nbsp;&nbsp;&nbsp;14.9&nbsp;ms&nbsp;…&nbsp;&nbsp;21.6&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;180&nbsp;runs
&nbsp;&nbsp;
Benchmark&nbsp;2:&nbsp;python-opendal-read/test.py
&nbsp;&nbsp;Time&nbsp;(mean&nbsp;±&nbsp;σ):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;32.9&nbsp;ms&nbsp;±&nbsp;&nbsp;&nbsp;1.3&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;[User:&nbsp;6.1&nbsp;ms,&nbsp;System:&nbsp;26.6&nbsp;ms]
&nbsp;&nbsp;Range&nbsp;(min&nbsp;…&nbsp;max):&nbsp;&nbsp;&nbsp;&nbsp;31.4&nbsp;ms&nbsp;…&nbsp;&nbsp;42.6&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;85&nbsp;runs
&nbsp;&nbsp;
Summary
&nbsp;&nbsp;python-fs-read/test.py&nbsp;ran
&nbsp;&nbsp;&nbsp;&nbsp;2.07&nbsp;±&nbsp;0.12&nbsp;times&nbsp;faster&nbsp;than&nbsp;python-opendal-read/test.py
</code></pre><p>OpenDAL 的 Python 綁定似乎比 Python 本身運行得更慢，這並不是個好消息。讓我們來探究其背後的原因。</p><h2>OpenDAL Fs 服務比 Python 慢？</h2><p>這個謎題涉及到許多元素，如 rust、opendal、python、pyo3 等。讓我們集中精力嘗試找出根本原因。</p><p>我在 rust 中通過 opendal fs 服務實現了相同的邏輯：</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FXuanwo%2Fwhen-i-find-rust-is-slow%2Fblob%2Fmain%2Frust-opendal-fs-read%2Fsrc%2Fmain.rs" target="_blank">rust-opendal-fs-read</a></p><pre><code>use&nbsp;std::io::Read;
use&nbsp;opendal::services::Fs;
use&nbsp;opendal::Operator;

fn&nbsp;main()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;mut&nbsp;cfg&nbsp;=&nbsp;Fs::default();
&nbsp;&nbsp;&nbsp;&nbsp;cfg.root("/tmp");
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;op&nbsp;=&nbsp;Operator::new(cfg).unwrap().finish().blocking();

&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;mut&nbsp;bs&nbsp;=&nbsp;vec![0;&nbsp;64&nbsp;*&nbsp;1024&nbsp;*&nbsp;1024];

&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;mut&nbsp;f&nbsp;=&nbsp;op.reader("file").unwrap();
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;mut&nbsp;ts&nbsp;=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;loop&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;buf&nbsp;=&nbsp;&amp;mut&nbsp;bs[ts..];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;n&nbsp;=&nbsp;f.read(buf).unwrap();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;n&nbsp;=&nbsp;n&nbsp;as&nbsp;usize;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;n&nbsp;==&nbsp;0&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ts&nbsp;+=&nbsp;n;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;assert_eq!(ts,&nbsp;64&nbsp;*&nbsp;1024&nbsp;*&nbsp;1024);
}
</code></pre><p>然而，結果顯示即使 opendal 是用 rust 實現的，它的速度仍然比 python 慢：</p><pre><code>Benchmark&nbsp;1:&nbsp;rust-opendal-fs-read/target/release/test
&nbsp;&nbsp;Time&nbsp;(mean&nbsp;±&nbsp;σ):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;23.8&nbsp;ms&nbsp;±&nbsp;&nbsp;&nbsp;2.0&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;[User:&nbsp;0.4&nbsp;ms,&nbsp;System:&nbsp;23.4&nbsp;ms]
&nbsp;&nbsp;Range&nbsp;(min&nbsp;…&nbsp;max):&nbsp;&nbsp;&nbsp;&nbsp;21.8&nbsp;ms&nbsp;…&nbsp;&nbsp;34.6&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;121&nbsp;runs
&nbsp;
Benchmark&nbsp;2:&nbsp;python-fs-read/test.py
&nbsp;&nbsp;Time&nbsp;(mean&nbsp;±&nbsp;σ):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;15.6&nbsp;ms&nbsp;±&nbsp;&nbsp;&nbsp;0.8&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;[User:&nbsp;5.5&nbsp;ms,&nbsp;System:&nbsp;10.0&nbsp;ms]
&nbsp;&nbsp;Range&nbsp;(min&nbsp;…&nbsp;max):&nbsp;&nbsp;&nbsp;&nbsp;14.4&nbsp;ms&nbsp;…&nbsp;&nbsp;20.8&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;166&nbsp;runs
&nbsp;
Summary
&nbsp;&nbsp;python-fs-read/test.py&nbsp;ran
&nbsp;&nbsp;&nbsp;&nbsp;1.52&nbsp;±&nbsp;0.15&nbsp;times&nbsp;faster&nbsp;than&nbsp;rust-opendal-fs-read/target/release/test
</code></pre><p>雖然&nbsp; rust-opendal-fs-read&nbsp;的表現略優於 python-opendal-read，這暗示了在綁定和 pyo3 中有改進的空間，但這些並非核心問題。我們需要進一步深入探究。</p><p>啊，opendal fs 服務比 python 慢。</p><h2>Rust std fs 比 Python 慢？</h2><p>OpenDAL 通過 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstd%2Ffs%2Findex.html" target="_blank">std::fs</a> 實現文件系統服務。OpenDAL 本身會產生額外的開銷嗎？</p><p>我使用 <code>std::fs</code> 在 Rust 中實現了相同邏輯：</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FXuanwo%2Fwhen-i-find-rust-is-slow%2Fblob%2Fmain%2Frust-std-fs-read%2Fsrc%2Fmain.rs" target="_blank">rust-std-fs-read</a></p><pre><code>use&nbsp;std::io::Read;
use&nbsp;std::fs::OpenOptions;

fn&nbsp;main()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;mut&nbsp;bs&nbsp;=&nbsp;vec![0;&nbsp;64&nbsp;*&nbsp;1024&nbsp;*&nbsp;1024];
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;mut&nbsp;f&nbsp;=&nbsp;OpenOptions::new().read(true).open("/tmp/file").unwrap();
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;mut&nbsp;ts&nbsp;=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;loop&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;buf&nbsp;=&nbsp;&amp;mut&nbsp;bs[ts..];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;n&nbsp;=&nbsp;f.read(buf).unwrap();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;n&nbsp;=&nbsp;n&nbsp;as&nbsp;usize;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;n&nbsp;==&nbsp;0&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ts&nbsp;+=&nbsp;n;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;assert_eq!(ts,&nbsp;64&nbsp;*&nbsp;1024&nbsp;*&nbsp;1024);
}
</code></pre><p>但是：</p><pre><code>Benchmark&nbsp;1:&nbsp;rust-std-fs-read/target/release/test
&nbsp;&nbsp;Time&nbsp;(mean&nbsp;±&nbsp;σ):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;23.1&nbsp;ms&nbsp;±&nbsp;&nbsp;&nbsp;2.5&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;[User:&nbsp;0.3&nbsp;ms,&nbsp;System:&nbsp;22.8&nbsp;ms]
&nbsp;&nbsp;Range&nbsp;(min&nbsp;…&nbsp;max):&nbsp;&nbsp;&nbsp;&nbsp;21.0&nbsp;ms&nbsp;…&nbsp;&nbsp;37.6&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;124&nbsp;runs
&nbsp;
Benchmark&nbsp;2:&nbsp;python-fs-read/test.py
&nbsp;&nbsp;Time&nbsp;(mean&nbsp;±&nbsp;σ):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;15.2&nbsp;ms&nbsp;±&nbsp;&nbsp;&nbsp;1.1&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;[User:&nbsp;5.4&nbsp;ms,&nbsp;System:&nbsp;9.7&nbsp;ms]
&nbsp;&nbsp;Range&nbsp;(min&nbsp;…&nbsp;max):&nbsp;&nbsp;&nbsp;&nbsp;14.3&nbsp;ms&nbsp;…&nbsp;&nbsp;21.4&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;178&nbsp;runs

Summary
&nbsp;&nbsp;python-fs-read/test.py&nbsp;ran
&nbsp;&nbsp;&nbsp;&nbsp;1.52&nbsp;±&nbsp;0.20&nbsp;times&nbsp;faster&nbsp;than&nbsp;rust-std-fs-read/target/release/test
</code></pre><p>哇，Rust 的 std fs 比 Python 還慢？這怎麼可能呢？無意冒犯，但是這怎麼可能呢？</p><h2>Rust std fs 比 Python 還慢？真的嗎！？</h2><p>我無法相信這個結果：Rust std fs 的速度竟然比 Python 還要慢。</p><p>我嘗試學會瞭如何使用 <code>strace</code>&nbsp;進行系統調用分析。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fstrace.io%2F" target="_blank"><code>strace</code></a>是一個 Linux 系統調用追蹤器，它讓我們能夠監控系統調用並理解其過程。</p><p>strace 將包含程序發出的所有系統調用。我們應該關注與<code>/tmp/file</code>&nbsp;相關的方面。每一行 strace 輸出都以系統調用名稱開始，後跟輸入參數和輸出。</p><p>比如：</p><pre><code>openat(AT_FDCWD,&nbsp;"/tmp/file",&nbsp;O_RDONLY|O_CLOEXEC)&nbsp;=&nbsp;3
</code></pre><p>這意味着我們使用參數 <code>AT_FDCWD</code>，<code>"/tmp/file"</code> 和 <code>O_RDONLY|O_CLOEXEC</code>調用 <code>openat</code>系統調用。這將返回輸出 <code>3</code> ，這是在後續的系統調用中引用的文件描述符。</p><p>好了，我們已經掌握了 <code>strace</code>。讓我們開始使用它吧！</p><p><code>rust-std-fs-read</code> 的 strace:</p><pre><code>&gt;&nbsp;strace&nbsp;./rust-std-fs-read/target/release/test
...
mmap(NULL,&nbsp;67112960,&nbsp;PROT_READ|PROT_WRITE,&nbsp;MAP_PRIVATE|MAP_ANONYMOUS,&nbsp;-1,&nbsp;0)&nbsp;=&nbsp;0x7f290dd40000
openat(AT_FDCWD,&nbsp;"/tmp/file",&nbsp;O_RDONLY|O_CLOEXEC)&nbsp;=&nbsp;3
read(3,&nbsp;"\tP\201A\225\366&gt;\260\270R\365\313\220{E\372\274\6\35\"\353\204\220s\2|7C\205\265\6\263"...,&nbsp;67108864)&nbsp;=&nbsp;67108864
read(3,&nbsp;"",&nbsp;0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;0
close(3)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;0
munmap(0x7f290dd40000,&nbsp;67112960)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;0
...
</code></pre><p><code>python-fs-read</code> 的 strace:</p><pre><code>&gt;&nbsp;strace&nbsp;./python-fs-read/test.py
...
openat(AT_FDCWD,&nbsp;"/tmp/file",&nbsp;O_RDONLY|O_CLOEXEC)&nbsp;=&nbsp;3
newfstatat(3,&nbsp;"",&nbsp;{st_mode=S_IFREG|0644,&nbsp;st_size=67108864,&nbsp;...},&nbsp;AT_EMPTY_PATH)&nbsp;=&nbsp;0
ioctl(3,&nbsp;TCGETS,&nbsp;0x7ffe9f844ac0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;-1&nbsp;ENOTTY&nbsp;(Inappropriate&nbsp;ioctl&nbsp;for&nbsp;device)
lseek(3,&nbsp;0,&nbsp;SEEK_CUR)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;0
lseek(3,&nbsp;0,&nbsp;SEEK_CUR)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;0
newfstatat(3,&nbsp;"",&nbsp;{st_mode=S_IFREG|0644,&nbsp;st_size=67108864,&nbsp;...},&nbsp;AT_EMPTY_PATH)&nbsp;=&nbsp;0
mmap(NULL,&nbsp;67112960,&nbsp;PROT_READ|PROT_WRITE,&nbsp;MAP_PRIVATE|MAP_ANONYMOUS,&nbsp;-1,&nbsp;0)&nbsp;=&nbsp;0x7f13277ff000
read(3,&nbsp;"\tP\201A\225\366&gt;\260\270R\365\313\220{E\372\274\6\35\"\353\204\220s\2|7C\205\265\6\263"...,&nbsp;67108865)&nbsp;=&nbsp;67108864
read(3,&nbsp;"",&nbsp;1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;0
close(3)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;0
rt_sigaction(SIGINT,&nbsp;{sa_handler=SIG_DFL,&nbsp;sa_mask=[],&nbsp;sa_flags=SA_RESTORER|SA_ONSTACK,&nbsp;sa_restorer=0x7f132be5c710},&nbsp;{sa_handler=0x7f132c17ac36,&nbsp;sa_mask=[],&nbsp;sa_flags=SA_RESTORER|SA_ONSTACK,&nbsp;sa_restorer=0x7f132be5c710},&nbsp;8)&nbsp;=&nbsp;0
munmap(0x7f13277ff000,&nbsp;67112960)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;0
...
</code></pre><p>從分析 strace 來看，很明顯 <code>python-fs-read</code> 的系統調用比 <code>rust-std-fs-read</code> 多，兩者都利用了<code>mmap</code>。那為什麼 Python 要比 Rust 更快呢？</p><h3>👨🏻‍💻 <strong>我們這裏為什麼用了 <code>mmap</code>？</strong></h3><p>我最初認為<code>mmap</code>僅用於將文件映射到內存，從而通過內存訪問文件。然而，<code>mmap</code>還有其他用途。它通常被用來為應用程序分配大塊的內存區域。</p><p>這可以在 strace 的結果中看到：</p><pre><code>mmap(NULL,&nbsp;67112960,&nbsp;PROT_READ|PROT_WRITE,&nbsp;MAP_PRIVATE|MAP_ANONYMOUS,&nbsp;-1,&nbsp;0)&nbsp;=&nbsp;0x7f13277ff000
</code></pre><p>這個系統調用的含義是</p><ul><li><p><code>NULL</code>：第一個參數表示要映射的內存區域的起始地址。<code>NULL</code>將讓操作系統為我們選擇一個合適的地址。</p></li><li><p><code>67112960</code>：要映射的內存區域的大小。我們在這裏分配 64MiB + 4KiB 內存，額外的頁面用於存儲此內存區域的元數據。</p></li><li><p><code>PROT_READ|PROT_WRITE</code>：該內存區域可讀寫。</p></li><li><p><code>MAP_PRIVATE|MAP_ANONYMOUS</code>:</p></li><li><p><code>MAP_PRIVATE</code>意味着對此內存區域進行更改不會對其他映射相同區域的進程可見，並且不會傳遞到底層文件（如果有）。</p></li><li><p><code>MAP_ANONYMOUS</code>意味着我們正在分配與文件無關聯匿名內存.</p></li><li><p><code>-1</code>: 要的映射文件描述符. <code>-1</code> 表示我們沒有映射文件。</p></li><li><p><code>0</code>: 文件中要從哪個偏移量開始映射. 我們並沒有映射文件，所以使用 <code>0</code></p></li></ul><h3>👨🏻‍💻 <strong>但是我們代碼裏沒有調用 <code>mmap</code> 啊？</strong></h3><p><code>mmap</code>系統調用由<code>glibc</code>分派。我們使用<code>malloc</code>向系統請求內存，作為迴應， <code>glibc</code>採用了 <code>brk</code> 和 <code>mmap</code> 系統調用來根據我們的請求大小分配內存。如果請求的大小足夠大，那麼 <code>glibc</code> 會選擇使用 <code>mmap</code>, 這有助於緩解內存碎片問題。</p><p>默認情況下，所有以目標 <code>x86_64-unknown-linux-gnu</code> 編譯的 Rust 程序都使用由 <code>glibc</code> 提供的 <code>malloc</code> 實現。</p><h3>👨🏻‍💻 <strong>Python 和 Rust 是否使用相同的內存分配器？</strong></h3><p>默認情況下，Python 使用<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.python.org%2F3%2Fc-api%2Fmemory.html%23default-memory-allocators" target="_blank"><code>pymalloc</code></a>，這是一個針對小型分配進行優化的內存分配器。Python 具有三個內存域，每個代表不同的分配策略，並針對各種目的進行了優化。</p><p><code>pymalloc</code> 有如下行為：</p><blockquote><p>Python has a <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.python.org%2F3%2Fc-api%2Fmemory.html%23default-memory-allocators" target="_blank"><code>pymalloc</code></a> allocator optimized for small objects (smaller or equal to 512 bytes) with a short lifetime. It uses memory mappings called 「arenas」 with a fixed size of either 256 KiB on 32-bit platforms or 1 MiB on 64-bit platforms. It falls back to PyMem_RawMalloc() and PyMem_RawRealloc() for allocations larger than 512 bytes.</p></blockquote><h2>Rust 默認的內存分配器比 Python 慢嗎？</h2><p>我懷疑<code>mmap</code>是導致這個問題的原因。如果我切換到<code>jemalloc</code>，會發生什麼情況？</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FXuanwo%2Fwhen-i-find-rust-is-slow%2Fblob%2Fmain%2Frust-std-fs-read-with-jemalloc%2Fsrc%2Fmain.rs" target="_blank">rust-std-fs-read-with-jemalloc</a></p><pre><code>use&nbsp;std::io::Read;
use&nbsp;std::fs::OpenOptions;

#[global_allocator]
static&nbsp;GLOBAL:&nbsp;jemallocator::Jemalloc&nbsp;=&nbsp;jemallocator::Jemalloc;

fn&nbsp;main()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;mut&nbsp;bs&nbsp;=&nbsp;vec![0;&nbsp;64&nbsp;*&nbsp;1024&nbsp;*&nbsp;1024];
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;mut&nbsp;f&nbsp;=&nbsp;OpenOptions::new().read(true).open("/tmp/file").unwrap();
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;mut&nbsp;ts&nbsp;=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;loop&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;buf&nbsp;=&nbsp;&amp;mut&nbsp;bs[ts..];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;n&nbsp;=&nbsp;f.read(buf).unwrap();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;n&nbsp;=&nbsp;n&nbsp;as&nbsp;usize;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;n&nbsp;==&nbsp;0&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ts&nbsp;+=&nbsp;n;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;assert_eq!(ts,&nbsp;64&nbsp;*&nbsp;1024&nbsp;*&nbsp;1024);
}
</code></pre><p><strong>Wooooooooooooooow?!</strong></p><pre><code>Benchmark&nbsp;1:&nbsp;rust-std-fs-read-with-jemalloc/target/release/test
&nbsp;&nbsp;Time&nbsp;(mean&nbsp;±&nbsp;σ):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9.7&nbsp;ms&nbsp;±&nbsp;&nbsp;&nbsp;0.6&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;[User:&nbsp;0.3&nbsp;ms,&nbsp;System:&nbsp;9.4&nbsp;ms]
&nbsp;&nbsp;Range&nbsp;(min&nbsp;…&nbsp;max):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9.0&nbsp;ms&nbsp;…&nbsp;&nbsp;12.4&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;259&nbsp;runs
&nbsp;
Benchmark&nbsp;2:&nbsp;python-fs-read/test.py
&nbsp;&nbsp;Time&nbsp;(mean&nbsp;±&nbsp;σ):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;15.8&nbsp;ms&nbsp;±&nbsp;&nbsp;&nbsp;0.9&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;[User:&nbsp;5.9&nbsp;ms,&nbsp;System:&nbsp;9.8&nbsp;ms]
&nbsp;&nbsp;Range&nbsp;(min&nbsp;…&nbsp;max):&nbsp;&nbsp;&nbsp;&nbsp;15.0&nbsp;ms&nbsp;…&nbsp;&nbsp;21.8&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;169&nbsp;runs

Summary
&nbsp;&nbsp;rust-std-fs-read-with-jemalloc/target/release/test&nbsp;ran
&nbsp;&nbsp;&nbsp;&nbsp;1.64&nbsp;±&nbsp;0.14&nbsp;times&nbsp;faster&nbsp;than&nbsp;python-fs-read/test.py
</code></pre><p>什麼？！我知道 <code>jemalloc</code>&nbsp;是一個高效的內存分配器，但它為啥會這麼優秀呢？</p><h2>只有在我的電腦上，Rust 運行速度比 Python 慢！</h2><p>隨着更多的朋友加入討論，我們發現只有在我的機器上，Rust 運行速度比 Python 慢。</p><p>我的 CPU:</p><pre><code>&gt;&nbsp;lscpu
Architecture:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x86_64
&nbsp;&nbsp;CPU&nbsp;op-mode(s):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;32-bit,&nbsp;64-bit
&nbsp;&nbsp;Address&nbsp;sizes:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;48&nbsp;bits&nbsp;physical,&nbsp;48&nbsp;bits&nbsp;virtual
&nbsp;&nbsp;Byte&nbsp;Order:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Little&nbsp;Endian
CPU(s):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;32
&nbsp;&nbsp;On-line&nbsp;CPU(s)&nbsp;list:&nbsp;&nbsp;&nbsp;0-31
Vendor&nbsp;ID:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AuthenticAMD
&nbsp;&nbsp;Model&nbsp;name:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AMD&nbsp;Ryzen&nbsp;9&nbsp;5950X&nbsp;16-Core&nbsp;Processor
&nbsp;&nbsp;&nbsp;&nbsp;CPU&nbsp;family:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;25
&nbsp;&nbsp;&nbsp;&nbsp;Model:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;33
&nbsp;&nbsp;&nbsp;&nbsp;Thread(s)&nbsp;per&nbsp;core:&nbsp;&nbsp;2
&nbsp;&nbsp;&nbsp;&nbsp;Core(s)&nbsp;per&nbsp;socket:&nbsp;&nbsp;16
&nbsp;&nbsp;&nbsp;&nbsp;Socket(s):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1
&nbsp;&nbsp;&nbsp;&nbsp;Stepping:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0
&nbsp;&nbsp;&nbsp;&nbsp;Frequency&nbsp;boost:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enabled
&nbsp;&nbsp;&nbsp;&nbsp;CPU(s)&nbsp;scaling&nbsp;MHz:&nbsp;&nbsp;53%
&nbsp;&nbsp;&nbsp;&nbsp;CPU&nbsp;max&nbsp;MHz:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5083.3979
&nbsp;&nbsp;&nbsp;&nbsp;CPU&nbsp;min&nbsp;MHz:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2200.0000
&nbsp;&nbsp;&nbsp;&nbsp;BogoMIPS:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6787.49
&nbsp;&nbsp;&nbsp;&nbsp;Flags:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fpu&nbsp;vme&nbsp;de&nbsp;pse&nbsp;tsc&nbsp;msr&nbsp;pae&nbsp;mce&nbsp;cx8&nbsp;apic&nbsp;sep&nbsp;mtrr&nbsp;pge&nbsp;mca&nbsp;cmov&nbsp;pat&nbsp;pse36&nbsp;clflush&nbsp;mmx&nbsp;fxsr&nbsp;sse&nbsp;sse2&nbsp;ht&nbsp;syscall&nbsp;nx&nbsp;mmxext&nbsp;fxsr_opt&nbsp;pdpe1gb&nbsp;rdtscp&nbsp;lm&nbsp;con
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stant_tsc&nbsp;rep_good&nbsp;nopl&nbsp;nonstop_tsc&nbsp;cpuid&nbsp;extd_apicid&nbsp;aperfmperf&nbsp;rapl&nbsp;pni&nbsp;pclmulqdq&nbsp;monitor&nbsp;ssse3&nbsp;fma&nbsp;cx16&nbsp;sse4_1&nbsp;sse4_2&nbsp;movbe&nbsp;popcnt&nbsp;aes&nbsp;xsave&nbsp;avx&nbsp;f
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16c&nbsp;rdrand&nbsp;lahf_lm&nbsp;cmp_legacy&nbsp;svm&nbsp;extapic&nbsp;cr8_legacy&nbsp;abm&nbsp;sse4a&nbsp;misalignsse&nbsp;3dnowprefetch&nbsp;osvw&nbsp;ibs&nbsp;skinit&nbsp;wdt&nbsp;tce&nbsp;topoext&nbsp;perfctr_core&nbsp;perfctr_nb&nbsp;bpex
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t&nbsp;perfctr_llc&nbsp;mwaitx&nbsp;cpb&nbsp;cat_l3&nbsp;cdp_l3&nbsp;hw_pstate&nbsp;ssbd&nbsp;mba&nbsp;ibrs&nbsp;ibpb&nbsp;stibp&nbsp;vmmcall&nbsp;fsgsbase&nbsp;bmi1&nbsp;avx2&nbsp;smep&nbsp;bmi2&nbsp;erms&nbsp;invpcid&nbsp;cqm&nbsp;rdt_a&nbsp;rdseed&nbsp;adx&nbsp;smap
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clflushopt&nbsp;clwb&nbsp;sha_ni&nbsp;xsaveopt&nbsp;xsavec&nbsp;xgetbv1&nbsp;xsaves&nbsp;cqm_llc&nbsp;cqm_occup_llc&nbsp;cqm_mbm_total&nbsp;cqm_mbm_local&nbsp;user_shstk&nbsp;clzero&nbsp;irperf&nbsp;xsaveerptr&nbsp;rdpru&nbsp;wb
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;noinvd&nbsp;arat&nbsp;npt&nbsp;lbrv&nbsp;svm_lock&nbsp;nrip_save&nbsp;tsc_scale&nbsp;vmcb_clean&nbsp;flushbyasid&nbsp;decodeassists&nbsp;pausefilter&nbsp;pfthreshold&nbsp;avic&nbsp;v_vmsave_vmload&nbsp;vgif&nbsp;v_spec_ctrl
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;umip&nbsp;pku&nbsp;ospke&nbsp;vaes&nbsp;vpclmulqdq&nbsp;rdpid&nbsp;overflow_recov&nbsp;succor&nbsp;smca&nbsp;fsrm&nbsp;debug_swap
Virtualization&nbsp;features:
&nbsp;&nbsp;Virtualization:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AMD-V
Caches&nbsp;(sum&nbsp;of&nbsp;all):
&nbsp;&nbsp;L1d:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;512&nbsp;KiB&nbsp;(16&nbsp;instances)
&nbsp;&nbsp;L1i:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;512&nbsp;KiB&nbsp;(16&nbsp;instances)
&nbsp;&nbsp;L2:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;MiB&nbsp;(16&nbsp;instances)
&nbsp;&nbsp;L3:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;64&nbsp;MiB&nbsp;(2&nbsp;instances)
NUMA:
&nbsp;&nbsp;NUMA&nbsp;node(s):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1
&nbsp;&nbsp;NUMA&nbsp;node0&nbsp;CPU(s):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0-31
Vulnerabilities:
&nbsp;&nbsp;Gather&nbsp;data&nbsp;sampling:&nbsp;&nbsp;Not&nbsp;affected
&nbsp;&nbsp;Itlb&nbsp;multihit:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Not&nbsp;affected
&nbsp;&nbsp;L1tf:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Not&nbsp;affected
&nbsp;&nbsp;Mds:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Not&nbsp;affected
&nbsp;&nbsp;Meltdown:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Not&nbsp;affected
&nbsp;&nbsp;Mmio&nbsp;stale&nbsp;data:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Not&nbsp;affected
&nbsp;&nbsp;Retbleed:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Not&nbsp;affected
&nbsp;&nbsp;Spec&nbsp;rstack&nbsp;overflow:&nbsp;&nbsp;Vulnerable
&nbsp;&nbsp;Spec&nbsp;store&nbsp;bypass:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vulnerable
&nbsp;&nbsp;Spectre&nbsp;v1:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vulnerable:&nbsp;__user&nbsp;pointer&nbsp;sanitization&nbsp;and&nbsp;usercopy&nbsp;barriers&nbsp;only;&nbsp;no&nbsp;swapgs&nbsp;barriers
&nbsp;&nbsp;Spectre&nbsp;v2:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vulnerable,&nbsp;IBPB:&nbsp;disabled,&nbsp;STIBP:&nbsp;disabled,&nbsp;PBRSB-eIBRS:&nbsp;Not&nbsp;affected
&nbsp;&nbsp;Srbds:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Not&nbsp;affected
&nbsp;&nbsp;Tsx&nbsp;async&nbsp;abort:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Not&nbsp;affected
</code></pre><p>我的內存:</p><pre><code>&gt;&nbsp;sudo&nbsp;dmidecode&nbsp;--type&nbsp;memory
#&nbsp;dmidecode&nbsp;3.5
Getting&nbsp;SMBIOS&nbsp;data&nbsp;from&nbsp;sysfs.
SMBIOS&nbsp;3.3.0&nbsp;present.

Handle&nbsp;0x0014,&nbsp;DMI&nbsp;type&nbsp;16,&nbsp;23&nbsp;bytes
Physical&nbsp;Memory&nbsp;Array
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Location:&nbsp;System&nbsp;Board&nbsp;Or&nbsp;Motherboard
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use:&nbsp;System&nbsp;Memory
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Error&nbsp;Correction&nbsp;Type:&nbsp;None
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Maximum&nbsp;Capacity:&nbsp;64&nbsp;GB
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Error&nbsp;Information&nbsp;Handle:&nbsp;0x0013
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Number&nbsp;Of&nbsp;Devices:&nbsp;4

Handle&nbsp;0x001C,&nbsp;DMI&nbsp;type&nbsp;17,&nbsp;92&nbsp;bytes
Memory&nbsp;Device
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Array&nbsp;Handle:&nbsp;0x0014
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Error&nbsp;Information&nbsp;Handle:&nbsp;0x001B
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Total&nbsp;Width:&nbsp;64&nbsp;bits
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Data&nbsp;Width:&nbsp;64&nbsp;bits
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Size:&nbsp;16&nbsp;GB
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Form&nbsp;Factor:&nbsp;DIMM
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set:&nbsp;None
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Locator:&nbsp;DIMM&nbsp;0
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bank&nbsp;Locator:&nbsp;P0&nbsp;CHANNEL&nbsp;A
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type:&nbsp;DDR4
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type&nbsp;Detail:&nbsp;Synchronous&nbsp;Unbuffered&nbsp;(Unregistered)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Speed:&nbsp;3200&nbsp;MT/s
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Manufacturer:&nbsp;Unknown
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Serial&nbsp;Number:&nbsp;04904740
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Asset&nbsp;Tag:&nbsp;Not&nbsp;Specified
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Part&nbsp;Number:&nbsp;LMKUFG68AHFHD-32A
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rank:&nbsp;2
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Configured&nbsp;Memory&nbsp;Speed:&nbsp;3200&nbsp;MT/s
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Minimum&nbsp;Voltage:&nbsp;1.2&nbsp;V
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Maximum&nbsp;Voltage:&nbsp;1.2&nbsp;V
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Configured&nbsp;Voltage:&nbsp;1.2&nbsp;V
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Memory&nbsp;Technology:&nbsp;DRAM
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Memory&nbsp;Operating&nbsp;Mode&nbsp;Capability:&nbsp;Volatile&nbsp;memory
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Firmware&nbsp;Version:&nbsp;Unknown
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Module&nbsp;Manufacturer&nbsp;ID:&nbsp;Bank&nbsp;9,&nbsp;Hex&nbsp;0xC8
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Module&nbsp;Product&nbsp;ID:&nbsp;Unknown
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Memory&nbsp;Subsystem&nbsp;Controller&nbsp;Manufacturer&nbsp;ID:&nbsp;Unknown
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Memory&nbsp;Subsystem&nbsp;Controller&nbsp;Product&nbsp;ID:&nbsp;Unknown
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Non-Volatile&nbsp;Size:&nbsp;None
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Volatile&nbsp;Size:&nbsp;16&nbsp;GB
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cache&nbsp;Size:&nbsp;None
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logical&nbsp;Size:&nbsp;None
</code></pre><p>所以我嘗試了以下事情：</p><h3>👨🏻‍💻 開啓 Mitigations</h3><p>CPU 擁有許多可能將私有數據暴露給攻擊者的漏洞，其中<code>Spectre</code>是最知名的之一。Linux 內核已經開發了各種緩解這些漏洞的措施，並且默認啓用它們。然而，這些緩解措施可能會增加額外的系統成本。因此，Linux 內核也為希望禁用它們的用户提供了一個<code>mitigations</code>開關。</p><p>我過去禁用了所有的 mitigations：</p><pre><code>title&nbsp;Arch&nbsp;Linux
linux&nbsp;/vmlinuz-linux-zen
initrd&nbsp;/amd-ucode.img
initrd&nbsp;/initramfs-linux-zen.img
options&nbsp;root="PARTUUID=206e7750-2b89-419d-978e-db0068c79c52"&nbsp;rw&nbsp;mitigations=off
</code></pre><p>啓用它並不能改變結果</p><h3>👨🏻‍💻 調整透明大頁</h3><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.kernel.org%2Fdoc%2Fhtml%2Fnext%2Fadmin-guide%2Fmm%2Ftranshuge.html" target="_blank">透明大頁</a>可以顯著影響性能。大多數現代發行版默認啓用它。</p><pre><code>&gt;&nbsp;cat&nbsp;/sys/kernel/mm/transparent_hugepage/enabled
[always]&nbsp;madvise&nbsp;never
</code></pre><p>切換到 <code>madvise</code>&nbsp;或 <code>never</code>&nbsp;會改變絕對結果，但相對比例保持一致。</p><h3>👨🏻‍💻 Tune CPU 核心親和度</h3><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FZheaoLi" target="_blank">@Manjusaka</a> 猜測這可能與 <code>CPU 核心間距</code> 有關。我試圖使用 <a href="https://my.oschina.net/u/5489811/blog/*https://docs.rs/core_affinity/latest/core_affinity/*">core_affinity</a>將進程綁定到特定的 CPU，但結果仍然相同。</p><h3>👨🏻‍💻 <strong>使用 eBPF 精確測量 syscall 延遲</strong></h3><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FZheaoLi" target="_blank">@Manjusaka</a> 也為我創建了 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FXuanwo%2Fwhen-i-find-rust-is-slow%2Fblob%2Fmain%2Fscripts%2Fread-latency.py" target="_blank">一個 eBPF 程序</a>，以便我衡量讀取系統調用的延遲。研究結果表明，Rust 在系統調用級別上就比 Python 慢。</p><blockquote><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FZheaoLi" target="_blank">@Manjusaka</a> 寫一篇文章來分享關於這個 eBPF 程序的故事！</p></blockquote><pre><code>   #&nbsp;python&nbsp;fs&nbsp;read
   Process&nbsp;57555&nbsp;read&nbsp;file&nbsp;8134049&nbsp;ns
   Process&nbsp;57555&nbsp;read&nbsp;file&nbsp;942&nbsp;ns

   #&nbsp;rust&nbsp;std&nbsp;fs&nbsp;read
   Process&nbsp;57634&nbsp;read&nbsp;file&nbsp;24636975&nbsp;ns
   Process&nbsp;57634&nbsp;read&nbsp;file&nbsp;1052&nbsp;ns
</code></pre><p>觀察：在我的電腦上，Rust 運行速度比 Python 慢，而且這似乎與軟件無關。</p><h2>C 比 Python 慢？</h2><p>當用户想要進行大數據分析時，心裏所期望的基本是：</p><p>我感到相當困惑，無法準確指出差異。我懷疑這可能與 CPU 有關，但我不確定是哪個方面：緩存？頻率？核間距？核親和性？架構？</p><p>根據 Telegram 羣組 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ft.me%2Frust_zh" target="_blank">Rust 眾</a> 的建議，我開發了一個 C 版本：</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FXuanwo%2Fwhen-i-find-rust-is-slow%2Fblob%2Fmain%2Fc-fs-read%2Ftest.c" target="_blank">c-fs-read</a></p><pre><code>#include&nbsp;&lt;stdio.h&gt;
#include&nbsp;&lt;stdlib.h&gt;

#define&nbsp;FILE_SIZE&nbsp;64&nbsp;*&nbsp;1024&nbsp;*&nbsp;1024&nbsp;&nbsp;//&nbsp;64&nbsp;MiB

int&nbsp;main()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;FILE&nbsp;*file;
&nbsp;&nbsp;&nbsp;&nbsp;char&nbsp;*buffer;
&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;result;

&nbsp;&nbsp;&nbsp;&nbsp;file&nbsp;=&nbsp;fopen("/tmp/file",&nbsp;"rb");
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(file&nbsp;==&nbsp;NULL)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fputs("Error&nbsp;opening&nbsp;file",&nbsp;stderr);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;buffer&nbsp;=&nbsp;(char&nbsp;*)malloc(sizeof(char)&nbsp;*&nbsp;FILE_SIZE);
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(buffer&nbsp;==&nbsp;NULL)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fputs("Memory&nbsp;error",&nbsp;stderr);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fclose(file);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;2;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;fread(buffer,&nbsp;1,&nbsp;FILE_SIZE,&nbsp;file);
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(result&nbsp;!=&nbsp;FILE_SIZE)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fputs("Reading&nbsp;error",&nbsp;stderr);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fclose(file);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(buffer);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;3;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;fclose(file);
&nbsp;&nbsp;&nbsp;&nbsp;free(buffer);

&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;
}

</code></pre><p>但是......</p><pre><code>Benchmark&nbsp;1:&nbsp;c-fs-read/test
&nbsp;&nbsp;Time&nbsp;(mean&nbsp;±&nbsp;σ):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;23.8&nbsp;ms&nbsp;±&nbsp;&nbsp;&nbsp;0.9&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;[User:&nbsp;0.3&nbsp;ms,&nbsp;System:&nbsp;23.6&nbsp;ms]
&nbsp;&nbsp;Range&nbsp;(min&nbsp;…&nbsp;max):&nbsp;&nbsp;&nbsp;&nbsp;23.0&nbsp;ms&nbsp;…&nbsp;&nbsp;27.1&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;120&nbsp;runs

Benchmark&nbsp;2:&nbsp;python-fs-read/test.py
&nbsp;&nbsp;Time&nbsp;(mean&nbsp;±&nbsp;σ):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;19.1&nbsp;ms&nbsp;±&nbsp;&nbsp;&nbsp;0.3&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;[User:&nbsp;8.6&nbsp;ms,&nbsp;System:&nbsp;10.4&nbsp;ms]
&nbsp;&nbsp;Range&nbsp;(min&nbsp;…&nbsp;max):&nbsp;&nbsp;&nbsp;&nbsp;18.6&nbsp;ms&nbsp;…&nbsp;&nbsp;20.6&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;146&nbsp;runs

Summary
&nbsp;&nbsp;python-fs-read/test.py&nbsp;ran
&nbsp;&nbsp;&nbsp;&nbsp;1.25&nbsp;±&nbsp;0.05&nbsp;times&nbsp;faster&nbsp;than&nbsp;c-fs-read/test
</code></pre><p>C 版本也比 Python 慢！Python 有魔法嗎？</p><h2><strong>在指定的偏移量下，C 語言比 Python 慢！</strong></h2><p>當用户想要進行大數據分析時，心裏所期望的基本是：</p><p>在這個時候，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Flilydjwg" target="_blank">@lilydjwg</a> 加入了討論，並注意到 C 和 Python 之間的內存區域偏移存在差異。</p><blockquote><p><code>strace -e raw=read,mmap ./program</code>被用來打印系統調用的未解碼參數：指針地址。</p></blockquote><pre><code>`c-fs-read` 的 strace:

    &gt;&nbsp;strace&nbsp;-e&nbsp;raw=read,mmap&nbsp;./c-fs-read/test
    ...
    mmap(0,&nbsp;0x4001000,&nbsp;0x3,&nbsp;0x22,&nbsp;0xffffffff,&nbsp;0)&nbsp;=&nbsp;0x7f96d1a18000
    read(0x3,&nbsp;0x7f96d1a18010,&nbsp;0x4000000)&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;0x4000000
    close(3)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;0
    python-fs-read&nbsp;的&nbsp;strace

`python-fs-read` 的 strace

    &gt;&nbsp;strace&nbsp;-e&nbsp;raw=read,mmap&nbsp;./python-fs-read/test.py
    ...
    mmap(0,&nbsp;0x4001000,&nbsp;0x3,&nbsp;0x22,&nbsp;0xffffffff,&nbsp;0)&nbsp;=&nbsp;0x7f27dcfbe000
    read(0x3,&nbsp;0x7f27dcfbe030,&nbsp;0x4000001)&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;0x4000000
    read(0x3,&nbsp;0x7f27e0fbe030,&nbsp;0x1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;0
    close(3)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;0
</code></pre><p>在 <code>c-fs-read</code> 中，<code>mmap</code>返回 <code>0x7f96d1a18000</code>，但是 read 系統調用使用 <code>0x7f96d1a18010</code>作為起始地址，偏移量是 <code>0x10</code>。在 <code>python-fs-read</code>中， <code>mmap</code> 返回 <code>0x7f27dcfbe000</code>, 並且 read 系統調用使用 <code>0x7f27dcfbe030</code> 作為起始地址, 偏移量是 <code>0x30</code>.</p><p>所以 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Flilydjwg" target="_blank">@lilydjwg</a>&nbsp;嘗試用相同的偏移量來調用 'read'。</p><pre><code>    :)&nbsp;./bench&nbsp;c-fs-read&nbsp;c-fs-read-with-offset&nbsp;python-fs-read
    ['hyperfine',&nbsp;'c-fs-read/test',&nbsp;'c-fs-read-with-offset/test',&nbsp;'python-fs-read/test.py']
    Benchmark&nbsp;1:&nbsp;c-fs-read/test
    &nbsp;&nbsp;Time&nbsp;(mean&nbsp;±&nbsp;σ):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;23.7&nbsp;ms&nbsp;±&nbsp;&nbsp;&nbsp;0.8&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;[User:&nbsp;0.2&nbsp;ms,&nbsp;System:&nbsp;23.6&nbsp;ms]
    &nbsp;&nbsp;Range&nbsp;(min&nbsp;…&nbsp;max):&nbsp;&nbsp;&nbsp;&nbsp;23.0&nbsp;ms&nbsp;…&nbsp;&nbsp;25.5&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;119&nbsp;runs

    &nbsp;&nbsp;Warning:&nbsp;Statistical&nbsp;outliers&nbsp;were&nbsp;detected.&nbsp;Consider&nbsp;re-running&nbsp;this&nbsp;benchmark&nbsp;on&nbsp;a&nbsp;quiet&nbsp;system&nbsp;without&nbsp;any&nbsp;interferences&nbsp;from&nbsp;other&nbsp;programs.&nbsp;It&nbsp;might&nbsp;help&nbsp;to&nbsp;use&nbsp;the&nbsp;'--warmup'&nbsp;or&nbsp;'--prepare'&nbsp;options.

    Benchmark&nbsp;2:&nbsp;c-fs-read-with-offset/test
    &nbsp;&nbsp;Time&nbsp;(mean&nbsp;±&nbsp;σ):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.9&nbsp;ms&nbsp;±&nbsp;&nbsp;&nbsp;0.4&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;[User:&nbsp;0.2&nbsp;ms,&nbsp;System:&nbsp;8.8&nbsp;ms]
    &nbsp;&nbsp;Range&nbsp;(min&nbsp;…&nbsp;max):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.3&nbsp;ms&nbsp;…&nbsp;&nbsp;10.6&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;283&nbsp;runs

    Benchmark&nbsp;3:&nbsp;python-fs-read/test.py
    &nbsp;&nbsp;Time&nbsp;(mean&nbsp;±&nbsp;σ):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;19.1&nbsp;ms&nbsp;±&nbsp;&nbsp;&nbsp;0.3&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;[User:&nbsp;8.6&nbsp;ms,&nbsp;System:&nbsp;10.4&nbsp;ms]
    &nbsp;&nbsp;Range&nbsp;(min&nbsp;…&nbsp;max):&nbsp;&nbsp;&nbsp;&nbsp;18.6&nbsp;ms&nbsp;…&nbsp;&nbsp;20.0&nbsp;ms&nbsp;&nbsp;&nbsp;&nbsp;147&nbsp;runs

    Summary
    &nbsp;&nbsp;c-fs-read-with-offset/test&nbsp;ran
    &nbsp;&nbsp;&nbsp;&nbsp;2.15&nbsp;±&nbsp;0.11&nbsp;times&nbsp;faster&nbsp;than&nbsp;python-fs-read/test.py
    &nbsp;&nbsp;&nbsp;&nbsp;2.68&nbsp;±&nbsp;0.16&nbsp;times&nbsp;faster&nbsp;than&nbsp;c-fs-read/test
</code></pre><p>！！！</p><p>在<code>c-fs-read</code>中對<code>buffer</code>應用偏移量可以提高其速度，超過 Python！此外，我們已經驗證了這個問題在 <code>AMD Ryzen 9 5900X</code> 和 <code>AMD Ryzen 7 5700X</code> 上都能復現。</p><p>新的信息讓我找到了關於類似問題的其他報告，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fusers.rust-lang.org%2Ft%2Fstd-read-slow%2F85424" target="_blank">Std::fs::read slow?</a>。在這篇帖子中，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fambiso" target="_blank">@ambiso</a> 發現系統調用性能與內存區域的偏移量有關。他指出當從每頁的前 <code>0x10</code> 字節寫入時，這款 CPU 會變慢。</p><pre><code>    offset&nbsp;milliseconds
    &nbsp;...
    &nbsp;14&nbsp;&nbsp;&nbsp;130
    &nbsp;15&nbsp;&nbsp;&nbsp;130
    &nbsp;16&nbsp;&nbsp;&nbsp;&nbsp;46&nbsp;&nbsp;&nbsp;&lt;-----&nbsp;0x10!
    &nbsp;17&nbsp;&nbsp;&nbsp;&nbsp;48
    &nbsp;...
</code></pre><h2>在指定的偏移量下，AMD Ryzen 9 5900X 很慢！</h2><p>我們已確認這個問題與 CPU 有關。然而，我們仍然不確定其可能的原因。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FZheaoLi" target="_blank">@Manjusaka</a>&nbsp;已邀請內核開發者 <a href="https://my.oschina.net/u/5489811/blog/*https://github.com/ryncsn*">@ryncsn</a> 加入討論。</p><p>他可以在 <code>AMD Ryzen 9 5900HX</code> 上使用我們的 <code>c-fs-read</code> 和 <code>c-fs-read-with-offset</code> 重現相同的結果。他還嘗試使用 <code>perf</code> 對兩個程序進行性能分析。</p><p><strong>沒有 offset:</strong></p><pre><code>perf&nbsp;stat&nbsp;-d&nbsp;-d&nbsp;-d&nbsp;--repeat&nbsp;20&nbsp;./a.out
&nbsp;Performance&nbsp;counter&nbsp;stats&nbsp;for&nbsp;'./a.out'&nbsp;(20&nbsp;runs):

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;30.89&nbsp;msec&nbsp;task-clock&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;0.968&nbsp;CPUs&nbsp;utilized&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;1.35%&nbsp;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context-switches&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;0.000&nbsp;/sec
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cpu-migrations&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;0.000&nbsp;/sec
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;598&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;page-faults&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;19.362&nbsp;K/sec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;0.05%&nbsp;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;90,321,344&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cycles&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;2.924&nbsp;GHz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;1.12%&nbsp;)&nbsp;&nbsp;(40.76%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;599,640&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stalled-cycles-frontend&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;0.66%&nbsp;frontend&nbsp;cycles&nbsp;idle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;2.19%&nbsp;)&nbsp;&nbsp;(42.11%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;398,016&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stalled-cycles-backend&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;0.44%&nbsp;backend&nbsp;cycles&nbsp;idle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;22.41%&nbsp;)&nbsp;&nbsp;(41.88%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43,349,705&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instructions&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;0.48&nbsp;&nbsp;insn&nbsp;per&nbsp;cycle
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;0.01&nbsp;&nbsp;stalled&nbsp;cycles&nbsp;per&nbsp;insn&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;1.32%&nbsp;)&nbsp;&nbsp;(41.91%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7,526,819&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;branches&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;243.701&nbsp;M/sec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;5.01%&nbsp;)&nbsp;&nbsp;(41.22%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;37,541&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;branch-misses&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;0.50%&nbsp;of&nbsp;all&nbsp;branches&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;4.62%&nbsp;)&nbsp;&nbsp;(41.12%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;127,845,213&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;L1-dcache-loads&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;4.139&nbsp;G/sec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;1.14%&nbsp;)&nbsp;&nbsp;(39.84%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3,172,628&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;L1-dcache-load-misses&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;2.48%&nbsp;of&nbsp;all&nbsp;L1-dcache&nbsp;accesses&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;1.34%&nbsp;)&nbsp;&nbsp;(38.46%)
&nbsp;&nbsp;&nbsp;&lt;not&nbsp;supported&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LLC-loads
&nbsp;&nbsp;&nbsp;&lt;not&nbsp;supported&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LLC-load-misses
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;654,651&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;L1-icache-loads&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;21.196&nbsp;M/sec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;1.71%&nbsp;)&nbsp;&nbsp;(38.72%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2,828&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;L1-icache-load-misses&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;0.43%&nbsp;of&nbsp;all&nbsp;L1-icache&nbsp;accesses&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;2.35%&nbsp;)&nbsp;&nbsp;(38.67%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;15,615&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dTLB-loads&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;505.578&nbsp;K/sec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;1.28%&nbsp;)&nbsp;&nbsp;(38.82%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;12,825&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dTLB-load-misses&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;82.13%&nbsp;of&nbsp;all&nbsp;dTLB&nbsp;cache&nbsp;accesses&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;1.15%&nbsp;)&nbsp;&nbsp;(38.88%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iTLB-loads&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;518.043&nbsp;/sec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;27.06%&nbsp;)&nbsp;&nbsp;(38.82%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2,202&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iTLB-load-misses&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;13762.50%&nbsp;of&nbsp;all&nbsp;iTLB&nbsp;cache&nbsp;accesses&nbsp;&nbsp;(&nbsp;+-&nbsp;23.62%&nbsp;)&nbsp;&nbsp;(39.38%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1,843,493&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;L1-dcache-prefetches&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;59.688&nbsp;M/sec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;3.36%&nbsp;)&nbsp;&nbsp;(39.40%)
&nbsp;&nbsp;&nbsp;&lt;not&nbsp;supported&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;L1-dcache-prefetch-misses

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.031915&nbsp;+-&nbsp;0.000419&nbsp;seconds&nbsp;time&nbsp;elapsed&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;1.31%&nbsp;)
</code></pre><p>有 offset:</p><pre><code>perf&nbsp;stat&nbsp;-d&nbsp;-d&nbsp;-d&nbsp;--repeat&nbsp;20&nbsp;./a.out
&nbsp;Performance&nbsp;counter&nbsp;stats&nbsp;for&nbsp;'./a.out'&nbsp;(20&nbsp;runs):

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;15.39&nbsp;msec&nbsp;task-clock&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;0.937&nbsp;CPUs&nbsp;utilized&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;3.24%&nbsp;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context-switches&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;64.972&nbsp;/sec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;17.62%&nbsp;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cpu-migrations&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;0.000&nbsp;/sec
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;598&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;page-faults&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;38.854&nbsp;K/sec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;0.06%&nbsp;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;41,239,117&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cycles&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;2.679&nbsp;GHz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;1.95%&nbsp;)&nbsp;&nbsp;(40.68%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;547,465&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stalled-cycles-frontend&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;1.33%&nbsp;frontend&nbsp;cycles&nbsp;idle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;3.43%&nbsp;)&nbsp;&nbsp;(40.60%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;413,657&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stalled-cycles-backend&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;1.00%&nbsp;backend&nbsp;cycles&nbsp;idle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;20.37%&nbsp;)&nbsp;&nbsp;(40.50%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;37,009,429&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instructions&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;0.90&nbsp;&nbsp;insn&nbsp;per&nbsp;cycle
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;0.01&nbsp;&nbsp;stalled&nbsp;cycles&nbsp;per&nbsp;insn&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;3.13%&nbsp;)&nbsp;&nbsp;(40.43%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5,410,381&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;branches&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;351.526&nbsp;M/sec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;3.24%&nbsp;)&nbsp;&nbsp;(39.80%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;34,649&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;branch-misses&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;0.64%&nbsp;of&nbsp;all&nbsp;branches&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;4.04%&nbsp;)&nbsp;&nbsp;(39.94%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;13,965,813&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;L1-dcache-loads&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;907.393&nbsp;M/sec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;3.37%&nbsp;)&nbsp;&nbsp;(39.44%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3,623,350&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;L1-dcache-load-misses&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;25.94%&nbsp;of&nbsp;all&nbsp;L1-dcache&nbsp;accesses&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;3.56%&nbsp;)&nbsp;&nbsp;(39.52%)
&nbsp;&nbsp;&nbsp;&lt;not&nbsp;supported&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LLC-loads
&nbsp;&nbsp;&nbsp;&lt;not&nbsp;supported&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LLC-load-misses
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;590,613&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;L1-icache-loads&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;38.374&nbsp;M/sec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;3.39%&nbsp;)&nbsp;&nbsp;(39.67%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1,995&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;L1-icache-load-misses&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;0.34%&nbsp;of&nbsp;all&nbsp;L1-icache&nbsp;accesses&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;4.18%&nbsp;)&nbsp;&nbsp;(39.67%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16,046&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dTLB-loads&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;1.043&nbsp;M/sec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;3.28%&nbsp;)&nbsp;&nbsp;(39.78%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;14,040&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dTLB-load-misses&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;87.50%&nbsp;of&nbsp;all&nbsp;dTLB&nbsp;cache&nbsp;accesses&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;3.24%&nbsp;)&nbsp;&nbsp;(39.78%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iTLB-loads&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;714.697&nbsp;/sec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;29.56%&nbsp;)&nbsp;&nbsp;(39.77%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3,657&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iTLB-load-misses&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;33245.45%&nbsp;of&nbsp;all&nbsp;iTLB&nbsp;cache&nbsp;accesses&nbsp;&nbsp;(&nbsp;+-&nbsp;14.61%&nbsp;)&nbsp;&nbsp;(40.30%)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;395,578&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;L1-dcache-prefetches&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;25.702&nbsp;M/sec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;3.34%&nbsp;)&nbsp;&nbsp;(40.10%)
&nbsp;&nbsp;&nbsp;&lt;not&nbsp;supported&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;L1-dcache-prefetch-misses

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.016429&nbsp;+-&nbsp;0.000521&nbsp;seconds&nbsp;time&nbsp;elapsed&nbsp;&nbsp;(&nbsp;+-&nbsp;&nbsp;3.17%&nbsp;)
</code></pre><p>他發現<code>L1-dcache-prefetches</code>和<code>L1-dcache-loads</code>的值差異很大。</p><ul><li><p><code>L1-dcache-prefetches</code>是 CPU L1 數據緩存的預取。</p></li><li><p><code>L1-dcache-loads</code>是 CPU L1 數據緩存的加載。</p></li></ul><p>如果沒有指定偏移量，CPU 將執行更多的加載和預取操作，導致系統調用時間增加。</p><p>他對熱點 ASM 進行了進一步研究：</p><pre><code>Samples:&nbsp;15K&nbsp;of&nbsp;event&nbsp;'cycles:P',&nbsp;Event&nbsp;count&nbsp;(approx.):&nbsp;6078132137
&nbsp;&nbsp;Children&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Self&nbsp;&nbsp;Command&nbsp;&nbsp;&nbsp;&nbsp;Shared&nbsp;Object&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Symbol
-&nbsp;&nbsp;&nbsp;94.11%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.00%&nbsp;&nbsp;a.out&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[kernel.vmlinux]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[k]&nbsp;entry_SYSCALL_64_after_hwframe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;-&nbsp;entry_SYSCALL_64_after_hwframe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;94.10%&nbsp;do_syscall_64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;86.66%&nbsp;__x64_sys_read&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ksys_read&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;vfs_read&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;85.94%&nbsp;shmem_file_read_iter&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;77.17%&nbsp;copy_page_to_iter&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;75.80%&nbsp;_copy_to_iter&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;19.41%&nbsp;asm_exc_page_fault&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.71%&nbsp;__might_fault&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;4.87%&nbsp;shmem_get_folio_gfp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.76%&nbsp;folio_mark_accessed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;4.38%&nbsp;__x64_sys_munmap&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;1.02%&nbsp;0xffffffffae6f6fe8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;0.79%&nbsp;__x64_sys_execve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;0.58%&nbsp;__x64_sys_mmap&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</code></pre><p><code>_copy_to_iter</code> 中的 ASM：</p><pre><code>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;copy_user_generic():
    &nbsp;&nbsp;2.19&nbsp;│&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;%rdx,%rcx
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;%r12,%rsi
    &nbsp;92.45&nbsp;│&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rep&nbsp;&nbsp;&nbsp;&nbsp;movsb&nbsp;%ds:(%rsi),%es:(%rdi)
    &nbsp;&nbsp;0.49&nbsp;│&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nop
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nop
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nop
</code></pre><p>這裏的關鍵區別是<code>rep movsb</code>的性能。</p><h2>AMD Ryzen 9 5900X 因為 FSRM 慢！</h2><p>在這個時候，我的一個朋友給我發送了一個關於<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbugs.launchpad.net%2Fubuntu%2F%2Bsource%2Fglibc%2F%2Bbug%2F2030515" target="_blank">Terrible memcpy performance on Zen 3 when using rep movsb</a>的鏈接。其中也指向了<code>rep movsb</code>：</p><blockquote><p>I've found this using a memcpy benchmark at <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fska-sa%2Fkatgpucbf%2Fblob%2F69752be58fb8ab0668ada806e0fd809e782cc58b%2Fscratch%2Fmemcpy%5C%5C_loop.cpp" target="_blank">https://github.com/ska-sa/katgpucbf/blob/69752be58fb8ab0668ada806e0fd809e782cc58b/scratch/memcpy\\_loop.cpp</a> (compiled with the adjacent Makefile). To demonstrate the issue, run</p><p>./memcpy_loop -b 2113 -p 1000000 -t mmap -S 0 -D 1 0</p><p>This runs:</p><ul><li><p>•&nbsp;2113-byte memory copies</p></li><li><p>•&nbsp;1,000,000 times per timing measurement</p></li><li><p>•&nbsp;in memory allocated with mmap</p></li><li><p>•&nbsp;with the source 0 bytes from the start of the page</p></li><li><p>•&nbsp;with the destination 1 byte from the start of the page</p></li><li><p>•&nbsp;on core 0.</p></li></ul><p>It reports about 3.2 GB/s. Change the -b argument to 2111 and it reports over 100 GB/s. So the REP MOVSB case is about 30× slower!</p></blockquote><p><code>FSRM</code>，即 <code>Fast Short REP MOV</code>，是英特爾最初的創新，近期也被 AMD 採納，用以提升 <code>rep movsb</code> 和 <code>rep movsd</code> 的速度。它旨在提高大量內存複製的效率。聲明支持它的 CPU 將在 <code>glibc</code> 中默認使用 <code>FSRM</code>。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fryncsn" target="_blank">@ryncsn</a> 進一步研究並發現它與 L1 預取無關。</p><blockquote><p>It seems that <code>rep movsb</code> performance poorly when DATA IS PAGE ALIGNED, and perform better when DATA IS NOT PAGE ALIGNED, this is very funny...</p></blockquote><h2>總結</h2><p>總的來説，這個問題並非與軟件有關。由於 AMD 的一個錯誤，Python 在性能上超過了 C/Rust。（我終於可以好好睡覺了。）</p><p>然而，我們的用户仍然需要面對這個問題。不幸的是，像<code>FSRM</code>這樣的功能將會被實現在<code>ucode</code>中，我們別無選擇只能等待 AMD 的迴應。另一種可能的解決方案是不使用<code>FSRM</code>或者提供一個標誌來禁用它。Rust 開發者可能會考慮切換到 <code>jemallocator</code>以提高性能 ，即使沒有 AMD CPU Bug 存在，這也是一個好主意！</p><h2>回顧</h2><p>我花了近三天的時間來解決這個問題，它始於 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fincubator-opendal" target="_blank">opendal:</a> 用户的投訴，並最終引導我到 CPU 的微代碼。這次旅程讓我對<code>strace</code>、<code>perf</code>和<code>eBPF</code>有了深入的瞭解。這是我第一次使用 <code>eBPF</code>進行診斷。我還探索了各種收效甚微的途徑，比如研究 rust 的 <code>std::fs</code> 和 Python &amp; CPython 的讀取實現細節。起初，我希望能在更高層面上解決這個問題，但發現有必要深入挖掘。</p><p>對於所有參與尋找答案的人，我表示衷心感謝：</p><ul><li><p>感謝 opendal 的 Discord 上的 @beldathas 發現了這個問題。</p></li><li><p>感謝 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdatafuselabs" target="_blank">@datafuselabs</a> 團隊提供的建議。</p></li><li><p>感謝我們在 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ft.me%2Frust_zh" target="_blank">Rust 眾</a>&nbsp;的朋友們給出的建議和復現努力。</p></li><li><p>感謝 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FZheaoLi" target="_blank">@Manjusaka</a> 復現問題並使用 eBPF 進行調查，這幫助我們將問題定位到系統調用本身。</p></li><li><p>感謝 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Flilydjwg" target="_blank">@lilydjwg</a> 找出根本原因：內存中<code>0x20</code>偏移量 -感謝 <a href="https://my.oschina.net/u/5489811/blog/*https://github.com/ryncsn*">@ryncsn</a> 他對此事進行了徹底分析。</p></li><li><p>•&nbsp;還有一位分享了關於 FSRM 有用鏈接的朋友。</p></li></ul><p>期待我們下次旅程！</p><h2>引用</h2><ul><li><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FXuanwo%2Fwhen-i-find-rust-is-slow" target="_blank">Xuanwo/when-i-find-rust-is-slow</a>&nbsp;有所有的樣例和腳本</p></li><li><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fusers.rust-lang.org%2Ft%2Fstd-read-slow%2F85424" target="_blank">Std::fs::read slow?</a> 是來自 Rust 社區的彙報</p></li><li><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbugs.launchpad.net%2Fubuntu%2F%2Bsource%2Fglibc%2F%2Bbug%2F2030515" target="_blank">Terrible memcpy performance on Zen 3 when using rep movsb</a> 是來自 ubuntu glibc 的報告</p></li><li><p>[binding/python](rust std fs is slower than python fs:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fincubator-opendal%2Fissues%2F3665" target="_blank">https://github.com/apache/incubator-opendal/issues/3665</a>)</p></li></ul><h2>關於&nbsp;Databend</h2><p>Databend 是一款開源、彈性、低成本，基於對象存儲也可以做實時分析的新式數倉。期待您的關注，一起探索雲原生數倉解決方案，打造新一代開源 Data Cloud。</p><p>👨‍💻‍ Databend Cloud：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdatabend.cn" target="_blank">https://databend.cn</a></p><p>📖 Databend 文檔：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdatabend.rs%2F" target="_blank">https://databend.rs/</a></p><p>💻 Wechat：Databend</p><p>✨ GitHub：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdatafuselabs%2Fdatabend" target="_blank">https://github.com/datafuselabs/databend</a></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 05:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5489811/blog/10314995</guid>
            <link>https://my.oschina.net/u/5489811/blog/10314995</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[恭喜 Devlive DataCap 新晉一位前端 Committer]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote><p>非常感謝所有對 DataCap 項目的支持和貢獻，我們迎來了新的一位來自互聯網行業的美女前端工程師，感謝她對 DataCap 的支持已經代碼的貢獻。</p></blockquote><p><img alt="8AA600FB-3F02-4229-8353-EA4400BCE1D7.jpg" src="https://images.edurt.io/devlive.org/2023-12-1/8AA600FB-3F02-4229-8353-EA4400BCE1D7.jpg" referrerpolicy="no-referrer"></p><h3>關於 DataCap</h3><hr><p>DataCap 是數據轉換、集成和可視化的集成軟件。支持多種數據源，文件類型，大數據相關數據庫，關係型數據庫，NoSQL 數據庫等。通過軟件可以實現管理多種數據源，對該源下的數據進行各種操作轉換，製作數據圖表，監控數據源等各種功能。</p><h3>DataCap 喜迎一位 Committer 成員</h3><hr><table><tbody><tr><th>名字</th><th>職業</th><th>GitHub ID</th></tr></tbody><tbody><tr><td>張揚</td><td>前端工程師</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FStacey1018" target="_blank">Stacey1018</a></td></tr></tbody></table><h4>個人描述</h4><hr><p>一名熱情富有經驗的前端開發者，我曾參與過多個前端項目，從小型網站到大型應用都有涉獵。熟悉 <code>react</code>、<code>vue</code>、<code>angular</code> 等多個前端框架。熟悉打包工具如 <code>Webpack</code>，能夠優化前端資源的加載和管理，從而提高網站的性能。</p><h4>對 DataCap 的認識</h4><hr><p>在做公司數據部門項目時，從 github 中搜索，發現 datacap 項目，結合公司內部業務，經過一段時間運行後發現頁面組件出現層級問題和 MonacoEditor 組件渲染問題，特意在源碼中修復了以上兩個問題。</p><h4>代碼提交之路</h4><hr><ol><li>在 datacap 上提交了相關代碼 (commit 9afddb4f4edb529cc80dda76a9c52acb33e933dd (HEAD -&gt; fixbug/zy))</li></ol><h4>得到的收穫</h4><hr><ol><li>藉此機會學習了新技術，工具，是提升自己技能和知識的寶貴機會</li><li>很榮幸參與 datacap 開源項目，熟悉了開源項目整個開發流程</li></ol><h4>對新人的建議</h4><hr><ol><li>參與項目開發時，可以先從一些小任務，小問題入手，有助於熟悉項目代碼</li><li>建議從自己熟悉的技術棧入手，這樣可以更快的融入項目</li><li>建議將項目部署下來，這樣才能得到真實的體驗</li></ol><h4>如何參與 DataCap</h4><hr><ul><li>參考官網 <a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fdatacap.devlive.org%2Fdeveloper_guide%2Fenv.html" target="_blank">開發者文檔</a></li><li>通過 Issues 列表參與 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdevlive-community%2Fdatacap%2Fissues" target="_blank">GitHub</a> &amp; <a href="https://gitee.com/devlive-community/datacap/issues">Gitee</a></li><li>加入我們的微信羣&amp;釘釘羣（在代碼倉庫中可以看到二維碼）</li><li>微信公眾號後台留言（搜索微信公公眾號 <code>devlive-sf</code> 關注，標記 DataCap 項目給我們留言即可）</li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 03:40:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268990</guid>
            <link>https://www.oschina.net/news/268990</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[哈工大人工智能專業大一學生寫了 70 萬行代碼？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>哈爾濱工業大學近日在其公眾號發表的一篇文章引起了不小爭議。</p><p>該文章介紹稱，哈工大計算學部人工智能專業的一名 2022 級學生在中國機器人及人工智能大賽總決賽上獲得了<strong>機器人應用賽（自動駕駛仿真）一等獎</strong>。</p><p>據瞭解，該比賽涉及人工智能、無人駕駛 &nbsp;和虛擬仿真等學科領域，還涉及高精地圖、定位、感知 &nbsp;預測、規劃與控制等模塊的運行機制和代碼架構。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-4e9f3dd3dff3e07407fc1c6d36c7929e333.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-c32e0b9e93b8ada29cac4146e775157de9d.png" referrerpolicy="no-referrer"></p></blockquote><p>但寫這篇文章的人顯然不瞭解編程，所以鬧出了下圖中「連續幾個月寫了 70 萬行代碼」的抽象現場。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-08391d81d81371237587ffa244dd02b6ae9.png" referrerpolicy="no-referrer"></p><p><img height="714" src="https://static.oschina.net/uploads/space/2023/1201/105216_eog8_2720166.png" width="1400" referrerpolicy="no-referrer"></p><p><img height="668" src="https://static.oschina.net/uploads/space/2023/1201/103954_yEjJ_2720166.png" width="1406" referrerpolicy="no-referrer"></p><p>來源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FKyBMh6QHPZ3yUxRxjFKIJQ" target="_blank">https://mp.weixin.qq.com/s/KyBMh6QHPZ3yUxRxjFKIJQ</a></u></em><br><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FrAjBwbzKwmxMNrzBOAUy6w" target="_blank">https://mp.weixin.qq.com/s/rAjBwbzKwmxMNrzBOAUy6w</a></u></em></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 02:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268970</guid>
            <link>https://www.oschina.net/news/268970</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[linkding —— 自託管書籤管理器]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>linkding 是一個可以自己託管的書籤管理器。它的設計目標是最小化、快速且易於使用 Docker 設置。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>名字來源於：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li>link，通常用作通用語言中 URL 和書籤的同義詞</li><li>Ding 是德語，意為「thing」</li><li>所以基本上就是用來管理鏈接的東西</li></ul><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><strong>功能概述：</strong></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li>乾淨的用户界面優化了可讀性</li><li>用標籤組織書籤</li><li>使用 Markdown 添加註釋</li><li>稍後閲讀功能</li><li>與其他用户共享書籤</li><li>批量編輯</li><li>自動提供已添加書籤的網站的標題、描述和圖標</li><li>自動創建<a href="https://archive.org/web/">Internet Archive Wayback Machine 上添加書籤的網站的快照</a></li><li>以 Netscape HTML 格式導入和導出書籤</li><li><a href="https://addons.mozilla.org/de/firefox/addon/linkding-extension/">Firefox</a>和<a href="https://chrome.google.com/webstore/detail/linkding-extension/beakmhbijpdhipnjhnclmhgjlddhidpe">Chrome</a>的擴展以及小書籤</li><li>淺色和深色主題</li><li>用於開發第三方應用程序的 REST API</li><li>用於用户自助服務和原始數據訪問的管理面板</li><li>使用 Docker 和 SQLite 數據庫輕鬆設置，並可選擇 PostgreSQL</li></ul><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><strong>演示：</strong></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><a href="https://demo.linkding.link/">https://demo.linkding.link/</a><span style="color:#1f2328">（如果訪問遇到問題，</span><a href="https://github.com/sissbruecker/linkding/issues/408">可參閲此處）</a></p><p><strong>截屏</strong></p><p><img height="274" src="https://static.oschina.net/uploads/space/2023/0912/162551_4faq_4252687.png" width="500" referrerpolicy="no-referrer"></p><p>&nbsp;</p></div>
                                                                ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 02:29:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/linkding</guid>
            <link>https://www.oschina.net/p/linkding</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 針對長尾需求的高效 ML 解決方案 MegFlow]]>
            </title>
            <description>
                <![CDATA[<div align="center"><img width="60%" src="https://gitee.com/MegEngine/MegFlow/raw/master/logo.png" referrerpolicy="no-referrer"></div><p><small> 簡體中文 | <a href="https://gitee.com/MegEngine/MegFlow/blob/master/README.md">English</a></small></p><h2><a id="user-content-megflow-documentation" class="anchor" href="https://gitee.com/MegEngine/MegFlow#megflow-documentation"></a>MegFlow <a href="https://gitee.com/link?target=https%3A%2F%2Fmegflow.readthedocs.io%2Fzh_CN%2Flatest%2F">Documentation</a></h2><p><a href="https://gitee.com/MegEngine/MegFlow/blob/master/LICENSE"><img src="https://img.shields.io/badge/license-apache--2--Clause-brightgreen.svg" alt="GitHub license" referrerpolicy="no-referrer"></a><img src="https://img.shields.io/github/actions/workflow/status/megengine/megflow/ubuntu-x86-cpu.yml?branch=master" alt="ubuntu" referrerpolicy="no-referrer"><img src="https://img.shields.io/github/actions/workflow/status/megengine/megflow/macos-x86-cpu.yml?branch=master" alt="macos" referrerpolicy="no-referrer"></p><p>MegFlow 提供快速視覺應用落地流程，最快 15 分鐘搭建起視頻分析服務。其特性體現在：</p><ul><li>直接用 Python 搭建計算圖（如先檢測、再跟蹤、最後質量判斷加識別），不必關心 C++、圖優化相關問題</li><li>省去 SDK 集成、提升開發體驗，通過流程改進應對人力不足、時間緊、功能多的情況</li><li>提供 pipeline 搭建、測試、調試、部署、結果可視化一條龍服務</li></ul><h2><a id="user-content-howto" class="anchor" href="https://gitee.com/MegEngine/MegFlow#howto"></a>HowTo</h2><ul><li><p>如何運行</p><ul><li><a href="https://gitee.com/MegEngine/MegFlow/blob/master/docs/02-how-to-run/run-in-15-minutes.zh.md">使用預編譯 .whl</a></li><li><a href="https://gitee.com/MegEngine/MegFlow/blob/master/docs/02-how-to-run/generate-rtsp.zh.md">生成 RTSP 地址</a></li></ul></li><li><p>如何編譯</p><ul><li><a href="https://gitee.com/MegEngine/MegFlow/blob/master/docs/01-how-to-build/build-with-docker.zh.md">docker 編譯</a></li><li><a href="https://gitee.com/MegEngine/MegFlow/blob/master/docs/01-how-to-build/build-from-source.zh.md">ubuntu 源碼編譯</a></li><li><a href="https://gitee.com/MegEngine/MegFlow/blob/master/docs/01-how-to-build/build-on-win10.zh.md">win10 wsl 編譯</a></li><li><a href="https://gitee.com/MegEngine/MegFlow/blob/master/docs/01-how-to-build/build-on-aarch64.zh.md">armv8 編譯</a></li></ul></li><li><p>構建自己的 pipeline</p><ul><li><a href="https://gitee.com/MegEngine/MegFlow/blob/master/docs/03-how-to-add-my-service/01-quickstart.zh.md">tutorial01: quickstart 問答式創建應用</a></li><li><a href="https://gitee.com/MegEngine/MegFlow/blob/master/docs/03-how-to-add-my-service/02-det-attr.zh.md">tutorial02: detect and classify on video stream</a></li><li><a href="https://gitee.com/MegEngine/MegFlow/blob/master/docs/03-how-to-add-my-service/03-batching-and-pipeline-test.zh.md">tutorial03: batching and pipeline test</a></li><li><a href="https://gitee.com/MegEngine/MegFlow/blob/master/docs/03-how-to-add-my-service/04-web-visualization.zh.md">tutorial04: visualization</a></li></ul></li><li><p><a href="https://gitee.com/MegEngine/MegFlow/blob/master/docs/how-to-debug.zh.md">how to debug</a></p></li><li><p><a href="https://gitee.com/MegEngine/MegFlow/blob/master/docs/how-to-contribute.zh.md">how to contribute</a></p></li><li><p><a href="https://gitee.com/MegEngine/MegFlow/blob/master/docs/FAQ.zh.md">FAQ</a></p></li></ul><h2><a id="user-content-current-support-matrix" class="anchor" href="https://gitee.com/MegEngine/MegFlow#current-support-matrix"></a>Current Support Matrix</h2><table><thead><tr><th>系統環境</th><th>win10 docker/wsl2</th><th>ubuntu</th><th>centOS</th><th>macos</th></tr></thead><tbody><tr><td>x86</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td></tr><tr><td>ARMv8</td><td>-</td><td>✔️</td><td>✔️</td><td>-</td></tr></tbody></table><table><thead><tr><th>Python 版本</th><th>支持情況</th></tr></thead><tbody><tr><td>3.6</td><td>✔️</td></tr><tr><td>3.7</td><td>✔️</td></tr><tr><td>3.8</td><td>✔️</td></tr><tr><td>3.9</td><td>✔️</td></tr></tbody></table><h2><a id="user-content-built-in-applications" class="anchor" href="https://gitee.com/MegEngine/MegFlow#built-in-applications"></a>Built-in Applications</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FMegEngine%2FMegFlow%2Ftree%2Fmaster%2Fflow-python%2Fexamples%2Fapplication%2Fcat_finder">貓貓圍欄</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FMegEngine%2FMegFlow%2Ftree%2Fmaster%2Fflow-python%2Fexamples%2Fapplication%2Felectric_bicycle">電梯電動車報警</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FMegEngine%2FMegFlow%2Ftree%2Fmaster%2Fflow-python%2Fexamples%2Fapplication%2Fvideo_super_resolution">視頻實時超分</a></li></ul><h2><a id="user-content-features" class="anchor" href="https://gitee.com/MegEngine/MegFlow#features"></a>Features</h2><ul><li>基於 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fasync-rs%2Fasync-std">async-std</a>[features=<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Ftokio-rs%2Ftokio">tokio1</a>] 的高效異步運行時調度器</li><li>簡潔的基於 <a href="https://gitee.com/link?target=https%3A%2F%2Ftoml.io%2Fen%2F">toml</a> 的建圖描述格式</li><li>支持靜態、動態、共享子圖</li><li>支持 Rust/Python 多語言共存（會 Python 即可）</li><li>支持資源管理（多層級跨任務共享）</li><li>支持異常處理（異常任務會終止所在靜態圖）</li><li>支持 demux/reorder/transform 等通用函數式組件</li><li>Python 插件內置有棧協程，不依賴 asyncio</li><li>基礎測試工具，支持插件沙盒，用於單測插件</li><li>基礎調試工具，支持建圖實時預覽/qps profile</li></ul><h2><a id="user-content-coming-soon" class="anchor" href="https://gitee.com/MegEngine/MegFlow#coming-soon"></a>Coming Soon</h2><ul><li>進程級別的節點、子圖支持</li><li>插件自動化測試部署</li><li>性能監控，inspect 等工具</li><li>更多內置應用和組件</li></ul><h2><a id="user-content-contact-us" class="anchor" href="https://gitee.com/MegEngine/MegFlow#contact-us"></a>Contact Us</h2><ul><li>Issue: github.com/MegEngine/MegFlow/issues</li><li>Email: <a href="mailto:megengine-support@megvii.com">megengine-support@megvii.com</a></li><li>QQ Group: 1029741705</li></ul><h2><a id="user-content-license" class="anchor" href="https://gitee.com/MegEngine/MegFlow#license"></a>License</h2><ul><li><a href="https://gitee.com/MegEngine/MegFlow/blob/master/LICENSE">Apache 2.0</a></li></ul>]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 02:27:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/MegEngine/MegFlow</guid>
            <link>https://gitee.com/MegEngine/MegFlow</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 百度搜索內容 HTAP 表格存儲系統]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img src="https://oscimg.oschina.net/oscnet/up-1ef37f728739cccdc0d6083272d99429467.png" alt="" referrerpolicy="no-referrer"></p><p>作者 | Chaos</p><blockquote><p>導讀&nbsp;</p><p>本文主要介紹百度搜索內容存儲團隊應對海量互聯網數據分析計算需求時，在構建 HTAP 表格存儲系統方向上的一些技術思考。</p></blockquote><blockquote><p><em>全文 4683 字，預計閲讀時間 12 分鐘。</em></p></blockquote><h1><strong>01 業務背景</strong></h1><p>百度搜索內容存儲團隊主要負責各類數據，如網頁、圖片、網頁關係等，的在線存儲讀寫 (OLTP)、離線高吞吐計算 (OLAP) 等工作。</p><p>原有架構底層存儲系統普通採用百度自研表格存儲（Table）來完成數據的讀、寫、存工作，此存儲系統更偏向於 OLTP 業務場景。隨着近幾年大數據計算、AI 模型訓練的演進，對存儲系統 OLAP 業務場景的依賴越來越重，如數據關係分析、全網數據分析、AI 樣本數據管理篩選。在 OLTP 存儲場景的架構下，支持 OLAP 存儲需求對資源成本、系統吞吐、業務時效帶來了巨大挑戰。為此我們在百度自研表格存儲之外，結合業務實際 workflow 針對性優化，增加構建了一套符合業務需求的 HTAP 表格存儲系統。</p><p>以下我們將主要介紹在百度內容 HTAP 表格存儲系統設計落地中的一些技術思考，文中的優劣歡迎各位積極交流探討。</p><h1><strong>02 存儲設計</strong></h1><h2><strong>2.0 需求分析</strong></h2><p>整套存儲設計需要解決的核心問題是——如何在 OLTP 存儲系統中支持 OLAP workflow？OLAP workflow 在 OLTP 存儲系統上帶來的兩個最主要的問題是：嚴重的 IO 放大率、存算耦合。</p><ul><li><p><strong>嚴重的 IO 放大率。</strong> IO 放大率主要來自兩方面，如下圖，數據行篩選、數據列篩選。</p></li><li><p>數據行篩選。在表格存儲中，數據按照主鍵從小到大排列，OLAP workflow 根據條件篩選過濾出符合條件的數據行，會帶來嚴重的 IO 放大。</p></li><li><p>數據列篩選。表格存儲是寬表結構，業務在一次查詢中只會獲取部分列，但數據是以行結構保存，需要獲取整行再提取出需要的字段，依舊會帶來嚴重的 IO 放大。</p></li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-cc5c360c450291bee357c9a5632d576e8ed.jpg" alt="圖片" referrerpolicy="no-referrer"></p><p><strong><strong>△圖 2.1</strong></strong></p><ul><li><p><strong>存算耦合。</strong> 存算耦合主要來自兩方面，如下圖，存儲節點資源冗餘、存儲空間放大。</p></li><li><p>存儲節點資源冗餘。在一個存儲節點中，OLTP vs OLAP 佔用的計算資源佔比是 3:7，為滿足 OLAP 需要，就需要對存儲節點進行擴容，然而存儲節點的擴容又不僅僅是計算資源。同時，OLAP 任務是間歇性的，就會造成忙時供給不足，閒時資源冗餘等情況。</p></li><li><p>存儲空間放大。為支持每一個 OLAP 任務的數據訪問，存儲引擎需要為每一個 workflow 創建對應的 Snapshot，保證 workflow 完成前所依賴的所有數據文件均有效。當 OLAP workflow 耗時過長時，會導致 Compaction 後數據文件無法及時清理的情況，造成存儲空間放大。</p></li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-7c15a38faaa247cb1194d9da0a9860adfc7.jpg" alt="圖片" referrerpolicy="no-referrer"></p><p><strong><strong>△圖 2.2 Node</strong></strong></p><h2><strong>2.1 架構設計</strong></h2><p><img src="https://oscimg.oschina.net/oscnet/up-68e84014dab2413ec365d50f414521c0e30.jpg" alt="圖片" referrerpolicy="no-referrer"></p><p><strong><strong>△圖 2.3</strong></strong></p><p>1.架構採用業界 HTAP 主流設計思想，將 OLTP 和 OLAP workflow 拆分到兩套存儲系統中，如 F1 Lightning、ByteHTAP，在 SDK 層根據任務類型分發到不同的存儲系統中。</p><p>2.OLTP 存儲系統——Neptune，採用 Multi-Raft 分佈式協議組建存儲集羣，採用本地磁盤 (SSD/HDD 等) + 百度分佈式文件系統﻿AFS 組成存儲介質。</p><p>3.OLAP 存儲系統——Saturn，Serverless﻿設計模式，無常駐 Server，即用即加載，貼合 OLAP workflow 的不確定性和間歇性。</p><p>4.OLTP 與 OLAP 存儲系統間，採用數據文件硬鏈的方式進行數據同步，全版本替換，成本低、速度快，充分貼合 Saturn Serverless 設計模式。</p><p>如上架構設計圖，可將 OLTP 與 OLAP workflow 拆分到兩套獨立的系統中，解決上述提到的存算耦合問題。</p><ul><li><strong>解決存儲空間放大問題。</strong> 空間放大主要帶來的問題是存儲節點成本，Workflow 分離的架構將 OLAP 需要的數據文件採用 AFS 低成本存儲，減少了對存儲節點存儲空間的壓力。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-b22a36ff93e15931ca4180beed4b512fe7b.jpg" alt="圖片" referrerpolicy="no-referrer"></p><p><strong><strong>△圖 2.4</strong></strong></p><p>OLAP 存儲系統的數據寫入並沒有使用常見的 log redo 或 raft learner 模式，最主要還是在保證 OLAP 存儲系統的 Serverless 特性的同時，又能實時感知到 OLTP 系統的最新寫入結果。</p><ul><li><strong>解決存儲節點資源冗餘問題。</strong> 拆分後，分佈式存儲節點將大量重型 OLAP workflow 轉移到 OLAP 存儲——Saturn 中，將極大減少存儲節點的計算壓力。同時，OLAP 存儲的 Serverless 設計模式又可貼合 workflow 的不確定性和間歇性。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-153715fc7725ae774565192dbffda2cc35f.jpg" alt="圖片" referrerpolicy="no-referrer"></p><p><strong><strong>△圖 2.5 Saturn Serverless 模型</strong></strong></p><p>計算節點可以部署在任意計算集羣中，如 Map-Reduce、自研計算節點 Pioneer 等，在 SDK 中直接初始化存儲引擎，從 AFS 中訪問對應分片的數據文件。計算節點可充分利用雲原生系統（PaaS）的彈性資源，解決資源常駐冗餘問題。</p><h2><strong>2.2 存儲引擎優化思路</strong></h2><p>結合上面的分析以及設計思路，已有效地解決了存算耦合問題。在本節中，我們將重點介紹解決 IO 放大率問題的一些優化思路。</p><h3><strong>2.2.1 數據行分區</strong></h3><p>數據行分區思想在很多 OLAP 存儲系統中很常見，如當前比較流行的一些數據湖架構，ClickHouse、IceBerg 等。在表格存儲中，數據行分區的好處是可以極大減少在數據行篩選過程中 IO 放大率。以下是我們在存儲引擎中支持數據行分區的設計思路：</p><p><img src="https://oscimg.oschina.net/oscnet/up-16c479190869db7ef1b8549583f8e374356.jpg" alt="圖片" referrerpolicy="no-referrer"></p><p><strong><strong>△圖 2.6</strong></strong></p><p>數據行分區的思想在 OLTP 和 OLAP 存儲引擎中都有使用，OLTP 存儲引擎以數據行分區構建的數據文件可直接被 OLAP 存儲引擎加載，減少了 OLAP 存儲的數據構建工作。</p><p>數據行分區在 Write、Read、Scan 場景下的處理流程分別為：</p><p><strong>1.Write 操作。</strong> Write 時會根據請求中的特殊 Region 描述，如分區鍵，找到需要寫入的 Region-Index 和 Region 上下文，前者保存 Key 的分區索引信息，後者中保存實際數據，操作記錄由 WAL 中保存。</p><p><strong>2.Read 操作。</strong> Read 操作相比通常直接訪問數據，需要多進行一次分區索引訪問，為減少多一次訪問帶來的性能折損，我們將分區索引信息全內存化。由於索引數據非常小，因此全內存化是可接受的。</p><p><strong>3.Scan 操作。</strong> Scan 操作相比之下沒有任何變更，但在 Scan 特殊分區場景下可大量減少 IO 放大。因為相比之前的行過濾模式，可直接跳過大量不需要的數據。</p><p>在業務存儲支持時，合理設置數據行分區，可極大減少數據行篩選過程中的 IO 放大率。</p><h3><strong>2.2.2 增量數據篩選</strong></h3><p>在實際業務中，有很大一個場景時獲取近期（如近幾個小時、近一天）有值變化的數據，常規的做法是 Scan 全量數據，以時間區間作為過濾條件，篩選出符合條件的結果。但如此的篩選邏輯會帶來嚴重的 IO 放大，因為滿足條件的結果只佔全量結果的一小部分。為此，我們在引擎層調整優化 Compaction 時機以及調整篩選流程，減少增量數據篩選過程中需要訪問的數據文件集合，降低 IO 放大，業務提速。</p><p><img src="https://oscimg.oschina.net/oscnet/up-28e419445dc2f9344a66992d060635fc372.jpg" alt="圖片" referrerpolicy="no-referrer"></p><p><strong><strong>△圖 2.7 LSMT</strong></strong></p><h3><strong>2.2.3 動態列結構</strong></h3><p>在 OLAP 存儲引擎中，還存在一類訪問場景會帶來 IO 放大問題，數據列篩選。在表格存儲系統中，一個 Key 可以包含多個列族（Column Family），一個列族中可以包含任何多個數據字段，這些字段以行結構存儲在同一物理存儲（Locality Group）中，當篩選特定數據列時，需要進行整行讀取，然後過濾出需要的字段，這也將帶來 IO 放大問題。</p><p>同時，OLAP workflow 的訪問不確定性導致存儲層無法及時調整數據在物理存儲中的結構。為此，我們引入動態列結構的概念，在邏輯層對業務透明，在物理層根據近期 OLAP workflow 特性及時調整物理結構。</p><p><img src="https://oscimg.oschina.net/oscnet/up-8d6c124c36fafb61961a775028d9af52a2e.jpg" alt="圖片" referrerpolicy="no-referrer"></p><p><strong><strong>△圖 2.8</strong></strong></p><p>如上圖，在邏輯存儲中，分為兩個 LG，根據 workflow 特性，把業務常用的訪問字段在 Compaction 階段存放在同一物理存儲結構中，反之，這樣可以減少字段篩選階段的 IO 放大率。</p><p>動態列結構只在 OLAP 存儲引擎中生效，我們在原有 OLAP 存儲中引入 workflow 收集以及 compaction 任務，將從 OLTP 存儲中同步的數據構建成更適合 OLAP 場景的存儲結構。</p><h1><strong>03 計算與調度</strong></h1><p>在本節，我們將介紹在此 HTAP 表格存儲系統基礎上，如何設計實現任務計算和調度系統，簡化業務使用成本，提升業務效率。</p><p>在大量搜索內容 OLAP workflow 中，從表格存儲系統中提取篩選數據只佔全部任務的一小部分，大量任務需要對數據進行加工處理得到需要的結果。常規的做法是多任務串聯，這樣做的缺陷是大量中間臨時數據存儲開銷。</p><p>為此我們為 HTAP 表格存儲系統構建了一套計算與調度系統，系統兩大特點：任務開發 SQL 化、數據處理 FaaS 化。</p><h2><strong>3.1 SQL 化與 FaaS 化</strong></h2><p>我們充分貼合上述存儲系統特性，自研了一套數據查詢語言——KQL，KQL 類似於 SQL Server 語法。同時，又結合存儲系統特性以及計算框架，支持一些特殊語言能力，最主要的是能支持原生 FaaS 函數定義，當然也支持外部 FaaS 函數包依賴。</p><p>如下是一段 KQL 語句例子以及説明：</p><pre><code>function classify = { #定義一個 Python FaaS 函數
def classify(cbytes, ids):
    unique_ids=set(ids)
    classify=int.from_bytes(cbytes, byteorder='little', signed=False)
    while classify != 0:
        tmp = classify &amp; 0xFF
        if tmp in unique_ids:
            return True
        classify = classify &gt;&gt; 8
    return False
}

declare ids = [2, 8];
declare ts_end = function@gettimeofday_us();      # 調用 Native Function 獲取時間
declare ts_beg = @ts_end - 24 * 3600 * 1000000;   # 四則運算

select * from my_table region in timeliness       # 利用存儲分區特性，從 my_table 中的 timeliness 分區獲取數據
where timestamp between @ts_beg and @ts_end       # 利用存儲增量區間特性，篩選增量數據
    filter by function@classify(@cf0:types, @ids) # 在 Filter 階段調用自定義 FaaS 函數
    convert by json outlet by row;
desc:                                             # 對計算框架進行特殊描述
    --multi_output=true;
</code></pre><h2><strong>3.2 任務生成與調度</strong></h2><p><img src="https://oscimg.oschina.net/oscnet/up-7f6a9771215fe2d777fb304365460654cba.jpg" alt="圖片" referrerpolicy="no-referrer"></p><p><strong>1.任務生成。</strong> 在任務生成階段將 KQL 語句解析優化成相關的調度任務，一個 Job 包含多個 Task。</p><p><strong>2.任務調度。</strong></p><ul><li><p>任務調度的計算節點可以是 Map-Reduce，也可以是自研計算集羣 Pioneer，負責不同計算場景。</p></li><li><p>任務運行容器負責數據依賴部署和運行計算框架。</p></li><li><p>計算框架採用插件化設計思想，依託 KQL 語言進行差異化描述。計算框架的最大特點是，可在數據處理節點執行用户自定義 FaaS 函數。</p></li></ul><h1><strong>04 總結</strong></h1><p>當前 HTAP 表格存儲系統已在全網網頁數據離線加速、AI 模型訓練數據管理、圖片存儲以及各類在線離線業務場景落地，數據存儲規模達&gt;15P，業務提速&gt;50%。</p><p>與此同時，隨着大模型時代的到來，對存儲系統帶來了更多的挑戰，我們也將繼續深度優化，設計更高性能、高吞吐的 HTAP 表格存儲系統。</p><p>——END——</p><p><strong>推薦閲讀</strong></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247574408%26idx%3D1%26sn%3Dfc0f0b325a348a401d647f3cb048b68a%26chksm%3Dc03f93f4f7481ae2c964c6fd7ab54a8291edb7b2dae16c20c5e30e998a0bceb418d631d40abf%26scene%3D21%23wechat_redirect" target="_blank">大模型時代，「人人可 AI」的百度開發者平台長什麼樣？</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247574315%26idx%3D1%26sn%3De1fe788ba3ae4f0b2d503bfac899cefa%26chksm%3Dc03f9357f7481a413ba7325eb9064078f097e7586136b885d11db67b4a5955412312d2428869%26scene%3D21%23wechat_redirect" target="_blank">數十萬 QPS，百度熱點大事件搜索的穩定性保障實踐</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247574095%26idx%3D1%26sn%3Dbc2fb4ff4ef2fedbf467456ed3ad3b6f%26chksm%3Dc03f9233f7481b25f10d39119e86c77e581541b2e5f9bac4034412bd55e4b243f1adcb813333%26scene%3D21%23wechat_redirect" target="_blank">百度搜索萬億規模特徵計算系統實踐</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247574048%26idx%3D1%26sn%3Dc4af5228dcd9b36e2dfe2849d01f4d19%26chksm%3Dc03f925cf7481b4a10d5cda95117e81cde6573757f545555fa7d17564f6ead73c48d1b0c3ce7%26scene%3D21%23wechat_redirect" target="_blank">通過 Python 腳本支持 OC 代碼重構實踐（三）：數據項使用模塊接入數據通路的適配</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247574047%26idx%3D1%26sn%3D11c8f8f69e77103a90016a5a018e1f87%26chksm%3Dc03f9263f7481b75bebb199cfb037d5d1aea7f5a39804c1d61045f4b4bb32240167f0d5ee597%26scene%3D21%23wechat_redirect" target="_blank">百度搜索智能化算力調控分配方法</a></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 02:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4939618/blog/10314916</guid>
            <link>https://my.oschina.net/u/4939618/blog/10314916</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[雷軍迴應「小米沒有核心技術、組裝廠」]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>雷軍近日在武漢大學第九屆校友珞珈論壇上<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FVn6lja1e24DbQbyFneyesA" target="_blank">表示</a>，不少人對小米還有很多誤解，總有人説，「小米就是組裝廠，小米研發投入少，小米沒有核心技術」。</p><p>對此，他迴應稱，「我們不是組裝廠，我們之前一個工廠也沒有，要黑我們，可以黑我們是皮包公司，不要黑我們是組裝廠」。2022 年小米的研發投入了 162 億元，預計 2023 年將達到 200 億元，未來五年還會持續投入超過 1000 億元用於技術研發。</p><p><img height="331" src="https://static.oschina.net/uploads/space/2023/1201/134556_cynq_4252687.png" width="500" referrerpolicy="no-referrer"></p><p>並舉例道，即便在被視為小米最不擅長的 5G 標準專利領域。在今年中國信息通信研究院發佈的《5G 標準必要專利聲明有效全球專利族企業排名》中，華為是全球老大，佔比 14%；而小米專利佔比 4.1%，已經進入了全球前十。</p><p>雷軍表示，自己曾經也因被誤解苦惱過，「後來我想明白了，沒必要糾結，關鍵還得看自己的的成長。反過來説，大家拿 13 歲的小米，跟蘋果比、三星比、華為比，是對我們有極高的期待、極高的要求。只不過，飯是一口一口吃的，路是一步一步走的。我認為，隨着小米研發投入持續加大，實力越來越強，我們一定能憑藉自身不斷地成長，來贏得大家的信任和認可。」</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 02:16:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268957</guid>
            <link>https://www.oschina.net/news/268957</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[崑崙萬維發佈「天工 SkyAgents」平台，零代碼打造 AI 智能體]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">12 月 1 日，崑崙萬維正式發佈「天工 SkyAgents」平台，助力大模型走入千家萬户。「天工 SkyAgents」是國內領先的 AI Agents 開發平台，基於崑崙萬維「天工大模型」打造，具備從感知到決策，從決策到執行的自主學習和獨立思考能力。用户可以通過自然語言構建自己的單個或多個「私人助理」。並且將不同任務模塊化，通過操作系統模塊的方式，實現執行包括問題預設、指定回覆、知識庫創建與檢索、意圖識別、文本提取、http 請求等任務。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">在「天工 SkyAgents」平台上，用户可以通過自然語言和簡單操作，無需代碼編程，即可在幾分鐘之內部署屬於自己的 AI Agents，完成行業研究報告、單據填寫、商標設計、甚至健身計劃、旅行航班預定等多項私人定製需求。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">對於企業用户而言，「天工 SkyAgents」則可以按需拼裝成企業 IT、智能客服、企業培訓、HR、法律顧問等眾多個性化的應用，並支持一鍵服務部署，確保其在不同業務系統中的無縫接入。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><img alt="" height="713" src="https://oscimg.oschina.net/oscnet/up-b2d9f445592d6b227dc00b733eb3b8eff7b.jpg" width="1268" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">AI Agent 一般譯為「人工智能體」或「人工智能代理」，是一種能夠感知環境、進行決策和執行動作的智能實體。不同於傳統的人工智能程序，基於大模型能力打造的 AI Agent 具備通過獨立思考、調用工具去逐步完成給定目標的能力。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><strong><span><span><span><span style="color:#1f2329">模塊交互，更易用</span></span></span></span></strong></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">當前，多數用户既不具備代碼開發經驗，也不具備訓練大模型提示詞工程（Prompt Engineering）的能力，難以將眾多日常生活的實際需求通過對話問答形式快速實現，無法將大模型能力發揮到極致。「天工 SkyAgents」正是為瞭解決這一痛點而研發的一款產品。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">「天工 SkyAgents」通過將 Agent-to-Agent，Human-to-Agent 的交互模式集成在高度模塊化的大語言模型構件中，實現完全無代碼化操作，並通過簡單直觀的圖形界面進行任務設定和部署，為廣大用户提供了一個全面、高效且易於使用的 AI 產品，能夠幫助用户輕鬆利用大模型能力應對複雜任務，滿足日常需求、驅動業務增長、激發靈感創新。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left">&nbsp;</p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><strong><span><span><span><span style="color:#1f2329">數據導入，更靈活</span></span></span></span></strong></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><img alt="" height="713" src="https://oscimg.oschina.net/oscnet/up-6d36ddc7cbd9554af55070f2b41d742d529.jpg" width="1268" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">大模型能力雖強，但也有其天生的弱項。一方面，大模型通過參數訓練獲得的知識只能停留在某一時點，更新成本很高；另一方面，大模型的訓練數據通常以通用知識為主，細分領域的數據往往缺乏。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">為瞭解決這一問題， 「天工 SkyAgents」具備數據檢索增強（RAG）的能力， 能夠支持導入更多格式和更大規模的數據和知識，相當於給大模型增加了「智能知識庫外腦」。結合人工智能技術，平台能夠從導入的數據中自動識別關鍵信息點，形成結構化的知識體系。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">從此，「天工 SkyAgents」不僅能夠成為你的私人 AI 助理，還能是你的私人法律專家、私人人力顧問、私人 IT 大神……</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><strong><span><span><span><span style="color:#1f2329">技術領先，更強大</span></span></span></span></strong></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">對話問答類大模型應用遇到需要多流程、多步驟處理的複雜業務，往往要麼容易產生「幻覺」，輸出錯誤回答，要麼容易錯步、漏步、跳步，直接輸出結果。然而不幸的是，人們在現實生活中遇到的大多數問題，往往都是複雜流程任務。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">為瞭解決這一問題，「天工 SkyAgents」在原有大模型技術基礎上進一步了強化自然語言處理能力，輔之以先進的目標理解與工作流自動化技術，使得「天工 SkyAgents」能更精準地識別和解析複雜的業務目標，自動生成定製化的工作流程，甚至預測並建議潛在的優化方案。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><img alt="" height="713" src="https://oscimg.oschina.net/oscnet/up-c7e6afa126be7553e35e2f575f2b5953f3c.jpg" width="1268" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">本次「天工 SkyAgents」的發佈，將有助於缺乏代碼開發能力的個人與中小企業積極擁抱大模型技術，以簡單的模塊化操作，設計出專屬於自己的大模型 AI 助手，從而推動大模型技術的行業落地與普惠化，助力大模型走入千家萬户，為人工智能產業發展貢獻力量。前往天工開放平台預約申請：</span></span></span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fagentspro.cn%2F%23%2F" target="_blank"><span><span><span><span style="color:#3370ff">https://agentspro.cn/#/</span></span></span></span></a></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><strong><span><span><span><span style="color:#1f2329">崑崙萬維集團</span></span></span></span></strong></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">崑崙萬維於 2008 年成立，2015 年深交所上市，從遊戲起家到 AII In AGI 與 AIGC， 全面構建多元化的業務生態，至今十餘年的發展，我們始終致力於為全球用户提供領先的互聯網產品與服務。現今，崑崙萬維還在不斷探索 AI 領域的無限可能。目前崑崙萬維逐漸構建了 AGI 與 AIGC、海外信息分發與元宇宙、投資三大業務板塊，業務覆蓋全球一百多個國家和地區，全球平均月活躍用户近 4 億。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">憑藉對科技發展趨勢的超前預判，崑崙萬維早在 2020 年便已開始佈局 AIGC 領域。至今，已積累近三年的相關工程研發經驗，並建立了行業領先的預訓練數據深度處理能力，崑崙萬維也在人工智能領域取得了重大突破，目前已形成 AI 大模型、AI 搜索、AI 遊戲、AI 音樂、AI 動漫、AI 社交六大 AI 業務矩陣，是國內模型技術與工程能力最強，佈局最全面，同時全身心投入開源社區建設的企業之一。</span></span></span></span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 30 Nov 2023 09:56:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269081</guid>
            <link>https://www.oschina.net/news/269081</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Unity 裁員 265 人]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Unity 在 2021 年以 16.25 億美元收購了 Peter Jackson 聯合創辦的視覺特效公司 Weta Digital 的工程技術部門，與美術部門 Weta FX 達成服務協議。</p><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.reuters.com%2Ftechnology%2Funity-software-cut-38-staff-company-reset-2023-11-28%2F" target="_blank">根據路透社的報道</a></u>，現在作為公司重組 (company reset) 的一部分它宣佈<strong>終止服務協議裁掉相關的 265 名員工，約佔員工總數的 3.8%</strong>。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/1130/170155_SD5i_2720166.png" referrerpolicy="no-referrer"></p></blockquote><p>Unity 是規模最大的遊戲引擎開發商，目前還有 7000 名員工。它同時宣佈將關閉部分辦事處，縮小辦公面積，不再強制要求員工每週前往辦公室工作三天。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">9 月份，Unity 宣佈了新的收費規則，此舉引起業內人士的強烈不滿。之後 Unity 向公眾和業內人士道歉，並調整了收費規則。</p><ul><li><u><em><a href="https://www.oschina.net/news/257929/unity-runtime-fee">Unity 引擎明年起根據遊戲安裝量收費 (runtime fee)</a></em></u></li><li><u><em><a href="https://www.oschina.net/news/258513/unity-apologize-for-runtime-fee">Unity 道歉：將修改 "runtime fee" 收費政策</a></em></u></li><li><u><em><a href="https://www.oschina.net/news/258477/wait-is-unity-allowed-to-just-change-its-fee-structure-like-that">走近 「收費門」：互相矛盾的服務條款導致 Unity 面臨被起訴的風險</a></em></u></li></ul><p>Unity CEO John Riccitiello 上個月因受爭議的運行時費用而<u><a href="https://www.oschina.net/news/261101/unity-ceo-john-riccitiello-is-retiring">離職</a></u>，前 IBM 總裁 Jim Whitehurst 擔任臨時 CEO，Whitehurst 表示為了重新專注於公司業務，更多的變化即將到來。雖然這對受影響的員工來説是一個挑戰，但對於公司來説，這可能是一個重新調整和提高效率的機會。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 30 Nov 2023 08:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268858/unity-software-cut-38-staff</guid>
            <link>https://www.oschina.net/news/268858/unity-software-cut-38-staff</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[微軟 2023 款醜毛衣：基於 WinXP 藍天白雲壁紙]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Windows <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblogs.windows.com%2Fwindowsexperience%2F2023%2F11%2F28%2Fwindows-brings-nostalgia-to-the-holidays-with-the-return-of-windows-ugly-sweaters-this-year-featuring-the-bliss-backdrop%2F" target="_blank">宣佈</a>推出 2023 新款醜毛衣 (Windows Ugly Sweater)：基於經典 WinXP 系統中標誌性的 Bliss 壁紙 —— 藍天白雲青草地。</span></p><p><span style="color:#000000">這張照片由攝影師 Charles O'Rear 在 1996 年拍攝於加利福尼亞州索諾瑪縣，微軟在 2000 年以「不到六位數」的價格買下了版權。微軟於 2018 年首次推出 Windows 醜毛衣，今年是連續推出的第 6 年。</span></p><p><span style="color:#000000">毛衣尺碼涵蓋 S-3XL，在微軟 Xbox Gear Shop <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgear.xbox.com%2Fproducts%2Fwindows-merry-blissmas-knit-holiday-sweater" target="_blank">官網上限量發售</a>（目前已售罄）。售價在人民幣 500 元左右，微軟方面表示售出所得全部收益將捐給大自然保護協會。預計購買者將於 12 月 2 日至 17 日期間收到貨。</span></p><p><span style="color:#000000"><img alt="" height="266" src="https://oscimg.oschina.net/oscnet/up-93a909038c76d1e72eb6c4f2167c779fde2.jpg" width="300" referrerpolicy="no-referrer"><img alt="" height="260" src="https://oscimg.oschina.net/oscnet/up-a1683a329b2c046f9927ac467d8e74448cd.jpg" width="300" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000"><img alt="" height="276" src="https://oscimg.oschina.net/oscnet/up-c476b2849bbc0f49e47b35265dbace5e969.jpg" width="275" referrerpolicy="no-referrer">&nbsp;<img alt="" height="276" src="https://oscimg.oschina.net/oscnet/up-44dd702c39368126e2e5e120bc91a44071b.jpg" width="300" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000"><img alt="" height="298" src="https://oscimg.oschina.net/oscnet/up-bbe8781e5f77acb8ce6d5bc96add615538c.jpg" width="300" referrerpolicy="no-referrer">&nbsp;<img alt="" height="302" src="https://oscimg.oschina.net/oscnet/up-7dc53486d194b5b6bebdb5e2dd92ae46c79.jpg" width="300" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">微軟還發布了新版的 Bliss 壁紙，感興趣的用户可前往&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgear.xbox.com%2Fpages%2Fwindows" target="_blank">Xbox Gear Shop</a><span style="background-color:#ffffff; color:#000000"><span>&nbsp;</span></span>進行下載。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 30 Nov 2023 08:56:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268857/windows-2023-ugly-sweater</guid>
            <link>https://www.oschina.net/news/268857/windows-2023-ugly-sweater</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[1-10 月我國規上互聯網企業完成業務收入 14039 億元]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#000000"><span style="background-color:#ffffff">工信部最新</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.miit.gov.cn%2Fgxsj%2Ftjfx%2Fhlw%2Fart%2F2023%2Fart_a2242dabe1314989a9afcc8649a36122.html" target="_blank">發佈</a><span style="background-color:#ffffff; color:#000000"><span style="background-color:#ffffff">的&nbsp;2023 年 1－10 月份互聯網和相關服務業運行情況指出，</span></span><span style="color:#070707">1－10 月份，互聯網業務收入增速明顯提升，利潤總額保持兩位數增幅，行業總體呈現加速增長態勢。</span></p><h4><strong><span>一、總體情況</span></strong></h4><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>互聯網業務收入</span></strong><strong><span>增速明顯提升</span></strong><strong><span>。</span></strong><span>1</span></span><span>－10 月份</span><span><span>，我國規模以上互聯網和相關服務企業</span><span><span>1</span></span><span>（以下簡稱互聯網企業）完成互聯網業務收入</span></span><span>14039 億元，同比增長 5.9%</span><span><span>。</span></span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><img height="281" src="https://oscimg.oschina.net/oscnet/up-aed970eec025fa72e2a209262a1ba34bedf.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>利潤</span></strong><strong><span>總額</span></strong><strong><span>保持兩位數增幅</span></strong><strong><span>。</span></strong><span>1</span></span><span>－10 月份</span><span><span>，我國規模以上互聯網企業營業成本同比增長</span></span><span>9.8%，增速較</span><span>前三季度提升 2.8</span><span>個百分點。實現利潤總額 1074 億元，同比增長 10</span><span>%。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><img height="284" src="https://oscimg.oschina.net/oscnet/up-a54a559ddce68541bdf78b14b94f466b070.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>研發經費</span></strong><strong><span>降幅有所收窄</span></strong><strong><span>。</span></strong><span>1</span></span><span>－10 月份</span><span><span>，我國規模以上互聯網企業共投入研發經費</span></span><span>754.8 億元，同比下降 2.6</span><span>%。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><img height="280" src="https://oscimg.oschina.net/oscnet/up-03ce46c36b22cd0f1154f5280e14bfc1130.png" width="500" referrerpolicy="no-referrer"></p><h4><strong><span>二、分領域情況</span></strong></h4><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>（一）信息服務領域企業</span></strong><strong><span>收入基本穩定</span></strong><strong><span>。</span></strong><span>1</span></span><span>－10 月份</span><span><span>，以信息服務為主的企業（包括新聞資訊、搜索、社交、遊戲、音樂視頻等）互聯網業務收入同比</span></span><span>下降 0.3</span><span>%。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>（二）生活服務領域企業收入</span></strong><strong><span>快速增長</span></strong><strong><span>。</span></strong><span>1</span></span><span>－10 月份</span><span>，以提供生活服務為主的平台企業（包括本地生活、租車約車、旅遊出行、金融服務、汽車、房屋住宅等）互聯網業務收入同比增長</span><span>19.2%。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>（三）網絡銷售領域企業收入</span></strong><strong><span>維持較高增勢</span></strong><strong><span>。</span></strong><span>1</span></span><span>－10 月份</span><span>，主要提供網絡銷售服務的企業（包括大宗商品、農副產品、綜合電商、醫療用品、快遞等）互聯網業務收入同比增長</span><span>33.5%。</span></p><h4><strong><span>三、分地區情況</span></strong></h4><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>中</span></strong><strong><span>部地區互聯網業務收入增</span></strong><strong><span>速轉正</span></strong><strong><span>。</span></strong><span>1</span></span><span>－10 月份</span><span><span>，東部地區完成互聯網業務收入</span></span><span>12589 億元，同比增長 6.5</span><span>%，佔全國互聯網業務收入的比重為</span><span>89.7%。中部地區完成互聯網業務收入</span><span><span>606.8</span></span><span>億元，同比增長 6.5%。西部地區完成互聯網業務收入</span><span>811.8</span><span>億元，同比下降 1.4</span><span>%。東北地區完成互聯網業務收入 30.8</span><span>億元，同比下降 29.1</span><span>%。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><img height="246" src="https://oscimg.oschina.net/oscnet/up-b9c82dda5a2c5850b3be631c40013c78b48.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>長三角</span></strong><strong><span>地區互聯網業務收入</span></strong><strong><span>保持較快</span></strong><strong><span>增長</span></strong><strong><span>。</span></strong><span>1</span></span><span>－10 月份</span><span><span>，</span></span><span>京津冀地區完成互聯網業務收入 5503 億元，同比增長 5%，增速較</span><span>前三季度提升 2.1</span><span>個百分點，佔全國互聯網業務收入的比重為 39.2%。</span><span>長三角</span><span>地區完成互聯網業務收入 5242 億元，同比增長 13.2%，增速較</span><span>前三季度提升 0.1</span><span>個百分點，佔全國互聯網業務收入的比重為 37.3%。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><img height="308" src="https://oscimg.oschina.net/oscnet/up-ec4e5d5ed9972befcb9d85f90de1abcea2c.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>半數</span></strong><strong><span>地區互聯網業務</span></strong><strong><span>增速實現正增長</span></strong><strong><span>。</span></strong><span>1</span></span><span>－10 月份</span><span>，互聯網業務累計收入居前</span><span>5 名的</span><span>北京</span><span>（增長 2.6</span><span>%）、上海</span><span>（增長 18.6</span><span>%）、浙江</span><span>（增長 4.1%）、</span><span>廣東</span><span>（下降 7%）和天津（增長</span><span><span>18.8</span></span><span>%）共完成業務收入</span><span>11755</span><span>億元，同比增長 6.4</span><span>%，佔全國（扣除跨地區企業）比重達</span><span>83.7%。全國互聯網業務增速實現正增長的省（區、市）有 15 個。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><img height="250" src="https://oscimg.oschina.net/oscnet/up-bddc4330fb21cccc49b41813c5925ea648d.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:2px; margin-right:0; text-align:justify"><span><strong><span>附註：</span></strong>1.規模以上互聯網和相關服務企業口徑由上年互聯網和相關服務收入 500 萬元以上調整為 2000 萬元及以上，文中所有同比增速均按可比口徑計算。自 2023 年 10 月起，規模以上互聯網和相關服務業企業庫已按照 2022 年報更新調整。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 30 Nov 2023 02:38:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268967</guid>
            <link>https://www.oschina.net/news/268967</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Java 表達式引擎選型調研分析]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><p><span style="letter-spacing: 1px;display: none;line-height: 0px;">‍‍</span></p><p style="margin-bottom: 24px;line-height: 1.6em;margin-top: 0px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.22676579925650558" src="https://oscimg.oschina.net/oscnet/73c34fc7-7990-4717-b675-aba8baad56ca.gif" data-type="gif" data-w="1076" style="" referrerpolicy="no-referrer"></p><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;visibility: visible;"><section data-role="paragraph" style="outline: 0px;letter-spacing: 0.544px;visibility: visible;"><section data-role="outer" label="edit by 135editor" style="outline: 0px;visibility: visible;"><section data-role="title" data-tools="135 編輯器" data-id="114995" style="margin-bottom: 24px;outline: 0px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, Arial, sans-serif;visibility: visible;"><section style="margin: 20px auto;outline: 0px;visibility: visible;"><section style="outline: 0px;display: flex;justify-content: flex-start;visibility: visible;"><section style="outline: 0px;display: flex;align-items: center;visibility: visible;"><section style="outline: 0px;color: rgb(34, 34, 34);font-size: 16px;width: 5px;background-color: rgb(10, 77, 209);height: 41.5938px;overflow: hidden;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section style="outline: 0px;color: rgb(34, 34, 34);font-size: 16px;width: 5px;height: 41.5938px;overflow: hidden;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section style="padding: 8px 30px;outline: 0px;background-image: linear-gradient(to left, transparent 0%, transparent 50%, rgb(198, 217, 240) 100%);background-position: initial;background-size: initial;background-repeat: initial;background-attachment: initial;background-origin: initial;background-clip: initial;visibility: visible;"><span style="outline: 0px;color: rgb(2, 30, 170);font-size: 15px;visibility: visible;"><strong style="outline: 0px;visibility: visible;">一、簡介</strong></span></section></section></section></section></section></section></section></section><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"></h1><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">我們項目組主要負責面向企業客户的業務系統，<strong>企業的需求往往是多樣化且複雜的，對接不同企業時會有不同的定製化的業務模型和流程</strong>。我們在業務系統中<strong>使用表達式引擎，集中配置管理業務規則，並實現實時決策和計算，可以提高系統的靈活性和響應能力</strong>，從而更好地滿足業務的需求。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">舉個簡單的例子，假設我們有一個業務場景，在返利系統中，當推廣員滿足一定的獎勵條件時，就會給其對應的獎勵金額。例如某個產品的具體獎勵規則如下：</span></section><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100024223" data-ratio="0.3739612188365651" data-s="300,640" src="https://oscimg.oschina.net/oscnet/1bb246c0-169f-4742-ab48-5956e774e993.png" data-type="png" data-w="361" style="" referrerpolicy="no-referrer"></p><section style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">這個規則看起來很好實現，只要在代碼裏寫幾個 if else 分支就可以了。但是如果返利系統對接了多家供應商，且每家提供的產品的獎勵規則都不同呢？再通過硬編碼的方式寫 if else 似乎就不太好了，每次增加修改刪除規則都需要系統發版上線。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">引入規則引擎似乎就能解決這個問題，規則引擎的一個好處就是可以使業務規則和業務代碼分離，從而降低維護難度，同時它還可以滿足業務人員通過編寫 DSL 或通過界面指定規則的訴求，這樣就可以在沒有開發人員參與的情況下建立規則了，這種説法聽起來似乎很有道理，但在實踐中卻很少行得通。首先，規則引擎有一定的學習成本，即使開發人員使用也需要進行專門的學習，更何況沒有任何編程背景的業務人員，其次，其實現的複雜度也高，如果業務規則複雜，規則制定者對規則引擎內部隱藏的程序流程不瞭解，很可能會得到意想不到的結果，最後，有些規則引擎還存在性能瓶頸。如果對規則引擎和表達式引擎都不熟悉，抽離的業務規則又需要由開發人員來制定，那麼<strong>相比之下表達式引擎就要容易上手得多，其語法更接近 Java，而且有些表達式引擎還會將表達式編譯成字節碼，在執行速度和資源利用方面可能就更有優勢。</strong>所以，對於此類業務場景，使用表達式引擎似乎更加合適一些。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">本文主要對 Java 表達式引擎進行概要性介紹和分析，並提供一定建議，為團隊研發過程中對錶達式引擎的技術選型提供輸入。</span></section><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;visibility: visible;"><section data-role="paragraph" style="outline: 0px;letter-spacing: 0.544px;visibility: visible;"><section data-role="outer" label="edit by 135editor" style="outline: 0px;visibility: visible;"><section data-role="title" data-tools="135 編輯器" data-id="114995" style="margin-bottom: 24px;outline: 0px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, Arial, sans-serif;visibility: visible;"><section style="margin: 20px auto;outline: 0px;visibility: visible;"><section style="outline: 0px;display: flex;justify-content: flex-start;visibility: visible;"><section style="outline: 0px;display: flex;align-items: center;visibility: visible;"><section style="outline: 0px;color: rgb(34, 34, 34);font-size: 16px;width: 5px;background-color: rgb(10, 77, 209);height: 41.5938px;overflow: hidden;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section style="outline: 0px;color: rgb(34, 34, 34);font-size: 16px;width: 5px;height: 41.5938px;overflow: hidden;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section style="padding: 8px 30px;outline: 0px;background-image: linear-gradient(to left, transparent 0%, transparent 50%, rgb(198, 217, 240) 100%);background-position: initial;background-size: initial;background-repeat: initial;background-attachment: initial;background-origin: initial;background-clip: initial;visibility: visible;"><span style="outline: 0px;color: rgb(2, 30, 170);font-size: 15px;visibility: visible;"><strong style="outline: 0px;visibility: visible;">二、技術棧簡介</strong></span></section></section></section></section></section></section></section></section><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: 1.6em;visibility: visible;"></h1><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);visibility: visible;"></h2><section style="margin-top: 24px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: 1.6em;visibility: visible;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">本文將針對</span>AviatorScript 
  <span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">、</span>MVEL 
  <span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">、</span>OGNL 
  <span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">、</span>SpEL 
  <span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">、</span>QLExpress 
  <span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">、</span>JEXL 
  <span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">、</span>JUEL 
  <span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">幾種常見表達式引擎進行選型調研。先簡單介紹一下這幾種表達式引擎。</span></section><span id="OSC_h2_1"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.1 AviatorScript</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">AviatorScript 是一門高性能、輕量級寄宿於 JVM 之上的腳本語言。AviatorScript 可將表達式編譯成字節碼。它原來的定位一直只是一個表達式引擎，不支持 if/else 條件語句，也不支持 for/while 循環語句等，隨着 5.0 的發佈變身為一個通用腳本語言，支持了這些語言特性。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">文檔：https://www.yuque.com/boyan-avfmj/aviatorscript﻿</span></section><span id="OSC_h2_2"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.2 MVEL (MVFLEX Expression Language)</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">MVEL 是一種混合的動態/靜態類型的、可嵌入 Java 平台的表達式語言，MVEL 被眾多 Java 項目使用。MVEL 在很大程度上受到 Java 語法的啓發，但也有一些本質區別，目的是使其作為一種表達式語言更加高效，例如直接支持集合、數組和字符串匹配的操作符，以及正則表達式。最早版本發佈於 2007 年。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">文檔：http://mvel.documentnode.com/﻿</span></section><span id="OSC_h2_3"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.3 OGNL (Object-Graph Navigation Language)</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">OGNL 是 Object-Graph Navigation Language（對象圖導航語言）的縮寫；它是一種表達式語言，用於獲取和設置 Java 對象的屬性，以及其他額外功能，如列表投影和選擇以及 lambda 表達式。於 2005 年發佈 2.1.4 版。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">文檔：https://commons.apache.org/dormant/commons-ognl/language-guide.html﻿</span></section><span id="OSC_h2_4"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.4 SpEL (Spring Expression Language)</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">SpEL 是一種功能強大的表達式語言，支持在運行時查詢和操作對象圖。該語言的語法與 Unified EL 相似，但提供了更多的功能，其中最主要的是方法調用和基本的字符串模板功能。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">文檔：https://docs.spring.io/spring-framework/docs/5.3.x/reference/html/core.html#expressions﻿</span></section><span id="OSC_h2_5"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.5 QLExpress</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">由阿里的電商業務規則、表達式（布爾組合）、特殊數學公式計算（高精度）、語法分析、腳本二次定製等強需求而設計的一門動態腳本引擎解析工具，於 2012 年開源。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">文檔：https://github.com/alibaba/QLExpress﻿</span></section><span id="OSC_h2_6"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.6 JEXL (Java Expression Language)</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">JEXL 旨在促進在 Java 編寫的應用程序和框架中實現動態腳本功能。JEXL 基於對 JSTL 表達式語言的一些擴展實現了一種表達式語言，支持 shell 腳本或 ECMAScript 中的大部分構想。1.0 版發佈於 2005 年。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">文檔：https://commons.apache.org/proper/commons-jexl/reference/syntax.html﻿</span></section><span id="OSC_h2_7"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.7 JUEL (Java Unified Expression Language)</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">JUEL 是統一表達式語言 (EL) 的實現，該語言是 JSP 2.1 標準 (JSR-245) 的一部分，已在 JEE5 中引入。此外，JUEL 2.2 實現了 JSP 2.2 維護版本規範，完全符合 JEE6 標準。於 2006 年發佈 2.1.0 版本，2.2.7 發佈於 2014 年。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">文檔：https://juel.sourceforge.net/guide/start.html﻿</span></section><span id="OSC_h2_8"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.8 Janino</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">Janino 是一個超小、超快的 Java 編譯器，也可以用作表達式引擎，它的性能非常出色，根據官網介紹，Apache Spark、Apache Flink、Groovy 等優秀的開源項目都在用 Janino。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">文檔：http://janino-compiler.github.io/janino/﻿</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">由於 Janino 實際是一個 Java 編譯器，理論上其性能應該更接近於直接執行 Java 代碼，其次作為表達式引擎使用起來比較複雜。因此，下面的對比中，Janino 不參與比較，可以將其作為一個參照。</span></section><span id="OSC_h2_9"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.9 其他</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">如下一些表達式引擎雖然也常見於各技術博客，但由於長期沒有更新維護，因此沒有納入此次選型比較</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">Fel</span></strong></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">Fel 是輕量級的高效的表達式計算引擎。Fel 源自於企業項目，設計目標是為了滿足不斷變化的功能需求和性能需求。項目託管於 Google Code，上次更新是 2012 年，已經十幾年沒有更新了，所以沒有納入此次選型。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">ik-expression</span></strong></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">IK Expression 是一個開源的（OpenSource)，可擴展的（Extensible），基於 java 語言開發的一個超輕量級（Super lightweight）的公式化語言解析執行工具包。2009 年 2 月發佈第一個版本，2009 年 10 月發佈最後一個版本後再沒有新版本發佈，所以沒有納入此次選型。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">JSEL</span></strong></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">JSEL 是一個兼容 JavaScript 運算規則的簡單的表達式解釋引擎，你可以通過 Map 接口，或者 JavaBean 給出一個變量集合，能後通過表達式從這個集合中抽取變量，再通過表達式邏輯生成你需要的數據。2009 年發佈第一個版本，2011 年發佈最後一個版本後未再更新，所以沒有納入此次選型。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">此外規則引擎如 Drools， urule， easy-rules 不參與此次選型比較。相對比較成熟完善的腳本語言如 Groovy 也不參與選型比較。這篇文章主要針對相對輕量簡單的表達式引擎進行選型。</span></section><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;visibility: visible;"><section data-role="paragraph" style="outline: 0px;letter-spacing: 0.544px;visibility: visible;"><section data-role="outer" label="edit by 135editor" style="outline: 0px;visibility: visible;"><section data-role="title" data-tools="135 編輯器" data-id="114995" style="margin-bottom: 24px;outline: 0px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, Arial, sans-serif;visibility: visible;"><section style="margin: 20px auto;outline: 0px;visibility: visible;"><section style="outline: 0px;display: flex;justify-content: flex-start;visibility: visible;"><section style="outline: 0px;display: flex;align-items: center;visibility: visible;"><section style="outline: 0px;color: rgb(34, 34, 34);font-size: 16px;width: 5px;background-color: rgb(10, 77, 209);height: 41.5938px;overflow: hidden;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section style="outline: 0px;color: rgb(34, 34, 34);font-size: 16px;width: 5px;height: 41.5938px;overflow: hidden;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section style="padding: 8px 30px;outline: 0px;background-image: linear-gradient(to left, transparent 0%, transparent 50%, rgb(198, 217, 240) 100%);background-position: initial;background-size: initial;background-repeat: initial;background-attachment: initial;background-origin: initial;background-clip: initial;visibility: visible;"><span style="outline: 0px;color: rgb(2, 30, 170);font-size: 15px;visibility: visible;"><strong style="outline: 0px;visibility: visible;">三、技術棧選型評估</strong></span></section></section></section></section></section></section></section></section><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"></h1><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">選擇表達式引擎，我們希望其社區支持情況良好、實現複雜度適中、執行速度快、安全並且簡單易學。所以，接下來將<strong>從社區支持情況、引入的大小和依賴、性能、安全性、使用案例和語法幾個方面對幾種表達式引擎進行比較評估。</strong></span></section><span id="OSC_h2_10"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.1 社區支持情況</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">社區支持情況可以輔助評估項目的健康度，有問題是不是能及時解決，項目是不是能持續演進等等</span></strong><span style="font-size: 15px;letter-spacing: 1px;">，下面列出了 GitHub star，watch，fork，last commit 等數據，可以作為參考，由於數據隨着時間推移會產生變化，以下僅針對 2023.10.29 的數據進行分析。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><img class="rich_pages wxw-img" data-imgfileid="100024219" data-ratio="0.28055555555555556" src="https://oscimg.oschina.net/oscnet/c39b5f24-498a-493f-a227-256df954a368.png" data-type="png" data-w="1080" style="border-width: 0px;border-style: none;border-color: rgb(235, 238, 245);" referrerpolicy="no-referrer"></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">﻿﻿由於 Spring 項目被廣泛使用，而 SpEl 又是 Spring 的一個子項目，所以從各項數據來看 SpEl 的社區支持情況是最好的。下面先排除 SpEl 分析其他幾個表達式引擎。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">QLExpress，AviatorScript 和 MVEL 在國內使用比較多，這可能是他們 star，watch，fork 數較高的原因。説明這幾個項目受歡迎度，受認可度，影響力應該較高。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">從 issues，pull requests 數來分析，可以看到 MVEL，AviatorScript 和 QLExpress 高於其他腳本引擎，説明他們的用户需求和反饋較多，也可能意味着項目面臨較多問題和挑戰。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">MVEL，JEXL，OGNL 均有較多貢獻者參與。他們的社區協作、項目可持續性方面應該都比較不錯。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">綜合以上分析，除 SpEl 外，QLExpress，AviatorScript 和 MVEL 的社區支持情況都相對較好。</span></strong></section><span id="OSC_h2_11"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.2 引入大小和依賴</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">代碼大小和依賴可以輔助評估代碼的複雜性，下面列出了各個 Github 倉庫的代碼大小，可以作為一個參考（實際並不完全準確反映其實現的複雜性）。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">以下是 2023.10.29 的數據</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;text-align: center;"><img class="rich_pages wxw-img" data-imgfileid="100024218" data-ratio="1.41635687732342" src="https://oscimg.oschina.net/oscnet/afac92d7-a244-4283-bc12-84e3f543152c.png" data-type="png" data-w="269" style="border-width: 0px;border-style: none;border-color: rgb(235, 238, 245);" referrerpolicy="no-referrer"></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">﻿﻿JUEL，QLExpress 代碼大小最小，都在 600 多 KB；其次是 OGNL 1MB 多一點；AviatorScript，MVEL，JEXL 大小都在 2MB 左右；SpEl 由於在 spring-framework 倉庫中，上表中統計的是 spring-framework 的總量，單純看 SpEl 的模塊 spring-expression 的話，大小是 1.3MB 左右。但是其還依賴了 spring-core 和 spring-jcl，再含這兩個的話，大小 7.4MB 左右。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">我們再結合各個項目的依賴來分析一下。</span></section><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="ruby"><code><span class="code-snippet_outer">+- org.mvel:mvel2:jar:2.5.0.Final:compile</span></code><code><span class="code-snippet_outer">+- com.googlecode.aviator:aviator:jar:5.3.3:compile</span></code><code><span class="code-snippet_outer">+- com.alibaba:QLExpress:jar:3.3.1:compile</span></code><code><span class="code-snippet_outer">|  +- commons-beanutils:commons-beanutils:jar:1.8.2:compile</span></code><code><span class="code-snippet_outer">|  |  \- (commons-logging:commons-logging:jar:1.1.1:compile - omitted for conflict with 1.2)</span></code><code><span class="code-snippet_outer">|  \- commons-lang:commons-lang:jar:2.4:compile</span></code><code><span class="code-snippet_outer">+- org.codehaus.janino:janino:jar:3.1.10:compile</span></code><code><span class="code-snippet_outer">|  \- org.codehaus.janino:commons-compiler:jar:3.1.10:compile</span></code><code><span class="code-snippet_outer">+- ognl:ognl:jar:3.4.2:compile</span></code><code><span class="code-snippet_outer">|  \- org.javassist:javassist:jar:3.29.2-GA:compile</span></code><code><span class="code-snippet_outer">+- org.apache.commons:commons-jexl3:jar:3.3:compile</span></code><code><span class="code-snippet_outer">|  \- commons-logging:commons-logging:jar:1.2:compile</span></code><code><span class="code-snippet_outer">+- org.springframework:spring-expression:jar:5.3.29:compile</span></code><code><span class="code-snippet_outer">|  \- org.springframework:spring-core:jar:5.3.29:compile</span></code><code><span class="code-snippet_outer">|     \- org.springframework:spring-jcl:jar:5.3.29:compile</span></code><code><span class="code-snippet_outer">+- de.odysseus.juel:juel-api:jar:2.2.7:compile</span></code><code><span class="code-snippet_outer">+- de.odysseus.juel:juel-impl:jar:2.2.7:compile</span></code><code><span class="code-snippet_outer">+- de.odysseus.juel:juel-spi:jar:2.2.7:compile</span></code></pre></section></pre><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">除了 SpEl 外，QLExpress，OGNL，JEXL 也都有其他依賴。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">如果考慮 commons-beanutils， commons-lang， commons-logging 三個依賴，QLExpress 引入的大小在 10MB 左右。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">如果考慮 javassist 依賴，OGNL 引入的大小是 4MB 多。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">如果考慮 commons-logging 依賴，JEXL 引入的大小是 2.5MB 左右。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">綜合來看，JUEL，AviatorScript，MVEL，JEXL 在引入大小和依賴方面要好於其他。</span></strong></section><span id="OSC_h2_12"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.3 性能</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">較好的性能意味着系統能夠快速地響應用户的請求，減少等待時間，提升體驗。</span></strong></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">性能方面主要通過 JMH 在字面量表達式、含有變量的表達式以及含有方法調用的表達式等使用場景對幾個表達式引擎進行測試。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">JMH（Java Microbenchmark Harness），是用於代碼微基準測試的工具套件，主要是基於方法層面的基準測試，精度可以達到納秒級。該工具是由 Oracle 內部實現 JIT 的大牛們編寫的，他們應該比任何人都瞭解 JIT 以及 JVM 對於基準測試的影響。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">由於不同表達式引擎語法或特性稍有差別，下面測試中對於差異項會進行説明。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">性能測試代碼地址：</span><span style="letter-spacing: 1px;font-size: 15px;">GitHub</span><span style="font-size: 15px;">-https://github.com/howiefh/expression-engine-benchmark</span></section><span id="OSC_h3_13"></span><h3 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.3.1 字面量表達式</span></strong></h3><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;text-align: center;"><img class="rich_pages wxw-img" data-imgfileid="100024215" data-ratio="0.43444730077120824" src="https://oscimg.oschina.net/oscnet/57f87300-b4c2-48fe-bb02-d1bd3b156186.svg" data-type="svg" data-w="1556" style="border-width: 0px;border-style: none;border-color: rgb(235, 238, 245);" referrerpolicy="no-referrer"></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;text-align: left;"><span style="font-size: 15px;letter-spacing: 1px;text-align: justify;background-color: rgb(2, 30, 170);">&nbsp; &nbsp;</span><span style="font-size: 15px;letter-spacing: 1px;text-align: justify;">：1000 + 100.0 * 99 - (600 - 3 * 15) / (((68 - 9) - 3) * 2 - 100) + 10000 % 7 * 71</span></section><section style="line-height: 1.6em;margin-top: 16px;margin-bottom: 16px;"><span style="font-size: 15px;letter-spacing: 1px;background-color: rgb(61, 170, 214);">&nbsp;&nbsp; </span><span style="font-size: 15px;letter-spacing: 1px;">：6.7 - 100 &gt; 39.6 ? 5 == 5 ? 4 + 5 : 6 - 1 : !(100 % 3 - 39.0 &lt; 27) ? 8 * 2 - 199 : 100 % 3</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">説明：</span></strong></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">由於 QlExpress 執行第 2 個表達式時報錯，需要增加圓括號，實際執行的是 6.7 - 100 &gt; 39.6 ? (5 == 5 ? 4 + 5 : 6 - 1) : (!(100 % 3 - 39.0 &lt; 27) ? 8 * 2 - 199 : 100 % 3)</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">結果分析:</span></strong></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">可以明顯看到 JEXL，JUEL，QlExpress 這三個表達式引擎性能明顯不如其他引擎。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">SpEl 在執行第 1 個算數操作時表現出色，但是在執行第 2 個嵌套三元操作時明顯不如 AviatorScript，MVEL，OGNL 引擎。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">此輪測試中 AviatorScript，OGNL，MVEL 表現出色。AviatorScript，OGNL 執行兩個表達式表現都比較出色，其中 AviatorScript 略好於 OGNL。MVEL 在執行第 1 個算數操作時表現最出色，但是在執行第 2 個嵌套三元操作時慢於 AviatorScript，OGNL 引擎。</span></section><span id="OSC_h3_14"></span><h3 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.3.2 含有變量的表達式</span></strong></h3><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;text-align: center;"><img class="rich_pages wxw-img" data-imgfileid="100024217" data-ratio="0.8046272493573264" src="https://oscimg.oschina.net/oscnet/cf08fbe6-72a8-45dc-bf9e-1303f1f07414.svg" data-type="svg" data-w="1556" style="border-width: 0px;border-style: none;border-color: rgb(235, 238, 245);" referrerpolicy="no-referrer"></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;"><span style="letter-spacing: 1px;background-color: rgb(2, 30, 170);">&nbsp; &nbsp;</span>：pi * d + b - (1000 - d * b / pi) / (pi + 99 - i * d) - i * pi * d / b</span><br></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;color: rgb(61, 170, 214);background-color: rgb(61, 170, 214);">&nbsp; &nbsp;</span><span style="font-size: 15px;letter-spacing: 1px;">：piDecimal * dDecimal + bDecimal - (1000 - dDecimal * bDecimal / piDecimal) / (piDecimal + 99 - iDecimal * dDecimal) - iDecimal * piDecimal * dDecimal / bDecimal</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;background-color: rgb(0, 128, 255);">&nbsp; &nbsp;</span><span style="font-size: 15px;letter-spacing: 1px;">：i * pi + (d * b - 199) / (1 - d * pi) - (2 + 100 - i / pi) % 99 == i * pi + (d * b - 199) / (1 - d * pi) - (2 + 100 - i / pi) % 99</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;background-color: rgb(0, 209, 0);">&nbsp; &nbsp;</span><span style="font-size: 15px;letter-spacing: 1px;">：(clientVersion == '1.9.0' || clientVersion == '1.9.1' || clientVersion == '1.9.2') &amp;&amp; deviceType == 'Xiaomi' &amp;&amp; weight &gt;= 4 &amp;&amp; osVersion == 'Android 9.0' &amp;&amp; osType == 'Android' &amp;&amp; clientIp != null &amp;&amp; requestTime &lt;= now&amp;&amp; customer.grade &gt; 1 &amp;&amp; customer.age &gt; 18</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">説明：</span></section><ul class="list-paddingleft-1" style="list-style-type: disc;"><li style="font-size: 15px;"><p style="margin-top: 16px;margin-bottom: 16px;"><span style="letter-spacing: 1px;font-size: 15px;">由於不同的表達式引擎在執行第 2 個表達式時底層實現除法時有所差別，MVEL，AviatorScript，JEXL 執行 decimal.divide(otherDecimal, java.math.MathContext.DECIMAL128)，其他實際執行的是 decimal.divide(otherDecimal, scale, roundingMode)，只是參數略有不同，分析時分組進行。</span></p></li><li style="font-size: 15px;"><p style="margin-top: 16px;margin-bottom: 16px;"><span style="letter-spacing: 1px;font-size: 15px;">由於 QlExpress 執行第 3 個表達式時報錯，不支持非整型 mod 操作，需要增加類型轉換，實際執行的是 i * pi + (d * b - 199) / (1 - d * pi) - (int)(2 + 100 - i / pi) % 99 == i * pi + (d * b - 199) / (1 - d * pi) - (int)(2 + 100 - i / pi) % 99</span></p></li><li><p style="margin-top: 16px;margin-bottom: 16px;"><span style="letter-spacing: 1px;font-size: 15px;">由於 A</span><span style="font-size: 15px;letter-spacing: 1px;">viatorScript 執行第 4 個表達式時報錯，null 的字面量是 nil，實際執行的是 (clientVersion == '1.9.0' || clientVersion == '1.9.1' || clientVersion == '1.9.2') &amp;&amp; deviceType == 'Xiaomi' &amp;&amp; weight &gt;= 4 &amp;&amp; osVersion == 'Android 9.0' &amp;&amp; osType == 'Android' &amp;&amp; clientIp != nil &amp;&amp; requestTime &lt;= now&amp;&amp; customer.grade &gt; 1 &amp;&amp; customer.age &gt; 18</span></p></li></ul><p style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">結果分析：</span></strong></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">第 1 個基本類型包裝類的算術計算 SpEl 最優。其次是 AviatorScript，MVEL，OGNL。而 JEXL，JUEL，QlExpress 則不如其他引擎。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">第 2 個 BigDecimal 類型的算術計算。由於底層實現不同，分為兩組。第 1 組 MVEL、AviatorScript 和 JEXL，AviatorScript 優於 MVEL 優於 JEXL。第 2 組 JUEL，QlExpress，OGNL 和 SpEl，性能由優到差依次是 OGNL，SpEl，JUEL，QlExpress。並且第 1 組由於精度更高，性能明顯都差於第 2 組。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">第 3 個含有基本類型包裝類算數計算的布爾表達式。SpEl 最優，AviatorScript 次之，接下來依次是 OGNL, MVEL，JUEL，JEXL，QlExpress。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">第 4 個含有字符串比較的布爾表達式。AviatorScript，MVEL，JEXL，OGNL 性能優於 JUEL，QlExpress，SpEl。</span></p><span id="OSC_h3_15"></span><h3 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.3.3 含有方法調用的表達式</span></strong></h3><p style="margin-top: 24px;margin-bottom: 24px;text-align: center;"><img class="rich_pages wxw-img" data-imgfileid="100024216" data-ratio="0.6195372750642674" src="https://oscimg.oschina.net/oscnet/f7706f84-f707-493c-8470-1d59715d2194.svg" data-type="svg" data-w="1556" style="border-width: 0px;border-style: none;border-color: rgb(235, 238, 245);" referrerpolicy="no-referrer"></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;background-color: rgb(2, 30, 170);">&nbsp; &nbsp;</span><span style="font-size: 15px;letter-spacing: 1px;">：new java.util.Date()</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;background-color: rgb(61, 170, 214);">&nbsp; &nbsp;</span><span style="font-size: 15px;letter-spacing: 1px;">：s.substring(b.d)</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;background-color: rgb(0, 128, 255);">&nbsp; &nbsp;</span><span style="font-size: 15px;letter-spacing: 1px;">：s.substring(b.d).substring(a, b.c.e)</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">説明：</span></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li style="font-size: 15px;"><p style="margin-top: 16px;margin-bottom: 16px;"><span style="letter-spacing: 1px;font-size: 15px;">由於 JUEL 執行 new java.util.Date() 時報錯，不支持 new 實例，本輪實際執行的是自定義函數 fn:date()</span></p></li><li><p style="margin-top: 16px;margin-bottom: 16px;"><span style="letter-spacing: 1px;font-size: 15px;">由於 A</span><span style="font-size: 15px;letter-spacing: 1px;">viatorScript 執行 s.substring 時報錯，需使用其提供的內部函數，本輪實際執行的是其內部函數 string.substring</span></p></li></ul><p style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">結果分析：</span></strong></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">此輪測試中 SpEl 的表現最優，甚至比 Janino 還要快。MVEL，AviatorScript 次之，在執行構造方法時 MVEL 要好於 AviatorScript。JEXL 表現也比較出色。QlExpress，JUEL，OGNL 這三個表達式引擎則不如其他引擎。</span></p><span id="OSC_h3_16"></span><h3 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.3.4 總結</span></strong></h3><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">綜合以上測試結果，AviatorScript，SpEl，MVEL，OGNL 性能表現相對較好。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">AviatorScript 性能相對較好，表現均衡，但其語法相較其他引擎跟 Java 的差異略大。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">SpEl 除了在個別場景下性能較差，大部分場景表現非常出色，尤其是在字面量和含有變量的算數計算及方法調用場景下。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">MVEL 性能表現相對均衡，含有變量的算術計算略差於 AviatorScript，其在字面量算術計算，方法調用場景下表現都非常出色。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">OGNL 性能表現也相對均衡，但方法調用場景下表現不佳。</span></p><span id="OSC_h2_17"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.4 安全</span></strong></span></h2><p style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">引入表達式引擎，應該重視系統的安全性和可靠性，比如要防止在不可信環境中被注入惡意腳本，越權執行某些系統命令或使應用停止服務等。</span></strong><span style="font-size: 15px;letter-spacing: 1px;">安全性方面主要通過漏洞披露、安全指南和配置比較幾種表達式引擎。</span></p><span id="OSC_h3_18"></span><h3 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.4.1 漏洞</span></strong></h3><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">首先在 https://cve.mitre.org/cve/search_cve_list.html 通過關鍵字搜索的方式粗略瞭解一下不同表達式引擎被公開的漏洞。這種方式可能不是非常的準確，由於不同表達式引擎的使用場景、使用方式、關注度的不同可能導致被公開的漏洞存在差異。比如我們所熟悉的 OGNL、SpEl 的關鍵字出現在漏洞中的頻率明顯高於其他表達式引擎。OGNL 在 MyBatis 和 Struts 中被使用，SpEl 則在 Spring 中被廣泛使用，這兩個表達式引擎會被大部分項目間接使用，直接將用户輸入作為表達式的一部分執行，很容易導致出現漏洞。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">我們<strong>可以從這些公佈的漏洞中瞭解不同表達式引擎可能存在的安全隱患及其修復情況，在使用過程中儘可能避免出現類似問題。</strong></span></p><p style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">此外，不推薦將表達式執行直接開放到不可信的環境，如果確實需要，應該詳細瞭解選擇的表達式引擎，是否提供了必要的設置選項可以避免某些安全隱患。</span></strong></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100024222" data-ratio="0.5028901734104047" data-s="300,640" src="https://oscimg.oschina.net/oscnet/3f83fb13-b9be-47be-bbef-ecbcbf8b045c.png" data-type="png" data-w="519" style="" referrerpolicy="no-referrer"></p><p><strong><span style="font-size: 15px;letter-spacing: 1px;">3.4.2 安全設置</span></strong><br></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">AviatorScript，QLExpress，JEXL 均從不同程度提供了一些安全選項設置。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">AviatorScript</span></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">設置白名單</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="php"><code><span class="code-snippet_outer">// 在 new 語句和靜態方法調用中允許使用的類白名單，默認 null 表示無限制</span></code><code><span class="code-snippet_outer">AviatorEvaluator.setOption(Options.ALLOWED_CLASS_SET, Sets.newHashSet(List.class));</span></code><code><span class="code-snippet_outer">// 在 new 語句和靜態方法調用中允許使用的類白名單，包含子類，默認 null 表示無限制</span></code><code><span class="code-snippet_outer">AviatorEvaluator.setOption(Options.ASSIGNABLE_ALLOWED_CLASS_SET, Sets.newHashSet(List.class));</span></code><code><span class="code-snippet_outer"><br></span></code></pre></section></pre><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">防止死循環</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="javascript"><code><span class="code-snippet_outer">// 循環最大次數，默認 0 表示無限制</span></code><code><span class="code-snippet_outer">AviatorEvaluator.setOption(Options.MAX_LOOP_COUNT, 10000);</span></code><code><span class="code-snippet_outer"><br></span></code></pre></section></pre><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">特性開關</span></p></li></ul><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="php"><code><span class="code-snippet_outer">// 關閉某些特性</span></code><code><span class="code-snippet_outer">AviatorEvaluator.getInstance().disableFeature(Feature.Module);</span></code><code><span class="code-snippet_outer">AviatorEvaluator.getInstance().disableFeature(Feature.NewInstance);</span></code><code><span class="code-snippet_outer">// 只開啓需要的特性</span></code><code><span class="code-snippet_outer">AviatorEvaluator.setOption(Options.FEATURE_SET, Feature.asSet(Feature.If));</span></code><code><span class="code-snippet_outer"><br></span></code></pre></section><p style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">QLExpress</span></strong></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">開啓沙箱模式</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="javascript"><code><span class="code-snippet_outer">QLExpressRunStrategy.setSandBoxMode(true);</span></code></pre></section></pre><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">在沙箱模式中，不可以：</span></p><section style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">import Java 類</span></section><section style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">顯式引用 Java 類，比如 String a = 'mmm'</span></section><section style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">取 Java 類中的字段：a = new Integer(11); a.value</span></section><section style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">調用 Java 類中的方法：Math.abs(12)</span></section><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">可以：</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">使用 QLExpress 的自定義操作符/宏/函數，以此實現與應用的受控交互</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">使用. 操作符獲取 Map 的 key 對應的 value，比如 a 在應用傳入的表達式中是一個 Map，那麼可以通過 a.b 獲取</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">所有不涉及應用 Java 類的操作</span></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">設置白名單</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="swift"><code><span class="code-snippet_outer">// 設置編譯期白名單</span></code><code><span class="code-snippet_outer">QLExpressRunStrategy.setCompileWhiteCheckerList(Arrays.asList(</span></code><code><span class="code-snippet_outer">    // 精確設置</span></code><code><span class="code-snippet_outer">    CheckerFactory.must(Date.class),</span></code><code><span class="code-snippet_outer">    // 子類設置</span></code><code><span class="code-snippet_outer">    CheckerFactory.assignable(List.class)</span></code><code><span class="code-snippet_outer">));</span></code><code><span class="code-snippet_outer">// 設置運行時白名單// 必須將該選項設置為 true</span></code><code><span class="code-snippet_outer">QLExpressRunStrategy.setForbidInvokeSecurityRiskMethods(true);</span></code><code><span class="code-snippet_outer">// 有白名單設置時, 則黑名單失效</span></code><code><span class="code-snippet_outer">QLExpressRunStrategy.addSecureMethod(RiskBean.class, "secureMethod");</span></code><code><span class="code-snippet_outer"><br></span></code></pre></section></pre><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">設置黑名單</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="swift"><code><span class="code-snippet_outer">// 必須將該選項設置為 true</span></code><code><span class="code-snippet_outer">QLExpressRunStrategy.setForbidInvokeSecurityRiskMethods(true);</span></code><code><span class="code-snippet_outer">// 這裏不區分靜態方法與成員方法, 寫法一致</span></code><code><span class="code-snippet_outer">// 不支持重載, riskMethod 的所有重載方法都會被禁止</span></code><code><span class="code-snippet_outer">QLExpressRunStrategy.addSecurityRiskMethod(RiskBean.class, "riskMethod");</span></code><code><span class="code-snippet_outer"><br></span></code></pre></section></pre><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">QLExpess 目前默認添加的黑名單有：</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">java.lang.System.exit</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">java.lang.Runtime.exec</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">java.lang.ProcessBuilder.start</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">java.lang.reflect.Method.invoke</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">java.lang.reflect.Class.forName</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">java.lang.reflect.ClassLoader.loadClass</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">java.lang.reflect.ClassLoader.findClass</span></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">防止死循環</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="javascript"><code><span class="code-snippet_outer">//可通過 timeoutMillis 參數設置腳本的運行超時時間:1000ms</span></code><code><span class="code-snippet_outer">Object r = runner.execute(express, context, null, true, false, 1000);</span></code><code><span class="code-snippet_outer"><br></span></code></pre></section></pre><p style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">JEXL</span></strong></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">使用沙箱</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="javascript"><code><span class="code-snippet_outer">// 使用中應該通過 JexlSandbox 的重載構造方法進行配置</span></code><code><span class="code-snippet_outer">new JexlBuilder().sandbox(new JexlSandbox()).create();</span></code></pre></section></pre><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">設置白名單權限</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="css"><code><span class="code-snippet_outer">new JexlBuilder().permissions(JexlPermissions.RESTRICTED.compose("com.jd.*")).create();</span></code></pre></section></pre><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">特性開關</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="javascript"><code><span class="code-snippet_outer">// 關閉循環、new 實例，import 等特性</span></code><code><span class="code-snippet_outer">new JexlBuilder().features(new JexlFeatures().loops(false).newInstance(false).importPragma(false)).create();</span></code><code><span class="code-snippet_outer"><br></span></code></pre></section></pre><span id="OSC_h2_19"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.5 使用案例</span></strong></h2><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">從業界使用情況可以瞭解不同表達式引擎的可行性、生態和整合性，以及最佳實踐，進而借鑑。從下表可以看到 AviatorScript，MVEL，QLExpress 在國內業務線均有使用案例，有些企業也有文章輸出，我們可以借鑑使用。</span></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100024221" data-ratio="0.8702064896755162" data-s="300,640" src="https://oscimg.oschina.net/oscnet/7351a73e-f1e0-4db3-a3d3-b3fe2ca7815b.png" data-type="png" data-w="339" style="" referrerpolicy="no-referrer"></p><p><strong style="color: rgb(2, 30, 170);font-size: 16px;letter-spacing: 0.034em;"><span style="font-size: 15px;letter-spacing: 1px;">3.6 語法</span></strong><br></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">易於理解和使用的語法可以提高開發效率，並降低學習成本。接下來從類型、操作符、控制語句、集合、方法定義幾方面比較一下不同表達式引擎的語法設計。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">類型方面，AviatorScript 設計了特有的類型，使用時需要注意其類型轉換的優先級 long-&gt;bigint-&gt;decimal-&gt;double。AviatorScript、MVEL、OGNL、JEXL 都支持 BigInteger、BigDecimal 字面量，這意味着進行精確計算時可以使用字面量，將更方便，如 10.24B 就表示一個 BigDecimal 字面量（AviatorScript 中 BigDecimal 字面量後綴是 M）。此外 AviatorScript、QLExpress 還支持高精度計算的設置項。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">操作符方面，QLExpress 支持替換、自定義操作符及添加操作符別名，這可能有助於簡化複雜表達式或使表達式更加直觀，不過添加預置函數應該可以達到差不多的效果。AviatorScript 也支持自定義部分操作符，不過支持數量相當有限。AviatorScript、SpEl、JEXL 支持正則匹配操作符。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">控制語句方面，除 OGNL、SpEl、JUEL 不支持控制語句外，其他都支持，不過需要注意 AviatorScript 的 else if 語法有些特殊寫作 elsif，foreach 語句跟 Java 也有所不同。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">集合方面，除 JUEL 外其他都提供了快捷定義的方式，只不過語法不同。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">函數定義方面，SpEl、JUEL 均不支持，OGNL 支持偽 lambda 定義，其他都支持定義函數。QLExpress 不支持定義 lambda。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">綜合來看，和 Java 語法都或多或少存在一些差異。<strong>AviatorScript 設計了自己特有的一些語法，使用的話需要熟悉一下。QLExpress 支持自定義操作符，可以使表達式看起來更直觀。MVEL、JEXL 的語法可能更接近 Java，讓人更容易接受一些。OGNL、SpEl、JUEL 的語法更簡單一些，不支持控制語句和函數定義，當然也可以通過預置一些函數變通解決一些較複雜的問題。</strong></span></p><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;visibility: visible;"><section data-role="paragraph" style="outline: 0px;letter-spacing: 0.544px;visibility: visible;"><section data-role="outer" label="edit by 135editor" style="outline: 0px;visibility: visible;"><section data-role="title" data-tools="135 編輯器" data-id="114995" style="margin-bottom: 24px;outline: 0px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, Arial, sans-serif;visibility: visible;"><section style="margin: 20px auto;outline: 0px;visibility: visible;"><section style="outline: 0px;display: flex;justify-content: flex-start;visibility: visible;"><section style="outline: 0px;display: flex;align-items: center;visibility: visible;"><section style="outline: 0px;color: rgb(34, 34, 34);font-size: 16px;width: 5px;background-color: rgb(10, 77, 209);height: 41.5938px;overflow: hidden;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section style="outline: 0px;color: rgb(34, 34, 34);font-size: 16px;width: 5px;height: 41.5938px;overflow: hidden;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section style="padding: 8px 30px;outline: 0px;background-image: linear-gradient(to left, transparent 0%, transparent 50%, rgb(198, 217, 240) 100%);background-position: initial;background-size: initial;background-repeat: initial;background-attachment: initial;background-origin: initial;background-clip: initial;visibility: visible;"><span style="outline: 0px;color: rgb(2, 30, 170);font-size: 15px;visibility: visible;"><strong style="outline: 0px;visibility: visible;">四、選型建議</strong></span></section></section></section></section></section></section></section></section><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;"></h1><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">社區方面，SpEl 無疑是最活躍的。AviatorScript，QLExpress，MVEL 在國內很受歡迎，QLExpress 有阿里背書。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">代碼大小和依賴方面，AviatorScript，MVEL 依賴少，並且代碼大小也偏小。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">性能方面，如果你使用表達式引擎執行字面量算術計算或方法調用偏多可以選用 SpEl，MVEL。如果希望整體性能表現較好可以選用 AviatorScript。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">安全方面，如果想自定義安全選項，可以考慮 AviatorScript，QLExpress 和 JEXL。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">使用案例方面，AviatorScript，MVEL，QLExpress 在國內都有實際使用案例可循。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">語法方面，可能存在一些主觀因素，僅供參考，個人覺得 MVEL、JEXL 的語法設計使用起來會更容易一些。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">通過對以上幾個方面的評估和分析，希望可以幫助團隊基於自身情況及偏好選擇最適合自己項目的 Java 表達式引擎。</span></p><span id="OSC_h1_20"></span><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="outline: 0px;color: rgb(136, 136, 136);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">參考資料</span></h1><span id="OSC_h1_21"></span><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 8px;margin-bottom: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="color: rgb(136, 136, 136);font-size: 15px;"><span style="outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">[1]</span><span style="outline: 0px;">&nbsp;QLExpress：</span></span><span style="outline: 0px;color: rgb(136, 136, 136);font-size: 15px;">https://github.com/alibaba/QLExpress﻿</span></h1><span id="OSC_h1_22"></span><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 8px;margin-bottom: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="outline: 0px;color: rgb(136, 136, 136);font-size: 15px;">[2] AviatorScript：https://github.com/killme2008/aviatorscript﻿</span></h1><span id="OSC_h1_23"></span><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 8px;margin-bottom: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="outline: 0px;color: rgb(136, 136, 136);font-size: 15px;">[3] MVEL：https://github.com/mvel/mvel﻿</span></h1><span id="OSC_h1_24"></span><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 8px;margin-bottom: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="outline: 0px;color: rgb(136, 136, 136);font-size: 15px;">[4] OGNL：https://github.com/orphan-oss/ognl﻿</span></h1><span id="OSC_h1_25"></span><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 8px;margin-bottom: 8px;text-wrap: wrap;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="color: rgb(136, 136, 136);font-size: 15px;"><span style="outline: 0px;">[5]&nbsp;SpEl</span>：</span><span style="outline: 0px;color: rgb(136, 136, 136);font-size: 15px;">https://github.com/spring-projects/spring-framework</span><span style="outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;color: rgb(136, 136, 136);font-size: 15px;">﻿</span></h1><p style="outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;margin-top: 8px;margin-bottom: 8px;"><span style="color: rgb(136, 136, 136);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">[6]&nbsp;</span><span style="outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;color: rgb(136, 136, 136);font-size: 15px;">Janino：</span><span style="color: rgb(136, 136, 136);font-size: 15px;"><span style="color: rgb(136, 136, 136);outline: 0px;">https://github.com/janino-compiler/janino</span><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">﻿</span></span></p><p style="outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;margin-top: 8px;margin-bottom: 8px;"><span style="color: rgb(136, 136, 136);font-size: 15px;"><span style="color: rgb(136, 136, 136);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">[7]&nbsp;</span><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">JUEL：</span><span style="color: rgb(136, 136, 136);outline: 0px;">https://github.com/beckchr/juel</span><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">﻿</span></span></p><p style="outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;margin-top: 8px;margin-bottom: 8px;"><span style="color: rgb(136, 136, 136);font-size: 15px;"><span style="color: rgb(136, 136, 136);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">[8]&nbsp;</span><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">JEXL：</span><span style="color: rgb(136, 136, 136);outline: 0px;">https://github.com/apache/commons-jexl</span><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">﻿</span></span></p><p style="outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;margin-top: 8px;margin-bottom: 8px;"><span style="color: rgb(136, 136, 136);font-size: 15px;"><span style="color: rgb(136, 136, 136);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">[9]&nbsp;</span><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">Fel：</span><span style="color: rgb(136, 136, 136);outline: 0px;">https://github.com/dbcxy/fast-el</span><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">﻿</span></span></p><p style="outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;margin-top: 8px;margin-bottom: 8px;"><span style="color: rgb(136, 136, 136);font-size: 15px;"><span style="color: rgb(136, 136, 136);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">[10]&nbsp;</span><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">ik-expression：</span><span style="color: rgb(136, 136, 136);outline: 0px;">https://code.google.com/archive/p/ik-expression/</span></span><span style="outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;color: rgb(136, 136, 136);font-size: 15px;">﻿</span></p><p style="outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;margin-top: 8px;margin-bottom: 8px;"><span style="color: rgb(136, 136, 136);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">[11]&nbsp;</span><span style="outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;color: rgb(136, 136, 136);font-size: 15px;">JS</span><span style="color: rgb(136, 136, 136);font-size: 15px;"><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">EL：</span><span style="color: rgb(136, 136, 136);outline: 0px;">https://code.google.com/archive/p/lite/wikis/JSEL.wiki</span></span><span style="outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;color: rgb(136, 136, 136);font-size: 15px;">﻿</span></p><p style="outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;margin-top: 8px;margin-bottom: 8px;"><span style="color: rgb(136, 136, 136);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">[1]&nbsp;</span><span style="outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;color: rgb(136, 136, 136);font-size: 15px;">JMH：https://www.cnblogs.com/wupeixuan/p/13091381.html</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span style="display: none;line-height: 0px;">‍</span></p><section style="margin-bottom: 8px;margin-top: 32px;text-align: center;"><span style="color: rgb(136, 136, 136);font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;text-align: center;text-wrap: wrap;background-color: rgb(255, 255, 255);">-end-</span></section><section class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="MzU1OTgxMTg2Nw==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/9K73WSRq6BWyKqhKFzMgibicMuLCqmmqWpOmQ2tovCBswRKVxdO6zaiarVIPc83MibTauxLibnACJWk48ibUyAXBF7dw/0?wx_fmt=png" data-nickname="京東雲開發者" data-alias="JDT_Developers" data-signature="京東雲開發者（Developer of JD Technology）是京東科技集團旗下為 AI、雲計算、IoT 等相關領域開發者提供技術分享交流的平台。平台將發佈京東產品技術信息、行業技術內容、技術活動等資訊。擁抱技術，與開發者攜手預見未來！" data-from="0" data-is_biz_ban="0"></mp-common-profile></section><p><span style="letter-spacing: 1px;display: none;line-height: 0px;">‍</span></p><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公眾號 - 京東雲開發者（JDT_Developers）。<br>如有侵權，請聯繫 support@oschina.cn 刪除。<br>本文參與「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源創計劃</a>」，歡迎正在閲讀的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 10:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/10315584</guid>
            <link>https://my.oschina.net/u/4090830/blog/10315584</link>
            <author>
                <![CDATA[京東雲開發者]]>
            </author>
        </item>
    </channel>
</rss>
