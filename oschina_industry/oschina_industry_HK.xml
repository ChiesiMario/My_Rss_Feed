<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-綜合資訊]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="https://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-綜合資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Sun, 08 Oct 2023 02:30:10 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[每日一博 | MySQL 到 TiDB：Hive Metastore 橫向擴展之路]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><section class="mp_profile_iframe_wrp"><mp-common-profile class="custom_select_card mp_profile_iframe mp_common_widget" data-pluginname="mpprofile" data-id="MzI4NjY4MTU5Nw==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt45QXJZicZ9gaNU2mRSlvqhQd94MJ7oQh4QFj1ibPV66xnUiaKoicSatwaGXepL5sBDSDLEckicX1ttibHg/0?wx_fmt=png" data-nickname="vivo 互聯網技術" data-alias="vivoVMIC" data-signature="分享 vivo 互聯網技術乾貨與沙龍活動，推薦最新行業動態與熱門會議。" data-from="0"></mp-common-profile></section><section style="font-size: 15px;line-height: 1.6;"><section style="margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(219, 219, 219);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="color: rgba(0, 0, 0, 0.5);font-size: 14px;text-align: justify;" powered-by="xiumi.us"><p>作者：vivo 互聯網大數據團隊 - Wang Zhiwen</p></section></section></section><p powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: left;" powered-by="xiumi.us"><section style="font-size: 14px;text-align: justify;line-height: 1.8;padding-right: 5px;padding-left: 5px;color: rgb(160, 160, 160);"><p>本文介紹了 vivo 在大數據元數據服務橫向擴展道路上的探索歷程，由實際面臨的問題出發，對當前主流的橫向擴展方案進行了調研及對比測試，通過多方面對比數據擇優選擇 TiDB 方案。其次分享了整個擴展方案流程、實施遇到的問題及解決方案，對於在大數據元數據性能上面臨同樣困境的開發者本篇文章具有非常高的參考借鑑價值。</p></section></section></section></section><p powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>一、背景</p></section></section><p powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p>大數據元數據服務 Hive Metastore Service（以下簡稱 HMS），存儲着數據倉庫中所依賴的所有元數據並提供相應的查詢服務，使得計算引擎（Hive、Spark、Presto）能在海量數據中準確訪問到需要訪問的具體數據，其在離線數倉的穩定構建上扮演着舉足輕重的角色。vivo 離線數倉的 Hadoop 集羣基於 CDH 5.14.4 版本構建，HMS 的版本選擇跟隨 CDH 大版本，當前使用版本為 1.1.0-cdh5.14.4。</p><p><br></p><p>vivo 在 HMS 底層存儲架構未升級前使用的是 MySQL 存儲引擎，但隨着 vivo 業務發展，數據爆炸式增長，存儲的元數據也相應的增長到億級別（PARTITION_PARAMS：8.1 億、</p><p>PARTITION_KEY_VALS：3.5 億、PARTITIONS：1.4 億），在如此大量的數據基數下，我們團隊經常面臨機器資源的性能瓶頸，往往用户多併發的去查詢某些大分區表（50w+分區），機器資源的使用率就會被打滿，從而導致元數據查詢超時，嚴重時甚至整個 HMS 集羣不可用，此時恢復手段只能暫時停服所有 HMS 節點，直到 MySQL 機器負載降下來後在逐步恢復服務。為此，針對當前 MySQL 方案存在的嚴重性能瓶頸，HMS 急需一套完善的橫向擴展方案來解決當前燃眉之急。</p></section><p powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>二、橫向擴展技術方案選型</p></section></section><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">為解決 HMS 的性能問題，我們團隊對 HMS 橫向擴展方案做了大量的調研工作，總體下來業內在 HMS 的橫向擴展思路上主要分為對 MySQL 進行拆庫擴展或用高性能的分佈式引擎替代 MySQL。在第一種思路上做的比較成熟的方案有<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fhotels.com%2F" textvalue="Hotels.com" linktype="text" imgurl="" tab="outerlink" data-linktype="2">Hotels.com</a>公司開源的 Waggle Dance，實現了一個跨集羣的 Hive Metastore 代理網關，他允許用户同時訪問多個集羣的數據，這些集羣可以部署在不同的平台上，特別是雲平台。第二種思路當前主流的做法是用分佈式存儲引擎 TiDB 替換傳統的 MySQL 引擎，在 Hive 社區中有不少公司對 hive 2.x 接入 TiDB 做了大量的測試並應用到生產中（<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcwiki.apache.org%2Fconfluence%2Fdisplay%2FHive%2FUsing%2BTiDB%2Bas%2Bthe%2BHive%2BMetastore%2Bdatabase" textvalue="詳情點擊" linktype="text" imgurl="" tab="outerlink" data-linktype="2">詳情點擊</a>）。</p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">2.1 Waggle Dance</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">Waggle-dance 向用户提供統一的入口，將來自 Metastore 客户端的請求路由到底層對應的 Metastore 服務，同時向用户隱藏了底層的 Metastore 分佈，從而在邏輯層面整合了多個 Metastore 的 Hive 庫表信息。Waggle-dance 實現了 Metastore 的 Thrift API，客户端無需改動，對用户來説，Waggle-dance 就是一個 Metastore。其整體架構如下：</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.9175925925925926" data-s="300,640" data-type="png" data-w="1080" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/a9e0ef2a-6dea-4425-8220-7df8cbb062f1.png" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">Waggle Dance 架構</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">從 Waggle-dance 的架構中最突出的特性是其採用了多個不同的 MySQL 實例分擔了原單 MySQL 實例的壓力，除此之外其還有如下優勢：</p><section style="margin-top: 10px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);"><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;" powered-by="xiumi.us"><li><p>用户側可以沿用 Metastore 客户端的用法，配置多台 Waggle-dance 的連接，在當前 Waggle-dance 連接服務不可用的時候切換到其他的 Waggle-dance 服務上。</p></li><li><p>Waggle-dance 只需幾秒即可啓動，加上其無狀態服務的特性，使得 Waggle-dance 具備高效的動態伸縮性，可以在業務高峯期快速上線新的服務節點分散壓力，在低峯期下線部分服務節點釋放資源。</p></li><li><p>Waggle-dance 作為一個網關服務，除了路由功能外，還支持後續的定製化開發和差異化部署，平台可根據需要添加諸如鑑權、防火牆過濾等功能。</p></li></ol></section></section><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">2.2 TiDB</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">TiDB 是 PingCAP 公司自主設計、研發的開源分佈式關係型數據庫，是一款同時支持在線事務處理與在線分析處理 (Hybrid Transactional and Analytical Processing, HTAP) 的融合型分佈式數據庫產品，具備水平擴容或者縮容、金融級高可用、實時 HTAP、雲原生的分佈式數據庫、兼容 MySQL 5.7 協議和 MySQL 生態等重要特性。在 TiDB 4.x 版本中，其性能及穩定性較與之前版本得到了很大的提升並滿足 HMS 的元數據查詢性能需求。故我們對 TiDB 也做了相應的調研及測試。結合 HMS 及大數據生態，採用 TiDB 作為元數據存儲整體的部署架構如下：</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.8727272727272727" data-s="300,640" data-type="png" data-w="825" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/e149c269-2046-48a7-bb11-e0a90ce0edf1.png" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">HMS on TiDB 架構&nbsp; &nbsp;</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">由於 TiDB 本身具有水平擴展能力，擴展後能均分查詢壓力，該特性就是我們解決 HMS 查詢性能瓶頸的大殺器。除此外該架構還有如下優勢：</p><section style="margin-top: 10px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);"><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;" powered-by="xiumi.us"><li><p>用户無需任何改動；HMS 側面沒有任何改動，只是其依賴的底層存儲發生變化。</p></li><li><p>不破壞數據的完整性，無需將數據拆分多個實例來分擔壓力，對 HMS 來説其就是一個完整、獨立的數據庫。</p></li><li><p>除引入 TiDB 作為存儲引擎外，不需要額外的其他服務支撐整個架構的運行。</p></li></ol></section></section><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">2.3 TiDB 和 Waggle Dance 對比</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">前面內容對 Waggle-dance 方案和 TiDB 方案做了簡單的介紹及優勢總結，以下列舉了這兩個方案在多個維度的對比：</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.6953703703703704" data-s="300,640" data-type="png" data-w="1080" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/d3ce1c63-1cd8-4917-a94b-0e3c638c3328.png" referrerpolicy="no-referrer"></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">通過上述多個維度的對比，TiDB 方案在性能表現、水平擴展、運維複雜度及機器成本上都優於 waggle-dance 方案，故我們線上選擇了前者進行上線應用。&nbsp;</p><p powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>三、TiDB 上線方案</p></section></section><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">選擇 TiDB 引擎替代原 MySQL 存儲引擎，由於 TiDB 與 MySQL 之間不能做雙主架構，在切換過程中 HMS 服務須完全停服後並重新啓動切換至 TiDB，為保障切換過程順利及後面若有重大問題發生能及時回滾，在切換前做了如下數據同步架構以保障切換前 MySQL 與 TiDB 數據一致以及切換後仍有 MySQL 兜底。</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.4703703703703704" data-s="300,640" data-type="png" data-w="1080" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/033aceb3-efa2-4951-9897-94e1c2cbe128.png" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">TiDB&amp;MySQL 上線前後數據同步架構</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">在上述架構中，切換前唯一可寫入的數據源只有源數據庫主庫，其他所有 TiDB、MySQL 節點都為只讀狀態，當且僅當所有 HMS 節點停服後，MySQL 源數據庫從庫及 TiDB 源數據庫主庫的數據同步最大時間戳與源數據庫主庫一致時，TiDB 源數據庫主庫才開放可寫入權限，並在修改 HMS 底層存儲連接串後逐一拉起 HMS 服務。</p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">在上述架構完成後，即可開始具體的切換流程，切換整體流程如下：</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.27037037037037037" data-s="300,640" data-type="png" data-w="1080" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/20cfee5d-3265-4b12-9e43-7fa47ffb8f59.png" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">HMS 切換底層存儲流程</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">其中在保障源 MySQL 與 TiDB 數據正常同步前，需要對 TiDB 做以下配置：</p><section style="margin-top: 10px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;" powered-by="xiumi.us"><li><p>tidb_skip_isolation_level_check 需要配置為 1 ，否則啓動 HMS 存在 MetaException 異常。</p></li><li><p>tidb_txn_mode 需配置為 pessimistic ，提升事務一致性強度。</p></li><li><p>事務大小限制設置為 3G，可根據自己業務實際情況進行調整。</p></li><li><p>連接限制設置為最大 3000 ，可根據自己業務實際情況進行調整。</p></li></ul></section></section><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">此外在開啓 sentry 服務狀態下，需確認 sentry 元數據中 NOTIFICATION_ID 的值是否落後於 HMS 元數據庫中 NOTIFICATION_SEQUENCE 表中的 NEXT_EVENT_ID 值，若落後需將後者替換為前者的值，否則可能會發生建表或創建分區超時異常。</p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">以下為 TiDB 方案在在不同維度上的表現：</p><section style="margin-top: 10px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);"><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;" powered-by="xiumi.us"><li><p>在對 HQL 的兼容性上 TiDB 方案完全兼容線上所有引擎對元數據的查詢，不存在語法兼容問題，對 HQL 語法兼容度達 100%&nbsp;</p></li><li><p>在性能表現上查詢類接口平均耗時優於 MySQL，性能整體提升 15%；建表耗時降低了 80%，且支持更高的併發，TiDB 性能表現不差於 MySQL</p></li><li><p>在機器資源使用情況上整體磁盤使用率在 10% 以下；在沒有熱點數據訪問的情況下，CPU 平均使用率在 12%；CPU.WAIT.IO 平均值在 0.025% 以下;集羣不存在資源使用瓶頸。</p></li><li><p>在可擴展性上 TiDB 支持一鍵水平擴縮容，且內部實現查詢均衡算法，在數據達到均衡的情況下各節點可平攤查詢壓力。</p></li><li><p>在容災性上 TiDB Binlog 技術可穩定支撐 TiDB 與 MySQL 及 TiDB 之間的數據同步，實現完整的數據備份及可回退選擇。</p></li><li><p>在服務高可用性上 TiDB 可選擇 LVS 或 HaProxy 等服務實現負載均衡及故障轉移。</p></li></ol></section></section><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">以下為上線後 HMS 主要 API 接口調用耗時情況統計：</p><section style="font-size: 15px;"><section style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row;margin-top: 15px;margin-bottom: 15px;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: top;width: 5px;align-self: stretch;flex: 0 0 auto;margin-bottom: 30px;height: auto;z-index: 1;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section><section style="display: inline-block;vertical-align: top;width: auto;align-self: stretch;flex: 100 100 0%;height: auto;padding-right: 10px;padding-left: 10px;z-index: auto;line-height: 0;"><section style="display: flex;width: 100%;flex-flow: column;" powered-by="xiumi.us"><section style="z-index: 1;" powered-by="xiumi.us"><section style="text-align: right;margin-top: -5px;"><section style="display: inline-block;width: 100%;height: 5px;vertical-align: top;overflow: hidden;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section></section></section><section style="justify-content: flex-start;display: flex;flex-flow: row;margin-top: 10px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: top;width: 50%;align-self: flex-start;flex: 0 0 auto;padding-right: 5px;"><section style="text-align: center;line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="269" data-cropsely1="0" data-cropsely2="179" data-ratio="0.588774341351661" data-s="300,640" data-type="jpeg" data-w="873" style="vertical-align: middle;width: 304px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/9bc1f5fe-5ed3-4507-8edd-99fd9eb4edcd.png" referrerpolicy="no-referrer"></section></section></section><section style="display: inline-block;vertical-align: top;width: 50%;align-self: flex-start;flex: 0 0 auto;padding-left: 5px;"><section style="text-align: center;line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="269" data-cropsely1="0" data-cropsely2="179" data-ratio="0.5880322209436134" data-s="300,640" data-type="jpeg" data-w="869" style="vertical-align: middle;width: 304px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/bde61013-5736-415d-a148-1fb6567a709e.png" referrerpolicy="no-referrer"></section></section></section></section><section style="justify-content: flex-start;display: flex;flex-flow: row;margin-top: 10px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: top;width: 50%;align-self: flex-start;flex: 0 0 auto;padding-right: 5px;"><section style="text-align: center;line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="269" data-cropsely1="0" data-cropsely2="179" data-ratio="0.588774341351661" data-s="300,640" data-type="jpeg" data-w="873" style="vertical-align: middle;width: 304px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/4575beb3-65ef-435b-8992-48929786cf28.png" referrerpolicy="no-referrer"></section></section></section><section style="display: inline-block;vertical-align: top;width: 50%;align-self: flex-start;flex: 0 0 auto;padding-left: 5px;"><section style="text-align: center;line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="269" data-cropsely1="0" data-cropsely2="179" data-ratio="0.6009227220299884" data-s="300,640" data-type="jpeg" data-w="867" style="vertical-align: middle;width: 298px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/1c03991f-8f59-408b-a79e-d268d19c62d0.png" referrerpolicy="no-referrer"></section></section></section></section><section style="text-align: right;margin-bottom: -5px;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;height: 5px;vertical-align: top;overflow: hidden;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section></section><section style="display: inline-block;vertical-align: top;width: 5px;align-self: stretch;flex: 0 0 auto;height: auto;margin-top: 30px;z-index: auto;"><br><br><br><br></section></section><section style="text-align: center;justify-content: center;display: flex;flex-flow: row;margin-top: 10px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="display: inline-block;width: auto;vertical-align: middle;align-self: center;flex: 100 100 0%;border-radius: 10px;overflow: hidden;height: auto;padding: 15px;border-style: solid;border-width: 1px;border-color: transparent;margin-right: 20px;z-index: 0;"><section style="display: inline-block;width: 100%;vertical-align: top;overflow-x: auto;border-radius: 5px;" powered-by="xiumi.us"><section style="overflow: hidden;width: 360%;max-width: 360% !important;"><section style="display: inline-block;vertical-align: middle;width: 25%;" powered-by="xiumi.us"><section style="text-align: left;line-height: 0;"><section style="vertical-align: middle;display: inline-block;line-height: 0;width: 97%;height: auto;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="459" data-cropsely1="0" data-cropsely2="306" data-ratio="0.588774341351661" data-s="300,640" data-type="jpeg" data-w="873" style="vertical-align: middle;width: 520px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/9bc1f5fe-5ed3-4507-8edd-99fd9eb4edcd.png" referrerpolicy="no-referrer"></section></section></section><section style="display: inline-block;vertical-align: top;width: 25%;" powered-by="xiumi.us"><section style="text-align: left;line-height: 0;"><section style="vertical-align: middle;display: inline-block;line-height: 0;width: 97%;height: auto;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="459" data-cropsely1="0" data-cropsely2="306" data-ratio="0.5880322209436134" data-s="300,640" data-type="jpeg" data-w="869" style="vertical-align: middle;width: 520px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/bde61013-5736-415d-a148-1fb6567a709e.png" referrerpolicy="no-referrer"></section></section></section><section style="display: inline-block;vertical-align: top;width: 25%;" powered-by="xiumi.us"><section style="text-align: left;line-height: 0;"><section style="vertical-align: middle;display: inline-block;line-height: 0;width: 97%;height: auto;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="459" data-cropsely1="0" data-cropsely2="306" data-ratio="0.588774341351661" data-s="300,640" data-type="jpeg" data-w="873" style="vertical-align: middle;width: 520px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/4575beb3-65ef-435b-8992-48929786cf28.png" referrerpolicy="no-referrer"></section></section></section><section style="display: inline-block;vertical-align: top;width: 25%;" powered-by="xiumi.us"><section style="text-align: left;line-height: 0;"><section style="vertical-align: middle;display: inline-block;line-height: 0;width: 97%;height: auto;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="459" data-cropsely1="0" data-cropsely2="306" data-ratio="0.6009227220299884" data-s="300,640" data-type="jpeg" data-w="867" style="vertical-align: middle;width: 509px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/1c03991f-8f59-408b-a79e-d268d19c62d0.png" referrerpolicy="no-referrer"></section></section></section></section></section><section style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row;margin-top: -20px;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: bottom;width: auto;align-self: flex-end;flex: 0 0 auto;min-width: 5%;height: auto;margin-right: 5px;z-index: 2;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section><section style="display: inline-block;vertical-align: bottom;width: auto;align-self: flex-end;flex: 0 0 auto;min-width: 5%;height: auto;"><section style="text-align: justify;color: rgb(223, 143, 51);font-size: 14px;" powered-by="xiumi.us"><p><br></p><p><span style="color: rgb(136, 136, 136);">（<span style="color: rgb(136, 136, 136);font-size: 14px;letter-spacing: 0.578px;text-wrap: wrap;">左右滑動</span><span style="color: rgb(136, 136, 136);font-size: 14px;letter-spacing: 0.578px;text-wrap: wrap;">，查看更多···</span>）</span></p></section></section></section></section></section><p powered-by="xiumi.us"><br></p></section><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>四、問題及解決方案</p></section></section><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">4.1 在模擬 TiDB 回滾至 MySQL 過程中出現主鍵衝突問題</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">在 TiDB 數據增長 3 倍後，切換回 MySQL 出現主鍵重複異常，具體日誌內容如下：</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.12222222222222222" data-s="300,640" data-type="png" data-w="1080" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/dfa5874c-61af-4491-b338-4a3c4bd816af.png" referrerpolicy="no-referrer"></p><p powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">主鍵衝突異常日誌</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">產生該問題的主要原因為每個 TiDB 節點在分配主鍵 ID 時，都申請一段 ID 作為緩存，用完之後再去取下一段，而不是每次分配都向存儲節點申請。這意味着，TiDB 的 AUTO_INCREMENT 自增值在單節點上能保證單調遞增，但在多個節點下則可能會存在劇烈跳躍。因此，在多節點下，TiDB 的 AUTO_INCREMENT 自增值從全局來看，並非絕對單調遞增的，也即並非絕對有序的，從而導致 Metastore 庫裏的 SEQUENCE_TABLE 表記錄的值不是對應表的最大值。</p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">造成主鍵衝突的主要原因是 SEQUENCE_TABLE 表記錄的值不為元數據中實際的最大值，若存在該情況在切換回 MySQL 後就有可能生成已存在的主鍵導致初見衝突異常，此時只需將 SEQUENCE_TABLE 裏的記錄值設置當前實際表中的最大值即可。</p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">4.2 PARTITION_KEY_VALS 的索引取捨</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">在使用 MySQL 引擎中，我們收集了部分慢查詢日誌，該類查詢主要是查詢分區表的分區，類似如下 SQL：</p><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="sql"><code><span class="code-snippet_outer"><span class="code-snippet__comment">#以下查詢為查詢三級分區表模板，且每級分區都有過來條件</span></span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">SELECT</span> PARTITIONS.PART_ID</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">FROM</span><span class="code-snippet__keyword">PARTITIONS</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">INNER</span><span class="code-snippet__keyword">JOIN</span> TBLS</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">ON</span> PARTITIONS.TBL_ID = TBLS.TBL_ID</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">AND</span> TBLS.TBL_NAME = <span class="code-snippet__string">'${TABLE_NAME}'</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">INNER</span><span class="code-snippet__keyword">JOIN</span> DBS</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">ON</span> TBLS.DB_ID = DBS.DB_ID</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">AND</span> DBS.NAME = <span class="code-snippet__string">'${DB_NAME}'</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">INNER</span><span class="code-snippet__keyword">JOIN</span> PARTITION_KEY_VALS FILTER0</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">ON</span> FILTER0.PART_ID = PARTITIONS.PART_ID</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">AND</span> FILTER0.INTEGER_IDX = ${INDEX1}</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">INNER</span><span class="code-snippet__keyword">JOIN</span> PARTITION_KEY_VALS FILTER1</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">ON</span> FILTER1.PART_ID = PARTITIONS.PART_ID</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">AND</span> FILTER1.INTEGER_IDX = ${INDEX2}</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">INNER</span><span class="code-snippet__keyword">JOIN</span> PARTITION_KEY_VALS FILTER2</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">ON</span> FILTER2.PART_ID = PARTITIONS.PART_ID</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">AND</span> FILTER2.INTEGER_IDX = ${INDEX3}</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">WHERE</span> FILTER0.PART_KEY_VAL = <span class="code-snippet__string">'${PART_KEY}'</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">AND</span><span class="code-snippet__keyword">CASE</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">WHEN</span> FILTER1.PART_KEY_VAL &lt;&gt; <span class="code-snippet__string">'__HIVE_DEFAULT_PARTITION__'</span><span class="code-snippet__keyword">THEN</span><span class="code-snippet__keyword">CAST</span>(FILTER1.PART_KEY_VAL <span class="code-snippet__keyword">AS</span><span class="code-snippet__built_in">decimal</span>(<span class="code-snippet__number">21</span>, <span class="code-snippet__number">0</span>))</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">ELSE</span><span class="code-snippet__literal">NULL</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">END</span> = <span class="code-snippet__number">10</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">AND</span> FILTER2.PART_KEY_VAL = <span class="code-snippet__string">'068'</span>;</span></code></pre></section><p powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p>在測試中通過控制併發重放該類型的 SQL，隨着併發的增加，各個 API 的平均耗時也會增長，且重放的 SQL 查詢耗時隨着併發的增加查詢平均耗時達到 100s 以上，雖然 TiDB 及 HMS 在壓測期間沒有出現任何異常，但顯然這種查詢效率會讓用户很難接受。DBA 分析該查詢沒有選擇合適的索引導致查詢走了全表掃描，建議對 PARTITION_KEY_VALS 的 PARTITION_KEY_VAL 字段添加了額外的索引以加速查詢，最終該類型的查詢得到了極大的優化，即使加大併發到 100 的情況下平均耗時在 500ms 內，對此我們曾嘗試對 PARTITION_KEY_VALS 添加上述索引操作。</p><p><br></p><p>但在線上實際的查詢中，那些沒有產生慢查詢的分區查詢操作其實都是按天分區的進行一級分區查詢的，其 SQL 類似如下：</p></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="sql"><code><span class="code-snippet_outer"><span class="code-snippet__keyword">SELECT</span><span class="code-snippet__string">"PARTITIONS"</span>.<span class="code-snippet__string">"PART_ID"</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">FROM</span><span class="code-snippet__string">"PARTITIONS"</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">INNER</span><span class="code-snippet__keyword">JOIN</span><span class="code-snippet__string">"TBLS"</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">ON</span><span class="code-snippet__string">"PARTITIONS"</span>.<span class="code-snippet__string">"TBL_ID"</span> = <span class="code-snippet__string">"TBLS"</span>.<span class="code-snippet__string">"TBL_ID"</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">AND</span><span class="code-snippet__string">"TBLS"</span>.<span class="code-snippet__string">"TBL_NAME"</span> = <span class="code-snippet__string">'tb1'</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">INNER</span><span class="code-snippet__keyword">JOIN</span><span class="code-snippet__string">"DBS"</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">ON</span><span class="code-snippet__string">"TBLS"</span>.<span class="code-snippet__string">"DB_ID"</span> = <span class="code-snippet__string">"DBS"</span>.<span class="code-snippet__string">"DB_ID"</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">AND</span><span class="code-snippet__string">"DBS"</span>.<span class="code-snippet__string">"NAME"</span> = <span class="code-snippet__string">'db1'</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">INNER</span><span class="code-snippet__keyword">JOIN</span><span class="code-snippet__string">"PARTITION_KEY_VALS"</span><span class="code-snippet__string">"FILTER0"</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">ON</span><span class="code-snippet__string">"FILTER0"</span>.<span class="code-snippet__string">"PART_ID"</span> = <span class="code-snippet__string">"PARTITIONS"</span>.<span class="code-snippet__string">"PART_ID"</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">AND</span><span class="code-snippet__string">"FILTER0"</span>.<span class="code-snippet__string">"INTEGER_IDX"</span> = <span class="code-snippet__number">0</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">INNER</span><span class="code-snippet__keyword">JOIN</span><span class="code-snippet__string">"PARTITION_KEY_VALS"</span><span class="code-snippet__string">"FILTER1"</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">ON</span><span class="code-snippet__string">"FILTER1"</span>.<span class="code-snippet__string">"PART_ID"</span> = <span class="code-snippet__string">"PARTITIONS"</span>.<span class="code-snippet__string">"PART_ID"</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">AND</span><span class="code-snippet__string">"FILTER1"</span>.<span class="code-snippet__string">"INTEGER_IDX"</span> = <span class="code-snippet__number">1</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">WHERE</span><span class="code-snippet__string">"FILTER0"</span>.<span class="code-snippet__string">"PART_KEY_VAL"</span> = <span class="code-snippet__string">'2021-12-28'</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">AND</span><span class="code-snippet__keyword">CASE</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">WHEN</span><span class="code-snippet__string">"FILTER1"</span>.<span class="code-snippet__string">"PART_KEY_VAL"</span> &lt;&gt; <span class="code-snippet__string">'__HIVE_DEFAULT_PARTITION__'</span><span class="code-snippet__keyword">THEN</span><span class="code-snippet__keyword">CAST</span>(<span class="code-snippet__string">"FILTER1"</span>.<span class="code-snippet__string">"PART_KEY_VAL"</span><span class="code-snippet__keyword">AS</span><span class="code-snippet__built_in">decimal</span>(<span class="code-snippet__number">21</span>, <span class="code-snippet__number">0</span>))</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">ELSE</span><span class="code-snippet__literal">NULL</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">END</span> = <span class="code-snippet__number">10</span>;</span></code></pre></section><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">由於對 PARTITION_KEY_VALS 的 PARTITION_KEY_VAL 字段添加了索引做查詢優化，會導致該類查詢生成的執行計劃中同樣會使用 idx_PART_KEY_VAL 索引進行數據掃描，該執行計劃如下：</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.4898148148148148" data-s="300,640" data-type="png" data-w="1080" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/20f84c22-d1ae-4c32-82be-4b884faf9249.png" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">走 idx_PART_KEY_VAL 索引執行計劃</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">添加的 idx_PART_KEY_VAL 索引在該字段的具有相同值的數據較少時，使用該索引能檢索較少的數據提升查詢效率。在 hive 中的表一級分區基本是按天進行分區的，據統計每天天分區的增量為 26w 左右，如果使用 idx_PART_KEY_VAL 索引，按這個數值計算，查詢條件為 day&gt;=2021-12-21 and day&lt;2021-12-26 的查詢需要檢索將近 160w 條數據，這顯然不是一個很好的執行計劃。</p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">若執行計劃不走 idx_PART_KEY_VAL 索引，TiDB 可通過 dbs、tbls 檢索出所有關聯 partition 數據，在根據 part_id 和過濾條件掃描 PARTITION_KEY_VALS 數據並返回。此類執行計劃掃描的數據量和需要查詢的表的分區總量有關，如果該表只有少數的分區，則查詢能夠迅速響應，但如果查詢的表有上百萬的分區，則該類執行計劃對於該類查詢不是最優解。</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.2675925925925926" data-s="300,640" data-type="png" data-w="1080" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/97b2badc-d7bd-4e82-872c-cdfbed8555cd.png" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">不走 idx_PART_KEY_VAL 索引執行計劃</span></p><section powered-by="xiumi.us"><p><br></p><p>針對不同執行計劃的特性，整理了以下對比點：</p></section><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.2995910020449898" data-s="300,640" data-type="png" data-w="978" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/393b4adf-34c3-4685-9d35-3002044f44b6.png" referrerpolicy="no-referrer"></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">在實際生產中元數據基本都是按天分區為主，每天增長大概有 26w 左右，且範圍查詢的使用場景較多，使用 idx_PART_KEY_VAL 索引查詢的執行計劃不太適合線上場景，故該索引需不適合添加到線上環境。</p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">4.3 TiDB 內存突增導致宕機問題</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">在剛上線 TiDB 服務初期，曾數次面臨 TiDB 內存溢出的問題，每次出現的時間都隨機不確定，出現的時候內存突增幾乎在一瞬間，若期間 TiDB 的內存抗住了突增量，突增部分內存釋放在很長時間都不會得到釋放，最終對 HMS 服務穩定性帶來抖動。</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.4034833091436865" data-s="300,640" data-type="png" data-w="689" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/8844c991-06f3-4ca0-aab6-3d42df20759e.png" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">TiDB 內存突增情況</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">通過和 TiDB 開發、DBA 聯合分析下，確認 TiDB 內存飆高的原因為用户在使用 Dashboard 功能分析慢查詢引起；在分析慢查詢過程中，TiDB 需要加載本地所有的 slow-query 日誌到內存，如果這些日誌過大，則會造成 TiDB 內存突增，此外，如果在分析期間，用户點擊了取消按鈕，則有可能會造成 TiDB 的內存泄漏。針對該問題制定如下解決方案：</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: justify;line-height: 1.8;padding-right: 5px;padding-left: 5px;" powered-by="xiumi.us"><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>使用大內存機器替換原小內存機器，避免分析慢查詢時內存不夠</p></li><li><p>調大慢查詢閾值為 3s，減少日誌產生</p></li><li><p>定時 mv 慢查詢日誌到備份目錄</p></li></ol></section></section></section><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">4.4 locate 函數查詢不走索引導致 TiKV 負異常</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">在 HMS 中存在部分通過 JDO 的方式去獲取分區的查詢，該類查詢的過濾條件中用 locate 函數過濾 PART_NAME 數據，在 TiDB 中通過函數作用在字段中是不會觸發索引查詢的，所以在該類查詢會加載對應表的所有數據到 TiDB 端計算過濾，TiKV 則需不斷掃描全表並傳輸數據到 TiDB 段，從而導致 TiKV 負載異常。</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.43148148148148147" data-s="300,640" data-type="png" data-w="1080" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/0c22e9c9-f38c-4dec-b58b-d35a9460e937.png" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">locate 函數導致全表掃描</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">然而上述的查詢條件可以通過 like 方式去實現，通過使用 like 語法，查詢可以成功使用到 PARTITIONS 表的 UNIQUEPARTITION 索引過濾，進而在 TiKV 端進行索引過濾降低負載。</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.45" data-s="300,640" data-type="png" data-w="1080" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/35186c1a-9fcf-43a9-a5a0-7d7fa3ca1690.png" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;"><span style="font-size: 14px;color: rgb(136, 136, 136);">like 語法走索引過濾</span></span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">通過實現將 locate 函數查詢轉換為 like 語法查詢，有效降低了 TiKV 端的負載情況。在 HMS 端完成變更後，TiKV 的 CPU 使用率降低了將近一倍，由於在 KV 端進行索引過濾，相應的 io 使用率有所上升，但網絡傳輸則有明顯的下降，由平均 1G 降低到 200M 左右。</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.34814814814814815" data-s="300,640" data-type="png" data-w="1080" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/d6a4e572-c45f-424b-b9bc-a589fae353c2.png" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">變更前後 TiKV 的負載情況</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">除 TiKV 負載有明顯的降低，TiDB 的整體性能也得到明顯的提升，各項操作耗時呈量級降低。以下整理了 TiDB 增刪改查的天平均耗時情況：</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.5666666666666667" data-s="300,640" data-type="png" data-w="1080" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/d3a73735-d7f8-4d13-ac94-5deb12749daa.png" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">TiDB P999 天平均耗時統計</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">4.5 get_all_functions 優化</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">隨着 hive udf 的不斷增長，HMS 的 get_all_functions api 平均耗時增長的也越來越久，平均在 40-90s，而該 api 在 hive shell 中首次執行查詢操作時會被調用註冊所有的 udf，過長的耗時會影響用户對 hive 引擎的使用體驗，例如執行簡單的 show database 需要等待一分鐘甚至更久才能返回結果。</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.3824074074074074" data-s="300,640" data-type="png" data-w="1080" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/4b18f10c-d130-4c26-8213-44b30511d29c.png" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="color: rgb(136, 136, 136);font-size: 14px;">原 get_all_functions api 平均耗時</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">導致該 api 耗時嚴重的主要原因是 HMS 通過 JDO 方式獲取所有的 Function，在獲取所有的 udf 時後台會遍歷每條 func 去關聯 DBS、FUNC_RU 兩個表，獲取性能極低。而使用 directSQL 的方式去獲取所有 udf 數據，響應耗時都在 1 秒以內完成，性能提升相當明顯。以下為 directSQL 的 SQL 實現邏輯：</p><p powered-by="xiumi.us"><br></p><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="sql"><code><span class="code-snippet_outer"><span class="code-snippet__keyword">select</span> FUNCS.FUNC_NAME,</span></code><code><span class="code-snippet_outer">  DBS.NAME,</span></code><code><span class="code-snippet_outer">  FUNCS.CLASS_NAME,</span></code><code><span class="code-snippet_outer">  FUNCS.OWNER_NAME,</span></code><code><span class="code-snippet_outer">  FUNCS.OWNER_TYPE,</span></code><code><span class="code-snippet_outer">  FUNCS.CREATE_TIME,</span></code><code><span class="code-snippet_outer">  FUNCS.FUNC_TYPE,</span></code><code><span class="code-snippet_outer">  FUNC_RU.RESOURCE_URI,</span></code><code><span class="code-snippet_outer">  FUNC_RU.RESOURCE_TYPE</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">from</span> FUNCS</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">left</span><span class="code-snippet__keyword">join</span> FUNC_RU <span class="code-snippet__keyword">on</span> FUNCS.FUNC_ID = FUNC_RU.FUNC_ID</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">left</span><span class="code-snippet__keyword">join</span> DBS <span class="code-snippet__keyword">on</span> FUNCS.DB_ID = DBS.DB_ID</span></code></pre></section><p powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>五、總結</p></section></section><p powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p>我們從 2021 年 7 月份開始對 TiDB 進行調研，在經歷數個月的測試於同年 11 月末將 MySQL 引擎切換到 TiDB。由於前期測試主要集中在兼容性和性能測試上，忽略了 TiDB 自身可能潛在的問題，在上線初期經歷了數次因慢查詢日誌將 TiDB 內存打爆的情況，在這特別感謝我們的 DBA 團隊、平台運營團隊及 TiDB 官方團隊幫忙分析、解決問題，得以避免該問題的再次發生；與此同時，由於當前 HMS 使用的版本較低，加上大數據的組件在不斷的升級演進，我們也需要去兼容升級帶來的變動，如 HDFS 升級到 3.x 後對 EC 文件讀取的支持，SPARK 獲取分區避免全表掃描改造等；此外由於 TiDB 的 latin 字符集支持中文字符的寫入，該特性會導致用户誤寫入錯誤的中文分區，對於此類型數據無法通過現有 API 進行刪除，還需要在應用層去禁止該類型錯誤分區寫入，避免無用數據累積。</p><p><br></p><p>經歷了一年多的實際生產環境檢驗，TiDB 內存整體使用在 10% 以內，TiKV CPU 使用平穩，使用峯值均在 30 核內，暫不存在系統瓶頸；HMS 服務的穩定性整體可控，關鍵 API 性能指標滿足業務的實際需求，為業務的增長提供可靠支持。在未來三年內，我們將保持該架構去支撐整個大數據平台組件的穩定運行，期間我們也將持續關注行業內的變動，吸收更多優秀經驗應用到我們的生產環境中來，包括但不限於對性能更好的高版本 TiDB 嘗試，HMS 的性能優化案例。</p></section><p powered-by="xiumi.us"><br></p><section style="margin-right: 0%;margin-bottom: 20px;margin-left: 0%;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: middle;width: 40%;align-self: center;flex: 0 0 auto;"><section style="margin-top: 0.5em;margin-bottom: 0.5em;" powered-by="xiumi.us"><section style="border-top: 1px dotted rgb(90, 98, 114);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section></section><section style="display: inline-block;vertical-align: middle;width: 20%;align-self: center;flex: 0 0 auto;"><section style="text-align: center;color: rgb(45, 66, 87);font-size: 11px;" powered-by="xiumi.us"><p>END</p></section></section><section style="display: inline-block;vertical-align: middle;width: 40%;align-self: center;flex: 0 0 auto;"><section style="margin-top: 0.5em;margin-bottom: 0.5em;" powered-by="xiumi.us"><section style="border-top: 1px dotted rgb(90, 98, 114);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section></section></section><section style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><section style="padding-left: 1em;padding-right: 1em;display: inline-block;text-align: center;"><span style="display: inline-block;padding: 0.3em 0.5em;border-radius: 0.5em;background-color: rgb(65, 94, 255);color: rgb(255, 255, 255);" title="" opera-tn-ra-cell="_$.pages:0.layers:0.comps:129.title1"><p>猜你喜歡</p></span></section><section style="border-width: 1px;border-style: solid;border-color: transparent;margin-top: -1em;padding: 20px 10px 10px;background-color: rgb(239, 239, 239);text-align: center;"><section style="font-size: 14px;text-align: left;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247497299%26idx%3D1%26sn%3Dbf5b4b07d96090267e996a1dc3d0dce1%26chksm%3Debdb86c1dcac0fd7b7b662020ec78a154c8011be6cd0d6b19c091fa1befbc5f79ff45890b45b%26scene%3D21%23wechat_redirect" textvalue="vivo 數據中心網絡鏈路質量監測的探索實踐" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">vivo 數據中心網絡鏈路質量監測的探索實踐</a></p></li><li><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247497274%26idx%3D1%26sn%3Db79ed12d3854f14a7e77eaae5f0de6b2%26chksm%3Debdb86a8dcac0fbe9743c35887bbf6299506aa490bfcd220b4872d506152ee1dcc4c5b45799a%26scene%3D21%23wechat_redirect" textvalue="K8s 多集羣實踐思考和探索" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">K8s 多集羣實踐思考和探索</a></p></li><li><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247497145%26idx%3D2%26sn%3D55519f4b73ff9b4a0d19ce6d0ac09a30%26chksm%3Debdb852bdcac0c3d0eb7fdc587942aa7203c63d04f6fefcd688a7a0f0bbaf8288479372695f6%26scene%3D21%23wechat_redirect" textvalue="JVM 內存大對象監控和優化實踐" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">JVM 內存大對象監控和優化實踐</a></p></li></ul></section></section></section><p powered-by="xiumi.us"><br></p><section class="mp_profile_iframe_wrp"><mp-common-profile class="custom_select_card mp_profile_iframe mp_common_widget" data-pluginname="mpprofile" data-id="MzI4NjY4MTU5Nw==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt45QXJZicZ9gaNU2mRSlvqhQd94MJ7oQh4QFj1ibPV66xnUiaKoicSatwaGXepL5sBDSDLEckicX1ttibHg/0?wx_fmt=png" data-nickname="vivo 互聯網技術" data-alias="vivoVMIC" data-signature="分享 vivo 互聯網技術乾貨與沙龍活動，推薦最新行業動態與熱門會議。" data-from="0"></mp-common-profile></section></section><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公眾號 - vivo 互聯網技術（vivoVMIC）。<br>如有侵權，請聯繫 support@oschina.cn 刪除。<br>本文參與「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源創計劃</a>」，歡迎正在閲讀的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 08 Oct 2023 02:26:06 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/vivotech/blog/10114822</guid>
            <link>https://my.oschina.net/vivotech/blog/10114822</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[蘋果 App Store 免費榜第一是黃色軟件]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>澎湃新聞今日報道蘋果 App Store 出現偽裝成學習軟件的黃色軟件，並且衝上了「免費 App」排行榜第一名。</p><p>據悉，該軟件的年齡分級為 4 歲以上，但是會引導用户進入賭博和其他黃色網站。網友小同表示，他下載了這款軟件，想要學習英語字母，結果發現是一個色情視頻軟件。他認為這種偽裝成學習軟件的行為很危險，很容易對孩子造成不良影響。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-c7a0ce5e4272f1b06c5119529647215fb11.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-69f6205b4eceb10672c0a3cff67e4f52d48.png" referrerpolicy="no-referrer"></p><p>事件被曝光後，蘋果客服雖然進行了迴應，但直到下午仍未下架軟件。甚至排行榜更新後，App Store 免費榜第一、二名再次出現黃色軟件，名為「騎 XX」、「牡丹 XXX」，年齡分級為 4 歲以上。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-8b7f27342ea504c47ae6724514736b106a3.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-db2cf9f1307034d7e3a68e35ea067a0fe4f.png" referrerpolicy="no-referrer"></p><p><strong style="color:#424242">截至發稿，這些軟件已被下架</strong><span style="background-color:#ffffff; color:#424242">。</span></p><p><span style="background-color:#ffffff; color:#424242">眾所周知，蘋果應用商店的審核規則極為嚴格。</span>上面提到的 App 其實就是瀏覽器套殼，前端顯示的內容可以通過後台隨意修改。但問題在於，蘋果 App 的審核團隊為何讓這些「套殼」 App 上架到了應用商店？</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 07 Oct 2023 14:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260711</guid>
            <link>https://www.oschina.net/news/260711</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[VS Code 的 C# 開發套件 (C# Dev Kit) 正式 GA]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>今年 6 月，微軟在 Visual Studio Code 的插件市場<a href="https://www.oschina.net/news/244148/c-sharp-dev-kit-for-visual-studio-code" target="_blank">上架</a>了官方打造的<strong> C# 開發套件 —— C# Dev Kit</strong>，讓開發者在 VS Code 中方便地進行 C# 開發。</p><p>據介紹，C# Dev Kit 提高了開發者在使用 VS Code 過程中開發 C# 語言產品的效率。該套件兼容 C# 擴展，由語言服務器協議&nbsp; (LSP) 主機提供支持，從而創建一個高性能、可擴展且靈活的工具環境，可輕鬆將新體驗集成到 C# for VS Code 中。</p><p>經過 4 個多月的測試和打磨，微軟近日宣佈&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Fdotnet%2Fcsharp-dev-kit-now-generally-available%2F" target="_blank"><strong>C# Dev Kit 正式 GA</strong></a>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-abd88ca70f16b7de5318e2944c0f5c847dd.png" referrerpolicy="no-referrer"></p><p>微軟表示在預覽版期間，累計為 C# Dev Kit 修復了 350 多個問題，其中大部分由社區報告，並對該產品進行了 300 多項有針對性的改進。</p><p>微軟稱用户的反饋加速推進了 C# Dev Kit 的正式發佈，開發團隊會繼續提升性能和可靠性，並將每月添加新功能。</p><p>根據微軟的介紹，C# Dev Kit 從 Visual Studio 中借用了一些開發者們熟悉的概念，並能夠與現有的 C# 擴展一起使用，以及通過增加一套強大的工具和實用程序來增強 C# 開發環境，這些工具和實用程序與 VS Code 原生集成，以幫助 C# 開發者更快地編寫、調試和維護他們的代碼，並減少錯誤。</p><p>C# Dev Kit 由以下部分組成：</p><ul><li><strong>C# 擴展</strong>：它提供基本的語言服務支持，並繼續獨立於這項工作進行維護；</li><li><strong>C# Dev Kit 擴展</strong>：它建立在 Visual Studio 的基礎上，提供解決方案管理、模板、測試、調試；</li><li><strong>IntelliCode for C# Dev Kit 擴展</strong>：它將 AI 驅動的開發帶到了編輯器中；</li></ul><p><img alt="" src="https://static.oschina.net/uploads/space/2023/0607/112538_up8O_4937141.png" referrerpolicy="no-referrer"></p><p><strong><a href="https://www.oschina.net/news/244148/c-sharp-dev-kit-for-visual-studio-code" target="_blank">點此查看詳細介紹</a></strong>。</p><p>C# Dev Kit 下載地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dms-dotnettools.csdevkit%26ssr%3Dfalse" target="_blank">https://marketplace.visualstudio.com/</a></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 07 Oct 2023 09:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260688/vs-code-csharp-dev-kit-ga</guid>
            <link>https://www.oschina.net/news/260688/vs-code-csharp-dev-kit-ga</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Docker 與 Neo4j 等合作推出 GenAI Stack]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Docker 在其年度 DockerCon 開發者大會主題演講中<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.docker.com%2Fblog%2Fintroducing-a-new-genai-stack%2F" target="_blank">宣佈</a>與 Neo4j、LangChain 和 Ollama 合作推出新的 GenAI Stack。該 GenAI Stack <span style="background-color:#ffffff">簡化了 AI/ML 集成，</span>旨在幫助開發人員快速輕鬆地構建生成式 AI 應用程序，而無需搜索和配置各種技術。</span></p><p><span style="color:#000000"><img alt="" height="263" src="https://oscimg.oschina.net/oscnet/up-0852df0e6f3480e6f6d1ddd240cf679021f.webp" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">根據介紹，GenAI Stack 中包含的內容包括有：</span></p><ul><li style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff"><strong>預配置的 LLM</strong>：提供預配置的大語言模型 (LLM)，例如 Llama2、GPT-3.5 和 GPT-4，以快速啓動 AI 項目。</span></span></li><li style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff"><strong>Ollama&nbsp;管理</strong>：Ollama 簡化了開源 LLM 的本地管理，讓你的 AI 開發過程更加順暢。</span></span></li><li style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff"><strong>Neo4j 作為默認數據庫</strong>：Neo4j 作為默認數據庫，提供圖形和原生向量搜索功能。這有助於揭示數據模式和關係，最終提高 AI/ML 模型的速度和準確性。Neo4j 還充當這些模型的長期存儲器。</span></span></li><li style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff"><strong>Neo4j 知識圖譜</strong>：Neo4j 知識圖譜為 LLM 提供更精確的 GenAI 預測和結果。</span></span></li><li style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff"><strong>LangChain 編排</strong>：LangChain 促進了 LLM、應用程序和數據庫之間的通信，並提供了一個強大的向量索引。LangChain 是一個用於開發由 LLM 支持的應用程序的框架。其中包括 LangSmith，一種調試、測試、評估和監控 LLM 應用程序的新方法。</span></span></li><li style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff"><strong>全面支持</strong>：提供了一系列有用的工具、代碼模板、操作指南和 GenAI 最佳實踐。</span></span></li></ul><p><img alt="" height="263" src="https://oscimg.oschina.net/oscnet/up-346a6330b9b20f9dbd5753904b2051aeda1.webp" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">此外，該公司還通過</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.docker.com%2Fai-early-access-program%2F" target="_blank">搶先體驗計劃</a><span style="color:#000000">推出了一款新的生成式 AI 助手，名為 Docker AI。&nbsp;Docker 首席執行官 Scott Johnston 表示，與 Copilot 或&nbsp;Amazon&nbsp;CodeWhisperer 等其他代碼生成助手相比，Docker AI 助手可以幫助開發人員定義應用程序的各個方面並排除故障。</span></p><p><span style="color:#000000">"當開發人員編輯 Dockerfile 或 Docker Compose 文件、調試本地 docker build 或在本地運行測試時，Docker AI 會根據具體情況提供自動指導。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 07 Oct 2023 09:05:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260683/docker-genai-stack</guid>
            <link>https://www.oschina.net/news/260683/docker-genai-stack</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Ubuntu 23.10 將正式支持 Raspberry Pi 5]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>根據 omgubuntu 的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.omgubuntu.co.uk%2F2023%2F10%2Fubuntu-23-10-will-support-raspberry-pi-5" target="_blank">報道</a>，即將發佈的 Ubuntu 23.10 會正式支持<a href="https://www.oschina.net/news/259858/introducing-raspberry-pi-5" target="_blank">樹莓派 5</a>。</p><blockquote><p style="margin-left:0px; margin-right:0px; text-align:start"><strong>延伸閲讀：<a href="https://www.oschina.net/news/259858/introducing-raspberry-pi-5" target="_blank">Raspberry Pi 5 將於 10 月底發佈，60 美元起售</a></strong></p></blockquote><p>報道指出，由於 Canonical 開發者可以提前使用樹莓派 5，因此他們能夠在設備上測試即將發佈的 Ubuntu 版本，確定需要支持新硬件的領域，並將所需的新（和已升級）軟件包放入 file_Feature Freeze Exceptions_to （文件_功能凍結異常_隊列）中。</p><p>部分針對樹莓派 5 的改進包括：引入新的&nbsp;<code>pisp</code>&nbsp;包來處理樹莓派 5 大大增強的相機功能；並對&nbsp;<code>python3-gpiozero</code>&nbsp;進行重大更新，以符合新型號對其 GPIO 操作所做的更改。</p><p>另外要注意的是，更新的 rpiboot 軟件包將無法在 Ubuntu 23.10 發佈時及時提供，但由於這不是嚴格要求的，所以問題不大。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 07 Oct 2023 07:05:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260645/ubuntu-23-10-will-support-raspberry-pi-5</guid>
            <link>https://www.oschina.net/news/260645/ubuntu-23-10-will-support-raspberry-pi-5</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[阿里雲 PAI - 靈駿大模型訓練工具 Pai-Megatron-Patch 正式開源]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h3_1"></span><h3>Pai-Megatron-Patch 是什麼</h3><p style="text-align:justify">Pai-Megatron-Patch 工具是阿里雲機器學習平台 PAI 算法團隊研發，基於阿里雲智算服務 PAI-靈駿平台的大模型最佳實踐解決方案配套工具，旨在幫助大模型開發者快速上手靈駿產品，完成大語言模型（LLM）的高效分佈式訓練，有監督指令微調，模型離線推理驗證等完整大模型開發鏈路。該項目提供了業界主流開源大模型基於 Megatron-LM 的訓練&amp;離線推理驗證流程，方便用户快速上手大模型訓練。</p><span id="OSC_h3_2"></span><h3>主要特性</h3><ul><li>多款熱門大模型支持：llama，llama-2，codellama, 百川，通義千問，Falcon，GLM，Starcoder，Bloom，chatglm 等</li><li>支持模型權重互轉轉換：在 Huggingface，Megatron 和 Transformer Engine 之間進行算子命名空間映射</li><li>支持 Flash Attention 2.0 和 Transformer Engine 模式下的 FP8 訓練加速且確保收斂</li><li>豐富且簡單易用的使用示例，支持大模型預訓練，微調，評估和推理，強化學習全流程最佳實踐</li></ul><span id="OSC_h3_3"></span><h3>開源地址</h3><p style="text-align:justify"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Falibaba%2FPai-Megatron-Patch%253Fspm%253Da2c6h.13046898.publish-article.3.5d586ffa9uOzwk" target="_blank">https://github.com/alibaba/Pai-Megatron-Patch</a></p><span id="OSC_h3_4"></span><h3>技術架構</h3><p style="text-align:justify">Pai-Megatron-Patch 的設計理念是不對 Megatron-LM 的源碼進行侵入式修改，即不在 Megatron-LM 裏面添加新的功能特性，將需要擴充完善的部分以 patch 補丁的方式呈現。在 patch 中構建 LLM 訓練鏈路通過依賴 Megatron-LM 核心庫的方法實現和 Megatron-LM 的解耦合。這樣解耦合的好處就是 Megatron-LM 的升級不會影響用户的 LLM 最佳實踐體驗。</p><p style="text-align:justify">Pai-Megatron-Patch 中包含模型庫，分詞器，模型轉換，強化學習，離線文本生成以及使用示例和工具集等用於構建 LLM 訓練的關鍵要素。在模型庫中包含熱門大模型的 Megatron 版本實現，例如 baichuan，bloom，chatglm，falcon，galactica，glm，llama，qwen 和 starcoder，後續還會根據需要及時添加新的 Megatron 版大模型實現。同時 patch 還提供了 huggingface 模型權重和 Megatron 模型權重之間的雙向轉換。一方面是方便用户加載 huggingface 的權重在 Megatron 中繼續預訓練或者微調，另一方面是方便用户對訓練好的 Megatron 模型使用 huggingface 的評估/推理流程對模型質量進行客觀評估。在強化學習部分，patch 提供了 PPO 訓練流程等，方便用户使用 SFT 模型和 RM 模型進行強化學習。最後 patch 提供了大量的使用示例幫助用户快速開始大模型訓練&amp;離線推理。具體請參考阿里雲靈駿產品的使用流程:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2505831.html%253Fspm%253Da2c6h.13046898.publish-article.4.5d586ffa9uOzwk%2526tab%253Donestop" target="_blank">智算服務 PAI 靈駿大模型分佈式訓練方案</a></p><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-2459be9f4c59a8fd9ac6472cd888c176_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h3_5"></span><h3>關鍵技術</h3><span id="OSC_h4_6"></span><h4>模型權重轉換</h4><p style="text-align:justify">研發 Megatron-Patch 的初衷之一就是能將世界各地研發機構在 Huggingface 上放出的熱門大模型使用 Megatron 引擎進行繼續預訓練或者繼續微調。這就需要首先將 Huggingface 模型格式的 ckpt 轉換成 Megatron 模型格式，才能正確加載進來，否則會出現 pytorch 加載模型失敗。Megatron-Patch 的一個核心可靠性保障特徵就是在採用算子拆分，流水並行，序列並行，Zero 顯存優化，BF16 混合精度，梯度檢查點等訓練加速技術確保模型訓練吞吐速度平均提升 1.5 倍以上的同時，在評估任務模式下的單一樣本前向 loss 值，預訓練/微調任務模式下的 loss 曲線，離線文本生成任務模式下的生成效果這三個方面和 Huggingface 是對齊的，從而確保 Megatron 版模型的可靠性。</p><p style="text-align:justify">另一方面，Megatron 版的 transformer 實現方式提供了一種讓用户僅僅通過設置開關就能實現不同種類 GPT 模式的能力。比如 llama 模型打開如下開關即可</p><pre><code>--swiglu \
  --use-rotary-position-embeddings \
  --no-position-embedding \
  --untie-embeddings-and-output-weights \
  --disable-bias-linear</code></pre><p style="text-align:justify">如果想將 llama 模式變成 baichuan 模型，那麼僅僅需要添加採用--use-alibi-mask 開關，同時關閉 Rotary Embeeding 開關即可，具體配置如下所示：</p><pre><code>--swiglu \
  --use-alibi-mask \
  --position-embedding-type none \
  --untie-embeddings-and-output-weights \
  --disable-bias-linear</code></pre><p style="text-align:justify">下面我們以 llama-2 為例，詳解從 huggingface 到 megatron 的模型權重轉換技術。下表總結了兩者在不同 module 上的命名對應關係。在 patch 實現過程中，我們首先將 HF 格式的 ckpt 轉換到一種內部格式，然後再把這種內部格式轉換成對應的外部格式。這樣做可以最大程度複用已有的轉換邏輯來處理新模型。在轉換為內部格式的過程中，</p><p style="text-align:justify">q_proj, k_proj, v_proj 需要沿着第 0 維拼接在一起後賦值給內部變量 query_key_value。</p><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-e3637f10e008e7548046df938ee8bac6_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify">當用户在資源受限情況下需要按照 TP&gt;1 來拆分權重的時候，這裏需要注意的是針對 MLP 層的 gate_proj 和 up_proj 的操作。不能像 qkv 那樣在轉換成內部格式的時候進行 merge 再執行算子拆分。需要在拆分前加入如下針對 MLP 層的權重合並的代碼邏輯才能確保正確收斂。</p><pre><code>for i in range(tp_size):
    params_dict = get_element_from_dict_by_path(output_state_dict[i],
                                                "model.language_model.encoder")
    dense_h_to_4h_1_name = 'mlp.dense_h_to_4h_1.weight'
    dense_h_to_4h_1_layer_name = f"layers.{layer}.{dense_h_to_4h_1_name}"
    dense_h_to_4h_1_weight = params_dict[dense_h_to_4h_1_layer_name]
    dense_h_to_4h_2_name = 'mlp.dense_h_to_4h_2.weight'
    dense_h_to_4h_2_layer_name = f"layers.{layer}.{dense_h_to_4h_2_name}"
    dense_h_to_4h_2_weight = params_dict[dense_h_to_4h_2_layer_name]
    dense_h_to_4h_name = 'mlp.dense_h_to_4h.weight'
    dense_h_to_4h_layer_name = f"layers.{layer}.{dense_h_to_4h_name}"
    params_dict[dense_h_to_4h_layer_name] = torch.cat(
    [dense_h_to_4h_1_weight, dense_h_to_4h_2_weight], dim=0)</code></pre><span id="OSC_h4_7"></span><h4>基於 TE 的 FP8 訓練收斂</h4><p style="text-align:justify">Transformer Engine(TE) 是一個在英偉達 GPUS 上運行的針對 Transformer 模型的加速庫，其中包括針對 Hopper GPU 的 FP8 混合精度，該精度可以在較低的顯存利用率下提供更好的訓練&amp;推理速度。在 TE 內部封裝了 Flash Attention 實現，同時 TE 還提供了一組高度優化後的算子用來構建 Transformer 模型。比如 LayerNormLinear 就是將 LayerNorm 和 QKV-Proojection 進行算子融合，LayerNormMLP 就是將 layernorm 和 mlp 進行算子融合。如下圖所示：</p><p style="text-align:center"><img src="https://pic4.zhimg.com/80/v2-214b47fb7b967d3f92dd7dd58092446b_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify">從 Huggingface 到 TE 模型的權重轉換技術和之前是類似的，也需要事先找到兩者之間的映射關係。從下表可以看出，TE 中多了_extra_state 是用來存 fp8 訓練的 scale 和 history 的，這些在加載的時候會出現衝突，這時只要將 load_state_dict 函數的 strict 設置成 False 就可以了，比如 load_state_dict(state_dict_, strict=False)。</p><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-125038fa0f82beec327ee0234b3b79c2_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify">在 Megatron-Patch 中使用示例中打開 FP8 混合精度訓練開關也很容易，如下所示：</p><pre><code>if [ $PR = fp16 ]; then
    pr_options=" \
        --fp16"
elif [ $PR = bf16 ]; then
    pr_options=" \
        --bf16"
elif [ $PR = fp8 ]; then
    pr_options=" \
        --bf16
        --fp8-hybrid \
        --fp8-amax-compute-algo max \
        --fp8-amax-history-len 1024 \
        --transformer-impl transformer_engine"
fi</code></pre><p style="text-align:justify">我們可以使用如下訓練腳本<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Falibaba%2FPai-Megatron-Patch%2Fblob%2Fmain%2Fexamples%2Fgpt3_llama%2Frun_pretrain_megatron_llama_enwiki.sh%253Fspm%253Da2c6h.13046898.publish-article.5.5d586ffa9uOzwk%2526file%253Drun_pretrain_megatron_llama_enwiki.sh" target="_blank">run_pretrain_megatron_llama_enwiki.sh</a>來測試打開 FP8 開關後的預訓練收斂性。下圖展示了 llama-7B 和 llama-2-70B 模型在打開和關閉 FP8 時的 loss 曲線對比，可以看出基本是重合的。</p><p style="text-align:justify">LLama-7B</p><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-6b4c07368bdeb4e3c80251d6972511f1_720w.webp" referrerpolicy="no-referrer"></p><p>LLama2-70B</p><p style="text-align:center"><img src="https://pic4.zhimg.com/80/v2-6ed82c26ed8ee7661a913687e7905a6b_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h4_8"></span><h4>大模型訓練&amp;推理</h4><p style="text-align:justify">從 github 上獲取 Megatron 模型訓練工具 PAI-Megatron-Patch（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Falibaba%2FPai-Megatron-Patch%253Fspm%253Da2c6h.13046898.publish-article.6.5d586ffa9uOzwk" target="_blank">https://github.com/alibaba/Pai-Megatron-Patch</a>）源代碼並拷貝到工作目錄/mnt/workspace/下。</p><p style="text-align:justify"><strong>模型格式轉換</strong></p><p style="text-align:justify">使用我們提供的模型轉換腳本，將 huggingface 格式的模型文件轉換為 megatron 格式：</p><pre><code>cd /mnt/workspace/
mkdir llama2-ckpts
cd llama2-ckpts
wget https://atp-modelzoo-wlcb-pai.oss-cn-wulanchabu.aliyuncs.com/release/models/pai-megatron-patch/llama2-ckpts/Llama-2-7b-hf.tgz
tar -zxf Llama-2-7b-hf.tgz
mv Llama-2-7b-hf llama2-7b-hf
cd /mnt/workspace/PAI-Megatron-Patch/toolkits/model_checkpoints_convertor/llama
sh model_convertor.sh \
/root/Megatron-LM-23.04        \
/mnt/workspace/llama2-ckpts/llama2-7b-hf         \
/mnt/workspace/llama2-ckpts/llama2-7b-hf-to-megatron-tp1-pp1  \
1  \
1  \
llama-7b \
0 \
false</code></pre><p style="text-align:justify"><strong>繼續預訓練</strong></p><p style="text-align:justify">中文繼續預訓練漢化指引</p><p style="text-align:justify">Step1: 獲取需要擴充詞表的模型（如 llama-13b-hf）</p><p style="text-align:justify">Step2: 獲取需要擴充的詞表</p><ul><li>使用 sentence-piece 代碼庫從自有文本語料中學習詞表，得到 randeng-sp.model 文件</li></ul><p style="text-align:justify">Step3: 詞表擴充</p><ul><li>擴充模型 tokenizer：將 randeng-sp.model 中的詞表添加到 llama-13b-hf 文件夾下 tokenizer.model 中</li><li>擴充模型詞表對應的參數矩陣 
  <ul><li>word_embedding、lm_head</li><li>新詞向量可以使用原詞向量均值作為初始化，比如「天氣」=mean([「天」，「氣」])</li></ul></li><li>修改與詞表大小相關的文件並保存，如 config.json</li></ul><p style="text-align:justify">運行繼續預訓練腳本&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Falibaba%2FPai-Megatron-Patch%2Fblob%2Fmain%2Fexamples%2Fllama2%2Frun_pretrain_megatron_llama.sh%253Fspm%253Da2c6h.13046898.publish-article.7.5d586ffa9uOzwk%2526file%253Drun_pretrain_megatron_llama.sh" target="_blank">run_pretrain_megatron_llama.sh</a>，需要傳入的參數列表如下</p><pre><code>ENV=$1                          # 運行環境: dlc, dsw
MEGATRON_PATH=$2                # 設置開源 Megatron 的代碼路徑
MEGATRON_PATCH_PATH=$3          # 設置 Megatron Patch 的代碼路徑
MODEL_SIZE=$4                   # 模型結構參數量級：7B, 13B
BATCH_SIZE=$5                   # 每卡訓練一次迭代樣本數: 4, 8
GLOBAL_BATCH_SIZE=$6            # 全局 batch size
LR=$7                           # 學習率: 1e-5, 5e-5
MIN_LR=$8                       # 最小學習率: 1e-6, 5e-6
SEQ_LEN=$9                      # 序列長度
PAD_LEN=${10}                   # Padding 長度：100
EXTRA_VOCAB_SIZE=${11}          # 詞表擴充大小
PR=${12}                        # 訓練精度: fp16, bf16
TP=${13}                        # 模型並行度
PP=${14}                        # 流水並行度
AC=${15}                        # 激活檢查點模式: sel, full
DO=${16}                        # 是否使用 Megatron 版 Zero-1 降顯存優化器: true, false
FL=${17}                        # 是否使用 Flash Attention: true, false
SP=${18}                        # 是否使用序列並行: true, false
SAVE_INTERVAL=${19}             # 保存 ckpt 的間隔
DATASET_PATH=${20}              # 訓練數據集路徑
PRETRAIN_CHECKPOINT_PATH=${21}  # 預訓練模型路徑
TRAIN_TOKENS=${22}              # 訓練 token 數
WARMUP_TOKENS=${23}             # 預熱 token 數
OUTPUT_BASEPATH=${24}           # 訓練輸出文件路徑</code></pre><p style="text-align:justify">注意設置正確的數據集<strong>掛載路徑 WORK_DIR</strong>以及<strong>運行環境 ENV</strong>，運行示例如下所示：</p><pre><code>export WORK_DIR=/mnt/workspace
cd ${WORK_DIR}/PAI-Megatron-Patch/examples/llama2
bash run_pretrain_megatron_llama.sh \
dlc \
/root/Megatron-LM-23.04   \
${WORK_DIR}/PAI-Megatron-Patch  \
7B   \
1    \
16 \
1e-5   \
1e-6   \
2048  \
80  \
0   \
fp16  \
1   \
1  \
sel  \
true   \
false  \
false   \
100000  \
${WORK_DIR}/llama2-datasets/wudao/wudao_llamabpe_text_document   \
${WORK_DIR}/llama2-ckpts/llama2-7b-hf-to-megatron-tp1-pp1   \
100000000   \
10000   \
${WORK_DIR}/output_megatron_llama2/</code></pre><p style="text-align:justify"><strong>有監督微調</strong></p><p style="text-align:justify">在微調開始之前，請先進入<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Falibaba%2FPai-Megatron-Patch%2Fblob%2Fmain%2Ftoolkits%2Fpretrain_data_preprocessing%2FREADME.md%253Fspm%253Da2c6h.13046898.publish-article.8.5d586ffa9uOzwk%2526file%253DREADME.md" target="_blank">https://github.com/alibaba/Pai-Megatron-Patch/blob/main/toolkits/pretrain_data_preprocessing/README.md</a>&nbsp;獲取 json 文件。運行<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Falibaba%2FPai-Megatron-Patch%2Fblob%2Fmain%2Fexamples%2Fllama2%2Frun_finetune_megatron_llama.sh%253Fspm%253Da2c6h.13046898.publish-article.9.5d586ffa9uOzwk%2526file%253Drun_finetune_megatron_llama.sh" target="_blank">run_finetune_megatron_llama.sh</a>腳本，需要傳入的參數列表如下</p><pre><code>ENV=$1                          # 運行環境: dlc, dsw
MEGATRON_PATH=$2                # 設置開源 Megatron 的代碼路徑
MEGATRON_PATCH_PATH=$3          # 設置 Megatron Patch 的代碼路徑
MODEL_SIZE=$4                   # 模型結構參數量級: 7B, 13B
BATCH_SIZE=$5                   # 每卡訓練一次迭代樣本數: 4, 8
LR=$6                           # 學習率: 1e-5, 5e-5
MIN_LR=$7                       # 最小學習率: 1e-6, 5e-6
SEQ_LEN=$8                      # 序列長度
PAD_LEN=$9                      # Padding 長度：100
EXTRA_VOCAB_SIZE=${10}          # 詞表擴充大小
PR=${11}                        # 訓練精度: fp16, bf16
TP=${12}                        # 模型並行度
PP=${13}                        # 流水並行度
AC=${14}                        # 激活檢查點模式: sel, full
DO=${15}                        # 是否使用 Megatron 版 Zero-1 降顯存優化器: true, false
FL=${16}                        # 是否使用 Flash Attention: true, false
SP=${17}                        # 是否使用序列並行: true, false
TRAIN_DATASET_PATH=${18}        # 訓練數據集路徑
VALID_DATASET_PATH=${19}        # 驗證數據集路徑
PRETRAIN_CHECKPOINT_PATH=${20}  # 預訓練模型路徑
EPOCH=${21}                     # 訓練迭代輪次
OUTPUT_BASEPATH=${22}           # 訓練輸出文件路徑</code></pre><p style="text-align:justify">多節點運行示例如下所示：</p><pre><code>export WORK_DIR=/mnt/workspace
cd ${WORK_DIR}/PAI-Megatron-Patch/examples/llama2
sh run_finetune_megatron_llama.sh  \
dlc    \
/root/Megatron-LM-23.04   \
${WORK_DIR}/PAI-Megatron-Patch  \
7B     \
1      \
1e-5   \
1e-6   \
2048   \
80     \
0      \
fp16   \
1      \
1      \
sel    \
true   \
false  \
false  \
${WORK_DIR}/llama2-datasets/wudao_train.json   \
${WORK_DIR}/llama2-datasets/wudao_valid.json   \
${WORK_DIR}/llama2-ckpts/llama2-7b-hf-to-megatron-tp1-pp1   \
2   \
${WORK_DIR}/output_megatron_llama2/
</code></pre><p style="text-align:justify"><strong>離線推理</strong></p><p style="text-align:justify">模型訓練完成後，可以進行離線推理，評估模型效果。根據上面的訓練流程不同，我們提供了 Megatron 格式的推理鏈路。對於 Megatron 訓練的模型，可以直接用 Megatron 框架進行推理。</p><pre><code>ENV=$1                          # 運行環境: dlc, dsw
MEGATRON_PATH=$2                # 設置開源 Megatron 的代碼路徑
MEGATRON_PATCH_PATH=$3          # 設置 Megatron Patch 的代碼路徑
CHECKPOINT_PATH=$4              # 模型微調階段的模型保存路徑
MODEL_SIZE=$5                   # 模型結構參數量級: 1.1B, 1.7B, 7.1B
TP=$6                           # 模型並行度
BS=$7                           # 每卡推理一次迭代樣本數: 1, 4, 8
SEQ_LEN=$8                      # 序列長度: 256, 512, 1024
PAD_LEN=$9                      # PAD 長度：需要將文本拼接到的長度
EXTRA_VOCAB_SIZE=${10}          # 模型轉換時增加的 token 數量
PR=${11}                        # 推理採用的精度: fp16, bf16
TOP_K=${12}                     # 採樣策略中選擇排在前面的候選詞數量 (0-n): 0, 5, 10, 20
INPUT_SEQ_LEN=${13}             # 輸入序列長度: 512
OUTPUT_SEQ_LEN=${14}            # 輸出序列長度: 256
INPUT_FILE=${15}                # 需要推理的文本文件: input.txt, 每行為一個樣本
OUTPUT_FILE=${16}               # 推理輸出的文件: output.txt
# TOP_K 和 TOP_P 必須有一個為 0
TOP_P=${17}                     # 採樣策略中選擇排在前面的候選詞百分比 (0-1): 0, 0.85, 0.95
TEMPERATURE=${18}               # 採樣策略中温度懲罰: 1-n
REPETITION_PENALTY=${19}        # 避免生成是產生大量重複，可以設置為 (1-2) 默認為 1.2</code></pre><ul><li>此處提供一個離線推理輸出的文件，推理的數據組織形式需要與微調時的保持一致。 
  <ul><li>測試樣本：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fatp-modelzoo-wlcb-pai.oss-cn-wulanchabu.aliyuncs.com%2Frelease%2Fmodels%2Fpai-megatron-patch%2Fllama2-datasets%2Fpred_input.jsonl%253Fspm%253Da2c6h.13046898.publish-article.10.5d586ffa9uOzwk%2526file%253Dpred_input.jsonl" target="_blank">https://atp-modelzoo-wlcb-pai.oss-cn-wulanchabu.aliyuncs.com/release/models/pai-megatron-patch/llama2-datasets/pred_input.jsonl</a></li></ul></li><li>注意： 
  <ul><li>模型保存的路徑下缺少 tokenizer 依賴的文件，需要將微調前模型路徑下所有 json 文件及 tokenizer.model 拷貝至保存模型的路徑下（位於{OUTPUT_BASEPATH }/checkpoint），與 latest_checkpointed_iteration.txt 同級。</li></ul></li></ul><p style="text-align:justify">以下有監督微調過程保存模型的推理代碼，需要將 run_text_generation_megatron_llama.sh 腳本中 CUDA_VISIBLE_DEVICES 參數設置為 0；GPUS_PER_NODE 參數設置為 1；同時使用下列代碼進行推理。此時使用單卡進行推理。<strong>注意：此處模型 tp 為 1，可使用單卡推理；如果 tp&gt;1，則需使用相應卡數進行推理。</strong></p><pre><code>export WORK_DIR=/mnt/workspace
cd ${WORK_DIR}/PAI-Megatron-Patch/examples/llama2
bash run_text_generation_megatron_llama.sh \
dsw \
/root/Megatron-LM-23.04 \
${WORK_DIR}/PAI-Megatron-Patch \
../../../llama2-train \
7B \
1 \
1 \
1024 \
1024 \
0 \
fp16 \
10 \
512 \
512 \
${WORK_DIR}/pred_input.jsonl \
${WORK_DIR}/llama2_pred.txt \
0 \
1.0 \
1.2</code></pre><span id="OSC_h4_9"></span><h4>大模型強化學習</h4><p style="text-align:justify">一般來説，SFT 微調過的模型在對話場景已經會有不錯的表現了。如果想進一步提升模型效果，可以再加上 RLHF 訓練。包括獎勵模型（Reward Model）的訓練和強化學習（PPO）的訓練。這裏展示瞭如何使用當前最常用的 RLHF 開源代碼框架，DeepSpeed-Chat 和 trlx，來進行獎勵函數訓練（RM），以及強化學習優化（PPO）。</p><p style="text-align:justify"><strong>模型格式轉換</strong></p><p style="text-align:justify">如果基於 huggingface 格式的模型直接進行獎勵模型訓練（RM）和強化學習優化（PPO），可以跳過此步驟。</p><p style="text-align:justify">如果基於 Megatron 格式的模型，如 PAI-Megatron-Patch 訓練好的 SFT 模型，進行 RM 和 PPO 訓練，需要使用我們提供的模型轉換腳本，先將 Megatron 格式的模型文件轉換為 huggingface 格式。</p><p style="text-align:justify">LLaMA2 模型轉換：</p><pre><code>cd PAI-Megatron-Patch/toolkits/model_checkpoints_convertor/gpt3_llama
bash model_convertor.sh \
/path/to/Megatron-LM \
/path/to/megatron_llama2_ckpt \
/path/to/hf_llama2_ckpt \
1 \
1 \
llama-7b \
0 \
true</code></pre><p style="text-align:justify">BLOOM 模型轉換：</p><pre><code>cd PAI-Megatron-Patch/toolkits/model_checkpoints_convertor/bloom
bash model_convertor_huggingface_megatron.sh \
/path/to/Megatron-LM \
/path/to/megatron_bloom_ckpt \
/path/to/hf_bloom_ckpt \
1 \
1 \
true</code></pre><p style="text-align:justify"><strong>DeepSpeed-Chat</strong></p><p style="text-align:justify">下載安裝開源社區 DeepSpeed-Chat 源代碼：</p><pre><code>cd PAI-Megatron-Patch/rlhf/deepspeed-chat
git clone https://github.com/microsoft/DeepSpeedExamples.git
cp -f rm_main.py DeepSpeedExamples/applications/DeepSpeed-Chat/training/step2_reward_model_finetuning/main.py
cp -f utils.py DeepSpeedExamples/applications/DeepSpeed-Chat/training/utils/utils.py
cd DeepSpeedExamples/applications/DeepSpeed-Chat/
pip install -r requirements.txt</code></pre><p style="text-align:justify">基於 LLaMA2 模型訓練獎勵模型（RM）：</p><pre><code>cd training/step2_reward_model_finetuning/ &amp;&amp; bash training_scripts/llama2/run_llama2_7b.sh</code></pre><p style="text-align:justify">基於 LLaMA2 進行強化學習優化訓練（PPO）：</p><pre><code>cd training/step3_rlhf_finetuning/ &amp;&amp; bash training_scripts/llama2/run_llama2_7b_lora.sh</code></pre><p style="text-align:justify"><strong>trlx</strong></p><p style="text-align:justify">下載安裝開源社區 trlx 源代碼：</p><pre><code>cd PAI-Megatron-Patch/rlhf/trlx
git clone https://github.com/CarperAI/trlx.git
cp trlx_bloom_rlhf.py trlx_bloom_rlhf_test.py trlx/examples/summarize_rlhf/
cp train_reward_model_bloom.py reward_model_bloom.py ds_config_bloom.json trlx/examples/summarize_rlhf/reward_model/
cp -f ds_config_trlx_gptj_summarize.json trlx/examples/summarize_rlhf/configs/
cd trlx
pip install -e .</code></pre><p style="text-align:justify">基於 BLOOM 模型訓練獎勵模型（RM）：</p><pre><code>cd examples/summarize_rlhf/reward_model/ &amp;&amp; deepspeed train_reward_model_bloom.py</code></pre><p style="text-align:justify">基於 GPT-J 模型訓練獎勵模型（RM）：</p><pre><code>cd examples/summarize_rlhf/reward_model/ &amp;&amp; deepspeed train_reward_model_gptj.py</code></pre><p style="text-align:justify">基於 BLOOM 模型進行強化學習優化訓練（PPO）：</p><pre><code>cd examples/summarize_rlhf/ &amp;&amp; accelerate launch --config_file configs/default_accelerate_config.yaml trlx_bloom_rlhf.py</code></pre><p style="text-align:justify">基於 GPT-J 模型進行強化學習優化訓練（PPO）：</p><pre><code>cd examples/summarize_rlhf/ &amp;&amp; accelerate launch --config_file configs/default_accelerate_config.yaml trlx_gptj_text_summarization.py</code></pre><p style="text-align:justify">PPO 單測</p><p style="text-align:justify">如果您想跳過，有監督微調（SFT）與，獎勵模型訓練（RM）兩個步驟，只單獨測試 PPO 模塊的性能，可以運行如下指令單測 PPO：</p><pre><code>cd examples/summarize_rlhf/ &amp;&amp; accelerate launch --config_file configs/default_accelerate_config.yaml trlx_bloom_rlhf_test.py</code></pre><span id="OSC_h3_10"></span><h3>開源生態——構想和未來</h3><p style="text-align:justify">在 PAI-Megatron-Patch 的開發過程中，我們圍繞中文大模型訓練加速落地沉澱了以下幾個方面的內容：</p><ul><li>Huggingface 的模型權重無損轉換成 Megatron 或者 Transformer Engine 可讀的模型權重。</li><li>H800 集羣開啓 FP8 混合精度訓練確保收斂。</li><li>LLM 大模型在 PAI 靈駿智算平台上的最佳實踐。</li><li>強化學習技術在 PAI 靈駿智算平台上的最佳實踐。</li></ul><p style="text-align:justify">後續在 PAI-Megatron-Patch 中還會陸續放出更多高質量的大模型和最佳實踐。</p><span id="OSC_h3_11"></span><h3>參考文獻</h3><p style="text-align:justify">[1]. Attention Is All You Need</p><p style="text-align:justify">[2]. Megatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism</p><p style="text-align:justify">[3]. Reducing Activation Recomputation in Large Transformer Models</p><p style="text-align:justify">[4]. FP8 Formats for Deep Learning</p><p style="text-align:justify">[5]. ZeRO: Memory Optimizations Toward Training Trillion Parameter Models</p><p style="text-align:justify">[6]. LLaMA: Open and Efficient Foundation Language Models</p><p style="text-align:justify">[7]. Llama 2: Open Foundation and Fine-Tuned Chat Models</p><p style="text-align:justify">[8]. Benchmarking Large Language Models on NVIDIA H100 GPUs with CoreWeave</p><blockquote><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fclick.aliyun.com%2Fm%2F1000373503%2F" target="_blank"><span style="color:#e67e22">點擊立即免費試用雲產品，開啓雲上實踐之旅！</span></a></strong></blockquote><p style="text-align:justify"><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.aliyun.com%2Farticle%2F1337652%3Futm_content%3Dg_1000381155" target="_blank">原文鏈接</a></strong></p><p style="text-align:justify"><strong>本文為阿里雲原創內容，未經允許不得轉載。</strong></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 07 Oct 2023 03:55:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/yunqi/blog/10115767</guid>
            <link>https://my.oschina.net/yunqi/blog/10115767</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenJDK 合併英特爾 x86-simd-sort，將數據排序速度提高 7-15 倍]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">今年早些時候，英特爾發佈了<span style="background-color:#ffffff">一個利用了 AVX-512 的 x86-simd-sort 快速排序庫</span>；當 Numpy 將 <span style="background-color:#ffffff">x86-simd-sort 代碼進行合併後發現</span>，對於 16 位到 64 位的數據類型，排序速度提高了 10~17 倍。如今，英特爾軟件工程師又發佈了 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fintel%2Fx86-simd-sort%2Freleases%2Ftag%2Fv3.0" target="_blank">x86-simd-sort 3.0</a>，OpenJDK 也已經將這一修改版進行了合併。</span></p><p><img height="254" src="https://oscimg.oschina.net/oscnet/up-e6ce9bf7b77cccf7d2121e07398176707ac.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">x86-simd-sort 3.0 添加了一個新的「avx512_argselect」方法</span><span style="background-color:#ffffff; color:#000000">，用於</span><span style="color:#000000">計算 arg nth_element，該</span><span style="background-color:#ffffff; color:#000000">方法</span><span style="color:#000000">返回一個對數據數組進行分區的索引數組。x86-simd-sort 3.0 版本還對其 benchmarks 進行了改進，現在使用 __builtin_cpu_supports 而不是 querying cpuinfo，</span><span style="background-color:#ffffff; color:#000000">並進行了各種其他更改。</span><br><br><span style="color:#000000">目前，x86-simd-sort 3.0 已合併至&nbsp;Numpy 主分支中，它提供了 np.partition 和 np.argpartition 的 AVX-512 矢量化版本。將 np.partition 的 16 位速度提高了 25 倍，將 32 位 dtypes 的速度提高了 17 倍，將 64 位 dtypes 的速度提高了約 8 倍。與此同時，<span style="background-color:#ffffff">新的 avx512_argselect 方法還使&nbsp;</span>np.argpartition 的速度提高了 6.5 倍。</span></p><p><span style="color:#000000">併入 OpenJDK 的 x86-simd-sort 是一個略有修改的版本，該版本將 <span style="background-color:#ffffff">32 位數據排序速度提高了 15 倍，64 位數據排序速度提高了約 7 倍。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">更多詳情<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopenjdk%2Fjdk%2Fpull%2F14227" target="_blank">可查看此處</a>。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 07 Oct 2023 03:51:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260605/intel-x86-simd-sort-3-0-openjdk</guid>
            <link>https://www.oschina.net/news/260605/intel-x86-simd-sort-3-0-openjdk</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[ChatGPT 遭「卡脖子」，OpenAI 計劃自研 AI 芯片]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#000000; text-align:start">根據&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftechcrunch.com%2F2023%2F10%2F06%2Fopenai-said-to-be-considering-developing-its-own-ai-chips%2F%3Fguccounter%3D1%26guce_referrer%3DaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS5oay8%26guce_referrer_sig%3DAQAAAL3fVeW5BS1z3Z9olNE6c2iybavGH0APpfPZxySiJi7WUXe83N7739IvRls5vIwuXKyA2eYoWcTiKlUTh7jVhzMkKKxJTSaY_n4awPm8XvK2tXu2OjLfdsRALDvUWwB1idflbNBNoRwu_fzD-uhZrxP90RGZfxjBWi5mEUiKzpMc" target="_blank">TechCrunch</a>&nbsp;的報道，隨着 AI 芯片短缺的問題日益嚴重，OpenAI 現已開始考慮自研 AI 芯片。</p><p style="color:#000000; text-align:start">據悉，從去年開始 OpenAI 內部就已經開始討論 AI 芯片戰略，以解決其 AI 芯片短缺的問題。這些方案包括自研 AI 芯片、與英偉達等芯片製造商展開更緊密的合作、實現供應商多元化等。</p><p>OpenAI 首席執行官 Sam Altman 去年就公開抱怨英偉達 GPU 芯片稀缺，稱公司受到 GPU 的嚴重限制。</p><p>由於英偉達主導了全球 95% 的 Al 訓練領域市場，隨着英偉達 GPU 顯卡稀缺，加上 AI 算力成本持續攀升，即便強如 OpenAI 也在尋找新方案，從而避免長期被「卡脖子」。</p><p style="color:#000000; text-align:start">報道稱，該公司尚未決定繼續推進。Sam Altman 此前表示已將收購更多 AI 芯片作為公司的首要任務。</p><p style="color:#000000; text-align:start"><img alt="" src="https://static.oschina.net/uploads/space/2023/1007/112609_aSEr_2720166.jpeg" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:start">OpenAI 和大多數競爭對手一樣，依賴基於 GPU 的硬件來開發 ChatGPT、GPT-4 和 DALL-E 3 等模型。GPU 能夠並行執行許多計算，因此非常適合訓練當今最強大的人工智能。</p><p style="color:#000000; text-align:start">不過 GPU 等芯片目前面臨嚴重短缺的問題，據報道，英偉達性能最好的人工智能芯片在 2024 年之前都已售罄。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 07 Oct 2023 03:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260598</guid>
            <link>https://www.oschina.net/news/260598</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[CoDeF —— 強時序一致性視頻處理算法]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>CoDeF 是能夠高度保持視頻時序一致性的的視頻處理算法，可以輕鬆完成視頻風格遷移、視頻關鍵點追蹤（包括流體）、用户自定義的視頻內容編輯等任務。</p><p>CoDeF 支持將圖像風格化算法升級為視頻風格化算法，將圖像關鍵點檢測算法升級為視頻關鍵點跟蹤算法（甚至包括水和煙霧等非剛性物體的追蹤），將圖像語義分割算法升級為視頻物體跟蹤算法，將圖像超分算法升級為視頻超分算法，同時支持用户可交互的視頻內容編輯。</p><p><img src="https://oscimg.oschina.net/oscnet/up-86a32563b77d2c6eaf06e2b3c03c320f292.gif" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Sat, 07 Oct 2023 02:57:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/codef</guid>
            <link>https://www.oschina.net/p/codef</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 字符串插值變量處理工具庫 FlexVars]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-flexvars" class="anchor" href="https://gitee.com/zhangfisher/flexvars#flexvars"></a>FlexVars</h1><p>Powerful string interpolation tool library</p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fzhangfisher.github.io%2Fflexvars%2F%23%2Fcn%2Freadme">中文</a><a href="https://gitee.com/link?target=https%3A%2F%2Fzhangfisher.github.io%2Fflexvars%2F%23%2Fen%2Freadme">English</a></p><h2><a id="user-content-features" class="anchor" href="https://gitee.com/zhangfisher/flexvars#features"></a>Features</h2><p>-Supports positional and dictionary interpolation
-Supports multiple error handling mechanisms
-Support for null value processing mechanism
-Support filter chain processing of input variable values
-Support variable prefix suffix
-98%+unit test coverage</p><h2><a id="user-content-getting-started" class="anchor" href="https://gitee.com/zhangfisher/flexvars#getting-started"></a>Getting Started</h2><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">import</span><span class="p">{</span><span class="nx">FlexVars</span><span class="p">}</span><span class="k">from</span><span class="dl">"</span><span class="s2">flexvars</span><span class="dl">"</span></span><span id="LC2" class="line"></span><span id="LC3" class="line"><span class="kd">const</span><span class="nx">flexvars</span><span class="o">=</span><span class="k">new</span><span class="nx">FlexVars</span><span class="p">({</span></span><span id="LC4" class="line"><span class="na">filters</span><span class="p">:{</span></span><span id="LC5" class="line"><span class="na">currency</span><span class="p">:{</span></span><span id="LC6" class="line"><span class="na">args</span><span class="p">:[</span><span class="dl">"</span><span class="s2">prefix</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">suffix</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">sign</span><span class="dl">"</span><span class="p">],</span></span><span id="LC7" class="line"><span class="na">default</span><span class="p">:{</span><span class="na">prefix</span><span class="p">:</span><span class="dl">"</span><span class="s2">USD </span><span class="dl">"</span><span class="p">,</span><span class="na">suffix</span><span class="p">:</span><span class="dl">""</span><span class="p">,</span><span class="na">sign</span><span class="p">:</span><span class="dl">"</span><span class="s2">$</span><span class="dl">"</span><span class="p">}</span></span><span id="LC8" class="line"><span class="nl">next</span><span class="p">:(</span><span class="na">value</span><span class="p">:</span><span class="kr">any</span><span class="p">,</span><span class="na">args</span><span class="p">:</span><span class="nb">Record</span><span class="o">&lt;</span><span class="kr">string</span><span class="p">,</span><span class="kr">any</span><span class="o">&gt;</span><span class="p">,</span><span class="na">context</span><span class="p">:</span><span class="nx">FlexFilterContext</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span></span><span id="LC9" class="line"><span class="k">return</span><span class="s2">`</span><span class="p">${</span><span class="nx">args</span><span class="p">.</span><span class="nx">prefix</span><span class="p">}${</span><span class="nx">args</span><span class="p">.</span><span class="nx">sign</span><span class="p">}${</span><span class="nx">value</span><span class="p">}${</span><span class="nx">args</span><span class="p">.</span><span class="nx">suffix</span><span class="p">}</span><span class="s2">`</span></span><span id="LC10" class="line"><span class="p">}</span></span><span id="LC11" class="line"><span class="p">}</span></span><span id="LC12" class="line"><span class="p">}</span></span><span id="LC13" class="line"><span class="p">})</span></span><span id="LC14" class="line"></span><span id="LC15" class="line"><span class="kd">const</span><span class="nx">_</span><span class="o">=</span><span class="nx">flexvars</span><span class="p">.</span><span class="nx">replace</span></span><span id="LC16" class="line"></span><span id="LC17" class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">_</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello {}</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">flexvars</span><span class="dl">"</span><span class="p">))</span></span><span id="LC18" class="line"><span class="c1">// =&gt; hello flexvars</span></span><span id="LC19" class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">_</span><span class="p">(</span><span class="dl">"</span><span class="s2">I am {}</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">tom</span><span class="dl">"</span><span class="p">)).</span><span class="nx">toBe</span><span class="p">(</span><span class="dl">"</span><span class="s2">I am tom</span><span class="dl">"</span><span class="p">)</span></span><span id="LC20" class="line"><span class="c1">// =&gt; I am tom</span></span><span id="LC21" class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">_</span><span class="p">(</span><span class="dl">"</span><span class="s2">{ value | currency}</span><span class="dl">"</span><span class="p">,</span><span class="mi">100</span><span class="p">)).</span><span class="nx">toBe</span><span class="p">(</span><span class="dl">"</span><span class="s2">USD $100</span><span class="dl">"</span><span class="p">))</span></span><span id="LC22" class="line"><span class="c1">// =&gt; USD $100</span></span><span id="LC23" class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">_</span><span class="p">(</span><span class="dl">"</span><span class="s2">{ value | currency('RMB','￥','元')}</span><span class="dl">"</span><span class="p">,</span><span class="mi">100</span><span class="p">)).</span><span class="nx">toBe</span><span class="p">(</span><span class="dl">"</span><span class="s2">RMB ￥100 元</span><span class="dl">"</span><span class="p">))</span><span class="c1">// </span></span><span id="LC24" class="line"><span class="c1">// =&gt; RMB ￥100 元</span></span><span id="LC25" class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">_</span><span class="p">(</span><span class="dl">"</span><span class="s2">{ value | currency({prefix:'EUR '',suffix:''',sign:'€'})}</span><span class="dl">"</span><span class="p">,</span><span class="mi">100</span><span class="p">)).</span><span class="nx">toBe</span><span class="p">(</span><span class="dl">"</span><span class="s2">RMB €100</span><span class="dl">"</span><span class="p">))</span></span><span id="LC26" class="line"><span class="c1">// =&gt; EUR €100</span></span><span id="LC27" class="line"></span><span id="LC28" class="line"><span class="nx">flexvars</span><span class="p">.</span><span class="nx">addFilter</span><span class="p">({</span></span><span id="LC29" class="line"><span class="na">name</span><span class="p">:</span><span class="dl">"</span><span class="s2">add</span><span class="dl">"</span><span class="p">,</span></span><span id="LC30" class="line"><span class="na">args</span><span class="p">:[</span><span class="dl">"</span><span class="s2">step</span><span class="dl">"</span><span class="p">],</span></span><span id="LC31" class="line"><span class="na">default</span><span class="p">:{</span><span class="na">step</span><span class="p">:</span><span class="mi">1</span><span class="p">},</span></span><span id="LC32" class="line"><span class="nx">next</span><span class="p">(</span><span class="na">value</span><span class="p">:</span><span class="kr">any</span><span class="p">,</span><span class="na">args</span><span class="p">:</span><span class="nb">Record</span><span class="o">&lt;</span><span class="kr">string</span><span class="p">,</span><span class="kr">any</span><span class="o">&gt;</span><span class="p">,</span><span class="na">context</span><span class="p">:</span><span class="nx">FlexFilterContext</span><span class="p">){</span></span><span id="LC33" class="line"><span class="k">return</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span><span class="o">+</span><span class="nx">args</span><span class="p">.</span><span class="nx">step</span></span><span id="LC34" class="line"><span class="p">}</span></span><span id="LC35" class="line"><span class="p">})</span></span><span id="LC36" class="line"><span class="c1">// call chaining</span></span><span id="LC37" class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">_</span><span class="p">(</span><span class="dl">"</span><span class="s2">{ value | add}</span><span class="dl">"</span><span class="p">,</span><span class="mi">100</span><span class="p">)).</span><span class="nx">toBe</span><span class="p">(</span><span class="dl">"</span><span class="s2">101</span><span class="dl">"</span><span class="p">)</span></span><span id="LC38" class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">_</span><span class="p">(</span><span class="dl">"</span><span class="s2">{ value | add|add }</span><span class="dl">"</span><span class="p">,</span><span class="mi">100</span><span class="p">)).</span><span class="nx">toBe</span><span class="p">(</span><span class="dl">"</span><span class="s2">102</span><span class="dl">"</span><span class="p">)</span></span><span id="LC39" class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">_</span><span class="p">(</span><span class="dl">"</span><span class="s2">{ value | add(2)|add(3) }</span><span class="dl">"</span><span class="p">,</span><span class="mi">100</span><span class="p">)).</span><span class="nx">toBe</span><span class="p">(</span><span class="dl">"</span><span class="s2">105</span><span class="dl">"</span><span class="p">)</span></span><span id="LC40" class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">_</span><span class="p">(</span><span class="dl">"</span><span class="s2">{ value | add(2)|add(3)|add(4) }</span><span class="dl">"</span><span class="p">,</span><span class="mi">100</span><span class="p">)).</span><span class="nx">toBe</span><span class="p">(</span><span class="dl">"</span><span class="s2">109</span><span class="dl">"</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div>]]>
            </description>
            <pubDate>Sat, 07 Oct 2023 02:45:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/zhangfisher/flexvars</guid>
            <link>https://gitee.com/zhangfisher/flexvars</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 買彩票能中大獎？用 Java 盤點常見的概率悖論]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h1_1"></span><h1>引言</h1><p>《雙色球頭獎概率與被雷劈中的概率哪個高？》</p><p>《3 人輪流射擊，槍法最差的反而更容易活下來？》</p><p>讓我們用 Java 來探索 ta 們！</p><span id="OSC_h1_2"></span><h1>悖論 1：著名的三門問題</h1><p><strong>規則描述</strong>：你正在參加一個遊戲節目，你被要求在三扇門中選擇一扇：其中一扇後面有一輛車；其餘兩扇後面則是山羊。你選擇了一道門，假設是一號門，然後知道門後面有什麼的主持人，開啓了另一扇後面有山羊的門，假設是三號門。他然後問你：「你想選擇二號門嗎？請問若想獲得車，參賽者應該換二號門嗎？</p><p><img alt="" src="https://mp.toutiao.com/mp/agw/article_material/open_image/get?code=ZjdjNjc4YjA2ZDYwMTE0MjNiYmViZTFjN2ZkMDQxZWIsMTY5NDA3OTk1MDA0Ng==" referrerpolicy="no-referrer"></p><p><strong>論證</strong>：分析需求，拆解為如下代碼</p><pre><code>/**
 * &lt;p&gt; 三門問題解決方案 &lt;/p&gt;
 * @author yuanfeng.wang
 * @since 2023/8/29
 */
import java.util.Random;

public class ThreeDoorSolution {

    public static void main(String[] args) {
        // 模擬執行 1 萬次，打印獲勝的概率
        threeDoor(10000);
    }

    /**
     * 三門問題邏輯拆解
     * @param numSimulations 總共執行多少輪遊戲
     */
    private static void threeDoor(int numSimulations) {
        int switchWins = 0;
        int stayWins = 0;

        Random random = new Random();
        for (int i = 0; i &lt; numSimulations; i++) {
            // 隨機確定車所在的門
            int carDoor = random.nextInt(3);

            // 玩家隨機選擇一扇門
            int playerChoice = random.nextInt(3);

            // 主持人隨機打開一扇門：要求該門不是玩家選擇的，且必須是羊
            int openedDoor;
            do {
                openedDoor = random.nextInt(3);
            } while (openedDoor == carDoor || openedDoor == playerChoice);

            // 換門後的選擇：不能是打開的門，不能是玩家選擇的門，則是交換之後的門
            int finalChoice;
            do {
                finalChoice = random.nextInt(3);
            } while (finalChoice == playerChoice || finalChoice == openedDoor);

            // 計算是否換門獲勝
            if (finalChoice == carDoor) {
                switchWins++;
            }

            // 計算不換門獲勝
            if (playerChoice == carDoor) {
                stayWins++;
            }
        }

        // 輸出結果
        System.out.println("在 " + numSimulations + " 次模擬中：");
        System.out.println("換門獲勝的概率：" + (double) switchWins / numSimulations);
        System.out.println("不換門獲勝的概率：" + (double) stayWins / numSimulations);
    }
}
// 模擬運行，打印結果如下
// 在 10000 次模擬中：
// 換門獲勝的概率：0.6679
// 不換門獲勝的概率：0.3321

</code></pre><p><strong>結論</strong>：三門問題看似一道簡單的概率題，幾十年來卻一直引發巨大爭議，持兩種不同觀點的人基本是五五開；事實上始終選擇換門的玩家，獲勝的概率 2/3，而保持原方案的勝率只有 1/3</p><span id="OSC_h1_3"></span><h1>悖論 2：雙色球我能中大獎</h1><p><strong>規則描述</strong>：從 1-33 個紅色球中隨機選出 6 個，再從 1-16 個藍色球中隨機選擇 1 個，最終開獎出一注 6+1 組合球，無順序要求；</p><ul><li>一等獎：中 6 紅 + 1 藍</li><li>二等獎：中 6 紅</li><li>三等獎：中 5 紅 + 1 藍</li><li>四等獎：中 4 紅 + 1 藍，或只中 5 個紅</li><li>五等獎：中 3 紅 + 1 藍，或只中 4 個紅</li><li>六等獎：中 1 藍</li></ul><p><strong>論證</strong>：分析玩法，計算一等獎中獎率，從 33 個紅球樣本中選擇 6 個，計算總共的組合數，即數學公式 C(n, m) = n!/((n-m)! * m!)，代入計算 C(33, 6) = 33!/((33-6)! * 6!) = 1107568，再乘以 16，最終得出一等獎獲獎概率 1/17721088。</p><p>分析規則，以下代碼展示了開獎一次，購買 N 注時，打印中獎信息的程序，當代入 N=500 萬時，多次執行，可以很輕鬆打印出一等獎</p><pre><code>
import java.util.*;

/**
 * &lt;p&gt;雙色球隨機模擬&lt;/p&gt;
 * @author yuanfeng.wang
 * @since 2023/8/29
 */
public class SsqSolution {

    private static Random random = new Random();

    /**
     * 開獎的紅球
     */
    private static Set&lt;Integer&gt; winningRedBalls;

    /**
     * 開獎的藍球
     */
    private static int winningBlueBall;

    // 靜態塊初始化一組開獎號碼
    static {
        // 籃球 01-16
        winningBlueBall = random.nextInt(16) + 1;

        // 紅球 01-33 生成 6 個
        winningRedBalls = new HashSet&lt;&gt;();
        while (winningRedBalls.size() &lt; 6) {
            int num = random.nextInt(33) + 1;
            winningRedBalls.add(num);
        }
    }

    public static void main(String[] args) {
        play(500_0000);
    }

    /**
     *
     * @param num 運行一次程序只開一次獎，此參數表示總共購買多少注
     */
    public static void play(int num) {
        System.out.println("\n 本期開獎號碼：");
        System.out.println("紅球：" + winningRedBalls + " 籃球：" + winningBlueBall);
        for (int i = 0; i &lt; num; i++) {
            playOnce();
        }
    }

    private static void playOnce() {
        Set&lt;Integer&gt; userRedBalls = getUserSelectedRedBalls();
        int userBlueBall = getUserSelectedBlueBall();

        int redBallMatch = countMatchingBalls(userRedBalls, winningRedBalls);
        boolean blueBallMatch = (userBlueBall == winningBlueBall);

        if (redBallMatch == 6 &amp;&amp; blueBallMatch) {
            System.out.println("\n 恭喜你中了一等獎！");
            System.out.println("玩家購買的號碼：");
            System.out.println("紅球：" + userRedBalls + " 藍球：" + userBlueBall);
        } else if (redBallMatch == 6) {
            System.out.println("\n 恭喜你中了二等獎！");
        } else if (redBallMatch == 5 &amp;&amp; blueBallMatch) {
//            System.out.println("\n 恭喜你中了三等獎！");
        } else if (redBallMatch == 5 || (redBallMatch == 4 &amp;&amp; blueBallMatch)) {
//            System.out.println("\n 恭喜你中了四等獎！");
        } else if (redBallMatch == 4 || (redBallMatch == 3 &amp;&amp; blueBallMatch)) {
//            System.out.println("\n 恭喜你中了五等獎！");
        } else if (blueBallMatch) {
//            System.out.println("\n 恭喜你中了最小獎！");
        } else {
            //沒中獎，不打印記錄
        }
    }

    /**
     * 返回玩家選擇的 6 個紅球,範圍 1-33，不重複
     */
    private static Set&lt;Integer&gt; getUserSelectedRedBalls() {
        Set&lt;Integer&gt; userRedBalls = new HashSet&lt;&gt;();
        while (userRedBalls.size() &lt; 6) {
            int num = random.nextInt(33) + 1;
            userRedBalls.add(num);
        }
        return userRedBalls;
    }

    /**
     * 玩家選擇的 1 個藍球,範圍 1-16
     */
    private static int getUserSelectedBlueBall() {
        return random.nextInt(16) + 1;
    }

    /**
     * 匹配中了幾個紅球
     * @return 中紅球個數
     */
    private static int countMatchingBalls(Set&lt;Integer&gt; userBalls, Set&lt;Integer&gt; winningBalls) {
        int count = 0;
        for (int ball : userBalls) {
            if (winningBalls.contains(ball)) {
                count++;
            }
        }
        return count;
    }

}

</code></pre><p><strong>結論</strong>：排除其它因素，頭獎概率約 1700 萬分之 1，這個結論並不直觀，例舉如下幾個進行對比</p><p>1.一家祖孫三代人的生日都在同一天的概率約為 27 萬分之一</p><p>2.小行星撞擊地球的概率保守推測是 200 萬分之一</p><p>3.生出全男或全女四胞胎的概率約為 352 萬分之一</p><span id="OSC_h1_4"></span><h1>悖論 3：三個槍手</h1><p><strong>描述</strong>：三個小夥子同時愛上了一個姑娘，為了決定他們誰能娶這個姑娘，他們決定用槍進行一次決鬥。A 的命中率是 30％，B 比他好些，命中率是 50％，最出色的槍手是 C，他從不失誤，命中率是 100％。由於這個顯而易見的事實，為公平起見，他們決定按這樣的順序：A 先開槍，B 第二，C 最後。然後這樣循環，直到他們只剩下一個人。那麼 A 第一槍應該怎麼打？誰活下來的概率最大？</p><p><strong>論證</strong>：每個人的目標都是活下來，為了目標尋找最好的策略。以下開始分人討論</p><p><strong>A：</strong></p><ul><li>若 A 開槍射殺了 B，則下個開槍是 C，C 會 100% 射殺 A，這不是一個好策略</li><li>若 A 開槍射殺了 C，則下一輪 B 會有 50% 的幾率殺掉自己</li><li>若 A 開槍未打中，則下一輪可以坐山觀虎鬥，所以 A 最好的策略看似是故意打空槍更好一些</li></ul><p><strong>B：</strong></p><ul><li>若 A 已經將 C 射殺，此時 B 與 A 互相射擊，B 的生存率高於 A</li><li>B 只能選擇射殺 C，因為只要 C 活着，都會優先射殺 B</li></ul><p><strong>C：</strong></p><ul><li>先消除威脅大的 B，然後再殺掉 A，只要自己有開 2 槍的機會，直接獲勝</li></ul><p><strong>結論</strong>：需求太複雜，暫未實現生存概率計算😭，歡迎補充悖論 3 的代碼論證過程</p><blockquote><p>作者：京東保險&nbsp;王苑灃</p><p>來源：京東雲開發者社區，轉載請註明來源</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sat, 07 Oct 2023 02:40:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/10109696</guid>
            <link>https://my.oschina.net/u/4090830/blog/10109696</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[KubeSphere 社區雙週報 | OpenFunction v1.2.0 發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>KubeSphere 社區雙週報主要整理展示新增的貢獻者名單和證書、新增的講師證書以及兩週內提交過 commit 的貢獻者，並對近期重要的 PR 進行解析，同時還包含了線上/線下活動和佈道推廣等一系列社區動態。</p><p>本次雙週報涵蓋時間為：2023.09.15-2023.09.28。</p><h2>貢獻者名單</h2><p><img src="https://oscimg.oschina.net/oscnet/up-cce05b68864a3f222cd17e6df1aa1c3655b.gif" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-7e6818d775388b1291392b3250789734a38.png" alt="" referrerpolicy="no-referrer"></p><h2>新晉 KubeSphere Contributor</h2><p>兩週內共有 2 位新晉 KubeSphere Contributor，感謝各位對 KubeSphere 社區的貢獻！</p><p><img src="https://oscimg.oschina.net/oscnet/up-ca0b0945c103e0492a91de92a5132784bea.png" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-e3ad1819572baf498ffd15433cf938b034d.png" alt="" referrerpolicy="no-referrer"></p><h2>近期更新</h2><h3>KubeSphere</h3><h4>1. 支持通過 IP 搜索 pod</h4><p>相關 PR：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkubesphere%2Fkubesphere%2Fpull%2F5921" target="_blank">https://github.com/kubesphere/kubesphere/pull/5921</a></p><p>貢獻者：zhou1203</p><h3>OpenFunction</h3><h4>1. 發佈了 OpenFunction v1.2.0，支持使用 keda-addons-http 作為同步函數運行時</h4><p>相關 Release: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenFunction%2FOpenFunction%2Freleases%2Ftag%2Fv1.2.0" target="_blank">https://github.com/OpenFunction/OpenFunction/releases/tag/v1.2.0</a></p><p>貢獻者：wrongerror</p><h4>2. 升級 OpenFunction Chart 依賴組件 Dapr, Keda 以及 contour 的版本</h4><p>相關 PR: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenFunction%2Fcharts%2Fpull%2F51" target="_blank">https://github.com/OpenFunction/charts/pull/51</a></p><p>貢獻者：wrongerror</p><h3>KubeKey</h3><h4>1. 支持部署 Kubernetes v1.27+</h4><p>相關 PR: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkubesphere%2Fkubekey%2Fpull%2F2000" target="_blank">https://github.com/kubesphere/kubekey/pull/2000</a></p><p>貢獻者：pixiake</p><h4>2. 支持部署高可用 Harbor</h4><p>相關 PR：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkubesphere%2Fkubekey%2Fpull%2F1992" target="_blank">https://github.com/kubesphere/kubekey/pull/1992</a></p><p>貢獻者：wenwenxiong</p><blockquote><p>本文由博客一文多發平台 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenwrite.cn%3Ffrom%3Darticle_bottom" target="_blank">OpenWrite</a> 發佈！</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sat, 07 Oct 2023 02:16:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4197945/blog/10115731</guid>
            <link>https://my.oschina.net/u/4197945/blog/10115731</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[越來越多開源項目停更，Java 生態受影響最大]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">Sonatype&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.sonatype.com%2Fintroducing-our-9th-annual-state-of-the-software-supply-chain-report" target="_blank">發佈</a>了最新的一份</span>《軟件供應鏈狀況》報告，深入探討瞭如何在充滿選擇的世界中定義更好的軟件，並探討人工智能 (AI) 對軟件開發的深遠影響；還研究了開源供應、需求和安全之間錯綜複雜的相互作用。</p><p>報告跟蹤了 Java (Maven)、JavaScript (npm)、Python (PyPI)、.NET (NuGet Gallery) 四大開源生態系統的開源應用增長情況。2022 年至 2023 年間，可用開源項目的數量平均增長了 29%。2023 年，開源項目平均發佈了 15 個可供使用的版本，不同開源註冊中心的特定生態系統平均有 10 到 22 個版本。這意味着每個月都會發布 1-2 個新版本，在觀察到的生態系統中總共發佈了 6000 萬個新版本。</p><p><img height="293" src="https://oscimg.oschina.net/oscnet/up-a3af85a689f0adbcfb8236b4dac77b7f235.png" width="500" referrerpolicy="no-referrer"></p><p>每個受檢測的生態系統都表現出一致的項目增長率，平均同比增長率高達 29%。</p><p><img height="295" src="https://oscimg.oschina.net/oscnet/up-9ab7acc5786b753b241922eeaa519953a3d.png" width="500" referrerpolicy="no-referrer"></p><p>但隨着開源組件供應量的持續增長，其需求卻未能與之同步。在過去兩年中，下載量的增長率逐漸下降。2023 年的平均增長率為 33%，與 2021 年 73% 的增長率相比大幅下降。</p><p><span style="color:#000000">與此同時，開源軟件安全問題沒有放緩的跡象。截至 2023 年 9 月，研究團隊共發現了&nbsp;245,032 個惡意軟件包，是往年總和的 2 倍。八分之一的開源下載存在已知風險，且仍有 23% 的 Log4j 下載存在嚴重漏洞。</span></p><p><img height="304" src="https://oscimg.oschina.net/oscnet/up-b8b946760f70163d67ebbf53b91a14930fd.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">開源項目的主動維護也變得越來越少。研究表明，去年有近五分之一（18.6%）的項目停止維護，影響了 Java 和 JavaScript 生態系統。<span style="background-color:#ffffff">只有 11% 的開源項目實際上得到了積極維護。</span>儘管存在這些缺陷，但 Sonatype 仍然表示，近 96% 存在已知漏洞的組件下載可以通過選擇無漏洞版本來避免。</span></p><p><span style="color:#000000">就軟件開發中的人工智能而言，97% 的受訪 DevOps 和 SecOps 領導者表示，他們目前在工作流程中某種程度上使用了人工智能，大多數人每天使用兩個或更多工具。</span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>去年，企業環境中 AI 和 ML 組件的採用率增加了 135%。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">研究還發現，企業自認為的安全程度與實際情況之間存在脱節。67% 的公司表示，他們確信自己的系統中沒有來自漏洞庫的代碼，但今年有 10% 的公司因漏洞組件而遭遇安全漏洞。39% 的公司可以在</span><span style="background-color:#ffffff">&nbsp;1 到 7 天的時間內發現漏洞，29% 的公司需要一週以上的時間，28% 的公司只需要不到一天的時間。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">更多詳情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.sonatype.com%2Fstate-of-the-software-supply-chain%2Fintroduction" target="_blank">查看完整報告</a>。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 06 Oct 2023 04:46:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260454/9th-annual-state-of-the-software-supply-chain-report</guid>
            <link>https://www.oschina.net/news/260454/9th-annual-state-of-the-software-supply-chain-report</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[GCC 安全策略文檔已合併到倉庫]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#000000; text-align:start">最近幾周在 GCC 郵件列表進行討論後，開發團隊為 GCC 代碼庫添加了 GCC 安全策略，以概述編譯器項目的安全流程。</p><p style="color:#000000; text-align:start"><img alt="" src="https://static.oschina.net/uploads/space/2023/1006/113615_PVqj_2720166.jpeg" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:start">該文檔概述了 GCC 安全漏洞處理建議、GCC 語言運行庫的安全注意事項、在 GCC 中實現的安全功能，以及私下報告安全漏洞的最佳方式。</p><p style="color:#000000; text-align:start">GCC 安全政策文檔於週三<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgcc.gnu.org%2Fgit%2F%3Fp%3Dgcc.git%3Ba%3Dcommit%3Bh%3D4cac1d2eec5549927fe0caee179f80007e8d729b" target="_blank">提交</a>到代碼庫。如果希望瞭解更多關於 GCC 安全策略的內容，可以在&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgcc.gnu.org%2Fgit%2F%3Fp%3Dgcc.git%3Ba%3Dblob%3Bf%3DSECURITY.txt" target="_blank">SECURITY.txt</a>&nbsp;中閲讀。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 06 Oct 2023 03:37:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260447/gcc-security-policy</guid>
            <link>https://www.oschina.net/news/260447/gcc-security-policy</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | Rocky Linux 系統安全加固工具 narsil]]>
            </title>
            <description>
                <![CDATA[<p>English | <a href="https://gitee.com/seatonjiang/narsil/blob/main/README.zh-CN.md">簡體中文</a></p><p align="center"><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fseatonjiang%2Fnarsil%23gh-light-mode-only"><img src="https://gitee.com/seatonjiang/narsil/raw/main/.github/narsil-light.png#gh-light-mode-only" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fseatonjiang%2Fnarsil%23gh-dark-mode-only"><img src="https://gitee.com/seatonjiang/narsil/raw/main/.github/narsil-dark.png#gh-dark-mode-only" referrerpolicy="no-referrer"></a></p><p align="center"><img src="https://img.shields.io/static/v1?style=flat-square&amp;message=Rocky%20Linux&amp;color=15B076&amp;logo=rockylinux&amp;logoColor=FFFFFF&amp;label=" referrerpolicy="no-referrer"><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fseatonjiang%2Fnarsil%2Fissues"><img src="https://img.shields.io/github/issues/seatonjiang/narsil?style=flat-square&amp;color=blue" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fseatonjiang%2Fnarsil%2Fpulls"><img src="https://img.shields.io/github/issues-pr/seatonjiang/narsil?style=flat-square&amp;color=brightgreen" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fseatonjiang%2Fnarsil%2Fblob%2Fmain%2FLICENSE"><img src="https://img.shields.io/github/license/seatonjiang/narsil?&amp;style=flat-square" referrerpolicy="no-referrer"></a></p><p align="center"><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fseatonjiang%2Fnarsil%2Fissues">Report Bug</a>
    ·
    <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fseatonjiang%2Fnarsil%2Fissues">Request Feature</a></p><p align="center">System security hardening tool for Rocky Linux</p><h2><a id="user-content--screenshot" class="anchor" href="https://gitee.com/seatonjiang/narsil#-screenshot"></a>💻 Screenshot</h2><h3><a id="user-content-script-execution" class="anchor" href="https://gitee.com/seatonjiang/narsil#script-execution"></a>Script Execution</h3><p align="center"><img src="https://gitee.com/seatonjiang/narsil/raw/main/.github/script-execution.png" referrerpolicy="no-referrer"></p><h3><a id="user-content-login-information" class="anchor" href="https://gitee.com/seatonjiang/narsil#login-information"></a>Login Information</h3><p align="center"><img src="https://gitee.com/seatonjiang/narsil/raw/main/.github/login-information.png" referrerpolicy="no-referrer"></p><h3><a id="user-content-mount-disk" class="anchor" href="https://gitee.com/seatonjiang/narsil#mount-disk"></a>Mount disk</h3><p align="center"><img src="https://gitee.com/seatonjiang/narsil/raw/main/.github/mount-disk.png" referrerpolicy="no-referrer"></p><h2><a id="user-content--features" class="anchor" href="https://gitee.com/seatonjiang/narsil#-features"></a>✨ Features</h2><ul><li>Password can be used for a maximum of 30 days.</li><li>After 30 days of password expiration, the account will be disabled.</li><li>The interval between two password changes is 1 day.</li><li>Warning 7 days before password expiration.</li><li>Set the system default encryption algorithm to SHA512.</li><li>Set a session timeout policy of 180 seconds.</li><li>Each created user will be given their own group.</li><li>The newly created user home directory permissions are changed to 0750.</li><li>Modify the permissions of the home directory of the stock user to 0750.</li><li>Hardened OpenSSH config (Some configs need to be done manually).</li><li>Disable login for users without home directory.</li><li>Disable login by default for new users.</li><li>Disable apport and popular-contest statistics for uploading user information.</li><li>Disable synchronous deletion of user groups when deleting users.</li></ul><p>There are many more settings that are not listed, and you can refer to the files in the <code>scripts</code> directory for more information.</p><h2><a id="user-content--quick-start" class="anchor" href="https://gitee.com/seatonjiang/narsil#-quick-start"></a>🚀 Quick start</h2><h3><a id="user-content-step-1-clone-repo" class="anchor" href="https://gitee.com/seatonjiang/narsil#step-1-clone-repo"></a>Step 1: Clone Repo</h3><p>Make sure the server has git first, otherwise you need to install it using <code>sudo dnf install -y git</code>.</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">git clone https://github.com/seatonjiang/narsil.git</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-step-2-edit-config-file" class="anchor" href="https://gitee.com/seatonjiang/narsil#step-2-edit-config-file"></a>Step 2: Edit Config File</h3><p>Go to project directory.</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nb">cd </span>narsil</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>Be sure to authenticate the contents of the config file.</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">vi narsil.conf</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-step-3-running-script" class="anchor" href="https://gitee.com/seatonjiang/narsil#step-3-running-script"></a>Step 3: Running Script</h3><p>If you are root, you can run it directly, if you are a normal user please use <code>sudo</code> and you must run the script with <code>bash</code>.</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nb">sudo </span>bash narsil.sh</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content--config-options" class="anchor" href="https://gitee.com/seatonjiang/narsil#-config-options"></a>📝 Config Options</h2><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c"># Verify Operation</span></span><span id="LC2" class="line"><span class="py">VERIFY</span><span class="p">=</span><span class="s">'Y'</span></span><span id="LC3" class="line"></span><span id="LC4" class="line"><span class="c"># Cloud Server Metadata Overlay (DNS Server/NTP Server/Hostname)</span></span><span id="LC5" class="line"><span class="py">METADATA</span><span class="p">=</span><span class="s">'Y'</span></span><span id="LC6" class="line"></span><span id="LC7" class="line"><span class="c"># Production Environment Reminder</span></span><span id="LC8" class="line"><span class="py">PROD_TIPS</span><span class="p">=</span><span class="s">'Y'</span></span><span id="LC9" class="line"></span><span id="LC10" class="line"><span class="c"># SSH Port Config</span></span><span id="LC11" class="line"><span class="py">SSH_PORT</span><span class="p">=</span><span class="s">'22'</span></span><span id="LC12" class="line"></span><span id="LC13" class="line"><span class="c"># Time Zone Config</span></span><span id="LC14" class="line"><span class="py">TIME_ZONE</span><span class="p">=</span><span class="s">'Asia/Shanghai'</span></span><span id="LC15" class="line"></span><span id="LC16" class="line"><span class="c"># Hostname Config (not valid if METADATA is Y)</span></span><span id="LC17" class="line"><span class="py">HOSTNAME</span><span class="p">=</span><span class="s">'rockylinux'</span></span><span id="LC18" class="line"></span><span id="LC19" class="line"><span class="c"># DNS Server Config (not valid if METADATA is Y)</span></span><span id="LC20" class="line"><span class="py">DNS_SERVER</span><span class="p">=</span><span class="s">'119.29.29.29 223.5.5.5'</span></span><span id="LC21" class="line"></span><span id="LC22" class="line"><span class="c"># NTP Server Config (not valid if METADATA is Y)</span></span><span id="LC23" class="line"><span class="py">NTP_SERVER</span><span class="p">=</span><span class="s">'ntp.tencent.com'</span></span><span id="LC24" class="line"></span><span id="LC25" class="line"><span class="c"># Docker Config</span></span><span id="LC26" class="line"><span class="py">DOCKER_CE_REPO</span><span class="p">=</span><span class="s">'http://mirrors.tencent.com/docker-ce/linux/centos/docker-ce.repo'</span></span><span id="LC27" class="line"><span class="py">DOCKER_CE_MIRROR</span><span class="p">=</span><span class="s">'mirrors.tencent.com'</span></span><span id="LC28" class="line"><span class="py">DOCKER_HUB_MIRRORS</span><span class="p">=</span><span class="s">'https://hub-mirror.c.163.com'</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content--modular" class="anchor" href="https://gitee.com/seatonjiang/narsil#-modular"></a>🔨 Modular</h2><p>Narsil contains a number of standalone functions that are not in the auto-executed script and need to be used separately using parameters, which can be viewed using the <code>bash narsil.sh --help</code> for all standalone functions.</p><h3><a id="user-content-clear-log-files" class="anchor" href="https://gitee.com/seatonjiang/narsil#clear-log-files"></a>Clear Log Files</h3><p>Clear all syslog files.</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nb">sudo </span>bash narsil.sh <span class="nt">-c</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-install-docker" class="anchor" href="https://gitee.com/seatonjiang/narsil#install-docker"></a>Install Docker</h3><p>Install docker service and set registry mirrors.</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nb">sudo </span>bash narsil.sh <span class="nt">-d</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-mount-disk-1" class="anchor" href="https://gitee.com/seatonjiang/narsil#mount-disk-1"></a>Mount Disk</h3><p>Interactively mount the data disk. Data is priceless, remember to be careful during the operation!</p><blockquote><p>If the selected hard disk is already mounted, you will be prompted to unmount and format the operation.</p></blockquote><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nb">sudo </span>bash narsil.sh <span class="nt">-f</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-change-system-hostname" class="anchor" href="https://gitee.com/seatonjiang/narsil#change-system-hostname"></a>Change system hostname</h3><p>If the parameters of the configuration file have not changed, prioritize getting the metadata.</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nb">sudo </span>bash narsil.sh <span class="nt">-h</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-change-ssh-port" class="anchor" href="https://gitee.com/seatonjiang/narsil#change-ssh-port"></a>Change SSH Port</h3><p>Interactively modify the SSH port.</p><blockquote><p>The port range is recommended to be between 10000 and 65535.</p></blockquote><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nb">sudo </span>bash narsil.sh <span class="nt">-p</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-uninstall-monitoring-component" class="anchor" href="https://gitee.com/seatonjiang/narsil#uninstall-monitoring-component"></a>Uninstall Monitoring Component</h3><p>Remove the various monitoring components installed into the server by the cloud vendor.</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nb">sudo </span>bash narsil.sh <span class="nt">-r</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-add-swap-space" class="anchor" href="https://gitee.com/seatonjiang/narsil#add-swap-space"></a>Add swap space</h3><p>If physical memory is too small, it is recommended to add the swap space.</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nb">sudo </span>bash narsil.sh <span class="nt">-s</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content--structure" class="anchor" href="https://gitee.com/seatonjiang/narsil#-structure"></a>📂 Structure</h2><p>A quick look at the folder structure of this project.</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">narsil</span><span id="LC2" class="line">├── narsil.sh</span><span id="LC3" class="line">├── narsil.conf</span><span id="LC4" class="line">├── config</span><span id="LC5" class="line">│   └── <span class="o">(</span>some config files<span class="o">)</span></span><span id="LC6" class="line">└── scripts</span><span id="LC7" class="line">    └── <span class="o">(</span>some script files<span class="o">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content--contributing" class="anchor" href="https://gitee.com/seatonjiang/narsil#-contributing"></a>🤝 Contributing</h2><p>We welcome all contributions. You can submit any ideas as Pull Requests or as Issues, have a good time! :)</p><h2><a id="user-content--license" class="anchor" href="https://gitee.com/seatonjiang/narsil#-license"></a>📃 License</h2><p>The project is released under the GNU General Public License v3.0, see the <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fseatonjiang%2Fnarsil%2Fblob%2Fmain%2FLICENSE">LICENCE</a> file for details.</p>]]>
            </description>
            <pubDate>Fri, 06 Oct 2023 03:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/seatonjiang/narsil</guid>
            <link>https://gitee.com/seatonjiang/narsil</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 使用 FHE 實現加密大語言模型]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><section data-tool="mdnice 編輯器" data-website="https://www.mdnice.com" style="font-size: 16px;color: black;padding-right: 10px;padding-left: 10px;line-height: 1.6;letter-spacing: 0px;word-break: break-word;text-align: left;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;" data-mpa-powered-by="yiban.io"><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">近來，大語言模型 (LLM) 已被證明是提高編程、內容生成、文本分析、網絡搜索及遠程學習等諸多領域生產力的可靠工具。</p><span id="OSC_h2_1"></span><h2 data-tool="mdnice 編輯器" style="font-weight: bold;font-size: 22px;line-height: 1.2em;margin-top: 2em;margin-bottom: 35px;color: rgb(255, 157, 0);"><span style="font-size: 18px;color: rgb(255, 157, 11);padding-left: 10px;border-left: 5px solid rgb(255, 157, 11);visibility: visible;display: none;"></span><span style="color: rgb(255, 157, 11);visibility: visible;display: inline-block;border-left: 5px solid rgb(255, 157, 0);padding: 2px 13px;margin-right: 3px;height: 50%;font-size: 18px;">大語言模型對用户隱私的影響</span><span style="font-size: 18px;color: rgb(255, 157, 11);display: inline-block;padding-left: 10px;border-left: 5px solid rgb(255, 157, 11);visibility: visible;"></span></h2><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">儘管 LLM 很有吸引力，但如何保護好 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">輸入給這些模型的用户查詢中的隱私</code> 這一問題仍然存在。一方面，我們想充分利用 LLM 的力量，但另一方面，存在向 LLM 服務提供商泄露敏感信息的風險。在某些領域，例如醫療保健、金融或法律，這種隱私風險甚至有一票否決權。</p><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">一種備選解決方案是本地化部署，LLM 所有者將其模型部署在客户的計算機上。然而，這不是最佳解決方案，因為構建 LLM 可能需要花費數百萬美元 (GPT3 為 460 萬美元)，而本地部署有泄露模型知識產權 (intellectual property, IP) 的風險。</p><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">Zama 相信有兩全其美之法: 我們的目標是同時保護用户的隱私和模型的 IP。通過本文，你將瞭解如何利用 Hugging Face transformers 庫並讓這些模型的某些部分在加密數據上運行。完整代碼見，此處。</p><span id="OSC_h2_2"></span><h2 data-tool="mdnice 編輯器" style="font-weight: bold;font-size: 22px;line-height: 1.2em;margin-top: 2em;margin-bottom: 35px;color: rgb(255, 157, 0);"><span style="font-size: 18px;color: rgb(255, 157, 11);padding-left: 10px;border-left: 5px solid rgb(255, 157, 11);visibility: visible;display: none;"></span><span style="color: rgb(255, 157, 11);visibility: visible;display: inline-block;border-left: 5px solid rgb(255, 157, 0);padding: 2px 13px;margin-right: 3px;height: 50%;font-size: 18px;">全同態加密 (Fully Homomorphic Encryption，FHE) 可以解決 LLM 隱私挑戰</span><span style="font-size: 18px;color: rgb(255, 157, 11);display: inline-block;padding-left: 10px;border-left: 5px solid rgb(255, 157, 11);visibility: visible;"></span></h2><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">針對 LLM 部署的隱私挑戰，Zama 的解決方案是使用全同態加密 (FHE)，在加密數據上執行函數。這種做法可以實現兩難自解，既可以保護模型所有者知識產權，同時又能維護用户的數據隱私。我們的演示表明，在 FHE 中實現的 LLM 模型保持了原始模型的預測質量。為此，我們需要調整 Hugging Face transformers 庫，中的 GPT2 實現，使用 Concrete-Python 對推理部分進行改造，這樣就可以將 Python 函數轉換為其 FHE 等效函數。</p><figure data-tool="mdnice 編輯器" style="margin-top: 10px;margin-bottom: 10px;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-ratio="1.2027809965237544" data-type="png" data-w="863" style="margin-right: auto;margin-left: auto;width: 100%;border-radius: 5px;display: block;margin-bottom: 15px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/338741ab-aa57-4681-b21f-eeeabcd24fce.png" referrerpolicy="no-referrer"><figcaption style="margin-top: 5px;text-align: center;color: #dda52d;font-size: 14px;">
     圖 1. GPT2 架構; 圖源: https://en.wikipedia.org/wiki/GPT-2 
   </figcaption></figure><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">圖 1 展示了由多個 transformer block 堆疊而成的 GPT2 架構: 其中最主要的是多頭注意力 (multi-head attention，MHA) 層。每個 MHA 層使用模型權重來對輸入進行投影，然後各自計算注意力，並將注意力的輸出重新投影到新的張量中。</p><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">在 TFHE 中，模型權重和激活均用整數表示。非線性函數必須通過可編程自舉 (Programmable Bootstrapping，PBS) 操作來實現。PBS 對加密數據實施查表 (table lookup，TLU) 操作，同時刷新密文以支持，任意計算。不好的一面是，此時 PBS 的計算時間在線性運算中佔主導地位。利用這兩種類型的運算，你可以在 FHE 中表達任何子模型的計算，甚至完整的 LLM 計算。</p><span id="OSC_h2_3"></span><h2 data-tool="mdnice 編輯器" style="font-weight: bold;font-size: 22px;line-height: 1.2em;margin-top: 2em;margin-bottom: 35px;color: rgb(255, 157, 0);"><span style="font-size: 18px;color: rgb(255, 157, 11);padding-left: 10px;border-left: 5px solid rgb(255, 157, 11);visibility: visible;display: none;"></span><span style="color: rgb(255, 157, 11);visibility: visible;display: inline-block;border-left: 5px solid rgb(255, 157, 0);padding: 2px 13px;margin-right: 3px;height: 50%;font-size: 18px;">使用 FHE 實現 LLM 的一層</span><span style="font-size: 18px;color: rgb(255, 157, 11);display: inline-block;padding-left: 10px;border-left: 5px solid rgb(255, 157, 11);visibility: visible;"></span></h2><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">接下來，你將瞭解如何加密多頭注意力 (MHA) 中的一個注意力頭。你可以在，此處，找到完整的 MHA 實現代碼。</p><figure data-tool="mdnice 編輯器" style="margin-top: 10px;margin-bottom: 10px;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-ratio="1.0334538878842676" data-type="svg" data-w="1106" style="margin-right: auto;margin-left: auto;width: 100%;border-radius: 5px;display: block;margin-bottom: 15px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/72fc90eb-872e-4a86-9f18-c949824b4c7d.svg" referrerpolicy="no-referrer"><figcaption style="margin-top: 5px;text-align: center;color: #dda52d;font-size: 14px;">
     圖 2. 在 FHE 中運行 LLM 模型的某些部分 
   </figcaption></figure><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">圖 2 概述了一個簡化的底層實現。在這個方案中，模型權重會被分成兩個部分，分別存儲在客户端和服務端。首先，客户端在本地開始推理，直至遇到已第一個不在本地的層。用户將中間結果加密併發送給服務端。服務端對其執行相應的注意力機制計算，然後將結果返回給客户端，客户端對結果進行解密並繼續在本地推理。</p><span id="OSC_h3_4"></span><h3 data-tool="mdnice 編輯器" style="font-weight: bold;font-size: 20px;line-height: 1.4;padding-top: 10px;margin-top: 10px;margin-bottom: 5px;"><span style="display: none;"></span><span style="color: rgb(81, 81, 81);font-size: 17px;padding-left: 1em;border-left: 3px solid rgb(249, 191, 69);">量化</span><span style="display: none;"></span></h3><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">首先，為了對加密值進行模型推理，模型的權重和激活必須被量化並轉換為整數。理想情況是使用，訓練後量化，這樣就不需要重新訓練模型了。這裏，我們使用整數和 PBS 來實現 FHE 兼容的注意力機制，並檢查其對 LLM 準確率的影響。</p><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">要評估量化的影響，我們運行完整的 GPT2 模型，並讓其中的一個 LLM 頭進行密態計算。然後我們基於此評估權重和激活的量化比特數對準確率的影響。</p><figure data-tool="mdnice 編輯器" style="margin-top: 10px;margin-bottom: 10px;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-ratio="0.8024691358024691" data-type="png" data-w="567" style="margin-right: auto;margin-left: auto;width: 100%;border-radius: 5px;display: block;margin-bottom: 15px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/e0260d01-fa3c-414c-a6d7-a0c0025b9e4b.png" referrerpolicy="no-referrer"><figcaption style="margin-top: 5px;text-align: center;color: #dda52d;font-size: 14px;">
     單注意力頭量化的平均 top-k 準確率 
   </figcaption></figure><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">上圖表明 4 比特量化保持了原始精度的 96%。該實驗基於含有約 80 個句子的數據集，並通過將原始模型的 logits 預測與帶有量化注意力頭的模型的 logits 預測進行比較來計算最終指標。</p><span id="OSC_h3_5"></span><h3 data-tool="mdnice 編輯器" style="font-weight: bold;font-size: 20px;line-height: 1.4;padding-top: 10px;margin-top: 10px;margin-bottom: 5px;"><span style="display: none;"></span><span style="color: rgb(81, 81, 81);font-size: 17px;padding-left: 1em;border-left: 3px solid rgb(249, 191, 69);">在 Hugging Face GPT2 模型中使用 FHE</span><span style="display: none;"></span></h3><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">我們需要在 Hugging Face 的 transformers 庫的基礎上重寫加密模塊的前向傳播，以使其包含量化算子。首先通過加載 GPT2LMHeadModel 構建一個 SingleHeadQGPT2Model 實例，然後手動使用 QGPT2SingleHeadAttention 替換第一個多頭注意力模塊，代碼如下。你可以在，這裏，找到模型的完整實現。</p><pre data-tool="mdnice 編輯器" style="margin-top: 10px;margin-bottom: 10px;"><code style="overflow-x: auto;padding: 16px;color: #333;background: #f8f8f8;display: -webkit-box;font-family: Operator Mono, Consolas, Monaco, Menlo, monospace;border-radius: 0px;font-size: 12px;-webkit-overflow-scrolling: touch;">self.transformer.h[<span style="color: #008080;line-height: 26px;">0</span>].attn&nbsp;=&nbsp;QGPT2SingleHeadAttention(config,&nbsp;n_bits=n_bits)<br></code></pre><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">至此，前向傳播已被重載成用 FHE 算子去執行多頭注意力的第一個頭，包括構建查詢、鍵和值矩陣的投影。以下代碼中的 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">QGPT2</code> 模塊的代碼見，此處。</p><pre data-tool="mdnice 編輯器" style="margin-top: 10px;margin-bottom: 10px;"><code style="overflow-x: auto;padding: 16px;color: #333;background: #f8f8f8;display: -webkit-box;font-family: Operator Mono, Consolas, Monaco, Menlo, monospace;border-radius: 0px;font-size: 12px;-webkit-overflow-scrolling: touch;"><span style="line-height: 26px;"><span style="font-weight: bold;line-height: 26px;">class</span>&nbsp;<span style="color: #458;font-weight: bold;line-height: 26px;">SingleHeadAttention</span><span style="line-height: 26px;">(QGPT2)</span>:</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #d14;line-height: 26px;">"""Class&nbsp;representing&nbsp;a&nbsp;single&nbsp;attention&nbsp;head&nbsp;implemented&nbsp;with&nbsp;quantization&nbsp;methods."""</span><br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span style="line-height: 26px;"><span style="font-weight: bold;line-height: 26px;">def</span>&nbsp;<span style="color: #900;font-weight: bold;line-height: 26px;">run_numpy</span><span style="line-height: 26px;">(self,&nbsp;q_hidden_states:&nbsp;np.ndarray)</span>:</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;Convert&nbsp;the&nbsp;input&nbsp;to&nbsp;a&nbsp;DualArray&nbsp;instance</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q_x&nbsp;=&nbsp;DualArray(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float_array=self.x_calib,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int_array=q_hidden_states,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;quantizer=self.quantizer<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;Extract&nbsp;the&nbsp;attention&nbsp;base&nbsp;module&nbsp;name</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mha_weights_name&nbsp;=&nbsp;<span style="color: #d14;line-height: 26px;">f"transformer.h.<span style="color: rgb(51, 51, 51);line-height: 26px;">{self.layer}</span>.attn."</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;Extract&nbsp;the&nbsp;query,&nbsp;key&nbsp;and&nbsp;value&nbsp;weight&nbsp;and&nbsp;bias&nbsp;values&nbsp;using&nbsp;the&nbsp;proper&nbsp;indices</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head_0_indices&nbsp;=&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list(range(i&nbsp;*&nbsp;self.n_embd,&nbsp;i&nbsp;*&nbsp;self.n_embd&nbsp;+&nbsp;self.head_dim))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="font-weight: bold;line-height: 26px;">for</span>&nbsp;i&nbsp;<span style="font-weight: bold;line-height: 26px;">in</span>&nbsp;range(<span style="color: #008080;line-height: 26px;">3</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q_qkv_weights&nbsp;=&nbsp;...<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q_qkv_bias&nbsp;=&nbsp;...<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;Apply&nbsp;the&nbsp;first&nbsp;projection&nbsp;in&nbsp;order&nbsp;to&nbsp;extract&nbsp;Q,&nbsp;K&nbsp;and&nbsp;V&nbsp;as&nbsp;a&nbsp;single&nbsp;array</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q_qkv&nbsp;=&nbsp;q_x.linear(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;weight=q_qkv_weights,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bias=q_qkv_bias,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key=<span style="color: #d14;line-height: 26px;">f"attention_qkv_proj_layer_<span style="color: rgb(51, 51, 51);line-height: 26px;">{self.layer}</span>"</span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;Extract&nbsp;the&nbsp;queries,&nbsp;keys&nbsp;and&nbsp;vales</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q_qkv&nbsp;=&nbsp;q_qkv.expand_dims(axis=<span style="color: #008080;line-height: 26px;">1</span>,&nbsp;key=<span style="color: #d14;line-height: 26px;">f"unsqueeze_<span style="color: rgb(51, 51, 51);line-height: 26px;">{self.layer}</span>"</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q_q,&nbsp;q_k,&nbsp;q_v&nbsp;=&nbsp;q_qkv.enc_split(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #008080;line-height: 26px;">3</span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;axis=<span style="color: #008080;line-height: 26px;">-1</span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key=<span style="color: #d14;line-height: 26px;">f"qkv_split_layer_<span style="color: rgb(51, 51, 51);line-height: 26px;">{self.layer}</span>"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;Compute&nbsp;attention&nbsp;mechanism</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q_y&nbsp;=&nbsp;self.attention(q_q,&nbsp;q_k,&nbsp;q_v)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="font-weight: bold;line-height: 26px;">return</span>&nbsp;self.finalize(q_y)<br></code></pre><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">模型中的其他計算仍以浮點形式進行，未加密，並由客户端在本地執行。</p><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">將預訓練的權重加載到修改後的 GPT2 模型中，然後調用 <em style="color: black;">generate</em> 方法:</p><pre data-tool="mdnice 編輯器" style="margin-top: 10px;margin-bottom: 10px;"><code style="overflow-x: auto;padding: 16px;color: #333;background: #f8f8f8;display: -webkit-box;font-family: Operator Mono, Consolas, Monaco, Menlo, monospace;border-radius: 0px;font-size: 12px;-webkit-overflow-scrolling: touch;">qgpt2_model&nbsp;=&nbsp;SingleHeadQGPT2Model.from_pretrained(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #d14;line-height: 26px;">"gpt2_model"</span>,&nbsp;n_bits=<span style="color: #008080;line-height: 26px;">4</span>,&nbsp;use_cache=<span style="color: #008080;line-height: 26px;">False</span><br>)<br><br>output_ids&nbsp;=&nbsp;qgpt2_model.generate(input_ids)<br></code></pre><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">舉個例子，你可以要求量化模型補全短語 「Cryptography is a」 。在 FHE 中運行模型時，如果量化精度足夠，生成的輸出為:</p><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">「Cryptography is a very important part of the security of your computer」</p><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">當量化精度太低時，您會得到:</p><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">「Cryptography is a great way to learn about the world around you」</p><span id="OSC_h3_6"></span><h3 data-tool="mdnice 編輯器" style="font-weight: bold;font-size: 20px;line-height: 1.4;padding-top: 10px;margin-top: 10px;margin-bottom: 5px;"><span style="display: none;"></span><span style="color: rgb(81, 81, 81);font-size: 17px;padding-left: 1em;border-left: 3px solid rgb(249, 191, 69);">編譯為 FHE</span><span style="display: none;"></span></h3><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">現在，你可以使用以下 Concrete-ML 代碼編譯註意力頭:</p><pre data-tool="mdnice 編輯器" style="margin-top: 10px;margin-bottom: 10px;"><code style="overflow-x: auto;padding: 16px;color: #333;background: #f8f8f8;display: -webkit-box;font-family: Operator Mono, Consolas, Monaco, Menlo, monospace;border-radius: 0px;font-size: 12px;-webkit-overflow-scrolling: touch;">circuit_head&nbsp;=&nbsp;qgpt2_model.compile(input_ids)<br></code></pre><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">運行此代碼，你將看到以下打印輸出: 「Circuit compiled with 8 bit-width」。該配置與 FHE 兼容，顯示了在 FHE 中執行的操作所需的最大位寬。</p><span id="OSC_h3_7"></span><h3 data-tool="mdnice 編輯器" style="font-weight: bold;font-size: 20px;line-height: 1.4;padding-top: 10px;margin-top: 10px;margin-bottom: 5px;"><span style="display: none;"></span><span style="color: rgb(81, 81, 81);font-size: 17px;padding-left: 1em;border-left: 3px solid rgb(249, 191, 69);">複雜度</span><span style="display: none;"></span></h3><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">在 transformer 模型中，計算量最大的操作是注意力機制，它將查詢、鍵和值相乘。在 FHE 中，加密域中乘法的特殊性加劇了成本。此外，隨着序列長度的增加，這些乘法的數量還會呈二次方增長。</p><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">而就加密注意力頭而言，長度為 6 的序列需要 11622 次 PBS 操作。我們目前的實驗還很初步，尚未對性能進行優化。雖然可以在幾秒鐘內運行，但不可否認它需要相當多的計算能力。幸運的是，我們預期，幾年後，硬件會將延遲提高 1000 倍到 10000 倍，使原來在 CPU 上需要幾分鐘的操作縮短到 ASIC 上的低於 100 毫秒。有關這些估算的更多信息，請參閲，此博文。</p><span id="OSC_h2_8"></span><h2 data-tool="mdnice 編輯器" style="font-weight: bold;font-size: 22px;line-height: 1.2em;margin-top: 2em;margin-bottom: 35px;color: rgb(255, 157, 0);"><span style="font-size: 18px;color: rgb(255, 157, 11);padding-left: 10px;border-left: 5px solid rgb(255, 157, 11);visibility: visible;display: none;"></span><span style="color: rgb(255, 157, 11);visibility: visible;display: inline-block;border-left: 5px solid rgb(255, 157, 0);padding: 2px 13px;margin-right: 3px;height: 50%;font-size: 18px;">總結</span><span style="font-size: 18px;color: rgb(255, 157, 11);display: inline-block;padding-left: 10px;border-left: 5px solid rgb(255, 157, 11);visibility: visible;"></span></h2><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">大語言模型有望使能大量應用場景，但其實現引發了用户隱私的重大關切。在本文中，我們朝着密態 LLM 邁出了第一步，我們的最終願景是讓整個模型完全在雲上運行，同時用户的隱私還能得到充分尊重。</p><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">當前的做法包括將 GPT2 等模型中的特定部分轉換至 FHE 域。我們的實現利用了 transformers 庫，用户還能評估模型的一部分在加密數據上運行時對準確率的影響。除了保護用户隱私之外，這種方法還允許模型所有者對其模型的主要部分保密。你可在，此處，找到完整代碼。</p><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">Zama 庫 Concrete 和 Concrete-ML (別忘了給我們的 github 代碼庫點個星星 ⭐️💛) 允許直接構建 ML 模型並將其轉換至等價的 FHE 域，從而使之能夠對加密數據進行計算和預測。</p><p data-tool="mdnice 編輯器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">希望你喜歡這篇文章。請隨時分享你的想法/反饋！</p><hr data-tool="mdnice 編輯器" style="height: 1px;border-right: none;border-bottom: none;border-left: none;border-top-style: solid;border-top-color: rgb(249, 191, 69);margin-top: 20px;margin-bottom: 20px;"><blockquote data-tool="mdnice 編輯器" style="border-top: none;border-right: none;border-bottom: none;color: rgb(91, 91, 91);background: rgba(158, 158, 158, 0.1);padding-top: 1px;padding-bottom: 1px;padding-left: 5px;margin-top: 0px;margin-bottom: 0px;"><blockquote style="border-width: initial;border-style: none;border-color: initial;margin-top: 0px;margin-bottom: 0em;padding-top: 0px;padding-left: 0px;"><blockquote style="border-width: initial;border-style: none;border-color: initial;margin-top: 0px;margin-bottom: 0em;padding-top: 0px;padding-left: 0px;"><blockquote style="border-width: initial;border-style: none;border-color: initial;margin-top: 0px;margin-bottom: 0em;padding-top: 0px;padding-left: 0px;"><p style="color: rgb(63, 63, 63);line-height: 1.5;font-size: 14px;margin: 10px;">英文原文:&nbsp;<span style="color: rgb(136, 136, 136);letter-spacing: 0px;">https://hf.co/blog/encrypted-llm</span></p><p style="color: rgb(63, 63, 63);line-height: 1.5;font-size: 14px;margin: 10px;">原文作者: Roman Bredehoft，Jordan Frery</p><p style="color: rgb(63, 63, 63);line-height: 1.5;font-size: 14px;margin: 10px;">譯者: Matrix Yao (姚偉峯)，英特爾深度學習工程師，工作方向為 transformer-family 模型在各模態數據上的應用及大規模模型的訓練推理。</p><p style="color: rgb(63, 63, 63);line-height: 1.5;font-size: 14px;margin: 10px;">審校/排版: zhongdongy (阿東)</p></blockquote></blockquote></blockquote></blockquote></section><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公眾號 - Hugging Face（gh_504339124f0f）。<br>如有侵權，請聯繫 support@oschina.cn 刪除。<br>本文參與「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源創計劃</a>」，歡迎正在閲讀的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 06 Oct 2023 03:29:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/HuggingFace/blog/10112832</guid>
            <link>https://my.oschina.net/HuggingFace/blog/10112832</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[呼喚國內 Java 開發者共建 Solon]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h3>Solon 是什麼？</h3><p style="color:#24292e; text-align:start"><strong>Java 生態級應用開發框架</strong>。從零開始構建，有自己的標準規範與開放生態（歷時五年，具備全球第二級別的生態規模）。更多內容詳見：<a href="https://www.oschina.net/news/258633">《中國這麼多 Java 開發者，應該誕生出生態級應用開發框架》</a></p><h3>有什麼特點？</h3><ul><li>啓動快 5 ～ 10 倍。<span>&nbsp;</span><strong>（更快）</strong></li><li>qps 高 2～ 3 倍。<span>&nbsp;</span><strong>（更高）</strong></li><li>運行時內存節省 1/3 ~ 1/2。<span>&nbsp;</span><strong>（更少）</strong></li><li>打包可以縮小到 1/2 ~ 1/10；比如，300Mb 的變成了 23Mb。<span>&nbsp;</span><strong>（更小）</strong></li><li>同時支持 jdk8, jdk11, jdk17, jdk21,<span>&nbsp;</span><strong>graalvm native image</strong></li></ul><h3>呼喚？</h3><p style="color:#24292e; text-align:start">如果您開源感興趣且願意學習和貢獻，歡迎您共建 Solon 生態。</p><h3>項目倉庫地址？</h3><ul><li>gitee：<a href="https://gitee.com/noear/solon">https://gitee.com/noear/solon</a></li><li>github：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnoear%2Fsolon" target="_blank">https://github.com/noear/solon</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 05 Oct 2023 13:59:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260414</guid>
            <link>https://www.oschina.net/news/260414</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[大模型在無損壓縮方面超越 PNG 和 FLAC]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#000000; text-align:start">Google DeepMind 和 Meta 的研究人員發表論文《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F2309.10668" target="_blank">Language Modeling Is Compression</a>》，他們發現 DeepMind 的大語言模型 Chinchilla 70B 在圖像和音頻的無損壓縮上超過了 PNG 和 FLAC。</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start">論文提到，Chinchilla 70B 能將 ImageNet 圖像數據庫中的圖像無損壓縮到原始大小 43.4%，超過了 PNG 算法的 58.5%。</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start">Chinchilla 能將 LibriSpeech 音頻數據集中的樣本無損壓縮到原始大小 16.4%，超過 FLAC 算法的 30.3%。</p><p style="color:#000000; text-align:start"><img alt="" src="https://oscimg.oschina.net/oscnet/up-ca6b2c476913b6a89c88077731175c6b63b.png" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farstechnica.com%2Finformation-technology%2F2023%2F09%2Fai-language-models-can-exceed-png-and-flac-in-lossless-compression-says-study%2F" target="_blank">據介紹</a>，Chinchilla 70B 主要是訓練用於處理文本，但它在壓縮其它類型的數據集上的效果也表現優異，甚至優於專門的算法。</p><p style="color:#000000; text-align:start">下面的例子比較了 gzip 和 Chinchilla 在示例文本上的生成效果。可以看到，gzip 的輸出沒有可讀性。</p><p><img alt="" src="https://static.oschina.net/uploads/space/2023/1005/191209_GfKh_2720166.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 05 Oct 2023 11:14:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260407/llm-can-exceed-png-and-flac-in-lossless-compression</guid>
            <link>https://www.oschina.net/news/260407/llm-can-exceed-png-and-flac-in-lossless-compression</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[RMS 談 AI、Red Hat 和道德軟件許可]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#000000; text-align:start">在瑞士 Biel 舉行的慶祝 GNU 誕生 40 週年的活動上，GNU 和 FSF 創始人 Richard Stallman (RMS) 發表了 25 分鐘的演講，除了披露身患癌症外，他還談論了 Red Hat、AI 和道德軟件許可。</p><p style="color:#000000; text-align:start"><img alt="" src="https://oscimg.oschina.net/oscnet/up-d7dc3b154962c7667a46bffdb69807efc99.png" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:start"><em>RMS 在瑞士 Biel 參加慶祝 GNU 40 歲生日的活動</em></p><p style="color:#000000; text-align:start">RMS 表示目前正在接受濾泡性淋巴瘤的治療，他稱之為「生長緩慢和可控的」。</p><p style="color:#000000; text-align:start"><strong>Red Hat&nbsp;<strong><strong>和&nbsp;</strong></strong>GPL</strong></p><p style="color:#000000; text-align:start">Red Hat 的支持合同禁止客户重新分發該公司的開源軟件，RMS 認為此舉可能沒有違反 GPL 許可，但其做法是「反社會的」。</p><p style="color:#000000; text-align:start">他認為 Red Hat 應該停止這一做法，或者社區能通過施加影響力讓 Red Hat 做出改變。</p><p style="color:#000000; text-align:start"><strong>生成式&nbsp;<strong><strong>AI&nbsp;</strong></strong>不具備理解能力</strong></p><p style="color:#000000; text-align:start">對於 AI 或生成式聊天機器人 ChatGPT，RMS 認為危險主要來自於 AI 營銷人員所編織的敍事。</p><p style="color:#000000; text-align:start">他認為今天的 AI 尚未真正具有理解能力，但人們正使用 AI 這一術語來誇大其詞，他説 ChatGPT 生成的內容都是廢話，不過是流暢的廢話。</p><p style="color:#000000; text-align:start">因此他認為，相信 ChatGPT 這類產品生成的內容的人都很愚蠢。</p><p style="color:#000000; text-align:start">RMS 説道：「在我看來，‘intelligence’ 意味着需要具備瞭解或理解某個領域的能力。如果某些東西不能真正理解事情，我們不應該説它是智能的，甚至是一點智能都沒有，但人們正在用人工智能一詞來描述廢話生成器。」</p><p style="color:#000000; text-align:start">所以他沒有把那些產品稱作「人工智能」或任何帶有 ‘intelligence’ 一詞的東西，因為這會鼓勵大眾認為它們（生成式人工智能程序）所説的不是胡説八道。它鼓勵大眾相信它們，這給了他們造成巨大傷害的機會。</p><p style="color:#000000; text-align:start">然而，這並不意味着 RMS 認為真正的人工智能並不存在。</p><p style="color:#000000; text-align:start">他説：「有些程序可以查看一些放大細胞的照片並告訴你診斷結果，無論是否患有癌症，比任何人類醫生都更有可能正確。另外，有一些人工智能系統可以非常有效地找出什麼會吸引人們的注意力。這些被反社交媒體平台使用，可悲的是，它們效果很好。他們非常擅長這些工作，但他們所做的是讓用户上癮。」</p><p style="color:#000000; text-align:start"><strong>道德軟件許可證</strong></p><p style="color:#000000; text-align:start">RMS 似乎不是所謂的「道德」軟件許可證的支持者，試圖監管誰可以使用軟件。</p><p style="color:#000000; text-align:start">這不足為奇，因為他倡導的自由軟件哲學的四項基本自由中的第一項是用户具有出於任何目的運行軟件的自由。</p><p style="color:#000000; text-align:start">演講最後，RMS 拋出了一個問題——「我們如何讓年輕人對自由軟件感興趣？」</p><p style="color:#000000; text-align:start">他稱這個問題是「我們在社區中面臨的難題之一」。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 05 Oct 2023 04:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260374/rms-talks-red-hat-ai-and-ethical-software-licenses</guid>
            <link>https://www.oschina.net/news/260374/rms-talks-red-hat-ai-and-ethical-software-licenses</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[AgentVerse —— 多 LLM 環境模擬框架]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>AgentVerse 提供了一個多功能框架，可簡化為大型語言模型（LLM）創建定製多代理環境的過程。框架旨在以最小的投入促進快速開發和定製，從而使研究人員能夠專注於他們的研究，而不是被實施細節所困擾。</p><p><img alt="" height="333" src="https://static.oschina.net/uploads/space/2023/0915/161848_BpYH_4252687.png" width="500" referrerpolicy="no-referrer"></p><h4 style="text-align:start"><strong><span><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>特點</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></h4><ul><li><p><span><span><strong>高效的環境構建：</strong>我們的框架提供了一系列基本構建塊，可以輕鬆創建多代理環境。只需要配置文件中的幾行，就可以輕鬆構建 LLM 聊天室等基本環境。此過程需要為 LLM 士定義環境設置和提示，使研究人員能夠專注於實驗和分析。</span></span></p></li><li><p><span><span><strong>可定製組件</strong>：AgentVerse 通過將多代理環境劃分為五個功能模塊並定義各自的接口來簡化多代理環境。對於使用 AgentVerse 提供的基礎模塊無法直接構建的複雜環境，你可以自定義這五個功能模塊中的一個或多個接口，根據你的需求高效地創建你自己的多 Agent 環境。</span></span></p></li><li><p><span><span><strong>工具（插件）利用</strong>：AgentVerse 通過工具支持多代理環境。目前，AgentVerse 支持<a href="https://github.com/OpenBMB/BMTools">BMTools</a>中提供的工具。</span></span></p></li></ul><p><img height="287" src="https://static.oschina.net/uploads/space/2023/0915/161814_aa6e_4252687.png" width="500" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Thu, 05 Oct 2023 03:40:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/agentverse</guid>
            <link>https://www.oschina.net/p/agentverse</link>
        </item>
    </channel>
</rss>
