<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-綜合資訊]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="https://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-綜合資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Wed, 27 Sep 2023 09:07:17 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[OpenAI 尋求出售現有股票，估值高達 900 億美元]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">據《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.msn.com%2Fen-us%2Fmoney%2Ftechnology%2Fopenai-seeks-new-valuation-of-up-to-90-billion-in-share-sale%2Far-AA1hiJ9W" target="_blank">華爾街日報</a>》援引知情人士消息稱，OpenAI&nbsp;</span><span style="background-color:#ffffff; color:#2b2b2b">正在與投資者討論股票出售事宜</span><span style="color:#000000">。這家&nbsp;</span><span style="background-color:#ffffff; color:#2b2b2b">ChatGPT 背後的人工智能初創公司的估值將在 800 億至 900 億美元之間，大約是今年早些時候水平的三倍。</span></p><p><span style="color:#000000"><span style="background-color:#ffffff">今年 4 月，OpenAI 從紅杉資本、Andreessen Horowitz、Thrive 和 K2 Global 等支持者那裏獲得了略高於 3 億美元的融資，估值為 290 億美元。</span></span></p><p><img height="233" src="https://static.oschina.net/uploads/space/2023/0927/162258_T3Uz_4252687.png" width="600" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span style="color:#000000">知情人士稱，這家由微軟持股 49% 的初創公司已告訴投資者，預計今年的收入將達到 10 億美元，並在 2024 年創造更多數十億美元的收入。<span style="background-color:#ffffff">預計該交易將允許員工出售現有股票，而不是公司發行新股票來籌集額外資金。知情人士稱，OpenAI 代表已開始就該交易向投資者進行推銷，不過條款可能會發生變化。</span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span style="color:#000000"><span style="background-color:#ffffff">800 億美元或以上的估值將使 OpenAI 成為全球估值最高的初創公司之一，僅次於埃隆·馬斯克 (Elon Musk) 的 SpaceX 和 TikTok 母公司字節跳動 (ByteDance)。該數字突顯了 OpenAI 在多大程度上能夠重塑硅谷的格局，這一數字凸顯了 OpenAI 能夠重塑硅谷格局的程度，並迫使更富有、更成熟的科技巨頭全面調整其產品路線圖，效仿 OpenAI 的做法。</span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span style="color:#000000"><span style="background-color:#ffffff">OpenAI 的目標是向硅谷投資者出售價值數億美元的現有股票，這筆交易將立即為微軟帶來鉅額賬面利潤。</span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">這次員工持股出售可能會為從外部投資者那裏籌集更多資金設定一個最低價格。人們普遍預計，OpenAI 將通過發行新股來籌集更多資金，以滿足開發和維護其人工智能系統所需的計算成本。</span></p><p><span style="color:#000000"><span style="background-color:#ffffff">知情人士稱</span>，<span style="background-color:#ffffff">該公司</span>已經<span style="background-color:#ffffff">引起了</span>孫正義的軟銀等投資巨頭的濃厚興趣。集資將涉及出售新股，與目前正在進行的要約收購程序分開。並表示，<span style="background-color:#ffffff">OpenAI 有意讓微軟持有該公司少數股權，這意味着這家科技巨頭很可能無法在任何融資中購買股票，從而使自己的持股比例超過 50%。</span></span></p><p><span style="color:#333333">OpenAI<span>&nbsp;暫未迴應置評請求。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Sep 2023 08:17:38 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259735/openai-seeks-new-valuation-90-billion</guid>
            <link>https://www.oschina.net/news/259735/openai-seeks-new-valuation-90-billion</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[GNU 和自由軟件運動四十週年]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>自由軟件基金會 (FSF) 發表文章<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.fsf.org%2Fnews%2Fforty-years-of-gnu-and-the-free-software-movement" target="_blank">慶祝</a> GNU 和自由軟件運動四十年。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/0927/141138_JLed_2720166.png" referrerpolicy="no-referrer"></p></blockquote><p>1983 年 9 月 27 日，計算機科學家 Richard Matthew Stallman（簡稱 RMS）宣佈開發<strong>類 Unix 自由軟件操作系統</strong>的「<strong>GNU&nbsp;計劃</strong>」，並藉此發起自由軟件運動，GNU 名字代表 <strong>GNU's not Unix</strong>。</p><p><img alt="" height="293" src="https://oscimg.oschina.net/oscnet/up-e77ab9915a29996c9837bf3e3e3b15d4c07.png" width="300" referrerpolicy="no-referrer"></p><p>▲「GNU 計劃」標誌</p><p>四十年後的今天，GNU 和自由軟件比以往任何時候都重要，雖然軟件已經深入到我們的日常生活，但絕大多數用户無法完全控制它。</p><blockquote><p>自由軟件的定義最初由 RMS 本人制定。自由軟件的初衷是尊重用户的自由，並且尊重整個社區。</p><p>粗略來講，一個軟件如果是自由軟件，這意味着用户可以自由地運行、拷貝、分發、學習、修改並改進該軟件。因此，「自由軟件 (Free Software)」中的"free"是關乎自由的問題，與價格無關，軟件如何定價並不影響它是否被歸類為自由軟件。</p><p>具體來説，自由軟件的用户擁有四項基本自由：</p><p>(0) 自由運行軟件<br> (1) 自由學習和修改軟件源代碼<br> (2) 自由發佈軟件拷貝<br> (3) 自由發佈修改後的軟件版本</p></blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-ddccf4eb6af9e5f1ea79edef64ea1b64119.JPEG" referrerpolicy="no-referrer"></p><p>GNU 是唯一專門為捍衞用户自由而開發的操作系統，四十年來始終忠於其創始理念。自 1983 年以來，「GNU 計劃」為私有操作系統提供了合乎道德的完整替代方案。這要歸功於世界各地的 GNU 開發志願者四十年來的不懈努力。</p><p>除了技術，GNU 還開創性地提出了 "<strong>Copyleft</strong>"。Copyleft 是源自自由軟件運動的概念，是一種利用現有著作權體制 (Copyright) 來保護所有用户和二次開發者的自由的授權方式。</p><p>Copyleft 中的 "Left"，不使用英語中「保留」的意思，而是指「Left（左）」，與「版權 (Copyright)」中的「Right（右）」具有鏡像的關係。注意，Copyleft 不是反著作權運動，不主張廢止著作權，也不是公有領域 (Public Domain)。</p><p>二者的區別可總結為："Copyright"指軟件的版權和其它一切權利歸軟件作者所私有，用户只有使用權，沒有其它如複製、重新修改發佈等權利。而"Copyleft"的特點是僅版權歸原作者所有，其他一切權利可以與任何人共享。</p><p><img height="300" src="https://oscimg.oschina.net/oscnet/up-5d41e7a854ad38374f2b19a4d95bfa825c3.png" width="300" referrerpolicy="no-referrer"></p><p>▲ Copyleft 標誌</p><p>FSF 執行董事 Zoë Kooyman 表示，GNU 不僅僅是基於自由軟件的最廣泛使用的操作系統，也是指導自由軟件運動四十年的哲學理念的核心。</p><p>他還説道，我們希望四十週年紀念能夠激勵更多黑客加入 GNU，實現在全世界範圍內創建、改進和共享自由軟件的目標。如今，軟件正在控制我們的世界，而 GNU 是對現狀的批判和解決方案，我們亟需它來避免技術控制人類。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Sep 2023 06:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259709/forty-years-of-gnu-and-the-free-software-movement</guid>
            <link>https://www.oschina.net/news/259709/forty-years-of-gnu-and-the-free-software-movement</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Google 慶祝成立 25 週年]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Google 今天上線了新的 Doodle <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.google%2Finside-google%2Fcompany-announcements%2Fgoogle-25th-birthday%2F" target="_blank">慶祝</a>成立 25 週年。</p><p><img src="https://static.oschina.net/uploads/space/2023/0927/134213_x9MB_2720166.gif" referrerpolicy="no-referrer"></p><p>Google 於 1998 年 9 月 4 日成立，但是自 2002 年以來，該公司在 9 月的任意一天（<strong>通常是 9 月 27 日）</strong>慶祝其週年紀念日。</p><p><img alt="A screenshot of the Google search homepage in 1998" src="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Hero_Option-2.width-1200.format-webp.webp" referrerpolicy="no-referrer"></p><p><img src="https://static.oschina.net/uploads/space/2023/0927/140629_bPBa_2720166.png" referrerpolicy="no-referrer"></p><blockquote><p>今天的塗鴉慶祝 Google 的 25 週年。雖然我們在 Google 總是面向未來，但生日也可以是反思的時候。讓我們一起走下記憶的長廊，瞭解我們是如何在 25 年前誕生的...</p><p>無論是命運還是運氣，博士生 Sergey Brin 和 Larry Page 在 90 年代末斯坦福大學計算機科學項目中相遇。他們很快發現他們有着相似的願景：使萬維網更加易於訪問。這對搭檔在宿舍裏不知疲倦地開發出一個更好搜索引擎的原型。隨着他們在項目上取得了實質性進展，他們將操作移至 Google 第一個辦公室——租來的車庫。1998 年 9 月 27 日，谷歌公司正式成立。</p><p>自 1998 年以來已經發生了很多變化——包括今天塗鴉中看到的我們標誌——但使命始終沒有改變：組織世界信息，並使其普遍可接觸和有用。全球數十億人使用 Google 進行搜索、連接、工作、娛樂等等！</p><p>感謝您過去 25 年與我們共同進步。 我們迫不及待想要看到未來會帶領我們走向何方，一起。</p></blockquote><p><em>via&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.google.com%2Fdoodles%2Fgoogles-25th-birthday" target="_blank">https://www.google.com/doodles/googles-25th-birthday</a></em></p><p>在搜索欄輸入「Google's 25th birthday」或「Google 25 週歲生日」能看到彩蛋：</p><p><img src="https://static.oschina.net/uploads/space/2023/0927/132647_6ySe_2720166.png" referrerpolicy="no-referrer"></p><p><img src="https://static.oschina.net/uploads/space/2023/0927/140517_zSMr_2720166.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Sep 2023 05:35:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259698/googles-25th-birthday</guid>
            <link>https://www.oschina.net/news/259698/googles-25th-birthday</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[macOS Containers：在 macOS 用 Docker 運行 macOS 鏡像]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>macOS Containers 是一羣開發者基於 chroot 打造的工具，能讓你在 macOS 用 Docker 運行 macOS 鏡像。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-e8fbfed437c488003bb6d570a3f4afa4b01.png" referrerpolicy="no-referrer"></p><p>macOS Containers 官網<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmacoscontainers.org%2F" target="_blank">寫道</a>：</p><blockquote><p>容器從根本上改變了現代軟件的開發和部署方式。包括 FreeBSD、Solaris、Linux 甚至 Windows 在內的多種操作系統都支持容器，<strong>但 macOS 卻沒有原生支持容器</strong>——直到現在 macOS Containers 誕生。</p><p><img src="https://static.oschina.net/uploads/space/2023/0927/121649_g9Y7_2720166.png" referrerpolicy="no-referrer"></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Sep 2023 04:15:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259695/macos-containers</guid>
            <link>https://www.oschina.net/news/259695/macos-containers</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[歷史最悠久的 Unity 官方用户組在 13 年後宣佈解散]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">自稱為歷史最悠久的&nbsp;Unity&nbsp;開發者團隊 Boston Unity Group (BUG) <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbostonunitygroup.s3.us-east-1.amazonaws.com%2Findex.html" target="_blank">宣佈</a>將在&nbsp;9 月 27 日晚組織最後一次會議，然後進行解散。根據介紹，BUG 由 Elliott Mitchell 和 Alex Schwartz 於 2010 年夏天創立，是世界上第一個官方 Unity 用户組。</span></p><blockquote><p><span style="color:#000000">「BUG 社區的持續發展催生了波士頓及其他地區遊戲開發的新時代......從第一天起，BUG 就得到了 Unity 和前首席執行官 David Helgason 的熱情認可和支持。Unity 提供了後勤支持、專業許可證贈品、研討會、演講、贊助、在 Unite 大會上發言的機會等等。在早期，David 和 Unity 明白，培養獨立開發者的草根團體對 Unity 的長期發展至關重要，並有助於實現他們為各行各業的人們提供民主化遊戲開發的目標。」</span></p></blockquote><p><img height="261" src="https://static.oschina.net/uploads/space/2023/0927/120517_6aBs_4252687.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">BUG 在致社區的公開信中表達了對 David 和所有 Unity 員工的感謝。但他們也指出，過去幾年間 Unity 已將其重點從遊戲行業和支持開發者社區轉移開。IPO 後，該公司似乎將利潤看得比一切都重要，包括進行了多次收購併裁減了核心人員。導致開發者所需的許多關鍵系統仍然處於混亂且通常不完整的狀態，Unity 傳遞的信息是廣告和收入比遊戲開發者關心的功能要更為重要。</span></p><p><span style="color:#000000">尤其是 Unity 本月推出的新定價模式，BUG 將其描述為「令人匪夷所思的敵對服務條款和價格表動」；也正是 Unity 的這一舉措，促使了 BUG 解散的決策。</span></p><blockquote><p><span style="color:#000000">來自遊戲行業的響亮而明確的譴責是前所未有的，Unity 別無選擇，只能撤銷一些最令人震驚的修改。即使有了這些新的讓步，修改後的定價模式還是對我們社區中獨立工作室的成功造成了不成比例的影響。</span></p><p><span style="color:#000000">更重要的是，我們看到了一個由高管主導的商業決策是多麼容易和輕率，就能讓我們辛辛苦苦建立起來的工作室面臨破產的風險，威脅到我們作為專業人士的生計，並對我們行業的長遠發展提出挑戰。今天的 Unity 已經不再是集團成立之初的那個公司了，我們曾經對公司的信任已經徹底被侵蝕了。</span></p></blockquote><p><span style="color:#000000">BUG 的這一感受也在遊戲開發社區的廣大羣體中得到了</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2FFuckedByUnity" target="_blank">迴應</a><span style="color:#000000">，許多知名開發者表示，Unity 的舉措基本沒有挽回他們對該公司的信任。</span></p><p><span style="color:#000000">《吸血鬼倖存者》遊戲的開發者 Poncle 在 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.reddit.com%2Fr%2Fpcgaming%2Fcomments%2F16rsuh0%2Fvampire_survivors_ama_with_developers_poncle%2F" target="_blank">Reddit AMA</a> 上被問及他們的下一款遊戲/續作是否會再次使用 Unity 引擎時，就簡明扼要地表示了拒絕："不，謝謝......即使 Unity 會完全收回他們的決定，我也不認為在他們目前的領導下信任他們是明智之舉。"</span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Sep 2023 04:05:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259693/first-official-unity-user-group-disbands</guid>
            <link>https://www.oschina.net/news/259693/first-official-unity-user-group-disbands</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[GNOME 45 動態三層緩存補丁更新]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>GNOME 45 "Rīga" 上週已正式<a href="https://www.oschina.net/news/259088/gnome-45-r%C4%ABga-released">發佈</a>，此版本雖然有許多針對桌面環境的改進，但上游缺少的一個功能是 Canonical 主導的<strong> Mutter 動態三層緩存</strong>。</p><p>動態三層緩存用於在需要時提升性能，並且已被證明有助於提高桌面渲染性能，例如使用英特爾集成顯卡和 Raspberry Pi 顯卡。此外，Debian 和 Ubuntu 已經合併這個動態三重緩衝補丁有一段時間了，但這項特性仍未能合併到上游。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-311bd78a79409ec737ca4af54e1a17734ef.png" referrerpolicy="no-referrer"></p><p>雖然動態三層緩存未能進入 GNOME 45，但 Canonical 的工程師 Daniel van Vugt <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsalsa.debian.org%2Fgnome-team%2Fmutter%2F-%2Fmerge_requests%2F108" target="_blank">更新了 Debian/Ubuntu 補丁</a>以與 Mutter 45.0 兼容。</p><blockquote><p>動態三層緩存是 Daniel 負責的一項功能，其動機是為了在需要的時候動態地進行三級緩存，以使 GPU 加快其時鐘頻率，否則它的渲染效率就會變慢。讓 GPU 工作得更快並暫時導致額外的幀延遲不是理想的方式，但它似乎確實能在需要的時候讓 GPU 性能得到提升。</p></blockquote><p><img src="https://static.oschina.net/uploads/space/2023/0927/112744_naxT_2720166.png" referrerpolicy="no-referrer"></p><p>目前看來，一切都已準備就緒——使用 GNOME 45 的 Ubuntu 23.10 將提供動態三層緩存，該版本將於 10 月中旬首次亮相。該補丁現在還修復了顯示器拔出插頭時可能導致的潛在內存泄漏，該泄漏可能會導致獨立 GPU 無法進入低功耗狀態。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Sep 2023 03:30:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259683/gnome-45-triple-buffering</guid>
            <link>https://www.oschina.net/news/259683/gnome-45-triple-buffering</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Apple 推出全球開發者資源 —— 人人能編程]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>9 月 26 日，Apple 宣佈推出&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.apple.com%2Fexperts%2F" target="_blank">Meet with Apple Experts</a>&nbsp;開發者資源，幫助全球 Apple 開發者社區發現並參與課程、研討會、實驗室、一對一諮詢等體驗。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-03b3fbe6bda95fda8279db7ce8319e77581.png" referrerpolicy="no-referrer"></p><p>Meet with Apple Experts 初期提供超過 50 個課程、研討會和諮詢項目，並將持續提供線上和線下活動，開發者也可藉助該平台和 Apple 專家直接溝通，獲取洞見、支持和反饋；Meet with Apple Experts 同時也為所有開發者提供在各時區、通過各種語言舉行的課程、實驗室、研討會和挑戰賽，開發者即日起可報名參與多種主題的課程，深入探索 iOS 17、iPadOS 17、watchOS 10、visionOS，瞭解如何針對最新發布的硬件產品優化 app 和遊戲。</p><p>註冊 Apple 開發者、Apple Developer Program 和 Apple Developer Enterprise Program 的現成員可訪問&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.apple.com%2Fexperts%2F" target="_blank">developer.apple.com/experts</a>&nbsp;進一步瞭解可參與的最新課程、實驗室和特別活動的信息。</p><p>據瞭解，除了 Meet with Apple Experts，Apple 還為開發者提供了眾多額外的開發工具和資源，包括各種先進工具與端到端支持，協助開發者構建、測試、營銷和發行應用；同時內容豐富的免費工具與框架套件、Apple 開發者學院、企業家培訓營、App 加速器和 Swift Student Challenge 等項目，以及「人人能編程」和 Swift Playgrounds 等開放工具，也確保所有人都能平等、方便地獲取編程技術資源。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Sep 2023 02:34:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259667</guid>
            <link>https://www.oschina.net/news/259667</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Appilot —— 面向 DevOps 場景的 AI 助手]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><strong style="color:rgba(0, 0, 0, 0.9)"><span style="color:#006ed5">Appilot 是面向 DevOps 場景的 AI 助手 </span></strong><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">，這款產品將充分利用 AI 大語言模型的能力為用户提供變革性的部署和應用管理體驗</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Appilot 基於大語言模型進行推理，並且可以運行在本地個人電腦上。用户可以根據自身的需求和使用習慣，將 Appilot 集成到任意平台，進而實現通過輸入自然語言即可調用後端平台的能力。具體特性包括：</p><ul style="list-style-type:disc; margin-left:0; margin-right:0"><li><p style="margin-left:0; margin-right:0"><strong><span style="color:#006ed5">應用管理</span></strong>：藉助 Appilot，您可以通過自然語言交互來輕鬆地部署、升級、回滾和查看應用程序的日誌，無需繁瑣的手動操作。</p></li><li><p style="margin-left:0; margin-right:0"><strong><span style="color:#006ed5">環境管理</span></strong>：無論克隆環境還是查看環境內的依賴關係，均可通過 Appilot 實現，使用簡單的指令即可完成複雜的環境管理任務。</p></li><li><p style="margin-left:0; margin-right:0"><strong><span style="color:#006ed5">診斷排障</span></strong>：如果發現系統異常，Appilot 所擁有的排查和修復功能，可以幫助您快速識別問題並採取措施解決它們。</p></li><li><p style="margin-left:0; margin-right:0"><strong><span style="color:#006ed5">行為護欄</span></strong>：我們深知安全的重要性，因此 Appilot 僅提供領域特定的回答，並要求審批任何可能導致系統變更的操作，有助於確保您的系統不會受到未經授權的訪問。</p></li><li><p style="margin-left:0; margin-right:0"><strong><span style="color:#006ed5">混合基礎設施編排</span></strong>：Appilot 可以輕鬆對接任意基礎設施，無縫集成各種雲服務、容器化平台等，使您能夠在多樣化的環境中運行應用程序。</p></li><li><p style="margin-left:0; margin-right:0"><strong><span style="color:#006ed5">支持多語言</span></strong>：您可以採用包括但不限於中文、英文等語言輸入指令進行交互。</p></li><li><p style="margin-left:0; margin-right:0"><strong><span style="color:#006ed5">可插拔後端</span></strong>：我們秉持着開源開放的理念，避免供應商鎖定。因此您可以根據需要自定義後端，以滿足您的具體需求。</p></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-4f085f385caee96aa02b719013b8c3bad6d.png" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Wed, 27 Sep 2023 02:34:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/appilot</guid>
            <link>https://www.oschina.net/p/appilot</link>
        </item>
        <item>
            <title>
                <![CDATA[為承德程序員發聲]]>
            </title>
            <description>
                <![CDATA[<h1 class="header article-title"><a href="https://www.oschina.net/question/2720166_2331095">為承德程序員發聲</a></h1><div class="extra ui horizontal list meta-wrap"><div class="item"><a href="https://my.oschina.net/hardbone" class="__user"><span>局</span></a> 發佈於，今天 10:28
                    </div><div class="item">閲讀 4K+</div><div class="item collect-btn " data-id="2331095" data-user-id="2720166" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i> 收藏 <span data-collect-count="" data-id="2331095" data-obj-type="2">3</span></div><div class="item comment-count"><a href="https://www.oschina.net/question/2720166_2331095#comments" class="normal"><i class="comment outline icon"></i> 評論 <span data-article-reply-count="">17</span></a></div></div><div class="content" id="articleContent"><blockquote><p>轉載自，唐巧微信公眾號<br><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FdudaNfJJJVUpy2MKiZQAIA" target="_blank" rel="nofollow">https://mp.weixin.qq.com/s/dudaNfJJJVUpy2MKiZQAIA</a></p></blockquote><p><strong>事情起因</strong></p><p>承德一位程序員因為在 GitHub 上接海外的開源項目，因為交流不方便使用了俗話稱作「fan 牆」的軟件以便訪問 Google 等外網服務，被罰款 200 元，沒收 3 年「非法收入」100 多萬元。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-edac4ca38ffde4385c9de44dba968ab1986.png" referrerpolicy="no-referrer"></p><p><strong>行業觀點</strong></p><p>事情發生後，我身邊的所有人都為該處罰表達不滿情緒。部分朋友把這個歸結小地方處罰不規範。</p><p>胡錫進專門發文，希望對這種社會危害性為零的遠程打工掙外匯行為進行寬容。</p><p>但隨後他刪除了微博。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-7c214e7091ef10a031e68380830f004df3c.png" referrerpolicy="no-referrer"></p><p><strong>我的觀點</strong></p><p>1、程序員在國內向境外輸出勞動力，既賺取了外匯，又解決了自己的就業問題，而且向世界展示了中國互聯網行業的全球競爭力。國家非但不應該打擊，而且應該鼓勵。</p><p>這是一種新形態的「出口」。有助於中國建立更大的全球影響力。事實上，這位被罰同行的工作內容，就是從事大量被使用的開源項目的開發。參與開源項目本就是輸出行業影響力的最佳方式。</p><p>2、當前並沒有渠道為這一類人羣的合法訪問外國網絡提供便利。希望相關部門能對合法的使用外網需求，建立合適的申請和監管渠道。</p><p>3、在相關規章制度完善之前，對於工作生活需要，不得已訪問境外網站的。如果沒有對社會產生負面影響，那麼不應該處罰。對於有利於個人就業，有利於行業發展，有利於國家聲譽的事情，國家應該適度鼓勵並組織研究相關法規，幫助規範和健全相關經濟活動。</p><hr><ul><li><a href="https://www.oschina.net/news/259325" target="_blank" rel="nofollow">罰款 200 元，沒收 100 多萬</a></li></ul></div><div class="poll-wrap"></div><div class="additional-remarks"></div><div class="ui basic center aligned segment action"><div class="ui big buttons"><a class="ui basic button collect-btn hover" data-id="2331095" data-user-id="2720166" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i>收藏 (<span data-collect-count="" data-id="2331095" data-obj-type="2">3</span>)</a><div class="ui basic dropdown share button osc-share dropdown-share" data-tag="share-question"><i class="share icon"></i><span>分享</span><div class="menu"><a class="item" data-platform="weibo" data-value="weibo"><i class="weibo icon"></i>微博</a><a class="item" data-platform="qq" data-value="qq"><i class="qq icon"></i>QQ</a><a class="item" data-platform="wechat" data-value="wechat"><i class="weixin icon"></i>微信</a></div></div></div><div class="ui basic segment"><a class="ban" ban-report="" data-id="2331095" data-obj-type="2" data-url="https://www.oschina.net/question/2720166_2331095"><i class="flag red icon"></i>舉報</a></div></div>
            ]]>
            </description>
            <pubDate>Wed, 27 Sep 2023 02:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/question/2720166_2331095</guid>
            <link>https://www.oschina.net/question/2720166_2331095</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 用於構建用户界面的 JavaScript 庫 openInula]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-openinula-開源項目" class="anchor" href="https://gitee.com/openInula/inula#openinula-%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE"></a>openInula 開源項目</h1><h2><a id="user-content-項目介紹" class="anchor" href="https://gitee.com/openInula/inula#%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D"></a>項目介紹</h2><p>單詞 Inula（發音為：[ˈɪnjʊlə]），意為一類旋覆花屬菊科的植物。openInula 是一款用於構建用户界面的 JavaScript 庫，提供響應式 API 幫助開發者簡單高效構建 web 頁面，比傳統虛擬 DOM 方式渲染效率提升 30% 以上！同時 InulaJS 提供與 React 保持一致的 API，並且提供 5 大常用功能豐富的核心組件：狀態管理器、路由、國際化、請求組件、應用腳手架，以便開發者高效、高質量的構築基於 InulaJS 的前端產品。</p><h2><a id="user-content-技術架構" class="anchor" href="https://gitee.com/openInula/inula#%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84"></a>技術架構</h2><p><img src="https://gitee.com/openInula/inula-doc/raw/master/static/img/structure.PNG" alt="輸入圖片説明" referrerpolicy="no-referrer"></p><h3><a id="user-content-核心能力" class="anchor" href="https://gitee.com/openInula/inula#%E6%A0%B8%E5%BF%83%E8%83%BD%E5%8A%9B"></a>核心能力</h3><p><strong>響應式 API</strong></p><ul><li>openInula 通過最小化重新渲染的範圍，從而進行高效的 UI 渲染。這種方式避免了虛擬 DOM 的開銷，使得 openInula 在性能方面表現出色。</li><li>openInula 通過比較變化前後的 JavaScript 對象以細粒度的依賴追蹤機制來實現響應式更新，無需用户過度關注性能優化。</li><li>簡潔 API：
<ol><li>openInula 提供了兩組簡潔直觀的 API--響應式 API 和與 React 一致的傳統 API，使得開發者可以輕鬆地構建複雜的交互式界面。</li><li>openInula 簡潔的 API 極大降低了開發者的學習成本，開發者使用響應式 API 可以快速構建高效的前端界面。</li></ol></li></ul><p><strong>兼容 ReactAPI</strong></p><ul><li>與 React 保持一致 API 的特性、可以無縫支持 React 生態。</li><li>使用傳統 API 可以無縫將 React 項目切換至 openInula，React 應用可零修改切換至 openInula。</li></ul><h3><a id="user-content-openinula-配套組件" class="anchor" href="https://gitee.com/openInula/inula#openinula-%E9%85%8D%E5%A5%97%E7%BB%84%E4%BB%B6"></a>openInula 配套組件</h3><p><strong>狀態管理器/inula-X</strong></p><p>inula-X 是 openInula 默認提供的狀態管理器，無需額外引入三方庫，就可以簡單實現跨組件/頁面共享狀態。
inula-X 與 Redux 比可創建多個 Store，不需要在 Reducer 中返回 state 並且簡化了 Action 和 Reducer 的創建步驟，原生支持異步能力，組件能做到精準重渲染。inula-X 均可使用函數組件、class 組件，能提供 redux 的適配接口及支持響應式的特點。</p><p><strong>路由/inula-router</strong></p><p>inula-router 是 openInula 生態組建的一部分，為 openInula 提供前端路由的能力，是構建大型應用必要組件。
inula-router 涵蓋 react-router、history、connect-react-router 的功能。</p><p><strong>請求/inula-request</strong></p><p>inula-request 是 openInula 生態組件，涵蓋常見的網絡請求方式，並提供動態輪詢鈎子函數給用户更便捷的定製化請求體驗。</p><p><strong>國際化/inula-intl</strong></p><p>inula-intl 是基於 openInula 生態組件，其主要提供了國際化功能，涵蓋了基本的國際化組件和鈎子函數，便於用户在構建國際化能力時方便操作。</p><p><strong>調試工具/inula-dev-tools</strong></p><p>inula-dev-tools 是一個為 openInula 開發者提供的強大工具集，能夠方便地查看和編輯組件樹、管理應用狀態以及進行性能分析，極大提高了開發效率和診斷問題的便捷性。</p><p><strong>腳手架/inula-cli</strong></p><p>inula-cli 是一套針對 openInula 的編譯期插件，它支持代碼優化、JSX 語法轉換以及代碼分割，有助於提高應用的性能、可讀性和可維護性。</p><h2><a id="user-content-openinula-文檔" class="anchor" href="https://gitee.com/openInula/inula#openinula-%E6%96%87%E6%A1%A3"></a>openInula 文檔</h2><p>歡迎訪問 openInula 官網文檔倉庫，參與 openInula 開發者文檔開源項目，與我們一起完善開發者文檔。</p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.openinula.net%2F">訪問官網</a></p><h2><a id="user-content-代碼倉地址" class="anchor" href="https://gitee.com/openInula/inula#%E4%BB%A3%E7%A0%81%E4%BB%93%E5%9C%B0%E5%9D%80"></a>代碼倉地址</h2><p>openInula 倉庫地址：<a href="https://gitee.com/openinula">https://gitee.com/openinula</a></p><h2><a id="user-content-如何參與" class="anchor" href="https://gitee.com/openInula/inula#%E5%A6%82%E4%BD%95%E5%8F%82%E4%B8%8E"></a>如何參與</h2><p><strong>參與貢獻</strong>
歡迎您參與<a href="https://gitee.com/openinula/docs/blob/master/%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97.md">貢獻</a>，我們鼓勵開發者以各種方式參與文檔反饋和貢獻。</p><p>您可以對現有文檔進行評價、簡單更改、反饋文檔質量問題、貢獻您的原創內容，詳細請參考<a href="https://gitee.com/openinula/docs/blob/master/%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97.md">貢獻文檔</a>。</p><h2><a id="user-content-許可協議" class="anchor" href="https://gitee.com/openInula/inula#%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE"></a>許可協議</h2><p>openInula 主要遵循 Mulan Permissive Software License v2 協議，詳情請參考各代碼倉 LICENSE 聲明。</p><h2><a id="user-content-聯繫方式" class="anchor" href="https://gitee.com/openInula/inula#%E8%81%94%E7%B3%BB%E6%96%B9%E5%BC%8F"></a>聯繫方式</h2><p><a href="mailto:team@inulajs.org">team@inulajs.org</a></p>]]>
            </description>
            <pubDate>Wed, 27 Sep 2023 02:28:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/openInula/inula</guid>
            <link>https://gitee.com/openInula/inula</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 小程序編譯器性能優化之路]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img src="https://oscimg.oschina.net/oscnet/up-47f7698050b7b5de818c8012cafcc66ac83.png" alt="" referrerpolicy="no-referrer"></p><p>作者 | 馬可</p><blockquote><p>導讀</p><p>小程序編譯器是百度開發者工具中的編譯構建模塊，用來將小程序代碼轉換成運行時代碼。舊版編譯器由於業務發展，存在編譯慢、內存佔用高的問題，我們對編譯器做了一次大規模的重構，採用自研架構，做了多線程、代碼緩存、sourcemap 等多項優化，在性能和內存佔用上都有很大提升。全文介紹了新版編譯器的設計思路和優化方法，以及一些能夠用在通用打包工具裏的技術點。</p></blockquote><blockquote><p><em>全文 6629 字，預計閲讀時間 17 分鐘。</em></p></blockquote><h1><strong>01 前言</strong></h1><p>小程序編譯器在小程序開發、預覽、發佈各個階段都需要使用，因此編譯器性能會直接影響到開發者開發效率，也會影響到開發者工具的使用體驗。</p><p>由於舊版的編譯器（基於 webpack4）在構建大型項目時會很慢，內存佔用也高，一直被開發者吐槽。我們經過大量的調研和開發，最後採用完全自研架構做新編譯，針對小程序項目構建做了大量優化，基本解決了舊編譯存在的問題。</p><p>下圖是部分項目構建時間對比：</p><p><img src="https://oscimg.oschina.net/oscnet/up-af3d75670e77d75bf9f10f93f81c0f04a5a.png" alt="" referrerpolicy="no-referrer"></p><p>新版編譯器相對於舊版實現了 2~7 倍的性能提升，並且支持實時編譯、熱重載等特性，內存佔用更少，構建產物更優。</p><p>下面從，框架選型、新編譯器工作原理、性能和產物優化方法，等方面介紹新版編譯器的成長之路。</p><h1><strong>02 框架選型</strong></h1><p>在進行新版編譯器設計時，需要明確當前的痛點問題：性能，優先解決性能問題。其他新技術和新想法對編譯器有幫助的也一起實施。</p><p><strong>舊版編譯器基於 webpack4 存在如下幾個問題：</strong></p><ul><li><p>大型項目構建速度太慢。</p></li><li><p>dev 啓動慢、增量編譯慢，僅支持 loader 緩存，bundle 無緩存也比較慢。</p></li><li><p>基於 webpack4 做擴展開發，需要 patch 部分模塊才能工作，維護困難。</p></li><li><p>部分 webpack bundle 過程無法針對小程序代碼結構進行優化，存在無效構建。</p></li></ul><p><strong>新編譯的設計目標：</strong></p><ul><li><p>更快的全量編譯速度，消除 webpack 存在的無效構建過程。</p></li><li><p>支持全緩存，加快首次和增量編譯速度。</p></li><li><p>支持實時編譯，減少 dev 啓動和二次編譯時間。</p></li><li><p>支持多線程編譯加速，支持頁面熱重載。</p></li><li><p>優化產物結構，減少產物體積。</p></li></ul><h2><strong>2.1 主流構建工具</strong></h2><p>下面介紹的是我們調研過的主流前端構建工具，每個工具都有適用場景和優缺點。</p><p>在新版本編譯器架構設計時，其他構建工具的設計理念和技術特點都值得參考。</p><p><strong>Webpack 構建過程：</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-475b788c3ef6ad78df38db53396609efc33.png" alt="" referrerpolicy="no-referrer"></p><p><strong>Webpack 優點</strong>：功能完善、社區活躍、可配置性強、有很強的擴展性。</p><p><strong>Webpack 缺點</strong>：配置複雜、構建速度慢，二次開發困難。</p><p><strong>Parcel 構建過程：</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-b554482b6f2ef7aed547d2b55f1a4f68183.png" alt="" referrerpolicy="no-referrer"></p><p><strong>Parcel 優點</strong>：無需配置，構建速度快，原生支持多線程和全緩存，多線程之間共享數據通過 lmdb 進行，避免跨線程通信開銷。</p><p><strong>Parcel 缺點</strong>：生態小，自定義性有限，大量採用 Node 插件，兼容性也差一些。</p><p><strong>Vite 構建過程：</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-38aeaa049d0994119a775d2669a0dbe769c.png" alt="" referrerpolicy="no-referrer"></p><p><strong>Vite 優點</strong>：配置較為簡單，按需編譯，啓動快，dev 時有不錯的體驗。</p><p><strong>Vite 缺點</strong>：生態小，dev 和，發佈走兩套構建流程。</p><p><strong>其他小程序平台：</strong></p><ul><li><p>微信基於 gulp 和 C++ 模塊做小程序構建，並且對 npm 模塊做了預構建，在性能和開發體驗上做的比較好。</p></li><li><p>支付寶基於 webpack 做小程序構建，並且使用了 esbuild 加速代碼壓縮。</p></li><li><p>抖音小程序使用自研編譯器，構建流程比較簡單。</p></li></ul><h2><strong>2.2 新版編譯器</strong></h2><p>在設計新編譯框架時，借鑑了主流打包工具的工作流程，結合小程序代碼特點，決定不做通用打包工具，重點優化小程序打包性能。</p><p>最終選擇了自研編譯器的方案，並做了大量優化工作，新版編譯器優化點有如下幾個方面：</p><p>1.支持多 Compiler 協同工作，將動態庫開發等多類型項目構建解耦。</p><p>2.編譯階段全流程緩存，節省二次構建時間 90% 以上。</p><p>3.dev 開發默認採用按需編譯，提升單頁編譯性能。</p><p>4.支持 babel 和 swc 多線程編譯，提升全量編譯速度 2 ~ 7 倍。</p><p>5.採用新版 sourcemap 協議，移除非必要解析合併，將 bundle 階段耗時大幅縮減。</p><p>6.對 js、css、swan 模板編譯均做了構建時標記優化，減少 bundle 合併耗時。</p><p>7.對於預覽、發佈階段的 js 壓縮和混淆，採用了 terser 和 esbuild 並行方案，esbuild 用於快速打出預覽包，terser 可以保證壓縮率用於發佈包。</p><p>從結果看，新編譯器從速度、資源佔用和可維護性上相對於舊版都有顯著的提升。</p><h1><strong>03 新版編譯器工作原理</strong></h1><p>新編譯器的處理流程和 parcel 比較類似，Compiler 控制處理流程，Processor 進行代碼轉換，基本流程如下：</p><p><img src="https://oscimg.oschina.net/oscnet/up-70518bd0ba131a6e1ec9b169622be792fc3.png" alt="" referrerpolicy="no-referrer"></p><p>其中幾個重要的模塊：</p><ul><li><p>CompileEntry 編譯器為入口模塊，包含 cli 通信、dev server 通信、命令調用等。</p></li><li><p>CompileManager 為編譯管理器，用於依賴資源下載和管理以及多個 Compiler 協同構建。</p></li><li><p>Compiler 為編譯器模塊，用於將項目源碼編譯成運行時代碼，項目構建時 Compiler 可能有多個。</p></li><li><p>Processor 為單元處理器，用於處理，代碼轉換、代碼合併，等單個編譯任務。</p></li></ul><p><strong>注</strong>：小程序 App 項目有 1 個 Compiler，動態庫和動態擴展項目 2 個 Compiler。</p><h2><strong>3.1 Compiler 編譯器</strong></h2><p>用於編譯單個小程序項目，將開發者原始代碼編譯為可運行代碼。</p><p><strong>工作職能：</strong></p><p>1.創建運行上下文，提供 config、fs 文件處理、watcher 監控、logger 等模塊，給 Processor 使用。</p><p>2.全量編譯、文件變更時二次編譯；這裏二次編譯也是走一遍全量編譯流程，不過大部分用的是緩存結果。</p><p>3.管理、調度、運行 Processor 處理單元。</p><p>4.維護 Processor 依賴關係和結果緩存。</p><p><strong>特點：</strong></p><p>1.實現全流程緩存，將每個 Processor 的輸入參數、輸出結果寫入緩存，在有緩存情況下二次編譯時長可減少 90% 。</p><p>2.支持按需編譯，每次按需單頁編譯、增量編譯、全量編譯，都走同樣的 Processor 處理流程。</p><p>3.通過 Proxy 機制自動計算緩存參數依賴，不用手動為每個 Processor 生成緩存 hash，相對於 webpack 或 parcel 減少 bug 產生。</p><p>4.僅維護 Processor 依賴關係，不維護 ModuleGraph，簡化處理流程。</p><p>關於全流程緩存每家打包器都有自己的實現方案，基本原理是根據當前輸入參數和依賴情況為處理單元生成一個唯一 hash，hash 一致則結果一致。</p><p>webpack 和 parcel 由於維護了 ModuleGraph，緩存的計算和重用會複雜一些。小程序編譯器僅根據 Processor 入參和調用依賴進行計算。</p><h2><strong>3.2 Processor 單元處理器</strong></h2><p><strong>Processor 有如下特性：</strong></p><p>1.在輸入參數一致的情況下，保證輸出一致，輸入和輸出都必須可序列化為 json ，實現了 Processor 全緩存。</p><p>2.Processor 中的 uri 為構建 ID，在單次構建過程中 ID 一致則處理結果一致，例如處理 app.js 文件，uri 為：js:app.js，好處是可以統一 Processor 資源處理路徑。</p><p>3.Processor 之間支持互相調用：processWith 調用並繼續執行，processWithResult 調用並等待返回結果。</p><p><strong>注意</strong>：這裏的輸入參數包含 uri、app config, contextFreeData。</p><p><strong>幾種常用的 Processor：</strong></p><p>1.JS Processor 將 es6 代碼轉換成 es5 代碼，這是最耗時的模塊。</p><p>2.Swan Processor 將 swan 模板代碼轉換成 view 層 js 代碼。</p><p>3.Css Processor 使用 postcss 處理 css 中的單位轉換、依賴收集等工作。</p><p>4.Bundle Processor 將前面 transformer 處理結果按照 bundle 算法合併文件並輸出結果。</p><p><strong>Processor 工作流程：</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-8b070b7436cae7395aa1b3ece2ae58346d8.png" alt="" referrerpolicy="no-referrer"></p><p>Processor 處理流程需要經過 transform -&gt; bundle 的過程，在小程序裏 js, css, swan 模板的 bundle 可以分開並行處理，這裏和 webpack 的處理模式不一樣，和 parcel 的 pipeline 類似。</p><h2><strong>3.3 性能和產物優化方法</strong></h2><h3><strong>3.3.1 多核心編譯優化</strong></h3><p>由於 Node 中多線程模塊初始化速度和通信效率比多進程好一些，新編譯選擇使用，多線程，做多核心優化。</p><p><strong>多線程編譯有 2 種方案選擇：</strong></p><ul><li><p>方案 1：基於 processor 做多線程調度，由於 processor 間支持相互調用，實際處理會很複雜且有通信成本。</p></li><li><p>舊的編譯器做過基於 webpack 的 workerthread-loader，性能提升有限（10%~15%）。</p></li><li><p>parcel 基於 lmdb 公共緩存消除線程間通信，保證讀寫效率，是一個比較好的解決方法。</p></li><li><p>方案 2：僅對 js 轉譯做多線程調度，僅有一來一回 2 次通信成本。</p></li><li><p>使用 jest-worker 和 babel transform 做 js 多線程轉譯或者用 swc 多線程做 js 轉譯。</p></li></ul><p>由於大部分構建時間在 js 轉譯這裏（js 中有大量 node_modules 依賴，均需要轉換），css 和 swan 模塊轉換耗時少。</p><p>最終選擇方案 2 僅做 js 多線程轉譯，處理流程簡單且收益較好，整體提升如下：</p><ul><li><p>使用 jest-worker 多線程 babel 轉譯，4 線程可提升 1 倍以上速度。</p></li><li><p>使用 swc 做 js 轉譯，4 線程提升 4 倍以上速度。</p></li></ul><p><strong>JS Processor 多線程處理：</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-c3616ceaffc1873c47e87951e92160d998e.png" alt="" referrerpolicy="no-referrer"></p><p>其中：</p><p><strong>uri</strong>： 為處理器構建 ID</p><p><strong>contextFreeData</strong>： 單次構建中不可變數據，例如 app.json 中的配置項</p><p><strong>context args</strong>：全局參數，例如優化實驗開關、多線程開關等</p><p>在 js 轉換處理時規定了 transformer 統一轉換接口，基於接口實現了 babel 單線程、babel 多線程、swc 轉換 3 種處理器，並且可隨時做處理器切換。</p><p>對於不同的編譯環境可以做到靈活設置：</p><p>1.開發者工具中開發者根據機器配置情況可以切換，多線程、swc 編譯模式，提升效率。</p><p>2.雲編譯流水線默認開多線程編譯提高性能。</p><p>3.webIDE 默認開單線程降低資源消耗。</p><h3><strong>3.3.2 SWC 編譯優化</strong></h3><p>新編譯器多線程模式相對於舊編譯提升了 1 倍左右，在 dev 開發時一些大型項目頁面首次編譯還是有些慢，需要 10 秒以上，主要耗時在 js transform 這裏。</p><p>swc 目前在 js 轉譯上基本成熟了，且大部分場景能提升 4 倍以上轉譯速度，因此增加了 swc 多線程轉譯支持，將大型項目頁面首次編譯控制在了 5 秒以內。</p><p>需要編寫 2 個 swc 插件來適配 swc 轉譯：</p><ul><li><p>@swanide/swc-require-rename 將 require/import/export 中的模塊提取路徑信息，以便於後續在 js 中分析模塊依賴關係。</p></li><li><p>@swanide/swc-web-debug 對 js 代碼進行插樁處理，用來支持真機調試中的斷點調試。</p></li></ul><p>swc 編譯帶來的性能提升是巨大的，在使用中也發現了一些問題：</p><p>1.swc 存在內存泄露，在 dev 階段如果全量編譯次數過多，會導致內存佔用很高，需手動重啓編譯器。</p><p>2.swc 插件支持的 api 較少，一部分 babel 容易實現的功能，在 swc 中很難處理。</p><p>3.swc 由於使用 rust 編寫插件，插件在不同 @swc/core 版本間不能通用，需要為不同平台生成 swc 插件，在部署上會麻煩一些。</p><p>在實際使用中，對於一部分 swc 不能很好處理的場景，會降級到 babel 處理。</p><h3><strong>3.3.3 代碼壓縮和運行時緩存</strong></h3><p>在 dev 階段，編譯後的代碼是沒有經過壓縮的，可以在模擬器中運行。在預覽發佈階段由於限制了包體積，需要做代碼壓縮以減少產物體積。</p><p>可選的代碼壓縮工具有如下 3 個：</p><p>1.terser 壓縮率高，產物體積小，速度最慢。</p><p>2.swc 壓縮快，mangle 支持不完善，壓縮率較差。</p><p>3.esbuild 壓縮最快（比 terser 快了 10 倍以上），支持 mangle，代碼壓縮率不如 terser。</p><p>最後經過對比考慮，選擇瞭如下壓縮方案：</p><p>1.預覽階段由於不需要 sourcemap，移除 sourcemap，並使用 esbuild 做代碼壓縮，提高預覽速度（對於自動預覽場景有很大提升）。</p><p>2.發佈階段使用 terser 做多線程壓縮，並保留 sourcemap。</p><p>運行時緩存，指的是構建過程的中間結果都在內存中做了緩存，包括 Processor 處理結果，和 代碼壓縮結果，在二次構建時可以節省大部分重新構建時間。由於緩存中保留的是字符串和 json 對象，相對於基於 webpack 的舊版編譯器有 40% ~ 60% 的內存節省，在內存佔用上處於可接受範圍。</p><h3><strong>3.3.4 Swan 模板處理優化</strong></h3><p>舊的 swan 模板處理使用 swan-loader 進行模板轉換，由於設計時沒有處理好模板 import 作用域，導致 &lt;template&gt; 標籤以及 filter 過濾器函數只能內聯到頁面代碼中，如果模板中大量使用了 template 和 filter，最終生成的代碼體積會非常大。</p><p>新編編譯器糾正了 import 作用域關係，將編譯產物中的 template 、 filter 生成模式由內聯改為 require 引用，然後在 bundle 階段做代碼合併，使相同模塊能夠得到重用，算是填了一個大坑。</p><p><strong>新編譯器 swan 模板處理流程：</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-41f43a8a82b471e090692098e7e8c0960ce.png" alt="" referrerpolicy="no-referrer"> 單個 swan 文件經過 Processor 處理後可能的產物有：</p><ul><li><p>component 組件模塊，用於生成頁面和自定義組件</p></li><li><p>template 模塊</p></li><li><p>filter 過濾器函數、sjs 過濾器函數</p></li><li><p>transformed document 中間代碼</p></li></ul><p>將 swan 模板轉換成不同類型的 js module，並維護依賴關係，便於後續的代碼合併時更精細化的控制。</p><p>由於歷史原因 import/include 中包含 sjs 或者 template 引用時不能直接生成 template 模塊，需要在最後入口模板中生成。新編譯也提供了 template 靜態編譯選項，將嚴格限制 import 作用域，可直接生成 template 模塊代碼，對於 taro 生成的小程序項目可以節約 30% 左右的產物大小。</p><h3><strong>3.3.5 Sourcemap 優化</strong></h3><p>由於編譯器需要支持 js 代碼調試以及運行時 error 跟蹤，在 dev 和發佈階段都需要生成 sourcemap。</p><p>在 webpack 中生成代碼時需要對 sourcemap 進行合併計算，較大的項目 sourcemap 合併會佔用很長時間，並且每次重新編譯都要重新計算 sourcemap。</p><p>調研時發現瀏覽器 devtools 對 sourcemap 協議，的 index map 支持非常好， 新編譯器基於 index map 協議做了 sourcemap 合併優化，由之前的多文件 sourcemap 合併計算，變成了計算生成 offset map 並拼接內容，這樣 js bundle 耗時就由原來的，幾秒到幾十秒變為了固定 3 秒以內。</p><p><img src="https://oscimg.oschina.net/oscnet/up-7988863ee8de85eae8738399ff63f0d4573.png" alt="" referrerpolicy="no-referrer"></p><p>一個有意思的事情是 vscode 的 js-debugger 直到 22 年 6 月份才支持 index map 調試（index map 2011 年發佈的），微軟的動作稍微慢了一些。</p><h3><strong>3.3.6 後續工作</strong></h3><p>在新編譯器開發完成之後的推廣中，採用了漸進式推廣方式：</p><p><strong>第一階段</strong>，開發者工具新舊編譯器共存，dev、預覽使用新編譯器，發佈使用舊編譯器。</p><p><strong>第二階段</strong>，內部 pipeline 預覽和發佈全量使用新編譯。</p><p><strong>第三階段</strong>，開發者工具全部切換到新編譯器。</p><p>新版編譯實際上線後還存在一些小的兼容性問題，需要儘量提前暴露問題才能做發佈全量替換。</p><p>針對小程序項目，新編譯做了大量的優化工作，部分優化工作還沒有完成開發，包括：</p><p><strong>hmr 熱重載</strong>：開發中，由於，運行時框架、開發者工具均需要做接口適配，需要較長時間調試才能達到預期。</p><p><strong>tree-shaking 代碼消除</strong>：對於 es6 模塊在 transform 階段可以做 tree-shaking 消減代碼。</p><p><strong>scope-hoisting 作用域提升</strong>：理論可行，需要驗證代碼縮減效果。</p><p>新版編譯器由於需要完全兼容舊版編譯器構建結果，在 bundle 打包場景還存在優化空間，我們在後續工作中配合運行時框架可以做更多打包產物優化。</p><h1><strong>04 總結</strong></h1><p>新版編譯器採用自研打包方案，對比基於 webpack 的舊編譯器實現了巨大的性能提升，徹底解決了編譯慢、資源佔用高的問題，相對友商的編譯器也有不錯的性能優勢。</p><p>一些新編譯引入的優化手段如 swc 轉譯、esbuild 壓縮、sourcemap 優化，也能用在其他前端項目構建中，並起到加速效果。</p><p>在新編譯器項目中每個同學都非常努力，貢獻了很多奇妙的點子，遇到的大部分難題都有效解決了。我們會繼續堅持性能和產物優化這兩個方向，不斷提升開發者體驗和運行時效率。</p><p>——END——</p><p><strong>推薦閲讀</strong></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247571280%26idx%3D1%26sn%3Df52aee0632693276224b4de1ba4fb0ba%26chksm%3Dc03fe72cf7486e3a0795aaabd4af6783b01f1aee769bf8d43d892101c2ca9feb7e9e7521f552%26scene%3D21%23wechat_redirect" target="_blank">百度 APP iOS 端包體積 50M 優化實踐 (六) 無用方法清理</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247570869%26idx%3D1%26sn%3Dce0712fad8ff6386c48a1363892b6a6b%26chksm%3Dc03fe5c9f7486cdfadf587b505c9de45d7bae6578e0ec6159c2f969854e488337d1544d37562%26scene%3D21%23wechat_redirect" target="_blank">基於異常上線場景的實時攔截與問題分發策略</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247570853%26idx%3D1%26sn%3D51afb6a105c191c9bebdf19a1042ac94%26chksm%3Dc03fe5d9f7486ccfdfe33952845e048f506680bbf56be8448ee2be780c0fe90f170c86e3030c%26scene%3D21%23wechat_redirect" target="_blank">極致優化 SSD 並行讀調度</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247570809%26idx%3D1%26sn%3D2e9514a2d5233e0611c39361d29505a3%26chksm%3Dc03fe505f7486c138fab993da98004f431ff399d7a3700edca4cd9bdbab57b78e1098b18f9ac%26scene%3D21%23wechat_redirect" target="_blank">AI 文本創作在百度 App 發文的實踐</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247570754%26idx%3D1%26sn%3Da11c148b57e0fc5b91e600404ce063a0%26chksm%3Dc03fe53ef7486c28ff8980433db6437dad74c6bd3fbaf0fb516e59182dd8d85d7c6af090b665%26scene%3D21%23wechat_redirect" target="_blank">DeeTune：基於 eBPF 的百度網絡框架設計與應用</a></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Sep 2023 02:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4939618/blog/10114374</guid>
            <link>https://my.oschina.net/u/4939618/blog/10114374</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[高效能軟件工程師的 7 個習慣]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>管理學大師史蒂芬·柯維代表作《高效能人士的 7 個習慣》是商業書籍的經典之作，產生了積極而深遠的影響。如果我們把《高效能人士的 7 個習慣》的理念應用到軟件工程師身上，又會怎麼樣呢？</p><p>資深軟件工程師 Luthfur Chowdhury 根據職業生涯中見過的優秀軟件工程師的常見習慣，整理出以下清單——</p><p><strong>7 Habits of Highly Effective Software Engineers（高效能軟件工程師的 7 個習慣）：</strong></p><p><strong>1. 快速將想法打造出原型，進行概念驗證</strong></p><p>許多想法和新技術概念聽起來很棒，但現實往往會有所不同。</p><p>為了更好地瞭解想法的可行性，優秀的工程師會更快地投入原型設計和概念驗證。原型設計是一個很好的學習和探索工具。你會發現自己想到的方法是否可行，是否真正解決了你原來的問題，或者是否存在你之前沒有想到的限制。</p><p><strong>2. 有效評估工作量</strong></p><p>工作量評估會影響產品路線圖、技術方法和交付給終端用户的價值。</p><p>擁有良好評估能力的工程師的團隊會給他們的工作帶來信心。經常延期的團隊會產生壓力和不確定感。優秀的工程師通過跟蹤他們的估計和工作實際花費時間之間的差異來更好地做到這一點。</p><p><strong>3. 快速且及時地 review 代碼</strong></p><p>審查 PR 的速度越快，代碼改進的速度就越快，並且投入生產的速度也就越快。快速的代碼 review 可以向開發者提供反饋，同時代碼和相關概念仍然記憶猶新。</p><p><strong>4. 主動記錄代碼、設計和流程，形成文檔</strong></p><p>優秀的文檔將幫助未來的工程師維護和構建工作。</p><p>放棄現有系統的一個關鍵原因通常是周圍沒有人知道它是如何運行的，或者不瞭解技術決策背後的背景。優秀的工程師通過記錄他們的工作來確保他們留下堅實的基礎和遺產。</p><p><strong>5. 坦誠地參與技術討論</strong></p><p>構建出色的軟件需要一個對技術想法持開放和坦誠態度的團隊。</p><p>每個人都應該坦誠説出自己的想法，並營造一種邀請其他人也這樣做的氛圍。提出一個好主意並繼續重複它以使其變得更好。</p><p>如果看到了想法中的缺陷，就公開地指出來，並解釋你的理由。</p><p><strong>6. 完成「狗屎」工作</strong></p><p>只有完成工作才能取得成果。你需要把事情做好並交付生產。當一個項目接近完成時，我們都有過能量減弱的經歷，當時間不夠，終點線仍然感覺很遙遠的時候。這就是需要集中注意力、縮小功能範圍、保持強度水平並推動項目完成的地方。把事情做好是偉大工程師所體現的一種技能和習慣。</p><p><strong>7. 保持好奇心</strong></p><p>偉大的工程師往往具有天生的好奇心。他們不止對解決長期業務問題的新技術、新技術方法感興趣。因為他們的好奇心不僅限於技術，還會經常進一步瞭解他們所做工作的用户和業務背景，以及他們可以產生的影響。</p><p>原文：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmakingsmallercircles.com%2Farticles%2F7-habits-of-highly-effective-software-engineers%2F" target="_blank">https://makingsmallercircles.com/</a></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Sep 2023 09:42:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259604/7-habits-of-highly-effective-software-engineers</guid>
            <link>https://www.oschina.net/news/259604/7-habits-of-highly-effective-software-engineers</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[雲原生週刊：K8s 的 13 個最佳開源監控工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2>開源項目推薦</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdevtron-labs%2Fsilver-surfer" target="_blank">Silver Surfer</a></h3><p>該項目旨在檢查 Kubernetes 對象的 API 版本兼容性，併為其提供遷移路徑，以便為集羣升級做好準備。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Factions%2Factions-runner-controller" target="_blank">Actions Runner Controller</a></h3><p>Actions Runner Controller (ARC) 是一個 Kubernetes 操作器，可為 GitHub Actions 編排和擴展自託管運行器。</p><p>使用 ARC，您可以創建運行程序規模集，該規模集可根據存儲庫、組織或企業中運行的工作流數量自動擴展。由於受控運行程序可能是短暫的並且基於容器，因此新的運行程序實例可以快速、乾淨地擴展或縮減。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fhelm%2Fhelm-mapkubeapis" target="_blank">helm-mapkubeapis</a></h3><p>這是一個 Helm 插件，可將版本中廢棄或移除的 Kubernetes API 映射到受支持的 API 中。</p><h2>文章推薦</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmedium.com%2F%40omers1414%2Fmastering-argocd-management-advanced-gitops-techniques-for-flexibility-and-scale-5a1375958482" target="_blank">掌握 ArgoCD 管理：實現靈活性和規模的高級 GitOps 技術</a></h3><p>這篇文章深入探討瞭如何利用 ArgoCD 的潛力進行高級 GitOps 管理，通過 ApplicationSet Helm Chart 實現靈活的部署，以及通過擴展 ArgoCD 實例實現可擴展性和多租户支持的未來發展方向。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flogz.io%2Fblog%2Fopen-source-monitoring-tools-for-kubernetes%2F" target="_blank">Kubernetes 的 13 個最佳開源監控工具</a></h3><p>這篇文章提供了關於 Kubernetes 的 13 個開源監控工具的概述，並介紹了每個工具的優點和缺點，以幫助讀者選擇適合其需求的工具。</p><h2>雲原生動態</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.linuxfoundation.org%2Fpress%2Fannouncing-opentofu" target="_blank">Linux 基金會推出 OpenTofu</a></h3><p>Linux 基金會宣佈成立 OpenTofu，這是一個開源替代方案，用於 Terraform 廣泛使用的基礎設施即代碼工具。OpenTofu 以前被稱為 OpenTF，是對 Terraform 最近宣佈的許可證變更（從 Mozilla Public License v2.0（MPLv2）變更為 Business Source License v1.1）的開放和社區驅動的迴應，為每個人提供了一個可靠的開源替代方案，採用中立的治理模型。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FgTzDuuX3ZdMjPrJ1qka2tw" target="_blank">Fluent Operator 2.5.0 發佈：新增多個插件</a></h3><p>Fluent Operator v2.5.0 新增 11 個 features， 其中 Fluent Bit 新增支持 7 個插件， Fluentd 新增支持 1 個插件。此外，對 Fluent Operator 也進行了增強，調整了默認參數，以便適應更多場景，並對 helm chart 進行了優化，用户可以更方便的進行安裝，並修復了部分 bug。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.infoq.com%2Fnews%2F2023%2F09%2Fhashicorp-vault-kubernetes%2F%3FtopicPageSponsorship%3D6457dc55-9c2d-4b4a-a65a-641549fdbe17" target="_blank">適用於 Kubernetes 的 HashiCorp Vault Secrets Operator 正式推出</a></h3><p>HashiCorp 已將適用於 Kubernetes 的 HashiCorp Vault Secrets Operator 正式投入使用。該 Kubernetes Operator 將 Vault 的 secret 緩存相結合。操作員還處理 Secrets 輪換，並擁有用於各種特定於 Secrets 的自定義資源的控制器。</p><p>Vault Secrets Operators 監視其自定義資源定義 (CRD) 集的更改。每個 CRD 都允許操作員將 Vault Secret 同步到 Kubernetes Secret。該運算符將源 Vault secret 直接寫入目標 Kubernetes secret。這可確保對源所做的所有更改都能正確複製，並使用 Kubernetes 自定義資源來管理服務使用的 secret。應用程序能夠以 Kubernetes 原生方式從目的地使用 secret。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevclass.com%2F2023%2F09%2F21%2Fharness-introduces-gitness-open-source-git-platform%2F" target="_blank">Harness 推出開源 Git 平台 Gitness</a></h3><p>DevOps 公司 Harness 發佈了 Gitness，這是一個新的開源 Git 平台，據稱這是「近十年來開源 Git 平台的第一個重要版本」。</p><p>Gitness 有兩個主要組件，自託管的 Git 存儲庫和基於 Drone 的管道。</p><p>Harness 提供了所謂的軟件交付平台，該平台可以自託管、安裝在 AWS 上或由 Harness 託管的雲上，提供各種產品，包括持續交付、功能標記、錯誤跟蹤和混沌工程。該公司還提供多種可免費使用的開源或可用源代碼產品，但由於許可限制，並非所有產品都有資格成為真正的開源產品。</p><blockquote><p>本文由博客一文多發平台 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenwrite.cn%3Ffrom%3Darticle_bottom" target="_blank">OpenWrite</a> 發佈！</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Sep 2023 09:20:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4197945/blog/10114425</guid>
            <link>https://my.oschina.net/u/4197945/blog/10114425</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[低代碼引擎 —— TinyEngine]]>
            </title>
            <description>
                <![CDATA[<p align="center"><a href="https://gitee.com/link?target=https%3A%2F%2Fopentiny.design%2Ftiny-engine" target="_blank" rel="noopener noreferrer"><img alt="OpenTiny Logo" src="https://gitee.com/opentiny/tiny-engine/raw/develop/logo.svg" height="100" referrerpolicy="no-referrer"></a></p><p align="center">TinyEngine 低代碼引擎使能開發者定製低代碼平台，支持在線實時構建低碼平台，支持二次開發或集成低碼平台能力</p><p><a href="https://gitee.com/opentiny/tiny-engine/blob/develop/README.md">English</a> | 簡體中文</p><p>🌈 特性：</p><ul><li>跨端跨框架前端組件</li><li>支持在線實時構建、支持二次開發或被集成</li><li>直接生成可部署的源碼，運行時無需引擎支撐</li><li>允許接入第三方組件、允許定製擴展插件</li><li>支持高代碼與低代碼，混合開發部署應用</li><li>平台接入 AI 大模型能力，輔助開發者構建應用</li></ul><h2><a id="user-content-開發" class="anchor" href="https://gitee.com/opentiny/tiny-engine#%E5%BC%80%E5%8F%91"></a>開發</h2><h3><a id="user-content-安裝所需的依賴" class="anchor" href="https://gitee.com/opentiny/tiny-engine#%E5%AE%89%E8%A3%85%E6%89%80%E9%9C%80%E7%9A%84%E4%BE%9D%E8%B5%96"></a>安裝所需的依賴</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nv">$ </span>npm <span class="nb">install</span></span><span id="LC2" class="line"><span class="nv">$ </span><span class="nb">pushd </span>mockServer</span><span id="LC3" class="line"><span class="nv">$ </span>npm <span class="nb">install</span></span><span id="LC4" class="line"><span class="nv">$ </span><span class="nb">popd</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-本地開發啓動本地-mock-服務器使用本地-mock-服務器的-mock-數據" class="anchor" href="https://gitee.com/opentiny/tiny-engine#%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91%E5%90%AF%E5%8A%A8%E6%9C%AC%E5%9C%B0-mock-%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0-mock-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84-mock-%E6%95%B0%E6%8D%AE"></a>本地開發，啓動本地 mock 服務器，使用本地 mock 服務器的 mock 數據</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nv">$ </span>npm run serve</span><span id="LC2" class="line"></span><span id="LC3" class="line"><span class="c"># 另起一個終端</span></span><span id="LC4" class="line"><span class="nv">$ </span><span class="nb">cd </span>mockServer</span><span id="LC5" class="line"><span class="nv">$ </span>npm run dev</span><span id="LC6" class="line"></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>瀏覽器打開：<code>http://localhost:8080/?type=app&amp;id=918&amp;tenant=1&amp;pageid=NTJ4MjvqoVj8OVsc</code><br><code>url search</code>參數：</p><ul><li><code>type=app</code> 應用類型</li><li><code>id=xxx</code> 應用 ID</li><li><code>tenant=xxx</code> 組織 ID</li><li><code>pagdId=xxx</code> 頁面 ID</li></ul><h2><a id="user-content-構建" class="anchor" href="https://gitee.com/opentiny/tiny-engine#%E6%9E%84%E5%BB%BA"></a>構建</h2><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c"># 先構建所有插件</span></span><span id="LC2" class="line">npm run build:plugin</span><span id="LC3" class="line"></span><span id="LC4" class="line"><span class="c"># 構建設計器</span></span><span id="LC5" class="line">npm run build:alpha  或 build:prod</span><span id="LC6" class="line"></span><span id="LC7" class="line"><span class="c"># 發佈所有插件</span></span><span id="LC8" class="line">npm run publish:plugin</span><span id="LC9" class="line"></span><span id="LC10" class="line"><span class="c"># 發佈設計器</span></span><span id="LC11" class="line">npm run publish:core</span><span id="LC12" class="line"></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-常規發包流程" class="anchor" href="https://gitee.com/opentiny/tiny-engine#%E5%B8%B8%E8%A7%84%E5%8F%91%E5%8C%85%E6%B5%81%E7%A8%8B"></a>常規發包流程</h2><ol><li><p>發佈插件
npm run build:plugin &amp;&amp; npm run publish:plugin</p></li><li><p>發佈設計器</p></li></ol><p>a) 修改包名和版本號:
包名：@opentiny/tinybuilder-design-core-test
版本號：末位每次+1, 例如：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">  "name": "@opentiny/tinybuilder-design-core-test",</span><span id="LC2" class="line">  "version": "1.0.87",</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>b) npm publish</p><h2><a id="user-content--參與貢獻" class="anchor" href="https://gitee.com/opentiny/tiny-engine#-%E5%8F%82%E4%B8%8E%E8%B4%A1%E7%8C%AE"></a>🤝 參與貢獻</h2><p>如果你對我們的開源項目感興趣，歡迎加入我們！🎉</p><p>參與貢獻之前請先閲讀<a href="https://gitee.com/opentiny/tiny-engine/blob/develop/CONTRIBUTING.zh-CN.md">貢獻指南</a>。</p><ul><li>添加官方小助手微信 opentiny-official，加入技術交流羣</li><li>加入郵件列表 <a href="mailto:opentiny@googlegroups.com">opentiny@googlegroups.com</a></li></ul><h2><a id="user-content-開源協議" class="anchor" href="https://gitee.com/opentiny/tiny-engine#%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE"></a>開源協議</h2><p><a href="https://gitee.com/opentiny/tiny-engine/blob/develop/LICENSE">MIT</a></p>]]>
            </description>
            <pubDate>Tue, 26 Sep 2023 08:19:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/opentiny/tiny-engine</guid>
            <link>https://gitee.com/opentiny/tiny-engine</link>
        </item>
        <item>
            <title>
                <![CDATA[ABP Framework — 基於 ASP.NET 的 Web 應用框架]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>ABP Framework 是基於 ASP.NET Core 用於創建現代 Web 應用程序的完整架構和基礎設施，遵循最佳實踐和約定。</p><p>ABP Framework 提供了完整的<span style="background-color:#ffffff; color:#212529">全棧應用程序基礎設施，主要功能</span></p><ul><li>多個 UI 選項</li><li>多個數據庫提供程序</li><li>ABP CLI</li><li>模塊化</li><li>多租户</li><li>BOOTSTRAP 標籤助手</li><li>動態表單</li><li>認證與授權</li><li>虛擬文件系統</li><li>DOMAIN DRIVEN DESIGN 基礎設施</li><li>自動 REST APIS</li><li>動態客户端代理</li><li>具有 RABBITMQ 集成的分佈式事件總線</li><li>測試基礎設施</li><li>……</li></ul><p><strong>架構</strong></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-2ab8ea6f22e02f599298ab0c79a0d3b25b4.png" referrerpolicy="no-referrer"></p><p>&nbsp;</p></div>
                                                                ]]>
            </description>
            <pubDate>Tue, 26 Sep 2023 07:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/abp-framework</guid>
            <link>https://www.oschina.net/p/abp-framework</link>
        </item>
        <item>
            <title>
                <![CDATA[Apache OpenOffice 是事實上的「無人維護」項目]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frocket9labs.com%2Fpost%2Fits-time-to-let-go-apache-software-foundation%2F" target="_blank">Apache Open Office as an unmaintained project?</a>》這篇文章今天在 Hacker News 引起了<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.ycombinator.com%2Fitem%3Fid%3D37645160" target="_blank">廣泛討論</a>。作者指出，Apache OpenOffice 最後一個大版本更新是在 2014 年 (<a href="https://www.oschina.net/news/51324/apache-openoffice-4-1-0-final" target="news">Apache OpenOffice 4.1.0</a>)，後面一直只發布小版本更新，目前最新版本是今年 2 月發佈的 4.1.14。</p><p>考慮到這些發佈歷史，是否可以將 Apache OpenOffice 視為一個無人維護的項目？</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.ycombinator.com%2Fitem%3Fid%3D37645160" target="_blank"><img height="152" src="https://static.oschina.net/uploads/space/2023/0926/142540_9sYB_2720166.png" width="939" referrerpolicy="no-referrer"></a></p><p>文章簡單地回顧了 Apache OpenOffice 的歷史：</p><ul><li>1985 年，Star Division 公司發佈私有辦公軟件套裝 StarOffice</li><li>2000 年，Sun Microsystems 公開 StarOffice 源代碼，隨後 OpenOffice.org 誕生</li><li>2010 年，LibreOffice 基於 OpenOffice.org 源代碼發佈首個版本</li><li>2010 年，Oracle 收購 Sun Microsystems 之後將 OpenOffice.org 相關商標和代碼捐贈給了 Apache 軟件基金會，創造了 Apache Open Office</li><li>在 2012 年的第一個版本 3.4 和 2014 年的最後一個主要版本 4.1 之間，Apache Open Office 集成了 IBM Lotus Symphony，在捐贈給 Apache 軟件基金會後，添加了重新設計的側邊欄和一些其他新功能</li><li>自 2014 年以來……Apache OpenOffice 的更新主要是：錯誤修復、字典更新、錯誤修復、字典更新、空格「修復」、字典更新、字典更新……</li><li>相比之下，LibreOffice 在 OpenOffice.org 源代碼基礎上活躍開發至今，Apache OpenOffice 在 4.1 之後再也沒有發佈過大版本更新</li></ul><p>此外，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fopenoffice%2Fcommits%2Ftrunk" target="_blank">從 OpenOffice 的提交記錄來看</a>，大多數 commit 都沒有意義。在許多情況下，這些 commit 甚至不會對程序進行任何更改，因為它們只是改動源代碼周圍的空白區域。</p><p><img height="2690" src="https://static.oschina.net/uploads/space/2023/0926/144608_xzWl_2720166.png" width="1787" referrerpolicy="no-referrer"></p><p>作者認為他們這樣做有兩個原因：</p><ol><li>有一些合情合理的空白字符問題需要解決。</li><li><strong>人們有動機讓一個項目看起來好像是活躍的，而實際上它並不活躍。</strong></li></ol><p>因此作者認為，Apache OpenOffice 項目已經變成了無人維護的狀態——這不是在質問 Apache 軟件基金會，這就是事實。他還説道，基金會及其貢獻者在近十年來不披露與缺乏實質性更新或變化有關的信息的方式，並且似乎故意掩蓋項目缺乏發展的情況。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Sep 2023 06:51:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259569/open-office-as-an-unmaintained-project</guid>
            <link>https://www.oschina.net/news/259569/open-office-as-an-unmaintained-project</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[微軟開源 windows-drivers-rs，用 Rust 開發 Windows 驅動程序]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Microsoft Azure 首席技術官兼著名 Windows 軟件開發人員 Mark Russinovich 在社交平台上<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fmarkrussinovich%2Fstatus%2F1705730703957405826" target="_blank">宣佈</a>，啓動了一個名為 windows-drivers-rs 的新開源項目。</span></p><p><span style="color:#000000">該項目可幫助開發人員使用 Rust 開發 Windows 驅動程序，旨在支持 WDM (Windows Driver Model) 和 WDF (Windows Driver Framework) 驅動程序開發模型。</span></p><p><span style="color:#000000"><img alt="" height="250" src="https://oscimg.oschina.net/oscnet/up-f6fe123e928e766cef55d1f83ecd65770f5.webp" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">當前版本的資源庫主要由 Rust crates 組成，具體包括：</span></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fwindows-drivers-rs%2Fblob%2Fmain%2Fcrates%2Fwdk-build" target="_blank">wdk-build</a><span style="color:#000000">：用於配置 Cargo 構建腳本以進行 WDK 的綁定生成和下游鏈接的庫。雖然此 crate 的編寫目的是靈活地適應不同的 WDK 版本和不同的 WDF 版本，但目前僅針對 NI eWDK、KMDF 1.33、UMDF 2.33 和 WDM 驅動程序進行了測試。舊版 DDK 可能缺少鏈接器選項。</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fwindows-drivers-rs%2Fblob%2Fmain%2Fcrates%2Fwdk-sys" target="_blank">wdk-sys</a><span style="color:#000000">：直接 FFI 綁定到 WDK 中可用的 API。這包括從<code>bindgen</code>中自動生成的 ffi 綁定，以及包括手動重新實現 bindgen 無法生成的宏。</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fwindows-drivers-rs%2Fblob%2Fmain%2Fcrates%2Fwdk" target="_blank">wdk</a><span style="color:#000000">：與 WDK 中可用的 API 的安全慣用綁定</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fwindows-drivers-rs%2Fblob%2Fmain%2Fcrates%2Fwdk-panic" target="_blank">wdk-panic</a><span style="color:#000000">：使用 WDK 構建的程序的默認 panic 處理程序實現</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fwindows-drivers-rs%2Fblob%2Fmain%2Fcrates%2Fwdk-alloc" target="_blank">wdk-alloc</a><span style="color:#000000">：對使用 WDK 編譯的二進制文件的分配支持</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fwindows-drivers-rs%2Fblob%2Fmain%2Fcrates%2Fwdk-macros" target="_blank">wdk-macros</a><span style="color:#000000">：宏的集合，有助於更輕鬆地與 wdk-sys 的直接綁定進行交互。該 crate 通過<code>wdk-sys</code>重新導出，並且通常情況下 crates 不需要直接依賴<code>wdk-macros</code></span></li></ul><p><span style="color:#000000">具體示例可查看 </span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2FWindows-rust-driver-samples" target="_blank">Windows-rust-driver-samples</a><span style="color:#000000">。</span></p><p><span style="color:#000000">值得注意的是，該項目仍處於早期階段，不建議用於商業用途；但微軟方面鼓勵社區對該項目的實驗、建議和討論。在 windows-drivers-rs 的開發過程中，該公司將把 GitHub 討論區作為與社區互動的主要形式。目前，windows-drivers-rs 項目已得到了微軟開發人員 Melvin Wang 的支持。</span></p><p><strong><span style="color:#000000">相關閲讀：</span></strong></p><ul><li><p style="margin-left:0px; margin-right:0px; text-align:start"><a href="https://www.oschina.net/news/238894/microsoft-windows-rust" target="_blank">微軟正在用 Rust 重寫核心 Windows 庫</a></p></li><li><p style="margin-left:0px; margin-right:0px; text-align:start"><a href="https://www.oschina.net/news/249719/rust-in-the-windows-kernel" target="_blank">微軟：加大力度在 Windows 11 使用 Rust</a></p></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Sep 2023 06:44:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259564/develop-windows-drivers-in-rust</guid>
            <link>https://www.oschina.net/news/259564/develop-windows-drivers-in-rust</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[谷歌建造海底光纜 Nuvem —— 連接葡萄牙、百慕大和美國]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Google Cloud 官方博客<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcloud.google.com%2Fblog%2Fproducts%2Finfrastructure%2Fintroducing-the-nuvem-subsea-cable%2F" target="_blank">宣佈 Nuvem</a> ——&nbsp;這是一個新的連接葡萄牙、百慕大和美國的跨大西洋海底光纜系統。</p><p>Nuvem&nbsp;是這條新海底光纜的名字，在葡萄牙語中是 'cloud' 的意思。Nuvem 將提升跨大西洋的網絡彈性，幫助滿足對數字服務不斷增長的需求。</p><p>這條新的光纜將增加國際路線的多樣性，並支持相關大陸和國家的信息和通信技術 (ICT) 基礎設施的發展。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-17a78469606eb791bffede853dbbe14484c.png" referrerpolicy="no-referrer"></p><p>▲ Nuvem 海底光纜路線</p><p>Nuvem 預計將於 2026 年投入使用，將為世界各地的 Google 用户和 Google Cloud 客户增加容量、提高可靠性並減少延遲。它將與 Firmina 和 Equiano 一起創建連接北美、南美、歐洲和非洲的重要數據長廊。</p><p>博客還提到，百慕大長期以來一直致力於發展海底光纜市場，而且全球 95% 的數據流動都是通過海底光纜傳輸。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Sep 2023 03:54:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259549/nuvem-subsea-cable</guid>
            <link>https://www.oschina.net/news/259549/nuvem-subsea-cable</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[百度發佈首個量子領域大模型]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">在近日召開的 2023 量子產業大會上，百度量子計算研究所所長段潤堯帶來百度量子軟硬件和解決方案等方面的最新成果，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FQpACJh3RXKKfyKCvBvapjQ" target="_blank">發佈</a>了首個量子領域大模型，及百度量子助手和量子寫作助手兩大 AI 原生應用；還發布了量子領域大模型白皮書。</span></p><p><span style="color:#000000">根據介紹，百度發佈首個量子領域大模型，旨在芯片層、框架層、模型層及應用層等全棧技術上加速量子技術與大模型深度融合，充分激發兩大技術各自的潛力。該量子領域大模型是在文心一言基礎上，使用量子領域高質量數據進行更有針對性的訓練和優化而構建的量子領域大模型，能更好地理解量子知識，專業執行量子任務。</span></p><p><img alt="" height="333" src="https://oscimg.oschina.net/oscnet/up-0ff8b0a44302a63883fc37980394ad3c7c2.jpg" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">百度量子助手是依託百度量子知識庫與產業級知識增強文心大模型，基於 7800 萬原始數據、22 萬精調數據訓練打造。只需輸入 6 個變量，量子寫作助手可在 5 分鐘內撰寫一篇 13000 字符合格式要求的專利文檔，高效幫助企業將量子領域的研究成果與知識產權沉澱為企業資產。</span></p><p><span style="color:#000000">段潤堯表示，量子領域大模型的未來發展將會呈現出多個代表性階段。從近期以適配量子領域的行業大模型開始，大幅降低量子教育行業門檻；逐漸過渡為經典和量子混合大模型，再發展到通用量子領域大模型，有望實現大模型技術在數據、算法、算力等各維度的全面量子化；最終，量子領域大模型將會成為新時代的操作系統，在量子互聯網的基礎上互聯互通，成為社會發展的基礎設施。</span></p><p><span style="color:#000000">此外，段潤堯還公佈了百度在量子芯片、軟硬一體化解決方案等核心領域的最新進展。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Sep 2023 03:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259545</guid>
            <link>https://www.oschina.net/news/259545</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[聆心智能發佈定製角色對話交互模型 CharacterGLM]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">聆心智能團隊<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FoD4nJjAlWxp8wM_Lm0GEsQ" target="_blank">開發</a>了用於定製角色進行對話交互的 CharacterGLM，以 ChatGLM 模型為底座，具有 6B、12B、66B 的參數量。聆心智能將對社會開放 12B 和 66B 模型的 API 訪問，並將 CharacterGLM-6B 模型進行開源。</span></p><p><span style="color:#000000">該團隊採用人工交互的方式評測 CharacterGLM 與業界最強的競爭對手（以下簡稱 JP）的性能。定製了數十個角色，類型分佈於名人類、生活類、遊戲影音類和虛擬戀愛類；要求標註者與每個角色至少交互 20 輪，每輪對話由兩個模型生成回覆。標註者選擇勝出的回覆繼續展開對話，若回覆偏好相同則隨機選擇。</span></p><p><span style="color:#000000">按角色類別統計兩個模型的 win/tie/lose 比率。結果如表 1 所示，CharacterGLM 在大多數類別上的表現均優於 JP。</span></p><p><img height="228" src="https://oscimg.oschina.net/oscnet/up-629a6df96c49d3e6cd16ed068a107536ee4.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">為了衡量 CharacterGLM 在不同話題下的表現，其進一步將對話話題限定在常見的閒聊、訪談和戀愛場景下進行交互測試，評測方式與上面相同，結果如表 2 所示，CharacterGLM 在閒聊和戀愛場景下與 JP 持平，但在訪談場景下顯著優於 JP。</span></p><p><img height="223" src="https://oscimg.oschina.net/oscnet/up-bc7f2d8f46bbcaa6f9dd6419e087ba01cb0.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">以及進一步分析了 CharacterGLM 在不同輪次範圍內的角色表現，結果如表 3 所示，CharacterGLM 在對話的前期略次於 JP，但隨着對話的推進，CharacterGLM 的優勢則逐漸凸顯。</span></p><p><span style="color:#000000">下面展示了從交互測評數據中採樣的名人類、生活類、遊戲影音類和虛擬戀愛類角色的交互樣例。</span></p><p><strong><span style="color:#000000">名人類角色</span></strong></p><p><strong><span style="color:#000000"><img alt="" height="913" src="https://oscimg.oschina.net/oscnet/up-abb418380711fbc4c5f6af9c0640577898b.png" width="300" referrerpolicy="no-referrer"></span></strong></p><p><strong><span style="color:#000000">生活類角色</span></strong></p><p><strong><span style="color:#000000"><img alt="" height="421" src="https://oscimg.oschina.net/oscnet/up-2e4fe595a847879295de61567d340332e2f.png" width="300" referrerpolicy="no-referrer"></span></strong></p><p><strong><span style="color:#000000">遊戲影音類角色</span></strong></p><p><strong><span style="color:#000000"><img alt="" height="458" src="https://oscimg.oschina.net/oscnet/up-9e3176f285b0fbfada2bd51e4b8cdc7062b.png" width="300" referrerpolicy="no-referrer"></span></strong></p><p><strong><span style="color:#000000">虛擬戀愛類角色</span></strong></p><p><strong><span style="color:#000000"><img alt="" height="687" src="https://oscimg.oschina.net/oscnet/up-9ad6daae66ce227eb3a043cb4408ccf839a.png" width="300" referrerpolicy="no-referrer"></span></strong></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Sep 2023 03:09:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259539</guid>
            <link>https://www.oschina.net/news/259539</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
