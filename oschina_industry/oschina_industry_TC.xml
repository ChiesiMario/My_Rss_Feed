<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-綜合資訊]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="https://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-綜合資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 04 Nov 2023 20:59:05 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[Hyprland —— 動態平鋪式 Wayland 合成器]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Hyprland 是一款基於 wlroots 的動態平鋪式 Wayland 合成器。</p><p>它提供最新的 Wayland 功能，可高度自定義，擁有所有美觀的外觀、最強大的插件、簡易的 IPC，以及比其他基於 wlr 的合成器更多的 QoL 功能等等...</p><p><strong>特性：</strong></p><ul><li>所有令人賞心悅目的內容：漸變邊框、模糊、動畫、陰影等等</li><li>大量定製</li><li>比其他基於 wlr 的合成器提供更多的生活質量內容</li><li>自定義貝塞爾曲線以獲得最佳動畫</li><li>強大的插件支持</li><li>撕裂支持以獲得更好的遊戲性能</li><li>易於擴展和可讀的代碼庫</li><li>快速、積極的開發</li><li>不害怕提供尖端功能</li><li>保存後立即重新加載配置</li><li>完全動態的工作空間</li><li>兩個內置佈局以及更多可用作插件的佈局</li><li>緊隨<code>wlroots-git</code></li><li>全局按鍵綁定傳遞給你選擇的應用程序</li><li>平鋪/偽平鋪/浮動/全屏窗口</li><li>特殊工作區（便籤本）</li><li>窗口組（選項卡模式）</li><li>強大的窗口/監視器/圖層規則</li><li>基於套接字的 IPC</li><li>原生 IME 和輸入面板支持</li></ul><p>&nbsp;<img height="282" src="https://static.oschina.net/uploads/space/2023/1030/172906_LCd1_4252687.png" width="500" referrerpolicy="no-referrer"></p><p><img height="281" src="https://static.oschina.net/uploads/space/2023/1030/172925_yXI2_4252687.png" width="500" referrerpolicy="no-referrer"></p><p><img height="313" src="https://static.oschina.net/uploads/space/2023/1030/172946_yrzI_4252687.png" width="500" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Fri, 03 Nov 2023 02:53:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/hyprland</guid>
            <link>https://www.oschina.net/p/hyprland</link>
        </item>
        <item>
            <title>
                <![CDATA[查詢平均提速 700%，奇安信基於 Apache Doris 升級日誌安全分析系統]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><strong>本文導讀</strong>：數智時代的到來使網絡安全成為了不可忽視的重要領域。奇安信作為一家領先的網絡安全解決方案領軍者，致力於為企業提供先進全面的網絡安全保護，其日誌分析系統在網絡安全中發揮着關鍵作用，通過對運行日誌數據的深入分析，能夠對漏洞和異常行為生成關鍵見解，幫助企業建立有效的防禦策略。本文將深入探討奇安信在網絡安全與日誌分析解決方案的關鍵優勢，瞭解基於 Apache Doris 構建的全新一體化日誌存儲分析平台如何實時監測和分析日誌事件，加強對可疑活動的追蹤與應對，提升系統安全性與快速響應能力。（作者｜奇安信，服務端技術專家，舒鵬）</p><p>奇安信是中國企業級網絡安全市場的領軍者，專注於為政府和企業用戶提供新一代網絡安全產品和服務。目前核心產品天擎終端安全系統在國內已有 4000 萬政企用戶部署、全國部署服務器超過 100 萬台、服務超 40 萬大型機構。作為網絡安全國家隊，奇安信立志為國家構建安全的網絡空間，在終端安全、雲安全、威脅情報、態勢感知等領域的技術研發持續領先。</p><p>隨着現代企業數字化轉型的不斷深化，大數據、物聯網、5G 等創新技術的廣泛應用加速了企業的數字化轉型步伐，這使得原先的網絡邊界被打破，多源多樣的終端設備成為了新的安全邊界。</p><p>網絡安全系統的防禦性能與日誌分析密不可分，當網絡設備、操作系統以及應用程序在運行時，會產生大量的運行日誌，其中蘊涵了豐富的數據價值。最大化地利用運行日誌數據能夠有效檢測內部系統的安全風險、還原攻擊路徑、回溯攻擊入口等，可以進一步提升系統安全性、保障企業網絡安全，因此日誌分析系統在其中發揮着不可或缺的作用。</p><p>本文將介紹奇安信在網絡安全場景中，基於 Apache Doris 進行架構升級迭代並建設全新一體化日誌存儲分析平台的實踐經驗。</p><h1>早期架構痛點與需求</h1><p>安全日誌平台的架構如下圖所示，原始的設備、系統日誌首先經過業務處理環節，包括歸一化和擴充維度等操作。這些處理步驟旨在將來自不同設備和系統日誌轉化為半結構化 JSON 格式的安全日誌，並將其寫入 Kafka 消息隊列中。</p><p>最新的日誌會被寫入實時數倉，安全分析師可以通過分析平台對實時數倉中的最新數據進行交互式查詢，從而進行攻擊研判和追蹤溯源等安全分析工作。另外，離線數倉用於保存歷史數據，以支持長週期數據挖掘的離線分析。</p><p><img src="https://cdn.selectdb.com/static/Wechat_IMG_494_f5c46bcc5d.jpg" alt="WechatIMG494.jpg" referrerpolicy="no-referrer"></p><p>在以上日誌數據平台中，日誌數據的寫入速度與查詢分析效率對上層業務人員進行實時安全事件監控和分析至關重要，這也是當前我們所面對的最主要痛點。</p><p>一方面，每天所生產的安全日誌數據達到千億級，寫入壓力很大。最初我們選擇使用某 Apache Doris 的 Fork 版本來存儲日誌數據，但在實際應用中，隨着每天新增日誌量的不斷增長，入庫速度逐漸降低、集羣寫入壓力過大、高峯期數據積壓嚴重，對集羣穩定性造成很大影響，並且數據壓力較高時、查詢效率也達不到有效果的保證。隨後我們對集羣進行多次擴容，從 3 節點逐步擴容到 13 節點，儘管機器成本已經大幅超過預期、但寫入效率並沒有發生本質的改善。</p><p>另一方面，業務人員在進行安全日誌分析時，經常需要對文本字段（如 URL，payload 等）進行關鍵字匹配。在原系統中只能通過 SQL LIKE 進行全量掃描和暴力匹配，整體查詢性能不佳，千億級數量的數據表查詢耗時接近分鐘級甚至達到數百秒，即便按照時間區間過濾大量數據後、查詢耗時仍在數秒到數十秒。一旦遇到併發查詢性能還會進一步惡化，很難滿足日常安全分析的需求。</p><p>除寫入和查詢效率以外，運維監控也是我們的痛點之一，該廠商提供的可視化運維繫統需要商業 License 授權，對於開源社區用戶不友好，集羣維護處於原始手動狀態。</p><h1>架構選型與升級的思考</h1><p>為瞭解決過去版本的痛點、滿足更高效實時的日誌分析訴求，我們亟需對早期系統升級改造。同時面向安全日誌分析場景，我們也對新日誌分析平台的架構提出了更高的要求：</p><ul><li><p><strong>寫入性能</strong>：系統一方面需要支持海量病毒查殺事件等數據實時寫入與存儲，以滿足分析時效性的要求，另一方面需要基於日誌數據 Schema Free 特點支持豐富數據類型的寫入與變更。</p></li><li><p><strong>查詢性能</strong>：由於日誌查詢分析會涉及對文本類型、JSON 數據進行全文檢索、日期或普通數值的範圍查詢，系統需要對字符串提供模糊查詢的能力，還需要支持能夠靈活創建且類型豐富的索引，以加速篩選過濾海量數據，提升查詢效率。</p></li><li><p><strong>存儲成本</strong>：設備每天產生大量的日誌數據，為了挖掘這些有價值的日誌信息，業務人員還需要從數據中進行篩選和分析，並對異常日誌回溯追蹤，這使得日誌存儲的規模很大、存儲週期相對較長，因此高性價比的存儲成本也是系統構建的目標之一。</p></li><li><p><strong>運維成本</strong>：系統自身的運維簡易程度以及是否具備合適的管控工具都能幫助我們進一步提效。</p></li></ul><p>在持續關注業界 OLAP 數據庫的過程中，我們發現 Apache Doris 最近一年的發展非常迅猛，最新的 2.0 版本也把日誌存儲和檢索分析作為新的發力點，推出了倒排索引、NGram BloomFilter 索引等特性，對關鍵詞檢索、LIKE 文本匹配的性能有大幅提升，與我們文本檢索慢的痛點需求非常契合，因此開啓了新架構的升級之旅。</p><h1>架構升級之旅</h1><p>上文中提到，在整體架構選型過程中我們主要關注的地方包括寫入性能、查詢性能、數據存儲成本以及運維成本等方面。在架構升級過程中，我們選擇了 Apache Doris 當時最新發布的 2.0 版本，具體升級收益如下。</p><h3>01 寫入性能提升超 200%</h3><p>為了評估 Apache Doris 寫入的極限性能，我們初期使用與線上系統相同配置的 3 台服務器，從 Kafka 接入線上真實寫入流量，測試期間當 CPU 寫入效率跑滿至 100% 時寫入吞吐達到了 108 萬條/s、1.15 GB/s，寫入數據的可見性延遲保持在秒級。</p><p>而線上運行的原系統集羣規模達 13 台，在同樣的數據寫入情況下，CPU 利用率 30% 左右、寫入吞吐僅 30 萬條/s，並且存在高峯期 CPU Load 高、系統響應慢的問題。</p><p>根據測試結果，我們預估架構<strong>替換為 Apache Doris 後保持同樣 30% 的 CPU 佔用，只需要 3 台服務器即可滿足寫入需求，機器資源成本至少節約 70%</strong>。值得注意的是，在測試中對 Apache Doris 表中一半字段開啓了倒排索引，如果不開啓倒排索引的話，寫入性能在之前基礎上還能夠再提升 50% 左右。</p><h3>02 存儲成本降低近 40%</h3><p>在看到寫入性能的大幅提升後，Apache Doris 存儲空間佔用也給我們帶來了驚喜。<strong>在開啓倒排索引的前提下，存儲空間比原系統不具備倒排索引還要略低，壓縮比從 1 : 4.3 提高至 1 : 5.7。</strong></p><p>通過對比 Apache Doris 在磁盤上存儲的文件大小，同一份數據的索引文件 (.idx) 與數據文件 (.dat) 大小相差無幾。換言而之，增加索引後 Doris 數據膨脹率大約在 1 倍左右，與許多數據庫和檢索引擎 3-5 倍的膨脹率相比，Doris 的數據存儲空間佔用相對較低。經過研究發現，Apache Doris 採用了列式存儲和 ZSTD 壓縮算法來優化存儲空間佔用。Doris 將原始數據和倒排索引都以列的形式存儲，使同一列的數據被存儲在相鄰位置，從而實現了更高的壓縮率。</p><p>ZSTD 是一個優秀的新型壓縮算法，使用了智能優化算法，相較於常見的 GZIP 算法， ZSTD 具有更高的壓縮率和更快的解壓速度，尤其在處理日誌場景時表現非常出色。</p><h3>03 查詢性能平均提升 690%</h3><p>對於業務最關注的查詢性能，我們從線上查詢日誌進行去重後分析出 79 條 SQL，在同一天總數據（1000 億條）、同樣規模的集羣（10 BE 節點）上對比測試 Apache Doris 與原系統的查詢耗時。</p><p><strong>我們發現，與原系統相比，所有的查詢語句均有明顯提升，整體查詢性能提升近 7 倍，有 26 條 SQL 查詢語句性能提升 10 倍以上</strong>，其中 8 條 SQL 查詢提升 10-20 倍、14 條 SQL 查詢提升 20-50 倍、還有 4 條 SQL 查詢提升 50 倍以上。最大差異的一條 SQL 查詢語句為 Q43，在原系統中執行時間接近一分鐘，在 Apache Doris 中僅需不到 1 秒，其性能差異高達到 88 倍。</p><p><img src="https://cdn.selectdb.com/static/Wechat_IMG_495_6ac4f35ed5.jpg" alt="WechatIMG495.jpg" referrerpolicy="no-referrer"></p><p>針對性能提升幅度高的查詢，我們進行了對比分析並發現了其中幾個共同點：</p><p><strong>倒排索引對關鍵詞查找的加速：Q23、Q24、Q30、Q31、Q42、Q43、Q50 等</strong></p><pre><code>1 -- 例如 q43 提升 88.2 倍
2 
3 SELECT count() from table2 
4 WHERE ( event\_time &gt;= 1693065600000 and event\_time &lt; 1693152000000) 
5 &nbsp; AND (rule\_hit\_big MATCH 'xxxx');
</code></pre><p>這種基於倒排索引進行關鍵詞檢索的技術，相較於基本的暴力掃描後進行文本匹配具有顯著的優勢，一方面極大地減少了需要讀取的數據量；另一方面，在查詢過程中無需進行文本匹配操作，因此查詢效率往往提升一個數量級甚至更高。</p><p><img src="https://cdn.selectdb.com/static/Wechat_IMG_496_12be3ae384.jpg" alt="WechatIMG496.jpg" referrerpolicy="no-referrer"></p><p><strong>NGram BloomFilter 索引對 LIKE 的加速：Q75、Q76、Q77、Q78 等</strong></p><pre><code>1 -- 例如 q75 提升 44.4 倍
2 
3 SELECT * FROM table1
4 WHERE  ent_id = 'xxxxx' 
5 &nbsp;  AND event_date = '2023-08-27' 
6 &nbsp;  AND file_level = 70 
7 &nbsp;  AND rule\_group\_id LIKE 'adid:%' 
8 ORDER BY event_time LIMIT 100；
</code></pre><p>對於要查找的非一個完整關鍵詞的場景，LIKE 仍然是有用的查詢方式，Apache Doris 的 NGram BloomFilter 索引能對常規的 LIKE 進行加速。</p><p>NGram BloomFilter 索引與普通 BloomFilter 索引不同，它不是將整個文本放入 BloomFilter ，而是將文本分成連續的子串，每個子串長度為 n ，並將他們放入 NGram BloomFilter 中。對於 <code>cola LIKE '%pattern%'</code> 的查詢，將<code>'pattern'</code>按照同樣的方式分成長度為 n 的子串，判斷每個子串在 BloomFilter 中是否存在，如果有一個子串不存在，則説明 BloomFilter 對應的數據塊中沒有跟<code>'pattern'</code>匹配的數據塊，因此通過跳過數據塊掃描的步驟，達到加速查詢的效果。</p><p><strong>滿足條件的最新 TopN 條日誌明細查詢優化：Q19-Q29 等</strong></p><pre><code>1 -- 例如 q22，提升 50.3 倍
2 
3 SELECT * FROM table1
4 where event\_date = '2023-08-27' and file\_level = 70 
5 &nbsp; and ent\_id = 'nnnnnnn' and file\_name = 'xxx.exe'
6 order by event_time limit 100;
</code></pre><p>這種<code>SELECT * FROM t WHERE xxx ORDER BY xx LIMIT n</code> 的查詢，在查找滿足某種條件的最新 n 條日誌時使用頻率非常高，Apache Doris 針對這種 SQL 查詢模式進行了專門的優化，根據查詢的中間狀態確定排序字段的動態範圍，並利用自動動態謂詞下推的方式，避免讀全部數據進行排序取 TopN，從而減少需要讀取的數據量（有時甚至可以減少一個數量級），進而提升了查詢效率。</p><h3><strong>04 可視化運維管控和可視化查詢 WebUI，最大化減少運維和探索分析成本</strong></h3><p>為了提高日常集羣維護的效率，我們使用了飛輪科技免費開放的可視化集羣管理工具 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcn.selectdb.com%2Fblog%2F102" target="_blank">Cluster Manager for Apache Doris</a> （以下簡稱 Doris Manager ）。Doris Manager 提供的功能可以滿足日常運維中集羣監控、巡檢、修改配置、擴縮容、升級等操作，降低登陸機器手動操作的麻煩和誤操作風險。</p><p><img src="https://cdn.selectdb.com/static/Wechat_IMG_497_a752c765ea.jpg" alt="WechatIMG497.jpg" referrerpolicy="no-referrer"></p><p>除了管控 Apache Doris 集羣之後，Doris Manager 還集成了類似 Kibana 的可視化日誌探索分析 WebUI，對於習慣 ELK 日誌分析的用戶非常友好，支持關鍵詞檢索、趨勢圖展示、趨勢圖拖拽日期範圍、明細日誌平鋪和摺疊展示、字段值過濾等交互方便的探索式分析，跟日誌場景探索下鑽的分析需求很契合。</p><p><img src="https://cdn.selectdb.com/static/Wechat_IMG_498_2e65f945f0.jpg" alt="WechatIMG498.jpg" referrerpolicy="no-referrer"></p><h1><strong>總結與規劃</strong></h1><p>在跟隨 Apache Doris 2.0-alpha，2.0-beta，2.0 正式版本發佈的節奏，我們根據業務場景進行了詳細的評測，也為社區反饋了不少優化建議，得到社區的積極響應和解決。系統經歷試運行一個月之後，我們將 2.0.1 版本正式用於生產環境，替換了原系統集羣，完成架構升級改造，實現了寫入性能、查詢性能、存儲成本、運維成本等多方面收益：</p><ul><li><p><strong>寫入性能提升 3 倍以上</strong>：目前，奇安信的日誌分析平台每日平均有數千億的新增安全日誌數據，通過 Doris 的 Routine Load 能夠將數據實時穩定寫入庫，保障數據低延遲高吞吐寫入。</p></li><li><p><strong>查詢性能平均提升 7 倍</strong>：查詢響應時間大幅減少，與之前的查詢效率相比達到平均 7 倍提升，其中業務特別關注的全文檢索速度達到 20 倍以上的提升，助力日誌分析與網絡安全運營效率。</p></li><li><p><strong>高效便捷的可視化管理</strong>：Cluster Manager for Apache Doris 工具提供了可視化集羣監控告警平台，滿足日常集羣監控等一系列操作，同時 WebUI 多種功能為分析人員提供了操作簡單、使用便捷的交互式分析。總而言之，Doris 的易用性、靈活性大幅降低了開發、運維、分析人員的學習與使用成本。</p></li></ul><p>後續我們還將在日誌分析場景下探索更多 Apache Doris 的能力。我們將擴大 JSON 數據類型的相關應用，加強系統對於半結構化數據深度分析的能力。同時，我們也<strong>非常期待 Apache Doris 2.1 版本中新增的 Variant 可變數據類型，支持存儲任意結構的 JSON 數據，支持字段個數與類型的變化，讓業務人員靈活定義特殊字符，以更好地實現半結構數據 Schema Free 的分析需求</strong>。</p><p>非常感謝 SelectDB 團隊一直以來對我們的技術支持，助力奇安信走向「體系化防禦、數字化運營」的網絡日誌安全管理，幫助客戶準確識別、保護和監管網絡設備與各類系統，確保業務人員在任何時候都能夠安全、可信、穩定地訪問數據與業務。</p><p>最後，我們也將持續參與到 Apache Doris 社區建設中，將相關成果貢獻回饋社區，希望 Apache Doris 飛速發展，越來越好！</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 02 Nov 2023 08:23:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5735652/blog/10140250</guid>
            <link>https://my.oschina.net/u/5735652/blog/10140250</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[因使用過時 jQuery 版本，7.5 億個網站存在隱私和安全風險]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">OpenJS 基金會<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjsf.org%2Fannouncement%2F2023%2F11%2F01%2Fopenjs-foundation-warns-consumer-privacy-and-security-at-risk-in-three-quarters-of-a-billion-websites%2F" target="_blank">公佈</a>了一項基於 IDC 調查的最終用戶審計結果顯示，十億個網站中有四分之三的網站正在使用過時的軟件，並且其中大多數網站都會收集個人和財務信息。超過三分之一的受訪者證實，在過去 24 個月中曾經歷過安全事件。</span></p><p><span style="color:#000000">OpenJS 基金會分析了本次最終用戶審計的 IDC 調查結果和其他數據點，估計全球 19 億個網站中有近 90% 使用開源軟件 jQuery，其中 7.5 億個站點需要升級。鑑於問題的嚴重性，OpenJS 基金會建議在 Web 安全性方面進行行為改變。</span></p><p><span style="color:#000000">「jQuery 使網頁開發變得簡單易用，但也導致數億個網站仍然使用舊的、不受支持的版本。即使 jQuery 團隊發佈安全修復，這些網站通常也不會進行更新，從而導致容易受到攻擊。」</span></p><p><span style="color:#000000">主要發現包括：</span></p><ul><li><span style="color:#000000">89％的隨機調查受訪者報告稱，他們知道自己的互聯網面向的網站上使用了 jQuery。</span></li><li><span style="color:#000000">其中 80％ 的組織會捕獲個人身份信息 (PII) 等重要信息，包括付款信息 (52%)、位置 (64%)、聯繫信息 (80%)。</span></li><li><span style="color:#000000">85％的受訪者認為，網站是必不可少或極其重要的。</span></li><li><span style="color:#000000">安全事件造成的業務損失嚴重，28％的受訪者表示有客戶流失，29％的受訪者表示造成了收入損失。此外還有 39% 的受訪者報告了違規行為，45% 的受訪者報告了品牌受損。</span></li><li><span style="color:#000000">48% 的受訪者表示，提升安全性是升級的首要動機。</span></li></ul><p><span style="color:#000000">IDC 軟件開發和開源 IDC 集團副總裁 Al Gillen 稱：「這項研究給我們帶來的啓示很簡單：jQuery 用戶可以使用一項強大的、由社區支持的技術，他們無需支付訂閲費用即可獲得或使用這項技術，而且這個項目還在不斷得到投資和改進。用戶已經從這項技術中享受到了可觀的收益，但如果你還沒有使用最新版本，那麼為了你的業務，你有義務升級到一個受支持版本，以實現收益最大化和潛在風險最小化。」</span></p><p><span style="color:#000000">OpenJS 基金會執行董事 Robin Bender Ginn 則表示，「當十億個網站中有四分之三僅僅因為一個開源項目而需要升級時，問題就大了。這讓我們相信，公司正在使用更過時和不受支持的技術，有可能將消費者置於風險之中。要解決如此大規模的問題，我們需要開始考慮定期評估網站技術，就像人們每年都去醫生那裏做體檢一樣。」</span></p><p><span style="color:#000000">為此，OpenJS 基金會正在開發一款免費的 Healthy Web 檢查工具，以廣泛提供給世界各地的企業和組織。該檢查工具只需耗時 5 秒，但目前僅可用於檢查 jQuery 的版本，OpenJS 基金會計劃接下來將其擴展到更多網絡健康相關的開源 JavaScript 項目。</span></p><p><span style="color:#000000">jQuery 核心團隊成員兼高級軟件工程師 Michał Gołębiowski-Owczarek 也呼籲稱，改善網站健康狀況的第一步是確定該的技術堆棧是否需要升級。在團隊不斷地改進 jQuery 的安全性和性能的同時，也建議大家使用 Healthy Web checkup 工具或自己的評估工具來檢查網站上使用的軟件版本。</span></p><p><span style="color:#000000">OpenJS Healthy Web 檢查工具目前處於 beta 階段，僅限技術評估人員和 OpenJS 成員使用，計劃於 2024 年初全面推出。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 02 Nov 2023 07:52:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264791/openjs-foundation--websites-risk-jquery</guid>
            <link>https://www.oschina.net/news/264791/openjs-foundation--websites-risk-jquery</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[【SIG 月報】10 月 openKylin 社區 SIG 組最新進展分享]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">為推動社區繁榮發展，打造開源操作系統創新生態，openKylin 社區圍繞創新硬件、人機交互、智能支撐、終端安全、互聯協同、雲端融合等多個技術領域，以技術小組的形式開展深入研究和技術創新。接下來，讓我們一起盤點 10 月份 openKylin 社區 SIG 組的最新進展：</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#4f9eff">10 月社區新增 SIG</span></span></strong></span></p><p>10 月社區新增 4 個 SIG 組，目前已累計成立 90 個 SIG 組，新增 SIG 組信息如下：</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><strong><span style="color:#ff9b0e"><span style="background-color:#f5faff">01</span></span><span style="color:#1c9cee"><span style="background-color:#f5faff">H2CHAIN SIG</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000"><span style="background-color:#f5faff">H2CHAIN 由華夏好瑞（天津）科技有限公司發起成立。H2CHAIN（海河信創鏈）致力於搭建大規模異構區塊鏈互通互聯的高性能平台，豐富 openKylin 區塊鏈應用場景。</span></span></span></p><ul><li><span><span style="color:#000000">SIG 主頁：</span></span></li><li><span><span style="color:#0052ff">https://gitee.com/openkylin/community/tree/master/sig/H2CHAIN</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><strong><span style="color:#ff9b0e"><span style="background-color:#f5faff">02</span></span><span style="color:#1c9cee"><span style="background-color:#f5faff">Cinnamon SIG</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000"><span style="background-color:#f5faff">Cinnamon 是一個易上手的，高度可定製的桌面環境，深受 Linux 愛好者喜愛。Cinnamon SIG 組由社區愛好者發起成立，負責移植 Cinnamon 桌面環境，讓其在 openKylin 擁有完美的體驗。</span></span></span></p><ul><li><span><span style="color:#000000">SIG 主頁：</span></span></li><li><span><span style="color:#0052ff">https://gitee.com/openkylin/community/tree/master/sig/Cinnamon</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><strong><span style="color:#ff9b0e"><span style="background-color:#f5faff">03</span></span><span style="color:#1c9cee"><span style="background-color:#f5faff">LXQt SIG</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000"><span style="background-color:#f5faff">LXQt 是一個輕量級的桌面環境，使用 Qt 作為圖形界面庫，支持多種窗口管理器，如 Openbox、Xfwm4 或 KWin 等。LXQt SIG 組由社區愛好者發起成立，負責移植 LXQt 桌面環境，為 openKylin 提供一個快速、美觀、易用的桌面環境，同時保持低資源佔用和高可定製性。</span></span></span></p><ul><li><span><span style="color:#000000">SIG 主頁：</span></span></li><li><span><span style="color:#0052ff">https://gitee.com/openkylin/community/tree/master/sig/LXQt</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><strong><span style="color:#ff9b0e"><span style="background-color:#f5faff">04</span></span><span style="color:#1c9cee"><span style="background-color:#f5faff">MakerFrame SIG</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000"><span style="background-color:#f5faff">MakerFrame SIG 組由社區愛好者發起成立，負責為 openKylin 開發簡單高效的遊戲框架引擎，致力於讓專業人士和非專業人士都來開發跨平台的遊戲和應用，大力促進 openKylin 遊戲生態推廣。</span></span></span></p><ul><li><span><span style="color:#000000">SIG 主頁：</span></span></li><li><span><span style="color:#0052ff">https://gitee.com/openkylin/community/tree/master/sig/MakerFrame</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#4f9eff">10 月社區 SIG 活躍度彙總</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">10 月社區新增有效 PR 數 411 個、倉庫 Fork 數新增 550 個，SIG 組公開例會召開 10 次。截至目前，社區累計有效 PR 數 11517 個、倉庫 Fork 數 4452 個、SIG 組公開例會召開 102 次，其中：</p><ul><li><span><span style="color:#000000">10 月社區 SIG 組 PR 貢獻 top15 如下：</span></span></li></ul><div><p style="text-align:center"><img height="537" src="https://oscimg.oschina.net/oscnet/up-52c4cf042b90758cb944f6bb2cdd076db70.png" width="794" referrerpolicy="no-referrer"></p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">10 月社區 SIG 組活躍地圖分佈情況（顏色越深代表越活躍，參考維度：PR、issue、SIG 會議）如下：</span></span></p><div><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-0aa7f9b3b5d67f3ce0208dec81b09816e3a.png" referrerpolicy="no-referrer"></p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#4f9eff">10 月社區技術進展與成果</span></span></strong></span></p><h1>一、UKUI SIG</h1><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">UKUI（Ultimate Kylin User Interface）SIG 小組致力於桌面環境相關軟件包的規劃、維護和升級工作，滿足各種設備和用戶需求的桌面環境程序，主要包含程序啓動器（開始菜單）、用戶配置、文件管理、登錄鎖屏、桌面、網絡工具、快捷配置等，為用戶提供基本的圖形化操作平台。桌面核心組件開發工具以 Qt、C++為主，宗旨是始終如一地提升系統的操作體驗，提供集穩定性、美觀性、流暢性和便捷性為一體的桌面環境。10 月進展如下：</span></span></p><ul><li><span><span style="color:#000000">【任務欄 4.X】託盤區分類、非合併狀態圖標拖拽及動畫功能實現；</span></span></li><li><span><span style="color:#000000">【任務欄 4.X】全局配置加載邏輯優化；</span></span></li><li><span><span style="color:#000000">【USD】新增多媒體控制協議實現及接口；</span></span></li><li><span><span style="color:#000000">【小插件框架】新增對配置文件目錄的文件監聽功能；</span></span></li><li><span><span style="color:#000000">【元數據】新增 png 格式元數據解析，新增 ocr 解析異常處理；</span></span></li><li><span><span style="color:#000000">【quick-items】新增調整訪問系統調色板和字體的方式，添加適配 UKUI 風格的窗口；</span></span></li><li><span><span style="color:#000000">【託盤網絡】單網卡場景顯示策略優化 ；</span></span></li><li><span><span style="color:#000000">【主題框架】主題框架優化部分控件背景和樣式；</span></span></li><li><span><span style="color:#000000">【側邊欄】優化側邊欄快捷配置面板進出動；</span></span></li><li><span><span style="color:#000000">【搜索】新增命令行查詢索引狀態&amp;進度功能、託盤右鍵功能和 OCR 開關和內容索引開關詢問彈窗；</span></span></li><li><span><span style="color:#000000">修復系統監視器、控制面板電源搜索、側邊欄喚出和隱藏異常等相關問題；</span></span></li><li><span><span style="color:#000000">完成與 openEuler FT 團隊線下 meetup 技術分享會。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">歡迎各位感興趣的社區開發者加入我們，一起打造 openKylin 桌面系統穩定易用的桌面環境！</span></span></p><h1>二、RISC-V SIG</h1><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#333333">本</span>SIG 組主要負責 RISC-V 架構開源軟件包的維護，發佈 openKylin 的 RISC-V 版本，進行軟件包構建、系統構建等工作。10 月 RISC-V SIG 組進展如下：</span></p><ul><li><span><span style="color:#000000">解決鑑釋平板觸屏問題，製作平板的新鏡像；</span></span></li><li><span><span style="color:#000000">編譯荔枝派 1.2.1 版本 sdk，解決 GPU 適配問題，完成了鏡像內核 moudle，GPU 驅動，mesa 庫等移植工作，構建新版本荔枝派鏡像；</span></span></li><li><span><span style="color:#000000">構建 RISC-V 專屬 PPA，用於後續 RISC-V 定製包版本編譯及鏡像發行；</span></span></li><li><span><span style="color:#000000">解決算能新開發板的啓動問題，製作新鏡像；</span></span></li><li><span><span style="color:#000000">開始編寫根據 RISC-V 硬件類型修改鏡像中配置的包 kylin-riscv-hardware-config，後續可以通過裝包的方式實現各硬件鏡像的快速配置；</span></span></li><li><span><span style="color:#000000">成功集成 RISC-V 版本 nim 語言開發編譯環境到 RISC-V 專屬 PPA；</span></span></li><li><span><span style="color:#000000">調研從上游源代碼編譯包至鏡像製作的全流程，初步具備 RISC-V 版本鏡像獨立發行的能力；</span></span></li><li><span><span style="color:#000000">二進制翻譯針對 Wine 與 steam 添加對應的包裝函數，如 vulkan 插件集，OpenCL 及其內存操作相關函數。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">歡迎所有對 RISC-V 開發平台技術方向感興趣的愛好者加入到 RISC-V SIG！</span></span></p><h1>三、Release SIG</h1><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">Release SIG 主要負責協調各個 SIG 組，把控版本開發進度和風險，制定版本發佈計劃，完成版本發佈工作等。Release SIG 10 月主要進展如下：</span></span></p><ul><li><span><span style="color:#000000">推動 openKylin 2.0 基礎庫組件選型、新特性需求開發進展，新需求評審等；</span></span></li><li><span><span style="color:#000000">完成 openKylin 2.0 pre-alpha1 構建，處理版本構建問題；</span></span></li><li><span><span style="color:#000000">推動 openKylin 遺留缺陷 issue 修復，集成 1023 版本提測。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">歡迎所有對 openKylin 社區版本集成、版本管理、版本發行等工作感興趣的愛好者加入到 Release SIG！</span></span></p><h1>四、Packaging SIG</h1><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">Packaging SIG 負責維護 openKylin 社區的軟件包打包規範，維護公共軟件包，以及協調和決策社區版本發佈過程中的包依賴問題。10 月主要進展如下：</span></span></p><ul><li><span><span style="color:#000000">Sogou-ime-ng 閉源組件包上傳；</span></span></li><li><span><span style="color:#000000">openKylin 中科睿芯 rv64g 非壓縮指令集架構倉庫創建，chroot 製作調試；</span></span></li><li><span><span style="color:#000000">openKylin 2.0 AI 軟件包選型分析，編譯部署方式調研；</span></span></li><li><span><span style="color:#000000">測試評審任務發佈平台-生態軟件適配任務提交的構建成果；</span></span></li><li><span><span style="color:#000000">2.0 基礎庫軟件 systemd 依賴包選型構建：[nile] json-c(0.15-ok1), cryptsetup(2:2.4.3-ok1); 構建 2.0 基礎庫軟件 network-manager 的依賴包 netplan.io，並解決編譯問題；</span></span></li><li><span><span style="color:#000000">nvidia-driver-510 安裝問題分析解決；</span></span></li><li><span><span style="color:#000000">openkylin-2.0-pre-alpha1 預編譯版本報錯，缺少"dhcpcd-base、dracut-install"，新構建軟件包 dhcpcd，dracut。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">歡迎所有對 openKylin 社區軟件自主選型、編譯打包工作感興趣的社區愛好者加入我們！</span></span></p><h1>五、QA SIG</h1><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">QA SIG 組致力於提升 openKylin 社區版本質量，包括社區版本測試、質量保障等。10 月主要進展如下：</span></span></p><ul><li><span><span style="color:#000000">審核 1.0.1 發佈版本用戶反饋 issue 50+條；</span></span></li><li><span><span style="color:#000000">openKylin 2.0 版本測試：</span></span></li><li><span><span style="color:#000000">1）UKUI4.10 需求測試用例編寫：共 120 個需求需要進行用例編寫，已完成 14 個，整體進度：18.3%；</span></span></li><li><span><span style="color:#000000">2）輸出 2.0 版本測試計劃；</span></span></li><li><span><span style="color:#000000">3）openKylin-1.0.1-1023 周版本測試，截止目前回歸 bug25 個，通過 18 個，失敗 3 個，阻塞 4 個，整體進度 40%。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">歡迎所有對 openKylin 社區版本測試、質量管理感興趣的社區愛好者加入我們！</span></span></p><h1>六、SecurityGovernance SIG</h1><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">openKylin SecurityGovernance SIG 通過接收和響應 openKylin 社區的產品安全問題報告、提供社區安全指導，開展安全治理等活動提升社區產品的安全性。10 月主要進展如下：</span></span></p><ul><li><span><span style="color:#000000">Genmai 項目：完成 C/S 架構開發，實現根據服務器版本自動更新功能，解決傳輸數據耗費時長過程而導致失敗的問題；</span></span></li><li><span><span style="color:#000000">Genmai 項目：完善 PDF 報告格式優化功能；</span></span></li><li><span><span style="color:#000000">Genmai 項目：編制項目技術白皮書，發佈 TS 版的技術白皮書；</span></span></li><li><span><span style="color:#000000">Genmai 項目：新增安全基線檢測項 100+；</span></span></li><li><span><span style="color:#000000">Genmai 項目：優化 106 個 POC 檢測的輸出內容；</span></span></li><li><span><span style="color:#000000">Genmai 項目：新增集成 POC 測試用例 14 個；</span></span></li><li><span><span style="color:#000000">Genmai 項目：研發了 CVE-2023-4911、CVE-2023-38545、CVE-2022-2602 POC 三個；</span></span></li><li><span><span style="color:#000000">Genmai 項目：驗證使用了 docker 容器運行內核 POC 的破壞性，調研內核漏洞檢測的可行性；</span></span></li><li><span><span style="color:#000000">解決 C/S 架構數據返回接口異步故障的問題。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">歡迎所有對 openKylin 版本安全全漏洞挖掘/驗證、安全漏洞修復等安全方面工作感興趣的社區愛好者加入我們！</span></span></p><h1>七、OpenSDK SIG</h1><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">OpenSDK SIG 組負責開發者套件（base、system、applications）規劃、開發、維護等工作，致力於解決應用在多操作系統中的兼容性問題。10 月主要進展如下：</span></span></p><ul><li><span><span style="color:#000000">擴展了處理器、內存、網絡等詳細信息獲取接口；</span></span></li><li><span><span style="color:#000000">新增賬戶管理模塊，包含創建用戶、修改密碼、用戶名校驗等功能；</span></span></li><li><span><span style="color:#000000">新增 sdk release note；</span></span></li><li><span><span style="color:#000000">規範了 SDK 的動態庫存放路徑。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">歡迎所有對開發者套件感興趣的社區愛好者們加入 OpenSDK SIG 組！</span></span></p><h1>八、CompatWinApp SIG</h1><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">CompatWinApp SIG 組致力於將大量的 Windows 系統應用程序引入到 openKylin 系統。SIG 組將通過研究應用兼容技術和指令翻譯技術，研製完善的 Windows 應用兼容方案，讓更多的 Windows 應用能兼容運行於 openKylin 系統，不斷繁榮 openKylin 軟件生態。10 月主要進展如下：</span></span></p><ul><li><span><span style="color:#000000">修復 Wine 助手下載程序頁面無法點擊其他鏈接的問題，改為彈出提示框，提示用戶點擊其他鏈接可能出錯；</span></span></li><li><span><span style="color:#000000">修復當應用下載鏈接更新時無法下載的問題，改提示用戶下載新版本軟件還是舊版本軟件；</span></span></li><li><span><span style="color:#000000">修復 wine riched20 中導致微信輸入框光標異常，滾輪失效的問題；</span></span></li><li><span><span style="color:#000000">為 win-program 倉庫開發分支上 1000 多個應用配置文件增加下載詳情頁參數；</span></span></li><li><span><span style="color:#000000">Wine 助手在 openKylin 社區開源事項通過內部審核，代碼已上傳 wine-assistant 倉庫，累計有效代碼約 8000 行；</span></span></li><li><span><span style="color:#000000">開發 Wine 助手幫助文檔功能；</span></span></li><li><span><span style="color:#000000">openKylin Wine 助手發佈公測。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">歡迎所有對應用兼容技術和指令翻譯技術感興趣的愛好者加入到 CompatWinApp SIG！</span></span></p><h1>九、Infrastructure SIG</h1><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">Infrastructure SIG 負責 openKylin 社區的基礎平台系統功能的開發、維護。10 月主要進展如下：</span></span></p><ul><li><span><span style="color:#000000">openKylin 看板功能增強，增加倉庫大小、代碼總行數統計；</span></span></li><li><span><span style="color:#000000">openKylin 看板相關問題修復，貢獻者數據、PR 數據統計等；</span></span></li><li><span><span style="color:#000000">openKylin 看板修復當倉庫默認分支為 null 時新增倉庫數據到數據庫報錯問題；</span></span></li><li><span><span style="color:#000000">門禁檢查增加合規性檢查。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">歡迎所有對 openKylin 社區基礎設施平台開發維護感興趣的愛好者加入到 Infrastructure SIG！</span></span></p><h1>十、Security SIG</h1><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">Security SIG 負責研製操作系統安全防護技術和功能，提供並維護操作系統安全防禦機制。針對目前 openKylin 開源版本中的安全功能、安全組件等軟件包進行維護和 cve 修復；並結合目前 Linux 平台上的一些安全技術進行研究、開源安全軟件進行維護和研製、Linux 系統中的安全加固方案進行工具化設計和研製。10 月份 SIG 組進展如下：</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><span style="color:#000000">openKylin 2.0 需求研製：</span></span></p><ul><li><span><span style="color:#000000">【身份認證】國密支持、賬戶安全：</span></span></li><li><span><span style="color:#000000">1）openKylin 社區身份認證添加國密支持，本地編包功能驗證通過，待提交 gitee；</span></span></li><li><span><span style="color:#000000">2）libxcrypt 添加 sm3 支持，已提交代碼，已合入；</span></span></li><li><span><span style="color:#000000">3）pam 添加 sm3 支持，pam 修改正在調試中；</span></span></li><li><span><span style="color:#000000">【強訪】添加 RISC-V 系統調用審計支持：調試 audit 包 riscv64 架構編譯問題。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">歡迎所有對安全技術感興趣的社區愛好者加入 Security SIG 組！</span></span></p><h1>十一、GPU SIG</h1><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">openKylin GPU SIG 組致力於 GPU 驅動相關技術研究，包括 OpenGL、OpenCL、Vulkan、VDPAU 和 VAAPI 等，提供 GPU 相關軟件包的技術規劃、設計、開發、維護和升級服務，共同推動國產 GPU 技術發展。GPU SIG 組 10 月份進展如下：</span></span></p><ul><li><span><span style="color:#000000">完成景美 JM9100 顯卡驅動適配 openKylin 系統，完成 patch 提交、評審、合併等工作。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">歡迎所有對 CPU 驅動、國產 GPU 技術、顯示等相關領域感興趣的社區小夥伴加入 GPU SIG 組！</span></span></p><h1>十二、TrustedComputing SIG</h1><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><span style="color:#000000">可信計算興趣組（Trusted Computing SIG）主要目標是致力可信計算基礎軟件開源與優化，並提供可信計算相關的應用規範與接口，探索國內外可信計算技術的應用實踐。10 月份 SIG 組進展如下：</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><span style="color:#000000">openKylin 2.0 需求研製：</span></span></p><ul><li><span><span style="color:#000000">可信軟件棧：本地進行 tpm2-tss、tpm2-abrmd 的驗證打包。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><span style="color:#000000">歡迎所有對可信計算技術感興趣的社區愛好者和開發者加入 TrustedComputing SIG 組！</span></span></p><h1>十三、I18n SIG</h1><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">I18N SIG 組負責 openKylin 社區國際化和本地化相關工作，包括多語言開發框架、多語言平台開發和維護，以及社區、版本內文檔的翻譯管理相關工作。10 月主要進展如下：</span></span></p><ul><li><span><span style="color:#000000">翻譯官網新聞 7 篇。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">歡迎所有對操作系統、網站網頁、文檔等翻譯工作感興趣的社區愛好者們加入 I18n SIG 組！</span></span></p><h1>十四、InputMethod SIG</h1><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">本 SIG 組致力於組建輸入法開源社區，推進開源輸入法框架及開源輸入法在社區維護。10 月主要進展如下：</span></span></p><ul><li><span><span style="color:#000000">評審 OK 輸入法設計文檔，包括引擎設計文檔和 UI 設計文檔；</span></span></li><li><span><span style="color:#000000">討論輸入法通用插件 SDK，以減少輸入法廠商適配難度；</span></span></li><li><span><span style="color:#000000">解決優麒麟系統默認集成搜狗輸入法問題，提升使用優麒麟系統的用戶輸入體驗；</span></span></li><li><span><span style="color:#000000">向 fcitx 社區貢獻關於虛擬鍵盤 Callback 的 pr，支持第三方開發虛擬鍵盤；</span></span></li><li><span><span style="color:#000000">向 fcitx 社區貢獻關於 UKUI 環境判斷的 pr，支持 fcitx 診斷工具識別 UKUI 桌面環境。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">歡迎所有對 openKylin 社區 fcitx 輸入法框架、桌面虛擬鍵盤開發工作感興趣的社區愛好者加入我們！</span></span></p><h1>十五、Kernel SIG</h1><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">Kernel SIG 組致力於新硬件適配、新功能、新特性開發。不斷提升內核健壯性、穩定性，能更好的為 openKylin 系統和應用程序提供底層技術支持。10 月主要進展如下：</span></span></p><ul><li><span><span style="color:#000000">6.1 內核從 6.1.55 更新到 6.1.59。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">歡迎所有對內核感興趣的社區小夥伴加入 openKylin 社區 Kernel SIG 組！</span></span></p><h1>十六、Virtualization SIG</h1><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">Virtualization SIG 組致力於構建 openKylin 社區系統虛擬化技術，打造面向端、邊、雲的全場景虛擬化解決方案。10 月主要進展如下：</span></span></p><ul><li><span><span style="color:#000000">qemu:修復丟失的 cq eventidx 更新。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">歡迎所有對虛擬化組件或軟件包技術感興趣的社區小夥伴加入 openKylin 社區 Virtualization SIG 組！</span></span></p><h1>十七、Framework SIG</h1><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">本 SIG 組致力於為 openKylin 社區提供集程序編輯、編譯、調試、發佈、分析等全套開發功能的編程環境，涵蓋通用集成開發環境、編譯工具鏈、運行時環境、類庫等，10 月主要進展如下：</span></span></p><ul><li><span><span style="color:#000000">maven 插件，gradle 插件， clangd 插件，死鎖檢測插件，cmake 插件，java 插件等完善中英文 readme；</span></span></li><li><span><span style="color:#000000">離線插件管理器增加刷新插件列表，以及主動關閉插件預覽信息的按鈕；</span></span></li><li><span><span style="color:#000000">clangd 插件修復 shift-f1 跳轉到文檔功能提示安裝插件的問題；</span></span></li><li><span><span style="color:#000000">java 依賴管理添加遠程開發模式下，導出 jar 包成功，屏蔽打開 Jar 包按鈕；</span></span></li><li><span><span style="color:#000000">ide-gitlens 插件修復同時安裝上游 gitlens 插件和本插件的情況下報錯問題；</span></span></li><li><span><span style="color:#000000">項目管理插件：添加 deb 源碼打包功能；修復 war 打包，針對帶有括號的特殊工程打包失敗的錯誤；修復創建項目、deb、rpm 打包字段檢查邏輯和輸出問題；優化界面輸入框行高與對齊問題；修復創建項目默認路徑問題；完善 depends.json。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">歡迎對集成開發環境研發感興趣的社區開發者和愛好者加入 Framework SIG！</span></span></p><h1>十八、RTHypervisor SIG</h1><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">RTHypervisor SIG 小組致力於實時虛擬化技術的研究，目前主要包括 Jailhouse，提供工控、車載等領域實時控制的虛擬化解決方案，Jailhouse 項目 10 月主要進展如下：</span></span></p><ul><li><span><span style="color:#000000">新增 arm64 平台上基於 INTx 中斷的 pci 設備隔離，實現了 pci 設備在 jailhouse 下的透傳功能。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">歡迎所有對 openKylin 社區實時虛擬化技術感興趣的社區愛好者加入我們！</span></span></p><h1>十九、SystemService SIG</h1><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">系統服務小組致力於服務管理的技術研究，提供系統基礎組件的集合和服務管理，提供穩定的系統底層環境。10 月主要進展如下：</span></span></p><ul><li><span><span style="color:#000000">openKylin-2.0 systemd 編包工作，完成 upstream、pristine-tar、openkylin/nile 以及 packaging/openkylin/nile 分支代碼整理工作；</span></span></li><li><span><span style="color:#000000">修復編譯錯誤，完成 amd64、arm64、riscv64 架構的編譯。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><span style="color:#000000">歡迎社區對基礎能力搭建感興趣的開發者或愛好者加入我們！</span></span></p><h1>二十、FAQ SIG</h1><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">FAQ SIG 小組致力於收集各渠道社區開發者、愛好者等用戶反饋的問題，並建立相關標準化流程推動問題解答或解決同時，在這一過程中不斷為 openKylin 社區積累 FAQ 知識庫。10 月主要進展如下：</span></span></p><ul><li><span><span style="color:#000000">收集論壇、社羣高頻問題並提交 issue 指派給開發；</span></span></li><li><span><span style="color:#000000">調查部分用戶硬件驅動適配情況，提交 issue 指派解決網卡驅動適配問題；</span></span></li><li><span><span style="color:#000000">收集用戶針對桌面環境的建議並反饋給 UKUI SIG。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">歡迎社區熱心、善於解答問題的小夥伴加入 FAQ SIG 組！</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#4f9eff">關於 openKylin 社區 SIG</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span>openKylin（開放麒麟）社區是一個自由開放的社區，社區中所有的 SIG 小組都是開放的，任何人和組織都可以參與。你可以選擇加入已有 SIG，也可以選擇創建新的 SIG。截至目前，openKylin 社區已有<strong>90</strong>個 SIG 在運行，包括 Architecture、Infrastructure、Release、Kernel、Security、Compatibility 等。</span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#4f9eff">關於 openKylin 社區</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span>openKylin（開放麒麟）社區旨在以「共創」為核心，在開源、自願、平等、協作的基礎上，通過開源、開放的方式與企業構建合作伙伴生態體系，共同打造桌面操作系統頂級社區，推動 Linux 開源技術及其軟硬件生態繁榮發展。</span></p><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">社區理事成員單位包括麒麟軟件、普華基礎軟件、中科方德、麒麟信安、凝思軟件、一銘軟件、中興新支點、元心科技、中國電科 32 所、技德系統、北京麟卓、先進操作系統創新中心、飛騰、兆芯、龍芯中科、景美、京東科技、平頭哥、申泰信息、海光等 21 家產業同仁和行業機構。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 02 Nov 2023 06:34:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264771</guid>
            <link>https://www.oschina.net/news/264771</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[谷歌放棄 Web Environment Integrity API 提案]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">谷歌<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fandroid-developers.googleblog.com%2F2023%2F11%2Fincreasing-trust-for-embedded-media.html" target="_blank">宣佈</a>放棄其備受爭議的&nbsp;<span style="background-color:#ffffff">Web Environment Integrity API 提案，轉而開發&nbsp;</span><span style="background-color:#ffffff">Android WebView Media Integrity API。</span></span></p><p><span style="color:#000000">今年 5 月份，谷歌在開發者郵件列表中宣佈了其&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FRupertBenWiser%2FWeb-Environment-Integrity%2Fblob%2Fmain%2Fexplainer.md%23goals" target="_blank">Web Environment Integrity API</a><span style="color:#000000">，旨在作為一種限制在線欺詐和濫用的方法，同時不會引發跨站點跟蹤或瀏覽器指紋識別等隱私問題。但卻遭受了公眾的強烈反對，認為其更類似於一種網站的數字版權管理（DRM）功能，擔心谷歌藉此限制網絡自由。</span></p><p><span style="color:#000000">因此在收到眾多反饋後，谷歌表示其&nbsp;<span style="background-color:#ffffff">Chrome 團隊不再考慮&nbsp;Web Environment Integrity API；並將重點轉向範圍更窄的解決方案 Android WebView Media Integrity API，僅針對應用程序中嵌入的 WebView。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">根據介紹，這個新的 API 只擴展了具有 Google 移動服務 (GMS) 的 Android 設備上的現有功能，並且沒有計劃提供超出嵌入式媒體（例如流媒體視頻和音頻）或 Android WebView 之外的功能。</span></span></p><p><span style="color:#000000"><img height="248" src="https://oscimg.oschina.net/oscnet/up-79bb6dbdddd857c0a5caad36bd7b735e59e.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">Android WebView API 允許應用程序開發人員顯示嵌入媒體的網頁，並增強對 UI 的控制和高級配置選項，以允許在應用程序中無縫集成。這為移動應用開發帶來了很大的靈活性，但同時也為欺詐和濫用提供了途徑；因為它允許應用程序開發人員訪問網頁內容，攔截或修改用戶與網頁的交互。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">新的 Android WebView Media Integrity API 旨在使嵌入式媒體提供商能夠訪問定製的完整性響應，其中包含設備和應用程序的完整性判定，以便他們能夠確保他們的流媒體在安全、可信的環境中運行，無論嵌入式應用程序是從哪個應用程序商店安裝的。</span></span></p><p><span style="color:#000000">谷歌方面計劃<span style="background-color:#ffffff">在明年初，與選定的嵌入式媒體供應商一起試點實驗性 Android WebView Media Integrity API。</span></span></p><p><span style="color:#000000">詳情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fandroid-developers.googleblog.com%2F2023%2F11%2Fincreasing-trust-for-embedded-media.html" target="_blank">查看官方博客</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 02 Nov 2023 04:01:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264883/google-abandons-web-environment-integrity-api</guid>
            <link>https://www.oschina.net/news/264883/google-abandons-web-environment-integrity-api</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[工信部印發《人形機器人創新發展指導意見》]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">工信部印發《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.miit.gov.cn%2Fzwgk%2Fzcwj%2Fwjfb%2Ftz%2Fart%2F2023%2Fart_48fe01d562644aedb7ea3f4256df8190.html" target="_blank">人形機器人創新發展指導意見</a>》（以下簡稱《意見》），稱人形機器人集成人工智能、高端製造、新材料等先進技術，有望成為繼計算機、智能手機、新能源汽車後的顛覆性產品，深刻變革人類生產生活方式，重塑全球產業發展格局。</span></p><p><span style="color:#000000"><img alt="" height="235" src="https://oscimg.oschina.net/oscnet/up-e0dd1b4474430fc2cabd5233ea56d86217a.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">《意見》制定了「<strong>發展目標</strong>」，提出到 2025 年，人形機器人創新體系初步建立，「大腦、小腦、肢體」等一批關鍵技術取得突破，確保核心部組件安全有效供給。整機產品達到國際先進水平，並實現批量生產，在特種、製造、民生服務等場景得到示範應用，探索形成有效的治理機制和手段。培育 2-3 家有全球影響力的生態型企業和一批專精特新中小企業，打造 2-3 個產業發展集聚區，孕育開拓一批新業務、新模式、新業態。</span></p><p><span style="color:#000000">到 2027 年，人形機器人技術創新能力顯著提升，形成安全可靠的產業鏈供應鏈體系，構建具有國際競爭力的產業生態，綜合實力達到世界先進水平。產業加速實現規模化發展，應用場景更加豐富，相關產品深度融入實體經濟，成為重要的經濟增長新引擎。</span></p><p><span style="color:#000000">在人形機器人「<strong>關鍵技術</strong>」方面，實現「大腦、小腦、肢體」等一批關鍵技術的突破，構建完善人形機器人制造業技術創新體系。</span></p><p><span style="color:#000000"><img alt="" height="324" src="https://oscimg.oschina.net/oscnet/up-33f7aa057684c9a6e96f4feafd4136da564.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">《意見》還提出要培育重點產品，包括打造整機產品、夯實基礎部組件以及推動軟件創新。</span></p><p><span style="color:#000000"><img alt="" height="76" src="https://oscimg.oschina.net/oscnet/up-6c4003a2566dddbba0b4f95f929adc9dea1.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000"><img alt="" height="388" src="https://oscimg.oschina.net/oscnet/up-3b2fde75892e62a9b44b6a627ae12e14c24.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">在人形機器人的<strong>場景應用</strong>方面，特種環境和製造業是有望最先應用的領域。除此之外，《意見》還提出要加快民生及重點行業推廣，拓展人形機器人在醫療、家政等民生領域服務應用，重點提升人機交互可靠性和安全性，開發具有複雜區域引導、靈活操作、魯棒行走、多模態人機交互的解決方案，滿足生命健康、陪伴護理等高品質生活需求。推動人形機器人在農業、物流等重點行業應用落地，提升人機交互、靈巧抓取、分揀搬運、智能配送等作業能力。</span></p><p><span style="color:#000000">《意見》的最後部分，提出了營造產業生態、健全產業標準體系、加強安全治理能力等舉措。其中在「營造產業生態」部分，提到了要「<strong>完善創新載體和開源環境</strong>」。</span></p><p><span style="color:#000000">包括支持建設人形機器人重點實驗室、製造業創新中心，凝聚產學研各界優勢力量，提升關鍵共性技術供給能力。成立人形機器人百人會等行業組織，促進技術交流、供需對接、國際合作，深化創新鏈產業鏈資金鍊人才鏈融合。以及建設人形機器人開源社區，推進開源基金會能力建設，加強對重點企業開源項目的支持力度，匯聚全球開發者協同創新。</span></p><p><span style="color:#000000">完整內容可<strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.miit.gov.cn%2Fzwgk%2Fzcwj%2Fwjfb%2Ftz%2Fart%2F2023%2Fart_48fe01d562644aedb7ea3f4256df8190.html" target="_blank">查看官方公告</a></strong>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 02 Nov 2023 04:01:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264748</guid>
            <link>https://www.oschina.net/news/264748</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[貴陽銀行迴應證實棄用易鯨捷]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">知名打假人王海發文<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.toutiao.com%2Farticle%2F7297260518304219682%2F" target="_blank">表示</a>，</span><span style="background-color:#ffffff; color:#000000">11 月 2 日下午，貴陽銀行董事長張正海在 2023 年第三季度業績説明會上，迴應證實了媒體報道的「貴陽銀行棄用了貴州易鯨捷假國產數據庫」。</span></p><p><span style="background-color:#ffffff; color:#000000">在與投資者互動和交流中，面對投資人提出的「易鯨捷在貴陽銀行建設的數據庫進展到什麼程度？」的問題時。貴陽銀行董事長張正海回答稱，「貴陽銀行新核心業務系統目前已經完成的開發測試工作，系統進入上線準備階段，預計於 2023 年 11 月 3 日 17:00 至 11 月 6 日 8:00 進行系統的上線工作。」</span></p><p><img height="199" src="https://oscimg.oschina.net/oscnet/up-54c947b770fd5c4889d4ea002bca25562ad.png" width="700" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000">自 2020 年 10 月貴陽銀行耗資 4.26 億元以單一來源方式採購貴州易鯨捷國產數據庫應用項目以來，這是貴陽銀行第一次在與投資者互動和交流中，針對「易鯨捷數據建設到什麼程度」的回答中未提及「貴州易鯨捷」和「國產數據庫應用項目」，而是將 11 月 3 日「貴陽銀行系統升級」明確改為「上線新核心業務系統」，也拒絕回答關於「易鯨捷數據庫項目是否失敗？4.27 億是否存在利益輸送」的提問。</span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000">互動和交流的前一天，已有媒體公開報道稱，貴陽銀行系統升級，即為貴陽銀行醞釀三年的核心業務系統替代工程正式啓動，甲骨文將替代貴州易鯨捷承擔起改行核心交易業務中的數據庫任務，雙方合作事宜將另行商議，貴州易鯨捷通過貼牌假冒國產數據庫這一醜聞震驚業內，成為輿論熱點。</span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000">此前 10 月 23 日，貴陽銀行發佈在 11 月 3 日 17：00 至 11 月 6 日 8：00 進行系統升級暫停服務的公告，以系統升級降低輿論對棄用 4.26 億元天價國產數據的關注。</span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000"><img alt="" height="533" src="https://oscimg.oschina.net/oscnet/up-1fd874a630e4c716e5830945c23e9031a97.png" width="300" referrerpolicy="no-referrer"></span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 02 Nov 2023 03:02:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264876</guid>
            <link>https://www.oschina.net/news/264876</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 將 Web 動畫渲染為視頻的框架 WebVideoCreator]]>
            </title>
            <description>
                <![CDATA[<p><a href="https://gitee.com/vblog/web-video-creator/blob/master/README.md">簡體中文</a> | <a href="https://gitee.com/vblog/web-video-creator/blob/master/README.en-US.md">English</a></p><p align="center"><img width="650px" src="https://gitee.com/vblog/web-video-creator/raw/master/assets/web-video-creator.png" referrerpolicy="no-referrer"></p><h1><a id="user-content-簡介" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E7%AE%80%E4%BB%8B"></a>簡介</h1><p>WebVideoCreator（簡稱 WVC）是一個將 Web 動畫渲染為視頻的框架，基於 Node.js + Puppeteer + Chrome + FFmpeg 實現，它執行確定性的渲染，準確的以目標幀率捕獲任何可在 HTML5 播放動畫（CSS3 動畫/SVG 動畫/Lottie 動畫/GIF 動畫/APNG 動畫/WEBP 動畫）以及任何基於時間軸使用<a href="https://gitee.com/link?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FWindow%2FrequestAnimationFrame">RAF</a>驅動的動畫（<a href="https://gitee.com/link?target=https%3A%2F%2Fanimejs.com%2F">anime.js</a>是一個不錯的選擇 :D），當然您也可以調皮的使用 setInterval 或者 setTimeout 來控制動畫，支持嵌入 mp4 和透明 webm 視頻，還支持轉場合成、音頻合成與字體加載等功能。讓我們<a href="https://gitee.com/vblog/web-video-creator#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B">快速開始</a>。</p><p>WVC 為您酷炫的動畫頁面創造了一個虛擬時間環境（也許可以想象成是一個《楚門的世界》），它的主要職責是將一個 <a href="https://gitee.com/vblog/web-video-creator/blob/master/docs/renderer-env.md#%E4%B8%8D%E7%A1%AE%E5%AE%9A%E6%80%A7%E7%9A%84%E6%B8%B2%E6%9F%93%E7%8E%AF%E5%A2%83">不確定性渲染的環境</a> 轉化到 <a href="https://gitee.com/vblog/web-video-creator/blob/master/docs/renderer-env.md#%E7%A1%AE%E5%AE%9A%E6%80%A7%E7%9A%84%E6%B8%B2%E6%9F%93%E7%8E%AF%E5%A2%83">確定性渲染的環境</a>。</p><p>這一切的前提由 Chrome 提供的<a href="https://gitee.com/link?target=https%3A%2F%2Fgoo.gle%2Fchrome-headless-rendering">確定性渲染模式</a>和無頭實驗 API 支持：<a href="https://gitee.com/link?target=https%3A%2F%2Fchromedevtools.github.io%2Fdevtools-protocol%2Ftot%2FHeadlessExperimental%2F%23method-beginFrame">HeadlessExperimental.beginFrame</a></p><p>答疑交流 QQ 羣：752693580</p><br><h1><a id="user-content-特性" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E7%89%B9%E6%80%A7"></a>特性</h1><ul><li>基於 Node.js 開發，使用非常簡單，易於擴展和開發。</li><li>視頻處理速度非常快，最快 5 分鐘視頻可在 1 分鐘內完成渲染。</li><li>支持單幕和多幕視頻渲染合成，多幕視頻可應用<a href="https://gitee.com/vblog/web-video-creator#%E6%8F%92%E5%85%A5%E8%BD%AC%E5%9C%BA%E6%95%88%E6%9E%9C">轉場效果</a>。</li><li>支持分塊視頻合成，可以將分塊分發到多個設備上渲染回傳再合成為多幕視頻，大幅降低長視頻渲染耗時。</li><li>支持並行多個視頻渲染合成任務，充分利用系統資源。</li><li>API 支持進行<a href="https://gitee.com/vblog/web-video-creator#%E5%88%86%E5%B8%83%E5%BC%8F%E6%B8%B2%E6%9F%93%E6%96%B9%E6%A1%88">分佈式渲染</a>封裝，只需對 WVC 進行一些封裝即可將大量視頻分塊分發到多個設備渲染並最終取回合併輸出</li><li>支持使用 GPU 加速渲染和合成，可以顯著的降低視頻渲染耗時。</li><li>支持在 Windows 和 Linux 平台部署運行。</li></ul><br><h1><a id="user-content-視頻 demo" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E8%A7%86%E9%A2%91demo"></a>視頻 DEMO</h1><p>我們還缺少動畫設計師，不過還是從開放的平台中使用 WVC 捕獲渲染了一些優秀的動畫 Demo。</p><p>在這裏查看所有 DEMO：<strong><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FVinlic%2FWebVideoCreator%2Fwiki%2FRendering-Example">渲染示例頁面</a></strong></p><img src="https://gitee.com/vblog/web-video-creator/raw/master/assets/demo.gif" referrerpolicy="no-referrer"><br><h1><a id="user-content-支持的動畫庫" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%94%AF%E6%8C%81%E7%9A%84%E5%8A%A8%E7%94%BB%E5%BA%93"></a>支持的動畫庫</h1><p>理論上所有的 Web 動畫/圖形庫都能夠在 WVC 環境正常運行，以下僅列出我已驗證可用的庫：</p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fanimejs.com%2F">Anime.js</a> / <a href="https://gitee.com/link?target=https%3A%2F%2Fgreensock.com%2F">GSAP</a> / <a href="https://gitee.com/link?target=https%3A%2F%2Fd3js.org%2F">D3.js</a> / <a href="https://gitee.com/link?target=https%3A%2F%2Fthreejs.org%2F">Three.js</a> / <a href="https://gitee.com/link?target=https%3A%2F%2Fecharts.apache.org%2F">Echart</a> / <a href="https://gitee.com/link?target=http%3A%2F%2Fairbnb.io%2Flottie%2F%23%2Fweb">Lottie-Web</a> / <a href="https://gitee.com/link?target=https%3A%2F%2Fpixijs.download%2Frelease%2Fdocs%2Findex.html">PixiJS</a> / <a href="https://gitee.com/link?target=https%3A%2F%2Fanimate.style%2F">Animate.css</a> / <a href="https://gitee.com/link?target=https%3A%2F%2Fmojs.github.io%2F">Mo.js</a> / <a href="https://gitee.com/link?target=https%3A%2F%2Ftweenjs.github.io%2Ftween.js%2F">Tween.js</a></p><p>需要注意的是，如果您手動使用<a href="https://gitee.com/link?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FWindow%2FrequestAnimationFrame">RAF</a>驅動動畫，請確保從回調中接收 timestamp 參數設置動畫的進度到該時間點，否則可能出現幀率不同步。</p><br><h1><a id="user-content-快速開始" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B"></a>快速開始</h1><h2><a id="user-content-安裝" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E5%AE%89%E8%A3%85"></a>安裝</h2><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c"># 從 NPM 安裝 WebVideoCreator</span></span><span id="LC2" class="line">npm i web-video-creator</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>如遇到 ffmpeg-static 下載失敗，請先設置環境變量：<code>FFMPEG_BINARIES_URL=https://cdn.npmmirror.com/binaries/ffmpeg-static</code></p><h2><a id="user-content-創建本地服務器" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8"></a>創建本地服務器</h2><p>WVC 需要從 Web 頁面中捕獲動畫，您可以在本地創建一個臨時的 Web 服務器來提供靜態頁面服務，方便接下來的測試，使用 live-server 是最簡單的方式之一，如果您已經有靜態頁面可跳過這個步驟。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c"># 從 NPM 全局安裝 live-server</span></span><span id="LC2" class="line">npm i <span class="nt">-g</span> live-server</span><span id="LC3" class="line"><span class="c"># 啓用 Web 服務</span></span><span id="LC4" class="line">live-server</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>創建一個測試頁面到 Web 服務根路徑，以下 html 內容展示一個自動旋轉的三角形 svg 動畫。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="cp">&lt;!DOCTYPE html&gt;</span></span><span id="LC2" class="line"><span class="nt">&lt;html&gt;</span></span><span id="LC3" class="line"><span class="nt">&lt;head&gt;</span></span><span id="LC4" class="line"><span class="nt">&lt;meta</span><span class="na">charset=</span><span class="s">"utf-8"</span><span class="nt">/&gt;</span></span><span id="LC5" class="line"><span class="nt">&lt;title&gt;</span>測試頁面<span class="nt">&lt;/title&gt;</span></span><span id="LC6" class="line"><span class="nt">&lt;/head&gt;</span></span><span id="LC7" class="line"><span class="nt">&lt;body&gt;</span></span><span id="LC8" class="line"><span class="nt">&lt;svg</span><span class="na">width=</span><span class="s">"120"</span><span class="na">height=</span><span class="s">"120"</span><span class="na">viewBox=</span><span class="s">"0 0 120 120"</span><span class="na">
                xmlns=</span><span class="s">"http://www.w3.org/2000/svg"</span><span class="na">version=</span><span class="s">"1.1"</span></span><span id="LC9" class="line"><span class="na">
                xmlns:xlink=</span><span class="s">"http://www.w3.org/1999/xlink"</span><span class="nt">&gt;</span></span><span id="LC10" class="line"><span class="nt">&lt;polygon</span><span class="na">points=</span><span class="s">"60,30 90,90 30,90"</span><span class="nt">&gt;</span></span><span id="LC11" class="line"><span class="nt">&lt;animateTransform</span><span class="na">attributeName=</span><span class="s">"transform"</span><span class="na">attributeType=</span><span class="s">"XML"</span><span class="na">type=</span><span class="s">"rotate"</span><span class="na">from=</span><span class="s">"0 60 70"</span><span class="na">to=</span><span class="s">"360 60 70"</span></span><span id="LC12" class="line"><span class="na">dur=</span><span class="s">"10s"</span><span class="na">repeatCount=</span><span class="s">"indefinite"</span><span class="nt">/&gt;</span></span><span id="LC13" class="line"><span class="nt">&lt;/polygon&gt;</span></span><span id="LC14" class="line"><span class="nt">&lt;/svg&gt;</span></span><span id="LC15" class="line"><span class="nt">&lt;/body&gt;</span></span><span id="LC16" class="line"><span class="nt">&lt;/html&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-渲染單幕視頻" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%B8%B2%E6%9F%93%E5%8D%95%E5%B9%95%E8%A7%86%E9%A2%91"></a>渲染單幕視頻</h2><img src="https://gitee.com/vblog/web-video-creator/raw/master/assets/single-video.gif" referrerpolicy="no-referrer"><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">import</span><span class="nx">WebVideoCreator</span><span class="p">,</span><span class="p">{</span><span class="nx">VIDEO_ENCODER</span><span class="p">,</span><span class="nx">logger</span><span class="p">}</span><span class="k">from</span><span class="dl">"</span><span class="s2">web-video-creator</span><span class="dl">"</span><span class="p">;</span></span><span id="LC2" class="line"></span><span id="LC3" class="line"><span class="kd">const</span><span class="nx">wvc</span><span class="o">=</span><span class="k">new</span><span class="nx">WebVideoCreator</span><span class="p">();</span></span><span id="LC4" class="line"></span><span id="LC5" class="line"><span class="c1">// 配置 WVC</span></span><span id="LC6" class="line"><span class="nx">wvc</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span></span><span id="LC7" class="line"><span class="c1">// 根據您的硬件設備選擇適合的編碼器，這裏採用的是 Nvidia 顯卡的 h264_nvenc 編碼器</span></span><span id="LC8" class="line"><span class="c1">// 編碼器選擇可參考 docs/video-encoder.md</span></span><span id="LC9" class="line"><span class="na">mp4Encoder</span><span class="p">:</span><span class="nx">VIDEO_ENCODER</span><span class="p">.</span><span class="nx">NVIDIA</span><span class="p">.</span><span class="nx">H264</span></span><span id="LC10" class="line"><span class="p">});</span></span><span id="LC11" class="line"></span><span id="LC12" class="line"><span class="c1">// 創建單幕視頻</span></span><span id="LC13" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span></span><span id="LC14" class="line"><span class="c1">// 需要渲染的頁面地址</span></span><span id="LC15" class="line"><span class="na">url</span><span class="p">:</span><span class="dl">"</span><span class="s2">http://localhost:8080/test.html</span><span class="dl">"</span><span class="p">,</span></span><span id="LC16" class="line"><span class="c1">// 視頻寬度</span></span><span id="LC17" class="line"><span class="na">width</span><span class="p">:</span><span class="mi">1280</span><span class="p">,</span></span><span id="LC18" class="line"><span class="c1">// 視頻高度</span></span><span id="LC19" class="line"><span class="na">height</span><span class="p">:</span><span class="mi">720</span><span class="p">,</span></span><span id="LC20" class="line"><span class="c1">// 視頻幀率</span></span><span id="LC21" class="line"><span class="na">fps</span><span class="p">:</span><span class="mi">30</span><span class="p">,</span></span><span id="LC22" class="line"><span class="c1">// 視頻時長</span></span><span id="LC23" class="line"><span class="na">duration</span><span class="p">:</span><span class="mi">10000</span><span class="p">,</span></span><span id="LC24" class="line"><span class="c1">// 視頻輸出路徑</span></span><span id="LC25" class="line"><span class="na">outputPath</span><span class="p">:</span><span class="dl">"</span><span class="s2">./test.mp4</span><span class="dl">"</span><span class="p">,</span></span><span id="LC26" class="line"><span class="c1">// 是否在 cli 顯示進度條，默認是不顯示</span></span><span id="LC27" class="line"><span class="na">showProgress</span><span class="p">:</span><span class="kc">true</span></span><span id="LC28" class="line"><span class="p">});</span></span><span id="LC29" class="line"></span><span id="LC30" class="line"><span class="c1">// 監聽合成完成事件</span></span><span id="LC31" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="dl">"</span><span class="s2">completed</span><span class="dl">"</span><span class="p">,</span><span class="nx">result</span><span class="o">=&gt;</span><span class="p">{</span></span><span id="LC32" class="line"><span class="nx">logger</span><span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="s2">`Render Completed!!!\nvideo duration: </span><span class="p">${</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">duration</span><span class="o">/</span><span class="mi">1000</span><span class="p">)}</span><span class="s2">s\ntakes: </span><span class="p">${</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">takes</span><span class="o">/</span><span class="mi">1000</span><span class="p">)}</span><span class="s2">s\nRTF: </span><span class="p">${</span><span class="nx">result</span><span class="p">.</span><span class="nx">rtf</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span></span><span id="LC33" class="line"><span class="p">});</span></span><span id="LC34" class="line"></span><span id="LC35" class="line"><span class="c1">// 啓動合成</span></span><span id="LC36" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-渲染多幕視頻" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%B8%B2%E6%9F%93%E5%A4%9A%E5%B9%95%E8%A7%86%E9%A2%91"></a>渲染多幕視頻</h2><img src="https://gitee.com/vblog/web-video-creator/raw/master/assets/multi-video.gif" referrerpolicy="no-referrer"><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">import</span><span class="nx">WebVideoCreator</span><span class="p">,</span><span class="p">{</span><span class="nx">VIDEO_ENCODER</span><span class="p">,</span><span class="nx">TRANSITION</span><span class="p">,</span><span class="nx">logger</span><span class="p">}</span><span class="k">from</span><span class="dl">"</span><span class="s2">web-video-creator</span><span class="dl">"</span><span class="p">;</span></span><span id="LC2" class="line"></span><span id="LC3" class="line"><span class="kd">const</span><span class="nx">wvc</span><span class="o">=</span><span class="k">new</span><span class="nx">WebVideoCreator</span><span class="p">();</span></span><span id="LC4" class="line"></span><span id="LC5" class="line"><span class="c1">// 配置 WVC</span></span><span id="LC6" class="line"><span class="nx">wvc</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span></span><span id="LC7" class="line"><span class="c1">// 根據您的硬件設備選擇適合的編碼器，這裏採用的是 Nvidia 顯卡的 h264_nvenc 編碼器</span></span><span id="LC8" class="line"><span class="c1">// 編碼器選擇可參考 docs/video-encoder.md</span></span><span id="LC9" class="line"><span class="na">mp4Encoder</span><span class="p">:</span><span class="nx">VIDEO_ENCODER</span><span class="p">.</span><span class="nx">NVIDIA</span><span class="p">.</span><span class="nx">H264</span></span><span id="LC10" class="line"><span class="p">});</span></span><span id="LC11" class="line"></span><span id="LC12" class="line"><span class="c1">// 創建多幕視頻</span></span><span id="LC13" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createMultiVideo</span><span class="p">({</span></span><span id="LC14" class="line"><span class="c1">// 視頻寬度</span></span><span id="LC15" class="line"><span class="na">width</span><span class="p">:</span><span class="mi">1280</span><span class="p">,</span></span><span id="LC16" class="line"><span class="c1">// 視頻高度</span></span><span id="LC17" class="line"><span class="na">height</span><span class="p">:</span><span class="mi">720</span><span class="p">,</span></span><span id="LC18" class="line"><span class="c1">// 視頻幀率</span></span><span id="LC19" class="line"><span class="na">fps</span><span class="p">:</span><span class="mi">30</span><span class="p">,</span></span><span id="LC20" class="line"><span class="c1">// 視頻段參數</span></span><span id="LC21" class="line"><span class="na">chunks</span><span class="p">:</span><span class="p">[</span></span><span id="LC22" class="line"><span class="p">{</span></span><span id="LC23" class="line"><span class="na">url</span><span class="p">:</span><span class="dl">"</span><span class="s2">http://localhost:8080/scene-1.html</span><span class="dl">"</span><span class="p">,</span></span><span id="LC24" class="line"><span class="na">duration</span><span class="p">:</span><span class="mi">10000</span><span class="p">,</span></span><span id="LC25" class="line"><span class="c1">// 在第一和第二幕之間插入轉場</span></span><span id="LC26" class="line"><span class="na">transition</span><span class="p">:</span><span class="nx">TRANSITION</span><span class="p">.</span><span class="nx">CIRCLE_CROP</span></span><span id="LC27" class="line"><span class="p">},</span></span><span id="LC28" class="line"><span class="p">{</span></span><span id="LC29" class="line"><span class="na">url</span><span class="p">:</span><span class="dl">"</span><span class="s2">http://localhost:8080/scene-2.html</span><span class="dl">"</span><span class="p">,</span></span><span id="LC30" class="line"><span class="na">duration</span><span class="p">:</span><span class="mi">10000</span></span><span id="LC31" class="line"><span class="p">}</span></span><span id="LC32" class="line"><span class="p">],</span></span><span id="LC33" class="line"><span class="c1">// 視頻輸出路徑</span></span><span id="LC34" class="line"><span class="na">outputPath</span><span class="p">:</span><span class="dl">"</span><span class="s2">./test.mp4</span><span class="dl">"</span><span class="p">,</span></span><span id="LC35" class="line"><span class="c1">// 是否在 cli 顯示進度條，默認是不顯示</span></span><span id="LC36" class="line"><span class="na">showProgress</span><span class="p">:</span><span class="kc">true</span></span><span id="LC37" class="line"><span class="p">});</span></span><span id="LC38" class="line"></span><span id="LC39" class="line"><span class="c1">// 監聽合成完成事件</span></span><span id="LC40" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="dl">"</span><span class="s2">completed</span><span class="dl">"</span><span class="p">,</span><span class="nx">result</span><span class="o">=&gt;</span><span class="p">{</span></span><span id="LC41" class="line"><span class="nx">logger</span><span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="s2">`Render Completed!!!\nvideo duration: </span><span class="p">${</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">duration</span><span class="o">/</span><span class="mi">1000</span><span class="p">)}</span><span class="s2">s\ntakes: </span><span class="p">${</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">takes</span><span class="o">/</span><span class="mi">1000</span><span class="p">)}</span><span class="s2">s\nRTF: </span><span class="p">${</span><span class="nx">result</span><span class="p">.</span><span class="nx">rtf</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span></span><span id="LC42" class="line"><span class="p">});</span></span><span id="LC43" class="line"></span><span id="LC44" class="line"><span class="c1">// 啓動合成</span></span><span id="LC45" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-渲染分塊視頻合併為多幕視頻" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%B8%B2%E6%9F%93%E5%88%86%E5%9D%97%E8%A7%86%E9%A2%91%E5%90%88%E5%B9%B6%E4%B8%BA%E5%A4%9A%E5%B9%95%E8%A7%86%E9%A2%91"></a>渲染分塊視頻合併為多幕視頻</h2><img src="https://gitee.com/vblog/web-video-creator/raw/master/assets/chunk-video.gif" referrerpolicy="no-referrer"><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">import</span><span class="nx">WebVideoCreator</span><span class="p">,</span><span class="p">{</span><span class="nx">VIDEO_ENCODER</span><span class="p">,</span><span class="nx">TRANSITION</span><span class="p">,</span><span class="nx">logger</span><span class="p">}</span><span class="k">from</span><span class="dl">"</span><span class="s2">web-video-creator</span><span class="dl">"</span><span class="p">;</span></span><span id="LC2" class="line"></span><span id="LC3" class="line"><span class="kd">const</span><span class="nx">wvc</span><span class="o">=</span><span class="k">new</span><span class="nx">WebVideoCreator</span><span class="p">();</span></span><span id="LC4" class="line"></span><span id="LC5" class="line"><span class="c1">// 配置 WVC</span></span><span id="LC6" class="line"><span class="nx">wvc</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span></span><span id="LC7" class="line"><span class="c1">// 根據您的硬件設備選擇適合的編碼器，這裏採用的是 Nvidia 顯卡的 h264_nvenc 編碼器</span></span><span id="LC8" class="line"><span class="c1">// 編碼器選擇可參考 docs/video-encoder.md</span></span><span id="LC9" class="line"><span class="na">mp4Encoder</span><span class="p">:</span><span class="nx">VIDEO_ENCODER</span><span class="p">.</span><span class="nx">NVIDIA</span><span class="p">.</span><span class="nx">H264</span></span><span id="LC10" class="line"><span class="p">});</span></span><span id="LC11" class="line"></span><span id="LC12" class="line"><span class="c1">// 創建分塊視頻 1</span></span><span id="LC13" class="line"><span class="kd">const</span><span class="nx">chunk1</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createChunkVideo</span><span class="p">({</span></span><span id="LC14" class="line"><span class="na">url</span><span class="p">:</span><span class="dl">"</span><span class="s2">http://localhost:8080/scene-1.html</span><span class="dl">"</span><span class="p">,</span></span><span id="LC15" class="line"><span class="na">width</span><span class="p">:</span><span class="mi">1280</span><span class="p">,</span></span><span id="LC16" class="line"><span class="na">height</span><span class="p">:</span><span class="mi">720</span><span class="p">,</span></span><span id="LC17" class="line"><span class="na">fps</span><span class="p">:</span><span class="mi">30</span><span class="p">,</span></span><span id="LC18" class="line"><span class="na">duration</span><span class="p">:</span><span class="mi">10000</span><span class="p">,</span></span><span id="LC19" class="line"><span class="na">showProgress</span><span class="p">:</span><span class="kc">true</span></span><span id="LC20" class="line"><span class="p">});</span></span><span id="LC21" class="line"></span><span id="LC22" class="line"><span class="c1">// 創建分塊視頻 2</span></span><span id="LC23" class="line"><span class="kd">const</span><span class="nx">chunk2</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createChunkVideo</span><span class="p">({</span></span><span id="LC24" class="line"><span class="na">url</span><span class="p">:</span><span class="dl">"</span><span class="s2">http://localhost:8080/scene-2.html</span><span class="dl">"</span><span class="p">,</span></span><span id="LC25" class="line"><span class="na">width</span><span class="p">:</span><span class="mi">1280</span><span class="p">,</span></span><span id="LC26" class="line"><span class="na">height</span><span class="p">:</span><span class="mi">720</span><span class="p">,</span></span><span id="LC27" class="line"><span class="na">fps</span><span class="p">:</span><span class="mi">30</span><span class="p">,</span></span><span id="LC28" class="line"><span class="na">duration</span><span class="p">:</span><span class="mi">10000</span><span class="p">,</span></span><span id="LC29" class="line"><span class="na">showProgress</span><span class="p">:</span><span class="kc">true</span></span><span id="LC30" class="line"><span class="p">});</span></span><span id="LC31" class="line"></span><span id="LC32" class="line"><span class="c1">// 等待分塊們渲染完成</span></span><span id="LC33" class="line"><span class="k">await</span><span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span><span class="nx">chunk1</span><span class="p">.</span><span class="nx">startAndWait</span><span class="p">(),</span><span class="nx">chunk2</span><span class="p">.</span><span class="nx">startAndWait</span><span class="p">()]);</span></span><span id="LC34" class="line"></span><span id="LC35" class="line"><span class="c1">// 設置 chunk1 和 chunk2 之間的轉場效果為淡入淡出</span></span><span id="LC36" class="line"><span class="nx">chunk1</span><span class="p">.</span><span class="nx">setTransition</span><span class="p">({</span><span class="na">id</span><span class="p">:</span><span class="nx">TRANSITION</span><span class="p">.</span><span class="nx">FADE</span><span class="p">,</span><span class="na">duration</span><span class="p">:</span><span class="mi">500</span><span class="p">});</span></span><span id="LC37" class="line"><span class="c1">// 不設置時長可以直接提供效果 ID</span></span><span id="LC38" class="line"><span class="c1">// chunk1.setTransition(TRANSITION.FADE);</span></span><span id="LC39" class="line"></span><span id="LC40" class="line"><span class="c1">// 創建多幕視頻</span></span><span id="LC41" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createMultiVideo</span><span class="p">({</span></span><span id="LC42" class="line"><span class="na">width</span><span class="p">:</span><span class="mi">1280</span><span class="p">,</span></span><span id="LC43" class="line"><span class="na">height</span><span class="p">:</span><span class="mi">720</span><span class="p">,</span></span><span id="LC44" class="line"><span class="na">fps</span><span class="p">:</span><span class="mi">30</span><span class="p">,</span></span><span id="LC45" class="line"><span class="c1">// 視頻段</span></span><span id="LC46" class="line"><span class="na">chunks</span><span class="p">:</span><span class="p">[</span></span><span id="LC47" class="line"><span class="nx">chunk1</span><span class="p">,</span></span><span id="LC48" class="line"><span class="nx">chunk2</span></span><span id="LC49" class="line"><span class="p">],</span></span><span id="LC50" class="line"><span class="c1">// 視頻輸出路徑</span></span><span id="LC51" class="line"><span class="na">outputPath</span><span class="p">:</span><span class="dl">"</span><span class="s2">./test.mp4</span><span class="dl">"</span><span class="p">,</span></span><span id="LC52" class="line"><span class="c1">// 是否在 cli 顯示進度條</span></span><span id="LC53" class="line"><span class="na">showProgress</span><span class="p">:</span><span class="kc">true</span></span><span id="LC54" class="line"><span class="p">});</span></span><span id="LC55" class="line"></span><span id="LC56" class="line"><span class="c1">// 監聽合成完成事件</span></span><span id="LC57" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="dl">"</span><span class="s2">completed</span><span class="dl">"</span><span class="p">,</span><span class="nx">result</span><span class="o">=&gt;</span><span class="p">{</span></span><span id="LC58" class="line"><span class="nx">logger</span><span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="s2">`Render Completed!!!\nvideo duration: </span><span class="p">${</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">duration</span><span class="o">/</span><span class="mi">1000</span><span class="p">)}</span><span class="s2">s\ntakes: </span><span class="p">${</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">takes</span><span class="o">/</span><span class="mi">1000</span><span class="p">)}</span><span class="s2">s\nRTF: </span><span class="p">${</span><span class="nx">result</span><span class="p">.</span><span class="nx">rtf</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span></span><span id="LC59" class="line"><span class="p">});</span></span><span id="LC60" class="line"></span><span id="LC61" class="line"><span class="c1">// 啓動合成</span></span><span id="LC62" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-全局配置" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE"></a>全局配置</h2><p>您可以全局配置 WVC 調整一些通用參數。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">import</span><span class="nx">WebVideoCreator</span><span class="p">,</span><span class="p">{</span><span class="nx">VIDEO_ENCODER</span><span class="p">,</span><span class="nx">AUDIO_ENCODER</span><span class="p">}</span><span class="k">from</span><span class="dl">"</span><span class="s2">web-video-creator</span><span class="dl">"</span><span class="p">;</span></span><span id="LC2" class="line"></span><span id="LC3" class="line"><span class="kd">const</span><span class="nx">wvc</span><span class="o">=</span><span class="k">new</span><span class="nx">WebVideoCreator</span><span class="p">();</span></span><span id="LC4" class="line"></span><span id="LC5" class="line"><span class="nx">wvc</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span></span><span id="LC6" class="line"><span class="c1">// 開啓後將輸出一些 WVC 的調試日誌</span></span><span id="LC7" class="line"><span class="na">debug</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span></span><span id="LC8" class="line"><span class="c1">// 開啓後將輸出瀏覽器的運行日誌</span></span><span id="LC9" class="line"><span class="na">browserDebug</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span></span><span id="LC10" class="line"><span class="c1">// 開啓後將輸出每一條執行的 FFmpeg 命令</span></span><span id="LC11" class="line"><span class="na">ffmpegDebug</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span></span><span id="LC12" class="line"><span class="c1">// ffmpeg 可執行文件路徑，設置後將禁用內部的 ffmpeg-static，建議您默認使用內部的 FFmpeg 以確保功能完整性</span></span><span id="LC13" class="line"><span class="na">ffmpegExecutablePath</span><span class="p">:</span><span class="dl">"</span><span class="s2">...</span><span class="dl">"</span><span class="p">,</span></span><span id="LC14" class="line"><span class="c1">// ffprobe 可執行文件路徑，設置後將禁用內部的 ffprobe-static，建議您默認使用內部的 ffprobe 以確保功能完整性</span></span><span id="LC15" class="line"><span class="na">ffprobeExecutablePath</span><span class="p">:</span><span class="dl">"</span><span class="s2">...</span><span class="dl">"</span><span class="p">,</span></span><span id="LC16" class="line"><span class="c1">// 瀏覽器 GPU 加速開關，建議開啓提高渲染性能，如果您沒有 GPU 設備或遭遇了詭異的渲染問題則可以關閉它</span></span><span id="LC17" class="line"><span class="na">browserUseGPU</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span></span><span id="LC18" class="line"><span class="c1">// 瀏覽器是否使用 Angle 作為渲染後端，建議開啓增強渲染跨平台兼容性和性能</span></span><span id="LC19" class="line"><span class="na">browserUseAngle</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span></span><span id="LC20" class="line"><span class="c1">// 是否禁用瀏覽器使用共享內存，當/dev/shm 分區較小時建議開啓此選項</span></span><span id="LC21" class="line"><span class="na">browserDisableDevShm</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span></span><span id="LC22" class="line"><span class="c1">// 瀏覽器可執行文件路徑，設置後將禁用內部的瀏覽器，建議您默認使用內部的瀏覽器以確保功能完整性</span></span><span id="LC23" class="line"><span class="na">browserExecutablePath</span><span class="p">:</span><span class="dl">"</span><span class="s2">...</span><span class="dl">"</span><span class="p">,</span></span><span id="LC24" class="line"><span class="c1">// 是否允許不安全的上下文，默認禁用，開啓後能夠導航到不安全的 URL，但由於不安全上下文限制，將無法在頁面中使用動態圖像和內嵌視頻</span></span><span id="LC25" class="line"><span class="na">allowUnsafeContext</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span></span><span id="LC26" class="line"><span class="c1">// 兼容渲染模式，不建議啓用，啓用後將禁用 HeadlessExperimental.beginFrame API 調用改為普通的 Page.screenshot</span></span><span id="LC27" class="line"><span class="c1">// 這會導致渲染性能下降，且部分動畫可能幀率無法同步，當你遭遇 TargetCloseError: Protocol error (HeadlessExperimental.beginFrame): Target closed 錯誤的時候可以嘗試開啓它</span></span><span id="LC28" class="line"><span class="na">compatibleRenderingMode</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span></span><span id="LC29" class="line"><span class="c1">// 資源池最小瀏覽器實例數量</span></span><span id="LC30" class="line"><span class="na">numBrowserMin</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span></span><span id="LC31" class="line"><span class="c1">// 資源池最大瀏覽器實例數量</span></span><span id="LC32" class="line"><span class="na">numBrowserMax</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span></span><span id="LC33" class="line"><span class="c1">// 每個瀏覽器實例最小頁面實例數量</span></span><span id="LC34" class="line"><span class="na">numPageMin</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span></span><span id="LC35" class="line"><span class="c1">// 每個瀏覽器實例最大頁面實例數量</span></span><span id="LC36" class="line"><span class="na">numPageMax</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span></span><span id="LC37" class="line"><span class="c1">// 訪問頁面時的用戶 UA</span></span><span id="LC38" class="line"><span class="na">userAgent</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span></span><span id="LC39" class="line"><span class="c1">// 捕獲幀圖質量（0-100），僅 jpeg 有效</span></span><span id="LC40" class="line"><span class="na">frameQuality</span><span class="p">:</span><span class="mi">80</span><span class="p">,</span></span><span id="LC41" class="line"><span class="c1">// 幀圖格式（jpeg/png），建議使用 jpeg，png 捕獲較為耗時</span></span><span id="LC42" class="line"><span class="na">frameFormat</span><span class="p">:</span><span class="dl">"</span><span class="s2">jpeg</span><span class="dl">"</span><span class="p">,</span></span><span id="LC43" class="line"><span class="c1">// BeginFrame 捕獲圖像超時時間</span></span><span id="LC44" class="line"><span class="na">beginFrameTimeout</span><span class="p">:</span><span class="mi">5000</span><span class="p">,</span></span><span id="LC45" class="line"><span class="c1">// MP4 格式的視頻編碼器，默認使用 libx264 軟編碼器，建議根據您的硬件選用合適的硬編碼器加速合成，編碼器選擇可參考 docs/video-encoder.md</span></span><span id="LC46" class="line"><span class="na">mp4Encoder</span><span class="p">:</span><span class="nx">VIDEO_ENCODER</span><span class="p">.</span><span class="nx">CPU</span><span class="p">.</span><span class="nx">H264</span><span class="p">,</span></span><span id="LC47" class="line"><span class="c1">// WEBM 格式的視頻編碼器，默認使用 libvpx 軟編碼器，建議根據您的硬件選用合適的硬編碼器加速合成</span></span><span id="LC48" class="line"><span class="na">webmEncoder</span><span class="p">:</span><span class="nx">VIDEO_ENCODER</span><span class="p">.</span><span class="nx">CPU</span><span class="p">.</span><span class="nx">VP8</span><span class="p">,</span></span><span id="LC49" class="line"><span class="c1">// 音頻編碼器，建議採用默認的 aac 編碼器</span></span><span id="LC50" class="line"><span class="na">audioEncoder</span><span class="p">:</span><span class="nx">AUDIO_ENCODER</span><span class="p">.</span><span class="nx">AAC</span></span><span id="LC51" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-插入音頻" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%8F%92%E5%85%A5%E9%9F%B3%E9%A2%91"></a>插入音頻</h2><p>只需在需要渲染的 html 中添加 <code>&lt;audio&gt;</code> 元素，您還可以設置循環，WVC 會自動為視頻合入循環音軌。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nt">&lt;audio</span><span class="na">src=</span><span class="s">"bgm.mp3"</span><span class="na">loop</span><span class="nt">&gt;&lt;/audio&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>還可以設置一些其它屬性控制音頻的行為，這些屬性並不總是需要成對出現，您可以根據自己的需求定製。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c">&lt;!-- 控制音頻音量為原來的一半 --&gt;</span></span><span id="LC2" class="line"><span class="nt">&lt;audio</span><span class="na">src=</span><span class="s">"bgm.mp3"</span><span class="na">volume=</span><span class="s">"0.5"</span><span class="nt">&gt;&lt;/audio&gt;</span></span><span id="LC3" class="line"><span class="c">&lt;!-- 控制音頻在 3 秒後開始播放並在 10 秒處停止播放 --&gt;</span></span><span id="LC4" class="line"><span class="nt">&lt;audio</span><span class="na">src=</span><span class="s">"bgm.mp3"</span><span class="na">startTime=</span><span class="s">"3000"</span><span class="na">endTime=</span><span class="s">"10000"</span><span class="nt">&gt;&lt;/audio&gt;</span></span><span id="LC5" class="line"><span class="c">&lt;!-- 截取音頻第 5 秒到第 15 秒的片段並循環播放它 --&gt;</span></span><span id="LC6" class="line"><span class="nt">&lt;audio</span><span class="na">src=</span><span class="s">"bgm.mp3"</span><span class="na">seekStart=</span><span class="s">"5000"</span><span class="na">seekEnd=</span><span class="s">"15000"</span><span class="na">loop</span><span class="nt">&gt;&lt;/audio&gt;</span></span><span id="LC7" class="line"><span class="c">&lt;!-- 控制音頻 300 毫秒淡入且 500 毫秒淡出 --&gt;</span></span><span id="LC8" class="line"><span class="nt">&lt;audio</span><span class="na">src=</span><span class="s">"bgm.mp3"</span><span class="na">fadeInDuration=</span><span class="s">"300"</span><span class="na">fadeOutDuration=</span><span class="s">"500"</span><span class="nt">&gt;&lt;/audio&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>在代碼中添加和移除 <code>&lt;audio&gt;</code> 元素來實現音頻出入場也是被允許的，WVC 將檢測到它們。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">audio</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">audio</span><span class="dl">"</span><span class="p">);</span></span><span id="LC2" class="line"><span class="nx">audio</span><span class="p">.</span><span class="nx">src</span><span class="o">=</span><span class="dl">"</span><span class="s2">bgm.mp3</span><span class="dl">"</span><span class="p">;</span></span><span id="LC3" class="line"><span class="c1">// 音頻在視頻第 3 秒入場</span></span><span id="LC4" class="line"><span class="nx">setTimeout</span><span class="p">(()</span><span class="o">=&gt;</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">audio</span><span class="p">),</span><span class="mi">3000</span><span class="p">);</span></span><span id="LC5" class="line"><span class="c1">// 音頻在視頻第 8 秒出場</span></span><span id="LC6" class="line"><span class="nx">setTimeout</span><span class="p">(()</span><span class="o">=&gt;</span><span class="nx">audio</span><span class="p">.</span><span class="nx">remove</span><span class="p">(),</span><span class="mi">8000</span><span class="p">);</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>或者在頁面中調用 <a href="https://gitee.com/vblog/web-video-creator/blob/master/docs/capture-ctx.md#capturecontextaddaudiooptions-object">captureCtx.addAudio</a> 添加音頻到視頻中。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 添加單個音頻</span></span><span id="LC2" class="line"><span class="nx">captureCtx</span><span class="p">.</span><span class="nx">addAudio</span><span class="p">({</span></span><span id="LC3" class="line"><span class="na">url</span><span class="p">:</span><span class="dl">"</span><span class="s2">bgm.mp3</span><span class="dl">"</span><span class="p">,</span></span><span id="LC4" class="line"><span class="na">startTime</span><span class="p">:</span><span class="mi">500</span><span class="p">,</span></span><span id="LC5" class="line"><span class="na">loop</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span></span><span id="LC6" class="line"><span class="c1">// 80% 的音量</span></span><span id="LC7" class="line"><span class="na">volume</span><span class="p">:</span><span class="mi">80</span></span><span id="LC8" class="line"><span class="p">});</span></span><span id="LC9" class="line"><span class="c1">// 添加多個音頻</span></span><span id="LC10" class="line"><span class="nx">captureCtx</span><span class="p">.</span><span class="nx">addAudios</span><span class="p">([...]);</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>也可以在 WVC 中直接使用 <a href="https://gitee.com/vblog/web-video-creator/blob/master/docs/api-reference-high-level.md#singlevideoaddaudiooptions-object">addAudio</a> 將本地或遠程的音頻添加到視頻中。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span><span class="p">...</span><span class="p">});</span></span><span id="LC2" class="line"><span class="c1">// 添加單個音頻</span></span><span id="LC3" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">addAudio</span><span class="p">({</span></span><span id="LC4" class="line"><span class="c1">// url: "http://.../bgm.mp3"</span></span><span id="LC5" class="line"><span class="na">path</span><span class="p">:</span><span class="dl">"</span><span class="s2">bgm.mp3</span><span class="dl">"</span><span class="p">,</span></span><span id="LC6" class="line"><span class="na">startTime</span><span class="p">:</span><span class="mi">500</span><span class="p">,</span></span><span id="LC7" class="line"><span class="na">loop</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span></span><span id="LC8" class="line"><span class="c1">// 80% 的音量</span></span><span id="LC9" class="line"><span class="na">volume</span><span class="p">:</span><span class="mi">80</span></span><span id="LC10" class="line"><span class="p">});</span></span><span id="LC11" class="line"><span class="c1">// 添加多個音頻</span></span><span id="LC12" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">addAudios</span><span class="p">([...]);</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>這樣的操作同樣適用於 MultiVideo 和 ChunkVideo 。</p><h2><a id="user-content-插入視頻" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%8F%92%E5%85%A5%E8%A7%86%E9%A2%91"></a>插入視頻</h2><p>目前支持 <code>mp4</code> 和 <code>webm</code> 格式的視頻，只需在需要渲染的 html 中添加 <code>&lt;video&gt;</code> 元素，您可以設置循環和靜音，如果您的 src 不包含 <code>.mp4</code> 後綴名可能無法被識別，請添加 <code>capture</code> 屬性標識為需要捕獲的元素。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nt">&lt;video</span><span class="na">src=</span><span class="s">"background.mp4"</span><span class="na">loop</span><span class="na">muted</span><span class="nt">&gt;&lt;/video&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>如果希望插入透明通道的視頻請見：<a href="https://gitee.com/vblog/web-video-creator#%E9%80%8F%E6%98%8E%E9%80%9A%E9%81%93%E8%A7%86%E9%A2%91">透明通道視頻</a>，對視頻幀率同步或透明視頻繪製感興趣可以參考：<a href="https://gitee.com/vblog/web-video-creator#%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0">技術實現</a>。</p><p>和音頻一樣，它也支持設置一些屬性控制視頻的行為，這些屬性並不總是需要成對出現，您可以根據自己的需求定製。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c">&lt;!-- 控制音頻音量為原來的 70% --&gt;</span></span><span id="LC2" class="line"><span class="nt">&lt;video</span><span class="na">src=</span><span class="s">"test.mp4"</span><span class="na">volume=</span><span class="s">"0.7"</span><span class="nt">&gt;&lt;/video&gt;</span></span><span id="LC3" class="line"><span class="c">&lt;!-- 控制視頻在 3 秒後開始播放並在 10 秒處停止播放 --&gt;</span></span><span id="LC4" class="line"><span class="nt">&lt;video</span><span class="na">src=</span><span class="s">"test.mp4"</span><span class="na">startTime=</span><span class="s">"3000"</span><span class="na">endTime=</span><span class="s">"10000"</span><span class="nt">&gt;&lt;/video&gt;</span></span><span id="LC5" class="line"><span class="c">&lt;!-- 截取視頻第 5 秒到第 15 秒的片段並循環播放它 --&gt;</span></span><span id="LC6" class="line"><span class="nt">&lt;video</span><span class="na">src=</span><span class="s">"test.mp4"</span><span class="na">seekStart=</span><span class="s">"5000"</span><span class="na">seekEnd=</span><span class="s">"15000"</span><span class="na">loop</span><span class="nt">&gt;&lt;/video&gt;</span></span><span id="LC7" class="line"><span class="c">&lt;!-- 控制視頻的音頻在 300 毫秒淡入且 500 毫秒淡出 --&gt;</span></span><span id="LC8" class="line"><span class="nt">&lt;video</span><span class="na">src=</span><span class="s">"test.mp4"</span><span class="na">fadeInDuration=</span><span class="s">"300"</span><span class="na">fadeOutDuration=</span><span class="s">"500"</span><span class="nt">&gt;&lt;/video&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>在代碼中添加和移除 <code>&lt;video&gt;</code> 元素來實現視頻出入場也是被允許的，WVC 將檢測到它們。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">video</span><span class="dl">"</span><span class="p">);</span></span><span id="LC2" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">src</span><span class="o">=</span><span class="dl">"</span><span class="s2">test.mp4</span><span class="dl">"</span><span class="p">;</span></span><span id="LC3" class="line"><span class="c1">// 視頻在第 3 秒入場</span></span><span id="LC4" class="line"><span class="nx">setTimeout</span><span class="p">(()</span><span class="o">=&gt;</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">video</span><span class="p">),</span><span class="mi">3000</span><span class="p">);</span></span><span id="LC5" class="line"><span class="c1">// 視頻在第 8 秒出場</span></span><span id="LC6" class="line"><span class="nx">setTimeout</span><span class="p">(()</span><span class="o">=&gt;</span><span class="nx">video</span><span class="p">.</span><span class="nx">remove</span><span class="p">(),</span><span class="mi">8000</span><span class="p">);</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-透明通道視頻" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E9%80%8F%E6%98%8E%E9%80%9A%E9%81%93%E8%A7%86%E9%A2%91"></a>透明通道視頻</h3><p>透明視頻非常適合用於將 vtuber 數字人合成到視頻畫面中，結合精美的動畫可以獲得非常好的觀看體驗，合成效果請參考 <strong><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FVinlic%2FWebVideoCreator%2Fwiki%2FRendering-Example">渲染示例頁面</a></strong> 最後一個 Demo。</p><p>透明通道視頻格式需為 <code>webm</code> ，在內部它會被重新編碼為兩個 mp4 容器的視頻，分別是原色底視頻和蒙版視頻後在瀏覽器 canvas 中使用進行 <code>globalCompositeOperation</code> 進行圖像混合並繪製。</p><p>對於使用者是無感的，像下面代碼演示中那樣，只需需要渲染的 html 中添加 <code>&lt;video&gt;</code> 元素，並設置 src 為 webm 格式視頻地址即可。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nt">&lt;video</span><span class="na">src=</span><span class="s">"vtuber.webm"</span><span class="nt">&gt;&lt;/video&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>webm 編解碼通常比較耗時，如果您可以直接獲得原始 mp4 視頻和蒙版 mp4 視頻是更好的方案，只需增加設置 maskSrc 即可。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nt">&lt;video</span><span class="na">src=</span><span class="s">"vtuber.mp4"</span><span class="na">maskSrc=</span><span class="s">"vtuber_mask.mp4"</span><span class="nt">&gt;&lt;/video&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-插入動態圖像" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%8F%92%E5%85%A5%E5%8A%A8%E6%80%81%E5%9B%BE%E5%83%8F"></a>插入動態圖像</h2><p>動態圖像指的是 <code>gif</code> / <code>apng</code> / <code>webp</code> 格式的序列幀動畫，他們可以在瀏覽器中自然播放，幀率通常是不可控的，但 WVC 代理了它們的繪製，img 元素被替換為 canvas 並通過 ImageDecoder 解碼繪製每一幀，讓序列幀動畫按照虛擬時間同步繪製。</p><p>以下這些動圖都能夠正常繪製，您也可以照常給他們設置樣式。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nt">&lt;img</span><span class="na">src=</span><span class="s">"test.gif"</span><span class="nt">/&gt;</span></span><span id="LC2" class="line"><span class="nt">&lt;img</span><span class="na">src=</span><span class="s">"test.apng"</span><span class="nt">/&gt;</span></span><span id="LC3" class="line"><span class="nt">&lt;img</span><span class="na">src=</span><span class="s">"test.webp"</span><span class="nt">/&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-插入 lottie 動畫" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%8F%92%E5%85%A5lottie%E5%8A%A8%E7%94%BB"></a>插入 Lottie 動畫</h2><p>WVC 已經內置 <a href="https://gitee.com/link?target=http%3A%2F%2Fairbnb.io%2Flottie%2F%23%2Fweb">lottie-web</a> 動畫庫，如果您的頁面有自己實現的 lottie 動效則可以忽略本內容，因為它們也能夠正常工作。</p><p>只需要插入一個 <code>&lt;lottie&gt;</code> 元素並設置 src 即可。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nt">&lt;lottie</span><span class="na">src=</span><span class="s">"example.json"</span><span class="nt">&gt;&lt;/lottie&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-應用字體" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E5%BA%94%E7%94%A8%E5%AD%97%E4%BD%93"></a>應用字體</h2><p>WVC 能夠檢測樣式表中的 <code>@font-face</code> 聲明並等待字體加載完成再開始渲染。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nt">&lt;style&gt;</span></span><span id="LC2" class="line"><span class="k">@font-face</span><span class="p">{</span></span><span id="LC3" class="line"><span class="nl">font-family</span><span class="p">:</span><span class="s1">"FontTest"</span><span class="p">;</span></span><span id="LC4" class="line"><span class="nl">src</span><span class="p">:</span><span class="sx">url("font.ttf")</span><span class="n">format</span><span class="p">(</span><span class="s1">"truetype"</span><span class="p">);</span></span><span id="LC5" class="line"><span class="p">}</span></span><span id="LC6" class="line"><span class="nt">&lt;/style&gt;</span></span><span id="LC7" class="line"><span class="nt">&lt;p</span><span class="na">style=</span><span class="s">'font-family: "FontTest"'</span><span class="nt">&gt;</span>Hello World<span class="nt">&lt;/p&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>或者，可以通過代碼註冊本地或遠程的字體。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span><span class="p">...</span><span class="p">});</span></span><span id="LC2" class="line"><span class="c1">// 註冊單個字體</span></span><span id="LC3" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">registerFont</span><span class="p">({</span></span><span id="LC4" class="line"><span class="c1">// url: "http://.../font.ttf"</span></span><span id="LC5" class="line"><span class="na">path</span><span class="p">:</span><span class="dl">"</span><span class="s2">font.ttf</span><span class="dl">"</span><span class="p">,</span></span><span id="LC6" class="line"><span class="na">family</span><span class="p">:</span><span class="dl">"</span><span class="s2">FontTest</span><span class="dl">"</span><span class="p">,</span></span><span id="LC7" class="line"><span class="na">format</span><span class="p">:</span><span class="dl">"</span><span class="s2">truetype</span><span class="dl">"</span></span><span id="LC8" class="line"><span class="p">});</span></span><span id="LC9" class="line"><span class="c1">// 註冊多個字體</span></span><span id="LC10" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">registerFonts</span><span class="p">([...]);</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>您需要確保字體能夠正常加載，否則可能無法啓動渲染。</p><h2><a id="user-content-插入轉場效果" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%8F%92%E5%85%A5%E8%BD%AC%E5%9C%BA%E6%95%88%E6%9E%9C"></a>插入轉場效果</h2><p>WVC 支持使用 FFmpeg 所支持的 <a href="https://gitee.com/link?target=https%3A%2F%2Ftrac.ffmpeg.org%2Fwiki%2FXfade">Xfade</a> 濾鏡來合成轉場效果，可參考<a href="https://gitee.com/vblog/web-video-creator/blob/master/docs/transition.md">轉場列表</a>、</p><p>每個分塊視頻參數都能夠設置轉場效果和持續時長。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">import</span><span class="nx">WebVideoCreator</span><span class="p">,</span><span class="p">{</span><span class="nx">TRANSITION</span><span class="p">}</span><span class="k">from</span><span class="dl">"</span><span class="s2">web-video-creator</span><span class="dl">"</span><span class="p">;</span></span><span id="LC2" class="line"></span><span id="LC3" class="line"><span class="p">...</span></span><span id="LC4" class="line"></span><span id="LC5" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createMultiVideo</span><span class="p">({</span></span><span id="LC6" class="line"><span class="p">...</span></span><span id="LC7" class="line"><span class="c1">// 視頻段參數</span></span><span id="LC8" class="line"><span class="na">chunks</span><span class="p">:</span><span class="p">[</span></span><span id="LC9" class="line"><span class="p">{</span></span><span id="LC10" class="line"><span class="na">url</span><span class="p">:</span><span class="dl">"</span><span class="s2">http://localhost:8080/scene-1.html</span><span class="dl">"</span><span class="p">,</span></span><span id="LC11" class="line"><span class="na">duration</span><span class="p">:</span><span class="mi">10000</span><span class="p">,</span></span><span id="LC12" class="line"><span class="c1">// 在第一和第二幕之間插入淡入淡出轉場</span></span><span id="LC13" class="line"><span class="na">transition</span><span class="p">:</span><span class="p">{</span></span><span id="LC14" class="line"><span class="na">id</span><span class="p">:</span><span class="nx">TRANSITION</span><span class="p">.</span><span class="nx">FADE</span><span class="p">,</span></span><span id="LC15" class="line"><span class="na">duration</span><span class="p">:</span><span class="mi">500</span></span><span id="LC16" class="line"><span class="p">},</span></span><span id="LC17" class="line"><span class="c1">// 如果不需要設置時長也可以直接設置轉場 ID</span></span><span id="LC18" class="line"><span class="c1">// transition: TRANSITION.FADE</span></span><span id="LC19" class="line"><span class="p">},</span></span><span id="LC20" class="line"><span class="p">{</span></span><span id="LC21" class="line"><span class="na">url</span><span class="p">:</span><span class="dl">"</span><span class="s2">http://localhost:8080/scene-2.html</span><span class="dl">"</span><span class="p">,</span></span><span id="LC22" class="line"><span class="na">duration</span><span class="p">:</span><span class="mi">10000</span></span><span id="LC23" class="line"><span class="p">}</span></span><span id="LC24" class="line"><span class="p">],</span></span><span id="LC25" class="line"><span class="p">...</span></span><span id="LC26" class="line"><span class="p">});</span></span><span id="LC27" class="line"></span><span id="LC28" class="line"><span class="p">...</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>需要注意的是，應用轉場會導致視頻總時長縮短，轉場效果實際上是兩段視頻的部分重疊，兩段 5 秒的視頻插入轉場，會合成時長為 9 秒的視頻。</p><p>Lottie 動畫也很適合作為轉場效果，您可以在一段視頻的尾部播放一半時長的全屏 Lottie 動畫，然後在下一段視頻開頭播放另一半時長的全屏 Lottie 動畫實現更動感的轉場效果。</p><h2><a id="user-content-延遲啓動渲染" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E5%BB%B6%E8%BF%9F%E5%90%AF%E5%8A%A8%E6%B8%B2%E6%9F%93"></a>延遲啓動渲染</h2><p>WVC 默認頁面導航完成後立即啓動渲染，如果希望在渲染之前進行一些工作，可以在選項中禁用自動啓動渲染，禁用後請記得在您的頁面中調用 <a href="https://gitee.com/vblog/web-video-creator/blob/master/docs/capture-ctx.md#capturecontextstart">captureCtx.start()</a>，否則將永遠阻塞。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span></span><span id="LC2" class="line"><span class="na">url</span><span class="p">:</span><span class="dl">"</span><span class="s2">http://localhost:8080/test.html</span><span class="dl">"</span><span class="p">,</span></span><span id="LC3" class="line"><span class="na">width</span><span class="p">:</span><span class="mi">1280</span><span class="p">,</span></span><span id="LC4" class="line"><span class="na">height</span><span class="p">:</span><span class="mi">720</span><span class="p">,</span></span><span id="LC5" class="line"><span class="na">duration</span><span class="p">:</span><span class="mi">10000</span><span class="p">,</span></span><span id="LC6" class="line"><span class="c1">// 禁用自動啓動渲染</span></span><span id="LC7" class="line"><span class="na">autostartRender</span><span class="p">:</span><span class="kc">false</span></span><span id="LC8" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>頁面代碼中，在您覺得合適的時機調用啓動。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nt">&lt;script&gt;</span></span><span id="LC2" class="line"><span class="c1">// 數據加載完成後啓動渲染</span></span><span id="LC3" class="line"><span class="nx">loadData</span><span class="p">()</span></span><span id="LC4" class="line"><span class="p">.</span><span class="nx">then</span><span class="p">(()</span><span class="o">=&gt;</span><span class="nx">captureCtx</span><span class="p">.</span><span class="nx">start</span><span class="p">())</span></span><span id="LC5" class="line"><span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="o">=&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span></span><span id="LC6" class="line"><span class="nt">&lt;/script&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-啓動渲染前操作頁面" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E5%90%AF%E5%8A%A8%E6%B8%B2%E6%9F%93%E5%89%8D%E6%93%8D%E4%BD%9C%E9%A1%B5%E9%9D%A2"></a>啓動渲染前操作頁面</h2><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span></span><span id="LC2" class="line"><span class="na">url</span><span class="p">:</span><span class="dl">"</span><span class="s2">http://localhost:8080/test.html</span><span class="dl">"</span><span class="p">,</span></span><span id="LC3" class="line"><span class="na">width</span><span class="p">:</span><span class="mi">1280</span><span class="p">,</span></span><span id="LC4" class="line"><span class="na">height</span><span class="p">:</span><span class="mi">720</span><span class="p">,</span></span><span id="LC5" class="line"><span class="na">duration</span><span class="p">:</span><span class="mi">10000</span><span class="p">,</span></span><span id="LC6" class="line"><span class="na">pagePrepareFn</span><span class="p">:</span><span class="k">async</span><span class="nx">page</span><span class="o">=&gt;</span><span class="p">{</span></span><span id="LC7" class="line"><span class="c1">// 獲取 puppeteer Page 對象</span></span><span id="LC8" class="line"><span class="kd">const</span><span class="nx">_page</span><span class="o">=</span><span class="nx">page</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span></span><span id="LC9" class="line"><span class="c1">// 點擊按鈕</span></span><span id="LC10" class="line"><span class="k">await</span><span class="nx">_page</span><span class="p">.</span><span class="nx">tap</span><span class="p">(</span><span class="dl">"</span><span class="s2">#play-button</span><span class="dl">"</span><span class="p">);</span></span><span id="LC11" class="line"><span class="p">}</span></span><span id="LC12" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-頁面控制枱輸出" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E9%A1%B5%E9%9D%A2%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA"></a>頁面控制枱輸出</h2><p>如果想看到頁面的日誌，可在視頻選項中開啓 consoleLog。開啓 videoPreprocessLog 將輸出內嵌視頻預處理日誌。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span></span><span id="LC2" class="line"><span class="p">...,</span></span><span id="LC3" class="line"><span class="c1">// 輸出頁面控制枱打印的日誌</span></span><span id="LC4" class="line"><span class="na">consoleLog</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span></span><span id="LC5" class="line"><span class="c1">// 輸出內嵌視頻預處理日誌</span></span><span id="LC6" class="line"><span class="na">videoPreprocessLog</span><span class="p">:</span><span class="kc">true</span></span><span id="LC7" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-截取封面圖" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%88%AA%E5%8F%96%E5%B0%81%E9%9D%A2%E5%9B%BE"></a>截取封面圖</h2><p>合成視頻後可以截取某一幀圖像並保存，可以作為視頻封面圖。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span></span><span id="LC2" class="line"><span class="p">...,</span></span><span id="LC3" class="line"><span class="c1">// 是否截取圖像</span></span><span id="LC4" class="line"><span class="na">coverCapture</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span></span><span id="LC5" class="line"><span class="c1">// 圖像截取時間點（毫秒），默認是視頻時長的 20% 位置）</span></span><span id="LC6" class="line"><span class="na">coverCaptureTime</span><span class="p">:</span><span class="mi">1000</span><span class="p">,</span></span><span id="LC7" class="line"><span class="c1">// 圖像保存格式（jpg/png/bmp），默認 jpg</span></span><span id="LC8" class="line"><span class="na">coverCaptureFormat</span><span class="p">:</span><span class="dl">"</span><span class="s2">jpg</span><span class="dl">"</span></span><span id="LC9" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-插入封面圖" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%8F%92%E5%85%A5%E5%B0%81%E9%9D%A2%E5%9B%BE"></a>插入封面圖</h2><p>WVC 支持往視頻的首幀插入圖像，當視頻未被播放時將展示首幀圖像。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span></span><span id="LC2" class="line"><span class="p">...,</span></span><span id="LC3" class="line"><span class="c1">// 設置附加的封面圖地址，支持 jpg/png/bmp</span></span><span id="LC4" class="line"><span class="na">attachCoverPath</span><span class="p">:</span><span class="dl">"</span><span class="s2">./cover.jpg</span><span class="dl">"</span></span><span id="LC5" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-調整視頻音量" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E8%B0%83%E6%95%B4%E8%A7%86%E9%A2%91%E9%9F%B3%E9%87%8F"></a>調整視頻音量</h2><p>您可以控制輸出視頻的總音量。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span></span><span id="LC2" class="line"><span class="p">...,</span></span><span id="LC3" class="line"><span class="c1">// 設置視頻音量為原來的 80%</span></span><span id="LC4" class="line"><span class="na">volume</span><span class="p">:</span><span class="mi">80</span></span><span id="LC5" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-控制輸出視頻質量" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%8E%A7%E5%88%B6%E8%BE%93%E5%87%BA%E8%A7%86%E9%A2%91%E8%B4%A8%E9%87%8F"></a>控制輸出視頻質量</h2><p>WVC 支持通過 <code>videoQuality</code> 或 <code>videoBitrate</code> 控制視頻圖像質量。</p><p>videoQuality 是通過圖像總像素量簡單計算碼率，以下 WVC 內計算視頻碼率方法。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">pixels</span><span class="o">=</span><span class="nx">width</span><span class="o">*</span><span class="nx">height</span><span class="p">;</span></span><span id="LC2" class="line"><span class="kd">const</span><span class="nx">videoBitrate</span><span class="o">=</span><span class="p">(</span><span class="mi">2560</span><span class="o">/</span><span class="mi">921600</span><span class="o">*</span><span class="nx">pixels</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">videoQuality</span><span class="o">/</span><span class="mi">100</span><span class="p">);</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>可以在視頻選項中提供 videoQuality（0-100）</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span></span><span id="LC2" class="line"><span class="p">...,</span></span><span id="LC3" class="line"><span class="c1">// 設置視頻質量為 80%</span></span><span id="LC4" class="line"><span class="na">videoQuality</span><span class="p">:</span><span class="mi">80</span></span><span id="LC5" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>如果您認為碼率不合適，可以單獨設置 videoBitrate。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span></span><span id="LC2" class="line"><span class="p">...,</span></span><span id="LC3" class="line"><span class="c1">// 設置視頻碼率為 8Mbps</span></span><span id="LC4" class="line"><span class="na">videoBitrate</span><span class="p">:</span><span class="dl">"</span><span class="s2">8192k</span><span class="dl">"</span></span><span id="LC5" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>另外還可以調整幀圖質量，當使用 jpeg 作為幀圖格式時可以調整 frameQuality，詳見 <a href="https://gitee.com/vblog/web-video-creator#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE">全局配置</a>。</p><p>音頻質量則可以通過設置音頻碼率 audioBitrate 調整。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span></span><span id="LC2" class="line"><span class="p">...,</span></span><span id="LC3" class="line"><span class="c1">// 設置音頻碼率為 320Kbps</span></span><span id="LC4" class="line"><span class="na">audioBitrate</span><span class="p">:</span><span class="dl">"</span><span class="s2">320k</span><span class="dl">"</span></span><span id="LC5" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-修改像素格式" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E4%BF%AE%E6%94%B9%E5%83%8F%E7%B4%A0%E6%A0%BC%E5%BC%8F"></a>修改像素格式</h2><p>WVC 目前支持輸出 <code>yuv420p</code> / <code>yuv444p</code> / <code>rgb24</code> 像素格式的視頻，默認採用兼容性更好的 yuv420p ，如果您發現輸出的視頻與頁面的顏色有較大的差異，可以切換為 rgb24 改善這個問題。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span></span><span id="LC2" class="line"><span class="p">...,</span></span><span id="LC3" class="line"><span class="c1">// 設置像素格式為 rgb24</span></span><span id="LC4" class="line"><span class="na">pixelFormat</span><span class="p">:</span><span class="dl">"</span><span class="s2">rgb24</span><span class="dl">"</span></span><span id="LC5" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><br><h1><a id="user-content-視頻編碼器選擇" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E8%A7%86%E9%A2%91%E7%BC%96%E7%A0%81%E5%99%A8%E9%80%89%E6%8B%A9"></a>視頻編碼器選擇</h1><p>瀏覽器渲染輸出幀圖流輸入 FFmpeg 時需要通過視頻編碼器將圖像數據按指定幀率編碼為視頻數據並存儲於指定格式容器中，視頻編碼是一項較為消耗資源的操作，選用硬編碼器可以加速這個過程並降低 CPU 的負載。</p><p>WVC 支持的視頻編碼器請參考：<a href="https://gitee.com/vblog/web-video-creator/blob/master/docs/video-encoder.md">視頻編碼器説明</a></p><br><h1><a id="user-content-進度監聽" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E8%BF%9B%E5%BA%A6%E7%9B%91%E5%90%AC"></a>進度監聽</h1><p>您可以通過視頻實例的 <code>progress</code> 事件監聽渲染合成進度。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span><span class="p">...</span><span class="p">});</span></span><span id="LC2" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">progress</span><span class="dl">"</span><span class="p">,</span><span class="p">(</span><span class="nx">progress</span><span class="p">,</span><span class="nx">synthesizedFrameCount</span><span class="p">,</span><span class="nx">totalFrameCount</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span></span><span id="LC3" class="line"><span class="c1">// 輸出，進度 / 已合成幀數 / 總幀數</span></span><span id="LC4" class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">progress</span><span class="p">,</span><span class="nx">synthesizedFrameCount</span><span class="p">,</span><span class="nx">totalFrameCount</span><span class="p">);</span></span><span id="LC5" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>這同樣適用於 <code>MultiVideo</code> / <code>ChunkVideo</code> 以及低級別 API 的合成器。</p><br><h1><a id="user-content-異常處理" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86"></a>異常處理</h1><h2><a id="user-content-拋出錯誤" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%8A%9B%E5%87%BA%E9%94%99%E8%AF%AF"></a>拋出錯誤</h2><p>您可以在頁面中主動拋出錯誤來中斷渲染。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nt">&lt;script&gt;</span></span><span id="LC2" class="line"><span class="nx">____throwError</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="dl">"</span><span class="s2">Abort</span><span class="dl">"</span><span class="p">);</span></span><span id="LC3" class="line"><span class="nt">&lt;/script&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-監聽頁面崩潰" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E7%9B%91%E5%90%AC%E9%A1%B5%E9%9D%A2%E5%B4%A9%E6%BA%83"></a>監聽頁面崩潰</h2><p>如果您的頁面存在大量密集計算或者佔用過多的運行內存，頁面將可能崩潰，從而導致渲染中斷。</p><p>如果使用高級別 API，頁面崩潰時通過視頻實例的 <code>error</code> 事件通知。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span><span class="p">...</span><span class="p">});</span></span><span id="LC2" class="line"><span class="c1">// 錯誤時輸出 Page crashed:...</span></span><span id="LC3" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">error</span><span class="dl">"</span><span class="p">,</span><span class="nx">err</span><span class="o">=&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>使用低級別 API 時，頁面崩潰時通過 Page 實例的 <code>crashed</code> 事件通知</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 錯誤時輸出崩潰錯誤</span></span><span id="LC2" class="line"><span class="nx">page</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">crashed</span><span class="dl">"</span><span class="p">,</span><span class="nx">err</span><span class="o">=&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-監聽其它錯誤" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E7%9B%91%E5%90%AC%E5%85%B6%E5%AE%83%E9%94%99%E8%AF%AF"></a>監聽其它錯誤</h2><p>如果使用高級別 API，頁面崩潰時通過視頻實例的 <code>error</code> 事件通知。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span><span class="p">...</span><span class="p">});</span></span><span id="LC2" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">error</span><span class="dl">"</span><span class="p">,</span><span class="nx">err</span><span class="o">=&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>使用低級別 API 時，頁面崩潰時通過 Page 實例的 <code>error</code> 事件通知</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nx">page</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">error</span><span class="dl">"</span><span class="p">,</span><span class="nx">err</span><span class="o">=&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><br><h1><a id="user-content-分佈式渲染方案" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E5%88%86%E5%B8%83%E5%BC%8F%E6%B8%B2%E6%9F%93%E6%96%B9%E6%A1%88"></a>分佈式渲染方案</h1><p>如果您有多台設備可以為這些設備部署 WVC，它提供了 <code>MultiVideo</code> 和 <code>ChunkVideo</code>，您可以將動畫頁面分為很多個分段，如 0-10 秒、10-20 秒...，將它們的參數分發到不同設備的 WVC 上，在這些設備上創建 ChunkVideo 實例並執行並行渲染為多個視頻 <code>ts</code> 分段，將他們回傳到核心節點上，並最終輸入 MultiVideo 進行合併以及轉場、音軌合成輸出。<strong>這個分發以及回傳流程 WVC 還未實現，但它並不難，您可以根據自己的場景進行封裝並歡迎為 WVC 貢獻<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FVinlic%2FWebVideoCreator%2Fpulls">PR</a>！</strong></p><br><h1><a id="user-content-api 參考" class="anchor" href="https://gitee.com/vblog/web-video-creator#api%E5%8F%82%E8%80%83"></a>API 參考</h1><h2><a id="user-content-高級別 api" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E9%AB%98%E7%BA%A7%E5%88%ABapi"></a>高級別 API</h2><p>大部分時候，建議使用高級別 API，因為它足夠的簡單，但可能不夠靈活。</p><p><a href="https://gitee.com/vblog/web-video-creator/blob/master/docs/api-reference-high-level.md">API Reference High Level</a></p><h2><a id="user-content-低級別 api" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E4%BD%8E%E7%BA%A7%E5%88%ABapi"></a>低級別 API</h2><p><a href="https://gitee.com/vblog/web-video-creator/blob/master/docs/api-reference-low-level.md">API Reference Low Level</a></p><br><h1><a id="user-content-性能提示" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%80%A7%E8%83%BD%E6%8F%90%E7%A4%BA"></a>性能提示</h1><p>性能通常受動畫和媒體的複雜程度影響，您可以將長時間動畫分為多個分段動畫播放，比如為每個頁面地址帶一個 seek 參數，加載頁面後 seek 到指定時間點開始播放，然後作為多幕視頻進行渲染合成，可以顯著的降低長視頻的渲染耗時。</p><ul><li>並行更多的視頻塊渲染，如果希望榨乾系統資源，在確保系統內存充足的情況下並行數選定為 CPU 的線程數</li><li>CPU 主頻對於基準速度影響較大，通常消費級 CPU 主頻很高，可以獲得更佳的性能。</li><li>建議使用 GPU 加速渲染和合成，如果您設備有 GPU 但沒有被使用，請檢查配置項或報告問題。</li><li>採用 SSD（固態硬盤）可以提升並行渲染時的硬盤緩存寫入性能從而降低渲染耗時。</li><li>選擇正確的視頻硬編碼器很重要，默認採用的是軟編碼器（mp4 是 libx264，webm 是 libvpx），如果您有核顯或者獨顯請記得配置他們支持的硬編碼器。</li><li>有些耗時可能來自於網絡文件傳輸，建議將靜態文件服務部署於同一台服務器或從局域網訪問文件服務器。</li><li>降低輸出視頻分辨率和幀率是降低耗時最有效的方法。</li></ul><hr><p>目前手上沒有更好的測試設備，我將以我的個人主機的性能參數作為參考：</p><p>系統：Windows10（在 Linux 系統中性能表現更好）</p><p>CPU: AMD Ryzen 7 3700X（主頻 3.6-4.4GHz 8 核 16 線程）</p><p>GPU: Nvidia GeForce GTX 1660 SUPER（6GB 顯存，支持 NVENC）</p><p>RAM: 16GB（DDR4 2400MHz）</p><p>視頻類型：SVG 動畫+GIF+Lottie 動畫播放</p><p>視頻分辨率：1280x720</p><p>視頻幀率：30</p><p>視頻時長：300s（5 分鐘）</p><p>渲染耗時：61s（1 分鐘）</p><p>實時率：4.844</p><p>並行渲染數：16</p><hr><br><h1><a id="user-content-侷限性" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E5%B1%80%E9%99%90%E6%80%A7"></a>侷限性</h1><ul><li>受制於瀏覽器的<a href="https://gitee.com/link?target=https%3A%2F%2Fw3c.github.io%2Fwebappsec-secure-contexts%2F">安全上下文限制</a>，只能訪問 localhost / 127.0.0.1 或者使用 HTTPS 協議且證書有效的域，從安全角度考慮建議使用本機靜態服務器（live-server 是一個不錯的選擇）。</li><li>在 Mac 系統中使用無頭實驗 API 在會發生崩潰，需要改為兼容渲染模式才能運行，但兼容渲染模式存在諸多問題，不建議在 Mac 系統使用，詳見<a href="https://gitee.com/vblog/web-video-creator#%E5%85%BC%E5%AE%B9%E6%B8%B2%E6%9F%93%E6%A8%A1%E5%BC%8F">兼容渲染模式</a></li><li>WebVideoCreator 是純 ESM 包，無法使用 CommonJS 風格引入，如果依然希望使用 require 引入，請參考：<a href="https://gitee.com/link?target=https%3A%2F%2Fgist.github.com%2Fsindresorhus%2Fa39789f98801d908bbc7ff3ecc99d99c">https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c</a></li></ul><br><h1><a id="user-content-技術實現" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0"></a>技術實現</h1><p>正在編寫中...</p>]]>
            </description>
            <pubDate>Thu, 02 Nov 2023 02:49:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/vblog/web-video-creator</guid>
            <link>https://gitee.com/vblog/web-video-creator</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | vivo 網絡端口安全建設技術實踐]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><section style="letter-spacing: 0.578px;text-wrap: wrap;font-size: 15px;"><section powered-by="xiumi.us" style="text-align: center;font-size: 14px;"><p><span style="color: rgb(0, 82, 255);"><span style="letter-spacing: 0.578px;">揭祕 vivo 互聯網海量服務的研發之路&nbsp;</span><span style="letter-spacing: 0.034em;">報名中👇</span></span></p></section><section powered-by="xiumi.us" style="margin-top: 0.5em;margin-bottom: 0.5em;padding-right: 0.5em;padding-left: 0.5em;text-align: center;"><section style="border-width: 5px;border-style: solid;border-color: rgb(255, 255, 255);display: inline-block;line-height: 0;box-shadow: rgb(102, 102, 102) 0.2em 0.2em 0.5em;width: 394.094px;height: auto;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdev.vivo.com.cn%2Fvdc%2F2023%2Findex.html%23%2F" textvalue="‍‍" linktype="text" imgurl="" tab="outerlink" data-linktype="1"><span class="js_jump_icon h5_image_link"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="384" data-cropsely1="0" data-cropsely2="384" data-ratio="0.21944444444444444" data-s="300,640" src="https://oscimg.oschina.net/oscnet/67276678-97b5-4d79-8ae3-651f665ab878.png" data-type="jpeg" data-w="1080" style="height: 127px;vertical-align: middle;width: 578px;" referrerpolicy="no-referrer"></span></a></section></section></section><section style="font-size: 15px;line-height: 1.6;"><section style="margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(219, 219, 219);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="color: rgba(0, 0, 0, 0.5);font-size: 14px;text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;">作者：vivo 互聯網安全團隊 - Peng Qiankun</p></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: left;" powered-by="xiumi.us"><section style="font-size: 14px;text-align: justify;line-height: 1.8;padding-right: 5px;padding-left: 5px;color: rgb(160, 160, 160);"><p style="text-wrap: wrap;">隨着互聯網業務的快速發展，網絡攻擊的頻率和威脅性也在不斷增加，端口是應用通信中的門戶，它是數據進出應用的必經之路，因此端口安全也逐漸成為了企業內網的重要防線之一，然而網絡端口因其數量龐大、端口開放和關閉的影響評估難度大，業務影響程度高、以及異常識別技術複雜度高等特點給網絡端口安全治理帶來了一定挑戰，如何對端口風險進行有效治理幾乎是每個企業安全團隊在攻擊面管理工作中持續探索的重點項。</p></section></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>一、網絡端口簡介</p></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">在網絡空間中，標記一個服務資源實體最基本的兩個要素就是 IP 和邏輯端口，二者構建服務資源實體的唯一標誌符。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>1. &nbsp;常見的端口分佈劃分：</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">（1）知名端口 (Well-Known Ports)</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">知名端口即眾所周知的端口號，範圍從 0 到 1023，這些端口號一般固定分配給一些服務。比如 21 端口分配給 FTP 服務，25 端口分配給 SMTP(簡單郵件傳輸協議) 服務，80 端口分配給 HTTP 服務，135 端口分配給 RPC(遠程過程調用) 服務等等。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">（2）動態端口 (Dynamic Ports)</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">動態端口的範圍從 1024 到 65535，這些端口號一般不固定分配給某個服務，也就是説許多服務都可以使用這些端口。只要運行的程序向系統提出訪問網絡的申請，那麼系統就可以從這些端口號中分配一個供該程序使用。比如 1024 端口就是分配給第一個向系統發出申請的程序。在關閉程序進程後，就會釋放所佔用的端口號。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>2.&nbsp;&nbsp;另外，端口還會按照協議類型劃分</strong></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">（1）TCP 端口</p><p style="text-wrap: wrap;">&nbsp;</p><p style="text-wrap: wrap;">即傳輸控制協議端口，需要在客戶端和服務器之間建立連接，這樣可以提供可靠的數據傳輸。常見的包括 FTP 服務的 21 端口，Telnet 服務的 23 端口，SMTP 服務的 25 端口，以及 HTTP 服務的 80 端口等等。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;">（2）&nbsp;UDP 端口</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">即用戶數據包協議端口，無需在客戶端和服務器之間建立連接，安全性得不到保障。常見的有 DNS 服務的 53 端口，SNMP(簡單網絡管理協議) 服務的 161 端口，QQ 使用的 8000 和 4000 端口等等。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>3.&nbsp;&nbsp;常用的網絡端口映射表</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.6138917262512769" data-s="300,640" src="https://oscimg.oschina.net/oscnet/affd180b-4e93-4677-a843-2a267a05b99a.png" data-type="png" data-w="979" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">&nbsp;圖 1 常用網絡端口映射表</span></p><section style="margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(219, 219, 219);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="color: rgba(0, 0, 0, 0.5);font-size: 14px;text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;">PS：更多詳細端口規範可查閲：</p><p style="text-wrap: wrap;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.iana.org%2Fassignments%2Fservice-names-port-numbers%2Fservice-names-port-numbers.xhtml" textvalue="http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml" linktype="text" imgurl="" tab="outerlink" data-linktype="2">http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml</a></p></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>二、端口利用方式</p></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">2.1 基於傳輸層的資源耗盡攻擊（DDoS）</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">該攻擊是非常有效的利用小流量衝擊大帶寬的攻擊手段，也是十分常見的攻擊方式。其本質還是利用 TCP 協議的鏈接建立（三次握手）及鏈接關閉（四次揮手）階段機制漏洞進行攻擊，鏈接資源耗盡攻擊方式主要分為以下幾個類別：</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>（1）&nbsp;SYN flood</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">SYN flood 是基於 TCP 協議產生的，它利用三次握手機制，製造多個半連接，消耗服務器的連接數。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.44166666666666665" data-s="300,640" src="https://oscimg.oschina.net/oscnet/8c97a12b-6829-4190-9266-30e097022e4a.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">圖 2&nbsp;SYN flood 示意圖</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">攻擊者偽造源 IP 地址向服務器發送大量的 SYN 報文，請求建立三次握手。由於發送源 IP 是偽造的，所以服務器迴應了 SYN-ACK 報文後，源 IP 並不會再繼續迴應 ACK 報文進行確認。這樣服務器就會維持一個龐大的等待列表，不停地重試發送 SYN-ACK 報文，同時佔用着大量的資源無法釋放。這就導致，被攻擊的服務器被惡意半連接佔滿，不再接受新的 SYN 請求，而合法用戶無法完成三次握手建立 TCP 連接。另外，隨着對抗技術的持續演進，攻擊者通過肉雞或 Ddos 服務發起大規模分佈式真實 IP 集中進行資源耗盡攻擊，此類攻擊成功率更高。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>（2）SYN-ACK Flood</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">通信雙方通過三次握手建立一個 TCP 連接的過程中，SYN-ACK 報文出現在第二次握手中，是用來確認第一次握手的。一方收到 SYN-ACK 報文後，首先會判斷該報文是不是屬於三次握手範疇之內的報文。如果都沒有進行第一次握手就直接收到了第二次握手的報文，那麼就會向對方發送 RST 報文，告知對方其發來報文有誤，不能建立連接。SYN-ACK Flood 攻擊正是利用了這一點，攻擊者利用工具或者操縱殭屍主機，向目標服務器發送大量的 SYN-ACK 報文，這些報文都屬於憑空出現的第二次握手報文，服務器忙於回覆 RST 報文，導致資源耗盡，無法響應正常的請求。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>（3）ACK Flood</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">在 TCP 三次握手的過程中，ACK 報文出現在第三次握手中，用來確認第二次握手中的 SYN-ACK 報文。ACK Flood 攻擊指的是攻擊者利用工具或者操縱殭屍主機，向目標服務器發送大量的 ACK 報文，服務器忙於回覆這些憑空出現的第三次握手報文，導致資源耗盡，無法響應正常的請求。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>（4）FIN/RST Flood</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">TCP 交互過程中還存在 FIN 和 RST 報文，FIN 報文用來關閉 TCP 連接，RST 報文用來斷開 TCP 連接。這兩種報文也可能會被攻擊者利用來發起 DDoS 攻擊，導致目標服務器資源耗盡，無法響應正常的請求。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>（5）TCP connection Flood</strong></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">TCP 是面向連接的協議，通信雙方必須保持連接狀態，並且通過確認、重傳、滑動窗口等機制，保證數據傳輸的可靠性和穩定性。攻擊者利用 TCP 協議的上述特點，在 TCP 連接上做文章，利用 TCP 連接來消耗被攻擊目標的系統資源。例如，攻擊者與被攻擊目標完成三次握手後，立刻發送 FIN 或 RST 報文，釋放本端連接，同時快速發起新的連接，以此來消耗被攻擊目標的系統資源，或者攻擊者與被攻擊目標完成三次握手後，發送很少的報文來維持連接狀態，通過這種異常的 TCP 連接來消耗被攻擊目標的系統資源。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">2.2 基於應用層的資源耗盡攻擊（cc）</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">CC 攻擊的原理就是攻擊者控制某些主機不停地發大量數據包給對方服務器造成服務器資源耗盡，一直到宕機崩潰。CC 主要是用來消耗服務器資源的，每個人都有這樣的體驗：當一個網頁訪問的人數特別多的時候，打開網頁就慢了，CC 就是模擬多個用戶 (多少線程就是多少用戶) 不停地進行訪問那些需要大量數據操作 (就是需要大量 CPU 時間) 的頁面，造成服務器資源的浪費，CPU 長時間處於 100%，永遠都有處理不完的連接直至就網絡擁塞，正常的訪問被中止。以下介紹一些 cc 攻擊的常用變種。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>（1）基於 HTTP-header 慢速 cc 攻擊</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">Web 應用在處理 HTTP 請求之前都要先接收完所有的 HTTP 頭部，因為 HTTP 頭部中包含了一些 Web 應用可能用到的重要的信息。攻擊者利用這點，發起一個 HTTP 請求，一直不停的發送 HTTP 頭部，消耗服務器的連接和內存資源。抓包數據可見，攻擊客戶端與服務器建立 TCP 連接後，每 30 秒才向服務器發送一個 HTTP 頭部，而 Web 服務器再沒接收到 2 個連續的\r\n 時，會認為客戶端沒有發送完頭部，而持續的等等客戶端發送數據。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>（2）基於 HTTP-body 慢速 cc 攻擊</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">攻擊者發送一個 HTTP POST 請求，該請求的 Content-Length 頭部值很大，使得 Web 服務器或代理認為客戶端要發送很大的數據。服務器會保持連接準備接收數據，但攻擊客戶端每次只發送很少量的數據，使該連接一直保持存活，消耗服務器的連接和內存資源。抓包數據可見，攻擊客戶端與服務器建立 TCP 連接後，發送了完整的 HTTP 頭部，POST 方法帶有較大的 Content-Length，然後每 10s 發送一次隨機的參數。服務器因為沒有接收到相應 Content-Length 的 body，而持續的等待客戶端發送數據。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>（3）基於 HTTP-read 慢速 cc 攻擊</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">客戶端與服務器建立連接併發送了一個 HTTP 請求，客戶端發送完整的請求給服務器端，然後一直保持這個連接，以很低的速度讀取 Response，比如很長一段時間客戶端不讀取任何數據，通過發送 Zero Window 到服務器，讓服務器誤以為客戶端很忙，直到連接快超時前才讀取一個字節，以消耗服務器的連接和內存資源。抓包數據可見，客戶端把數據發給服務器後，服務器發送響應時，收到了客戶端的 ZeroWindow 提示（表示自己沒有緩衝區用於接收數據），服務器不得不持續的向客戶端發出 ZeroWindowProbe 包，詢問客戶端是否可以接收數據。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">剖析其原理，本質上還是對任何一個開放了 HTTP 訪問的服務器 HTTP 服務器，先建立了一個連接，指定一個比較大的 content-length，然後以非常低的速度發包，比如 1-10s 發一個字節，然後維持住這個連接不斷開。如果客戶端持續建立這樣的連接，那麼服務器上可用的連接將一點一點被佔滿，從而導致拒絕服務。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">2.3&nbsp;基於端口發起的滲透測試</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">IP 和端口作為應用暴露在公網的唯一入口，攻擊者通常發起滲透測試的起點便是通過掃描目標 IP 上的開放端口來發現系統的漏洞、薄弱點或安全隱患。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">往往服務器系統本身或引入的應用服務就具備一定的脆弱性，攻擊者獲取到目標服務器的端口列表後會逐一去比對自己的武器庫進行漏洞利用嘗試。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">以下是整理的常見端口利用清單及攻擊利用方式：</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.787962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/ffff7d43-b2d6-4387-8509-ca5522e4afd4.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">圖 3 常見的端口利用清單</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>三、基於端口利用的案例</p></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(219, 219, 219);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="color: rgba(0, 0, 0, 0.5);text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;"><strong>Equifax 數據泄露案落幕：七億賠款，索賠期限延長四年</strong></p></section></section></section><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.6046511627906976" data-s="300,640" src="https://oscimg.oschina.net/oscnet/67512766-7039-4567-9399-288fd0ae5076.jpg" data-type="jpeg" data-w="860" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;letter-spacing: 0.034em;color: rgb(136, 136, 136);">圖 4 EQUIFAX （圖片來源：<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fglobalnews.ca%2F" textvalue="globalnews.ca" linktype="text" imgurl="" tab="outerlink" data-linktype="2">globalnews.ca</a>）<br></span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">2017 年 9 月，Equifax 系統遭到黑客攻擊，導致超過 1.45 億美國消費者的個人信息，以及 1520 萬英國居民的記錄和 8000 名加拿大用戶的數據遭到泄露，其中包括姓名、地址、出生日期、身份證號、護照、駕照、信用卡等信息。事件曝光後，Equifax 股票暴跌 30%，相當於蒸發掉 50 億美元市值，成為史上罕見大型數據泄露事件之一。2018 年 12 月，美國國會眾議院的政府改革暨監督委員會發布報告指出，因 Equifax 公司組織架構的缺陷，導致公司部門間的溝通失效，從而致使大量的關鍵系統補丁沒有被及時開發，其中包括一個超 19 個月未做更新的漏洞。最終，黑客對 Equifax 進行了長達 76 天的攻擊，先後 265 次從公司獲取未被加密的數據。該事件最初是由於 Equifax 未修補針對 Apache Struts 的漏洞而導致的，攻擊者利用該漏洞訪問了 Equifax 的數據庫，這個漏洞是通過開放的 80 端口進行攻擊的。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(219, 219, 219);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="color: rgba(0, 0, 0, 0.5);text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;"><strong>愛爾蘭國家醫療保健局數據泄露事件</strong></p></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.6926829268292682" data-s="300,640" src="https://oscimg.oschina.net/oscnet/e6de8c64-5e42-4524-9573-34df37515805.jpg" data-type="jpeg" data-w="615" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">圖 5 愛爾蘭衞生部&nbsp;</span></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">（圖片來源：<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.sohu.com%2Fa%2F480716983_121123851" textvalue="https://www.sohu.com/a/480716983_121123851" linktype="text" imgurl="" tab="outerlink" data-linktype="2">https://www.sohu.com/a/480716983_121123851</a>）</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">愛爾蘭國家醫療保健局（HSE）是負責為愛爾蘭居民提供醫療保健的機構。在 2021 年 5 月，該機構發生了一起數據泄露事件，影響到數百萬個患者的個人信息。該事件起因於攻擊者通過暴露的 VPN 服務端口進行攻擊，成功登錄了 HSE 的 IT 系統。接着，攻擊者開始利用系統漏洞，並最終獲取了 HSE 服務器的管理員權限。攻擊者隨後將一個 WastedLocker 勒索軟件的惡意代碼安裝在服務器上，並要求贖金以釋放數據。在攻擊過程中，攻擊者還利用了 HSE 的 Exchange 電子郵件系統，以及 HSE 員工用於管理患者信息的軟件系統。這些系統中的漏洞使得攻擊者能夠訪問和竊取大量患者的個人信息，包括姓名、出生日期、地址、電話號碼、診斷信息和病歷等。據稱，該事件涉及到的患者數量達到了數百萬。HSE 在發現事件後，立即關閉了受影響的系統，並採取措施保護患者數據的安全。HSE 還與執法部門和網絡安全專家合作，以追查攻擊者的身份和追回數據。截至目前，尚未有人或組織宣稱對此次攻擊負責。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>四、端口風險防護及治理實踐</p></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">4.1&nbsp;端口風險防護</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">無論是 Flood 還是 cc 防護，一般都是藉助一些安全設備及安全設備提供的策略定製能力，流量級的可以依靠運營商提供的抗 D 服務，如雲盾、雲堤，流量清洗服務等，面向應用層的攻擊可以藉助防火牆，WAF，NIDS 等安全設備/節點提供的能力。無論是藉助廠商還是自身建設抗 D 能力，<strong>都需要摸清企業所面臨的資源耗盡風險，一方面理清基礎架構的脆弱點，治理脆弱點；另一方面需要熟悉攻擊利用原理，制定針對性策略來進行異常檢測及攻擊緩解。</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">這裏簡述一些對抗思路，例如上文提到 SYN Flood 攻擊，其本質上是利用 TCP 建立鏈接的機制漏洞，只要持續發送建立鏈接請求，服務端就會進行響應同時在連接池裏記錄一條鏈接，那麼依據該原理，防護思路就很明確了：</p><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>1. 對發起源進行主動認證</strong></p><p style="text-wrap: wrap;"><strong><br></strong></p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="1.5030549898167007" data-s="300,640" src="https://oscimg.oschina.net/oscnet/4f91784c-a5bc-44b3-874a-575b58e44aa2.png" data-type="png" data-w="982" style="font-size: 15px;letter-spacing: 0.578px;text-align: center;text-wrap: wrap;" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="color: rgb(136, 136, 136);font-size: 14px;">圖 6 主動認證示意圖</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: right;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);height: auto;"><section style="text-align: justify;" powered-by="xiumi.us"><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>當連續一段時間內去往目標服務器的 SYN 報文超過告警閾值後，抗 DDoS 設備啓動源認證機制。源認證機制啓動後，抗 DDoS 設備將會代替服務器向客戶端響應帶有正確確認序號的 SYN-ACK 報文；</p></li><li><p>如果這個源是虛假源，是一個不存在的地址或者是存在的地址但卻沒有發送過 SYN 報文，不會做出任何響應；</p></li><li><p>如果這個源是真實客戶端，則會向服務器發送 ACK 報文，對收到的 SYN-ACK 報文進行確認。抗 DDoS 設備收到 ACK 報文後，將該客戶端的源 IP 地址加入白名單。同時，抗 DDoS 設備會向客戶端發送 RST 報文，要求重新建立連接；</p></li><li><p>後續這個客戶端發出的 SYN 報文命中白名單直接通過。</p></li></ol></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>2.&nbsp;首包丟棄</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="1.0574074074074074" data-s="300,640" src="https://oscimg.oschina.net/oscnet/afd85ac0-8ab8-4f3c-874c-b655dcb18041.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="color: rgb(136, 136, 136);font-size: 14px;">圖 7 首包丟棄示意圖</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;">TCP 的可靠性保證除了面向連接（三次/四次握手）之外，還體現在超時與重傳機制。TCP 協議規範要求發送端每發送一個報文，就啓動一個定時器並等待確認信息；如果在定時器超時前還沒有收到確認，就會重傳報文。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">首包丟棄功能就是利用了 TCP 的超時重傳機制，Anti-DDoS 系統對收到的第一個 SYN 報文直接丟棄，然後觀察客戶端是否重傳。如果客戶端重傳了 SYN 報文，再對重傳的 SYN 報文進行源認證，即反彈 SYN-ACK 報文，這樣就可以大大減少反彈報文的數量。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>混合使用，效果更佳</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">實際部署時，一般將首包丟棄和源認證結合使用。防禦 SYN Flood 攻擊時，先通過首包丟棄功能來過濾掉一些攻擊報文，當重傳的 SYN 報文超過告警閾值後，再啓動源認證。這樣就能夠減少反彈的 SYN-ACK 報文的數量，緩解網絡擁塞情況。對於虛假源攻擊，尤其是對於不斷變換源 IP 和源端口的虛假源攻擊，可以達到最佳防禦效果。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>針對連接耗盡場景，其防禦思路可以總結為以下內容：</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">針對此攻擊會耗盡服務器的 TCP 連接資源的特點，對目的 IP 地址的新建連接速率和併發連接數分佈進行統計，當新建連接速率或併發連接數大於閾值時，則觸發對源 IP 地址的相應檢查，當檢查發現異常時，將異常源 IP 地址加入黑名單，切斷其 TCP 流量。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: right;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);height: auto;"><section style="text-align: justify;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>源 IP 地址新建連接速率檢查：啓動源 IP 地址新建連接速率檢查後，如果某個源 IP 地址在檢查週期內發起的 TCP 新建連接數大於閾值，則將該源 IP 地址判定為攻擊源。</p><p><br></p></li><li><p>源 IP 地址併發連接數檢查：啓動源 IP 地址併發連接數檢查後，如果某個源 IP 地址的 TCP 併發連接數大於閾值，則將該源 IP 地址判定為攻擊源。</p><p><br></p></li><li><p>慢速連接速率檢查：啓動慢速連接速率檢查後，統計同一源 IP 地址對同一目的 IP 地址的連接次數，在各統計時間間隔內，如果連續多次連接數相同並超過閾值，則判定為 TCP 慢速連接攻擊。</p><p><br></p></li><li><p>異常會話檢查：如果在檢查週期內，某個源 IP 地址發起的 TCP 異常會話的連接數大於閾值時，則將該源 IP 地址判定為攻擊源。</p></li></ul></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">判定 TCP 異常會話依據如下：</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: right;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);height: auto;"><section style="text-align: justify;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>【空連接檢查】：如果在檢查週期內，在某條 TCP 連接上通過的報文數小於閾值，則判定該連接為異常連接。</p></li><li><p>【重傳會話檢查】：當某條 TCP 連接上重傳報文數量大於閾值時，則判定該連接為異常連接。</p></li><li><p>【慢啓動連接檢查】：當某條 TCP 連接上通過的報文窗口小於閾值時，則判定該連接為異常連接。</p></li><li><p>當異常會話數超過一定數量時，將此源加入黑名單。異常會話數量可配置。</p></li></ul></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>同樣的，應用層 CC 攻擊，按照相對應的原理進行內容檢查，這也是一般 WAF 或 NIDS 設備提供的基礎能力，這裏就不再累述。</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">4.2&nbsp;端口風險治理實踐</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">上段內容有提到的防護思路，理解協議的脆弱性原理再依據攻擊者的視角進行防護措施的定製，則會有比較清晰的防護思路和防護效果，因此在端口安全治理實踐上，我們通過建立常態化端口發現機制以及常態化的漏洞掃描機制，將網絡端口及端口漏洞風險進行持續統一治理，同時建立基於流量的異常識別能力豐富基於行為的異常端口檢測能力，再輔以脆弱性管理以及端口生命週期管理（規範與流程）來形成整個端口安全治理體系。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>1. 建立常態化的端口發現機制</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">使用網絡發現工具進行異常端口識別，設計思路是首先通過 vscheduler 中間件觸發掃描（支持兩種模式：一網段配置表全表網段掃描、二是：指定網段掃描。），調用掃描工具（以 nmap 為例）進行掃描，通過增加兩個異步線程去讀取緩衝區內容以解決緩衝區擁塞問題，通過異步線程進行緩衝區內容讀取以及清理的同時通過錯誤緩衝區內容判斷是否掃描失敗。掃描結果輸出 xml 後通過 dom4j 進行解析，再進行分批保存，避免大事務以及減少 jvm 內存佔用。最後把文件刪除，釋放存儲空間。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.34629629629629627" data-s="300,640" src="https://oscimg.oschina.net/oscnet/70667ba7-7a93-43b8-9c41-cca278403648.jpg" data-type="jpeg" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">圖 8 端口掃描架構圖</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>2.&nbsp;建立常態化漏洞掃描機制</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">結合漏洞掃描工具及端口掃描工具構建自動化漏洞掃描平台，漏掃平台架構設計思路如下圖：</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.6351851851851852" data-s="300,640" src="https://oscimg.oschina.net/oscnet/090f99ff-bff8-4792-9c61-7362919ce184.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="color: rgb(136, 136, 136);font-size: 14px;">圖 9 漏掃平台架構圖</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">該系統架構的核心功能點包括：資產收集、Web 漏洞掃描、依賴包掃描、端口掃描，輔助功能包括：掃描任務管理、風險管理等。</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: right;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);height: auto;"><section style="text-align: justify;" powered-by="xiumi.us"><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>【資產收集】：</p></li><li><p>掃描的目標是公司的網絡資產，沒有資產無法進行掃描，資產不全面掃描的效果也會打折扣，所以平台採集了多種途徑進行資產的採集，力求做到無遺漏，持續豐富採集的手段。</p></li><li><p>【Web 漏洞掃描】：</p><p>用於發現暴露在公網的站點、URL 等 Web 資源是否存在漏洞。<br></p></li><li><p>【依賴包掃描】：</p><p>用於發現線上業務是否使用了高危的 Java 依賴包。</p></li><li><p>【端口掃描】：</p><p>用於發現公司服務器是否對公網開放了高危端口。</p></li><li><p>【掃描任務管理】：</p><p>無論是依賴包掃描、端口掃描，都是通過創建掃描任務的形式來發起的，掃描任務分為立即掃描任務和定時掃描任務兩種類型，用戶可以創建立即掃描任務來一次性執行掃描，也可以創建定時任務來週期性執行掃描。</p></li><li><p>【風險管理】：</p><p>對於掃描出來的 Web、依賴包和端口風險，系統能夠對其處理狀態進行管理，以便安全工程師對風險狀態進行跟蹤和處理。</p></li><li><p>【工單管理】：</p><p>對於掃描出來的 Web、依賴包和端口風險，運營人員可對其創建工單，工單會對接到漏洞管理系統，通過漏洞管理系統的工單體系來對跟蹤風險的處理進程。</p></li></ol></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">常用的漏掃工具：</p><section style="font-size: 15px;line-height: 1.5;"><section style="margin-top: 10px;margin-bottom: 10px;text-align: right;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);height: auto;"><section style="text-align: justify;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>【Nmap】：</p><p>Nmap 是一款常用的網絡發現和安全審計工具，支持多種掃描技術和掃描選項，可以快速掃描本地或遠程計算機上的開放端口和服務。</p></li><li><p>【Masscan】：</p><p>Masscan 是一款高速的端口掃描工具，可以在短時間內掃描數百萬個端口，支持 TCP 和 UDP 掃描，適用於大規模網絡掃描。</p></li><li><p>【Zenmap】：</p><p>Zenmap 是 Nmap 的圖形用戶界面（GUI）版本，可以方便地進行掃描選項配置和結果分析。</p></li><li><p>【Angry IP Scanner】：</p><p>Angry IP Scanner 是一款輕量級的端口掃描工具，支持多線程掃描和快速掃描本地網絡和遠程主機。</p></li><li><p>【SuperScan】：</p><p>SuperScan 是一款 Windows 平台上的端口掃描工具，支持 TCP 和 UDP 掃描、多線程掃描、服務版本識別等功能。</p></li><li><p>【Unicornscan】：</p><p>Unicornscan 是一款高速的網絡掃描工具，支持 TCP、UDP、ICMP 等多種掃描方式和掃描選項。</p></li><li><p>【Netcat】：</p><p>Netcat 是一款多功能的網絡工具，其中包括端口掃描功能，支持 TCP 和 UDP 掃描，可以快速掃描本地或遠程計算機上的開放端口和服務。</p></li></ul></section></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong><br></strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>3.&nbsp;建立基於流量的異常識別能力</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">（1）流量基線學習</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">流量基線一般對五元組進行配置學習，通過對比應用流量基線，發現孤立的端口流量，對比端口開放庫以發現異常開放的端口，另外，可以同步建設告警能力與處置能力，在發現異常的第一時間切斷風險源頭。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.5585106382978723" data-s="300,640" src="https://oscimg.oschina.net/oscnet/7a8242ee-8c70-4d47-8f96-d25e0bc636ca.png" data-type="png" data-w="752" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">圖 10 基線學習</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">流量基線學習的核心表：</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: right;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);height: auto;"><section style="text-align: justify;" powered-by="xiumi.us"><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>【策略快照表】：</p><p>從離線同步過來的每個小時的服務維度的多種策略計算結果</p></li><li><p>【學習配置表】：</p><p>用於存放學習配置，包括各種策略的加解鎖條件（偏離閾值+次數）、偏離告警條件（偏離閾值+次數，可以預留出來，告警下迭代做）</p></li><li><p>【當前策略集】：</p><p>服務維度自定義的的策略集</p></li><li><p>【策略狀態表】：</p><p>記錄各個服務節點的鎖狀態，偏離情況，策略生效時間等</p></li><li><p>【策略目標集】：</p><p>部分策略擁有自己的目標機器/服務結算邏輯，該表用於存放目標範圍，用於定時清理不在目標集的策略</p></li></ol></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">（2）異常檢測</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">通過對上節提到的流量基線結果的數據分析來識別網絡個體或羣體的異常行為，一方面建立行為偏離預警機制，另一方面需要引入一些統計分析模型幫助建立閾值點，在偏離預警機制這塊我們做了一些架構實踐，其邏輯簡單描述如下：</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.6716981132075471" data-s="300,640" src="https://oscimg.oschina.net/oscnet/94966a61-a614-46b5-8441-05525442a106.jpg" data-type="jpeg" data-w="795" style="" referrerpolicy="no-referrer"></p><p><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">行為偏離比對邏輯：</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.42362002567394097" data-s="300,640" src="https://oscimg.oschina.net/oscnet/89ad5fbd-82ed-46d0-9ebc-a7dcfd769801.png" data-type="png" data-w="779" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">總結四個關鍵點分別為：</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: right;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);height: auto;"><section style="text-align: justify;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p><strong>配置文件</strong>，用於描述對應服務的流量特徵</p></li><li><p><strong>上鎖</strong>，參數或配置文件在滿足預設規則條件下或人工幹預下停止動態學習行為</p></li><li><p><strong>解鎖</strong>，參數或配置文件在滿足預設規則條件下或人工幹預下重新開始動態學習行為</p></li><li><p><strong>偏離</strong>，指同一服務下某一時間切片的配置文件與已上鎖的配置文件的參數值對比，發生超過閾值的變化</p></li></ul></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">此外便是閾值的設定問題，通過引入統計模型的使用來幫助我們制定閾值，常用的入侵檢測統計模型有以下幾類：</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: right;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);height: auto;"><section style="text-align: justify;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p><strong>操作模型</strong>：該模型假設異常可通過測量結果與一些固定指標相比較得到，固定指標可以根據經驗值或一段時間內的統計平均得到，舉例來説，在短時間內多次針對某一端口嘗試建立連接失敗，則可能是針對端口的拒絕服務</p></li><li><p><strong>方差</strong>：這也是常用的模型，通過計算參數的方差，設定置信區間，當測量值超過置信區間的範圍時表明可能存在異常</p></li><li><p><strong>多元模型</strong>：操作模型的擴展，通過同時分析多個參數實現異常檢測</p></li><li><p><strong>馬爾柯夫過程模型</strong>：將每種類型的事件定義為系統狀態，用狀態轉移矩陣來表示狀態的變化，當一個事件發生時，如果狀態矩陣中該轉移的概率較小則可能是異常事件</p></li><li><p><strong>時間序列分析</strong>：將流量切片特徵提取出來按照時間排成序列，如果一個新的請求或一個新的請求集合在該時間發生的概率較低，則該事件可能是異常</p></li></ul></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;">在異常識別這塊通常也會引入基於圖的數據分析方法，針對網絡個體和網絡羣體進行流量行為分析來發現異常行為，但應用起來相對較為複雜，也需要較高學習與實踐成本，這塊更多在 NIDS 的應用範疇，在此模塊不再贅述。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">需要提醒的是以上這種方法還是存在一些侷限，如爬蟲類服務，商業廣告類服務因為其服務的特殊性，以上機制比較難進行準確的基線生成，雖説無法解決 100% 的問題，但也能 cover 住大部分的服務類型，同樣的，在這個領域還需要持續探索來提升服務類型的覆蓋率以及異常檢測精度。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>4. 健全脆弱性管理能力實現風險追蹤與閉環</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">端口暴露的最核心問題就是脆弱性利用，因此健全基礎架構的脆弱性管理能力是阻斷外部威脅，有效控制風險的重要手段，我們通過建立統一的脆弱性管理平台來建立業務關係流，脆弱性庫，資產三者的關聯關係，針對脆弱性做到持續發現，持續修復並將脆弱性作為安全告警關聯分析中的重要評價維度。脆弱性管理系統因其安全管理戰略特殊性，此處只能簡單介紹給讀者一些建設思路：</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>脆弱性管理系統核心功能模塊結構</strong><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="1.1944444444444444" data-s="300,640" src="https://oscimg.oschina.net/oscnet/1927c6cb-f74d-4bff-ac4b-21a4364a1376.png" data-type="png" data-w="936" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">另外脆弱性關聯分析 AVC 是脆弱性管理系統的核心功能，讀者可以從以下評價維度進行建設實踐：</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.47129629629629627" data-s="300,640" src="https://oscimg.oschina.net/oscnet/4effb9d9-df3a-4e35-9085-79d4b7e1ee29.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>5.&nbsp;完善端口生命週期管理（規範與流程）</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>（1）制定端口管理規範</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us">規範原則</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: right;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);height: auto;"><section style="text-align: justify;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p><strong>最小權限原則</strong>：端口開放遵循最小權限原則，只允許開放運行 http 和 https 的 80/443 端口，其他對外開放的端口必須有合理的業務理由，並且應該只開放業務需要的最小端口集合，由端口使用者提出工作聯絡單進行申請經審批同意後方可開放。</p></li><li><p><strong>可審計原則</strong>：所有端口開放都必須有可追溯的對應申請依據、安全性評估依據、審批依據，不允許私自開放端口。</p></li><li><p><strong>閉環原則</strong>：端口開放應實施閉環管理，在業務不再需要時，應及時關閉端口。</p></li></ul></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">對端口進行明確定義</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.325" data-s="300,640" src="https://oscimg.oschina.net/oscnet/8fa433a8-b65b-4250-93e5-b09f8e6d64d1.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">圖 11 端口定義示例</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">規範內容可包含端口申請規範，端口使用規範，端口關閉規範以及明確的處罰規定。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>（2）端口生命週期管理</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">實現從端口申請到端口關閉全流程管理</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: justify;line-height: 1.8;padding-right: 5px;padding-left: 5px;" powered-by="xiumi.us"><p style="text-wrap: wrap;">應用申請 → 端口記錄→ 開牆（映射）→ 安全節點納管 → 流量反饋 → 主動關閉 → 端口映射記錄清除→ 安全節點卸載→ 端口資源池回收</p></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>（3）持續評估</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">結合異常端口發現機制和端口開放庫以及相關流程建立起持續端口風險評估機制，用以保障規範以及風險處置有效性的落地。</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>五、總結</p></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">端口作為應用對外暴露的主要入口，是應用暴露在公網上的標識，因此端口安全建設是企業信息安全防護體系中的重要一環，安全團隊需要詳細瞭解其內部網絡中使用的所有端口，以及開放和關閉的端口數量和情況，在理解協議的脆弱性原理基礎上制定合適的安全策略和措施。同時再安全策略和措施制定的過程中，通過對各類端口掃描工具的使用，安全團隊可以快速獲取目標網絡中的端口開放情況。然後根據掃描結果，採取合適的安全策略和措施，禁止不必要端口的開放或者採取過濾、加密等方式對端口進行保護。在技術實踐上，建設常態化端口發現機制以及常態化的漏洞掃描機制，將網絡端口及端口漏洞風險進行持續統一治理，同時建立基於流量的異常識別能力豐富基於行為的異常端口檢測能力，再輔以脆弱性管理以及端口生命週期管理（規範與流程）來形成整個端口安全治理體系。另外值得強調的是，全員網絡安全意識的水位決定整體安全態勢的下限，個人行為和錯誤配置通常是網絡漏洞的一大原因，因此安全管理團隊需要持續加強內部員工的網絡安全教育和培訓，提高其網絡安全意識和知識水平，建立全員參與的安全意識文化。總的來説，可以通過規範，流程，技術和人員意識培訓來構建全面的網絡端口風險治理體系。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="color: rgb(65, 95, 255);" powered-by="xiumi.us"><p style="text-wrap: wrap;">參考文獻：</p></section><section powered-by="xiumi.us"><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p><span style="font-size: 14px;">《網絡端口安全治理的研究與實踐》（姜雲飛，高國權，張全超，2019）</span></p></li><li><p><span style="font-size: 14px;">《基於漏洞掃描的網絡端口安全治理研究》（黃珂，楊明，張鵬飛，2017）</span></p></li><li><p><span style="font-size: 14px;">《基於流量監測的網絡端口安全治理技術研究》（胡彩玲，申偉，周婷婷，2016）</span></p></li><li><p><span style="font-size: 14px;">《網絡端口安全治理技術研究》（程顯霞，鄭曉寧，2014）</span></p></li><li><p><span style="font-size: 14px;">《網絡端口安全治理策略研究》（朱紹軍，李彥霞，陳琳琳，2013）</span></p></li><li><p><span style="font-size: 14px;">vivo 互聯網端口開放管理規範</span></p></li><li><p><span style="font-size: 14px;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.csdn.net%2FJackMaF%2Farticle%2Fdetails%2F123676195" textvalue="什麼是網絡端口？" linktype="text" imgurl="" tab="outerlink" data-linktype="2">什麼是網絡端口？</a></span></p></li><li><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cnblogs.com%2FShepherdzhao%2Fp%2F15219310.html" textvalue="【漏洞分析】DDOS 攻防分析（四）——TCP 篇" linktype="text" imgurl="" tab="outerlink" data-linktype="2"><span style="font-size: 14px;">【漏洞分析】DDOS 攻防分析（四）——TCP 篇</span></a><span style="font-size: 14px;"></span></p></li><li><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cnblogs.com%2Fkenshinobiy%2Fp%2F10215913.html" textvalue="CC 攻擊原理及防範方法和如何防範 CC 攻擊&nbsp;" linktype="text" imgurl="" tab="outerlink" data-linktype="2"><span style="font-size: 14px;">CC 攻擊原理及防範方法和如何防範 CC 攻擊&nbsp;</span></a><span style="font-size: 14px;"></span></p></li><li><p><span style="font-size: 14px;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.csdn.net%2Fweixin_50464560%2Farticle%2Fdetails%2F118962399" textvalue="常用的端口攻擊" linktype="text" imgurl="" tab="outerlink" data-linktype="2">常用的端口攻擊</a></span></p></li><li><p><span style="font-size: 14px;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fforum.huawei.com%2Fenterprise%2Fzh%2Fthread%2F580895552575520769" textvalue="TCP 連接耗盡攻擊與防禦原理" linktype="text" imgurl="" tab="outerlink" data-linktype="2">TCP 連接耗盡攻擊與防禦原理</a></span></p></li><li><p><span style="font-size: 14px;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.freebuf.com%2Farticles%2Fnetwork%2F258061.html" textvalue="DDOS 之 TCP 連接耗盡攻擊與防禦" linktype="text" imgurl="" tab="outerlink" data-linktype="2">DDOS 之 TCP 連接耗盡攻擊與防禦</a></span></p></li></ol><p style="text-wrap: wrap;"><br></p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-right: 0%;margin-bottom: 20px;margin-left: 0%;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: middle;width: 40%;align-self: center;flex: 0 0 auto;"><section style="margin-top: 0.5em;margin-bottom: 0.5em;" powered-by="xiumi.us"><section style="border-top: 1px dotted rgb(90, 98, 114);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section></section><section style="display: inline-block;vertical-align: middle;width: 20%;align-self: center;flex: 0 0 auto;"><section style="text-align: center;color: rgb(45, 66, 87);font-size: 11px;" powered-by="xiumi.us"><p>END</p></section></section><section style="display: inline-block;vertical-align: middle;width: 40%;align-self: center;flex: 0 0 auto;"><section style="margin-top: 0.5em;margin-bottom: 0.5em;" powered-by="xiumi.us"><section style="border-top: 1px dotted rgb(90, 98, 114);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section></section></section><section style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><section style="padding-left: 1em;padding-right: 1em;display: inline-block;text-align: center;"><span style="display: inline-block;padding: 0.3em 0.5em;border-radius: 0.5em;background-color: rgb(65, 94, 255);color: rgb(255, 255, 255);" title="" opera-tn-ra-cell="_$.pages:0.layers:0.comps:224.title1"><p>猜你喜歡</p></span></section><section style="border-width: 1px;border-style: solid;border-color: transparent;margin-top: -1em;padding: 20px 10px 10px;background-color: rgb(239, 239, 239);text-align: center;"><section style="font-size: 14px;text-align: left;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247497432%26idx%3D1%26sn%3Df372c83043de8da859cec802976e371a%26chksm%3Debdb864adcac0f5cf753444f2c9198b08d6b0831e66e4b5b6405a1eaa32e53b8747aa9dc1217%26scene%3D21%23wechat_redirect" textvalue="Dubbo 路由及負載均衡性能優化" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">Dubbo 路由及負載均衡性能優化</a></p></li><li><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247497376%26idx%3D1%26sn%3D5795a683e52f70384a13b34aa3daf731%26chksm%3Debdb8632dcac0f2468a461db09d8de6219af346e51436b91e6c946ee8b37e6ae8175b2f5d55e%26scene%3D21%23wechat_redirect" textvalue="深入理解 Netty FastThreadLocal" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">深入理解 Netty FastThreadLocal</a></p></li><li><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247497343%26idx%3D1%26sn%3D959b66ceb9a8c2fe060b6981b41a807e%26chksm%3Debdb86eddcac0ffb229636ec51ec94433af75c7bc58aaa5ae52b4a2bf6a2d6d2ab11583b3174%26scene%3D21%23wechat_redirect" textvalue="記一次 Redis Cluster Pipeline 導致的死鎖問題" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">記一次 Redis Cluster Pipeline 導致的死鎖問題</a><br></p></li></ul></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="MzI4NjY4MTU5Nw==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt45QXJZicZ9gaNU2mRSlvqhQd94MJ7oQh4QFj1ibPV66xnUiaKoicSatwaGXepL5sBDSDLEckicX1ttibHg/0?wx_fmt=png" data-nickname="vivo 互聯網技術" data-alias="vivoVMIC" data-signature="分享 vivo 互聯網技術乾貨與沙龍活動，推薦最新行業動態與熱門會議。" data-from="0" data-is_biz_ban="0"></mp-common-profile></section></section><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公眾號 - vivo 互聯網技術（vivoVMIC）。<br>如有侵權，請聯繫 support@oschina.cn 刪除。<br>本文參與「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源創計劃</a>」，歡迎正在閲讀的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 02 Nov 2023 02:43:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/vivotech/blog/10140381</guid>
            <link>https://my.oschina.net/vivotech/blog/10140381</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[TUI 庫開發商 Charm 融資 600 萬，打造下一代命令行]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>TUI 庫開發商 Charm <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcharm.sh%2Fblog%2Fthe-next-generation%2F" target="_blank">宣佈融資 600 萬美金</a></u>。Charm 專注於命令行工具開發，目標是讓命令行變得充滿魅力、功能強大、有趣和現代化。</p><p><img src="https://static.oschina.net/uploads/space/2023/1103/190910_uqZD_2720166.png" referrerpolicy="no-referrer"></p><p>從 Charm 的 GitHub 開源主頁看到，其最歡迎的項目均採用 Go 語言開發。</p><p>簡單列舉幾個：</p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcharmbracelet%2Fbubbletea%23bubble-tea" target="_blank">Bubble Tea</a>：功能強大的輕量級 TUI 框架</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcharmbracelet%2Fgum%23gum" target="_blank">Gum</a>：界面優雅的 Shell 腳本工具</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcharmbracelet%2Fvhs%23vhs" target="_blank">VHS</a>：CLI 錄製工具</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcharmbracelet%2Fglow%23glow" target="_blank">Glow</a>：命令行界面 Markdown 渲染工具</li></ul><p><img height="1242" src="https://static.oschina.net/uploads/space/2023/1103/192626_xjM1_2720166.png" width="3114" referrerpolicy="no-referrer"></p><p><em>△&nbsp;<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcharmbracelet" target="_blank">https://github.com/charmbracelet</a></u></em></p><p>Charm 公司認為，在過去的 30 多年裏，命令行一直是無處不在的計算平台，部分原因歸功於<strong>它是專注於做好一件事的簡單工具</strong>，並且能夠輕鬆地將這些工具組合成獨特的解決方案，以及有大量的現有命令行程序庫可供使用。這些特性與當代互聯網及其孤立的數據、缺乏可組合性以及大型、不透明的解決方案形成了鮮明對比，後者往往包含大量的跟蹤、廣告和其他「黑暗面」。</p><p>在他們看來，命令行是網絡和封閉移動平台的健康替代品。當前更新的時機也已經成熟，重點是打造以用戶為中心的設計和加密的自託管網絡服務。他們希望為下一個 30 年打造命令行平台。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 01 Nov 2023 11:45:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264838</guid>
            <link>https://www.oschina.net/news/264838</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[數據庫國產化，是一門圈錢的生意嗎？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>最近兩天，技術圈掀起了一場關於數據庫國產化的大討論，國產數據庫到底是真自研還是來套殼圈錢的？</p><p><span style="background-color:#ffffff; color:#333333">開源 PG 發行版&nbsp;</span>Pigsty 創始人馮若航在微信公眾號「非法加馮」發佈的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fvh1JE_BdaLetWtt5vvPDDw" target="_blank">《數據庫真被卡脖子了嗎？》</a>一文認為，<strong>很多「國產數據庫」就是爛泥扶不上牆的殘次品。<span style="background-color:#ffffff; color:#3f3f3f">把開源免費的軟件包裝一下，用 Oracle 的價格賣給你！</span></strong></p><p>「真正自研的數據庫出現兩極分化：極少數真正有創新貢獻與使用價值的產品愛惜羽毛，不會刻意標榜「國產」。而剩下的大多數往往多是閉門造車、技術落後的土法數據庫，或者開源古早分叉、負向閹割出來的劣質輪子。國產數據庫並非沒有踏實做事的好公司，只是「國產」這個標籤被大量鑽入數據庫領域的平庸低劣產品污染。</p><p>「更讓人扼腕的是劣幣驅逐良幣。本已稀缺的數據庫研發人力經過這樣的揮霍，反而會真正卡死國內數據庫產業的脖子。特別是核心的 OLTP/關係型數據庫領域因為開源的存在，已經不缺足夠好用的內核了。能把 PostgreSQL / MySQL 用好並提供服務支持，遠比自欺欺人的大煉內核要有價值的多。」</p><p>馮若航認為，業界已經不缺足夠完美的數據庫內核了 —— 比如 PostgreSQL，功能完備且開源免費（BSD-Like）。無數」國產數據庫「基於 PG 換皮套殼魔改而成。如果説誰在數據庫內核上被卡了脖子，那肯定是吃飽了撐着給噎着的。</p><p>但數據庫國產化又是必要的，正如微信公眾號「白鱔的洞穴」發佈的文章<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F1btCxNVkBOirr_O05P__YA" target="_blank">《數據庫國產化是在套殼圈錢嗎》</a>所言：「<strong>一旦<span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">上了老美的黑名單，你想買 Oracle 人家也不賣了。」</span></strong></p><p><strong>文章還認為，利用國產數據庫去圈錢真的有點腦洞太大了。</strong></p><p>「想要圈錢的人，沒必要去搞數據庫，有大量的可以更好圈錢的項目可以去折騰。我所見到的國產數據庫的朋友，大多數還是有些情懷的。就像十年前我見到南大通用當時的董事長崔維力的時候他所説的想幹點點天元的事情的時候的感受一樣，只有有點情懷的人才會去幹這種十分長線的、不知道啥時候能掙着錢的買賣。</p><p>」我認識的朋友中不乏一些在數據庫領域中很成功的人，自從入圈自研數據庫後，雖然也看到他們幾個億幾個億的融資，不過算下來，這些人乾的基本上都是過路財神的活，融來的錢很快就填到無底洞似的研發與營銷中了。雖然如此，國產數據庫企業的技術人員待遇並不高，除了幾家財大氣粗，能夠長期大投入的企業外，大多數國產數據庫企業的研發骨幹和管理高層並沒有像有些人所想象的那樣賺得盆滿缽滿。圈錢之説其實是不成立的，我看到的反而，是有不少國產數據庫的從業人員十年清貧，依然癡心不改。這種人哪怕我們不去尊重，也沒必要去詆譭他們。」</p><p>去 IOE 已經説了很多年了，真要操作起來，不光是嘴上喊喊口號的事。薛曉剛在其公眾號」四海內皆兄弟「發文<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Feetz1aAfa_oogr9keAjJbg" target="_blank">《替換數據庫的代價與真假國產》</a>認為，<strong>從開發、運維以及成本的角度來看，放棄 Oracle，替換成國產數據庫並不容易。</strong></p><p>」國產也有好的，可能只佔少數吧。這些集中在 2016 年以前從事這個行業的，那可能是真的做。就是這個不被看好的時候就做的是還可以的，最起碼不是騙人的。至於做的好壞另説啊。總之不是在有了政策之後才冒出來的搶錢就行。但凡是大家一窩蜂的去做的，基本就是亂來了。</p><p>」<span style="background-color:#ffffff; color:#000000">日常我看到不少手機用蘋果的，筆記本用 MAC 的，開着特斯拉或者用 IPad 的，對我説要替換某某國產數據庫</span>。這些人可能不參與開發，不參與運維，不參與採購，屬於站着説話不腰疼的。這些成本誰出？出了問題你上不？不少人連鎖是什麼都搞不清楚就來説數據庫選型這不是外行指揮內行嗎？「</p><p><strong>關於數據庫國產化替代，你覺得有必要嗎？至於國產化的路子，應該重新開發數據庫內核，還是基於現有開源數據庫搞國產化？數據庫自研與否，其實並不難分辨，為什麼還會出現那麼多圈錢的企業？在評論區留下你的看法吧~</strong></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 01 Nov 2023 11:04:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3859945/blog/10140824</guid>
            <link>https://my.oschina.net/u/3859945/blog/10140824</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[KubeEdge-Ianvs v0.2 發佈：終身學習支持非結構化場景]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>本文分享自華為雲社區《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F414430%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" target="_blank" rel="nofollow">KubeEdge-Ianvs v0.2 發佈：終身學習支持非結構化場景</a>》，作者： 雲容器大未來。</p><p>在邊緣計算的浪潮中，AI 是邊緣雲乃至分佈式雲中最重要的應用。隨着邊緣設備的廣泛使用和性能提升，將人工智能相關的部分任務部署到邊緣設備已經成為必然趨勢。KubeEdge-Ianvs 子項目，作為業界首個分佈式協同 AI 基準測試平台，基於 KubeEdge-Sedna 為算法及服務開發者提供全場景可擴展的分佈式協同 AI 基準測試，以研發、衡量和優化分佈式協同 AI 系統。</p><p>然而在邊緣設備中部署靜態的 AI 模型往往不足以應對複雜多變的真實世界環境，因此終身學習能力對於邊緣 AI 模型來説變得越來越重要。為了方便邊緣 AI 算法研究者開發及測試終身學習算法在真實世界環境中的效果，KubeEdge-Ianvs 在新版本的更新中發佈了支持終身學習範式的相關算法的研發與測試功能。</p><p>本篇文章為大家闡釋相關<strong>背景</strong>和<strong>Ianvs 終身學習架構</strong>，並<strong>以 Ianvs 雲機器人終身學習測試</strong>為例對 Ianvs 終身學習的特性進行介紹。歡迎關注 Ianvs 項目，持續獲得第一手獨家公開數據集與完善基準測試配套。</p><p>開源項目 GitHub 地址：https://github.com/kubeedge/ianvs</p><span id="OSC_h1_1"></span><h1>一、背景</h1><span id="OSC_h2_2"></span><h2>1.1 終身學習能力對邊緣模型越來越重要</h2><p>邊緣設備所處的環境通常是不穩定的，環境變化會導致數據分佈的大幅變化，即數據漂移。數據漂移會顯著降低模型準確性。為瞭解決數據漂移問題，邊緣設備需要具備動態更新模型的能力，以適應環境變化。下圖展示了一個典型的終身學習算法流程框架。在該框架中，終身學習任務被定義為：已處理 N 個任務，將陸續處理 M 個任務。如何維護知識庫並利用其中的模型處理這些任務是關鍵。</p><p><img alt="圖片" src="https://static001.geekbang.org/infoq/28/28a09244308b8b649ede40334d8c9c5d.png" referrerpolicy="no-referrer"></p><p>終身學習的流程分為四步，首先根據之前已處理的 N 個任務初始化雲端的知識庫中的已知任務處理模型；然後在遇到新的任務時，從雲端知識庫中選取合適的模型部署到邊緣端處理任務，如果新任務是已知的任務則更新原來的模型，如果遇到了未知任務則重新訓練新的模型用於處理該任務；在邊緣端處理好該任務後，對雲端知識庫進行更新；最後遇到新任務時重複前兩步操作。通過以上流程可以確保邊緣部署的模型具備終身學習的能力，從而可以應對數據漂移等問題帶來的影響。</p><span id="OSC_h2_3"></span><h2>1.2 業界缺少合適的終身學習測試工具</h2><p>目前終身學習算法相關測試工具發展較慢，目前比較成熟的測試工具只有 ContinualAI 推出的 Avalanche。Avalanche 支持的特性如下：</p><p>&nbsp;</p><p><img alt="圖片" src="https://static001.geekbang.org/infoq/92/92b1cb696aac2abe74896dc16aeefc09.png" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p>Avalanche 支持的特性非常豐富，但是對於終身學習算法開發者來説 Avalanche 還存在一些侷限性：</p><p>&nbsp;</p><ul><li><strong>未能覆蓋終身學習全生命週期算法</strong>：支持的場景主要侷限於增量學習等場景，而終身學習中任務定義、分配以及未知任務識別等流程無法體現在該 benchmark 中。</li><li><strong>缺乏配套真實世界數據集</strong>：配套的數據集主要包括 Split-MNIST、Cifar10 等學術界常用的玩具測試集，缺乏適用的真實世界數據集及配套算法。</li><li><strong>研發算法難以落地</strong>：Avalanche 更多面向終身學習算法的測試實驗，並沒有考慮未來將算法落地部署的需求。</li></ul><p>&nbsp;</p><div><p>因此目前業界亟需一個更好的終身學習測試 benchmarking 工具，Ianvs 發佈的非結構化終身學習新特性可以很好的解決上述問題。</p><span id="OSC_h1_4"></span><h1>二、lanvs 終身學習架構</h1><span id="OSC_h2_5"></span><h2>2.1 Ianvs 終身學習優勢</h2><p>終身學習近年來得到了越來越多的關注，越來越多的邊緣智能從業者認識到了終身學習的重要性。但是終身學習相比其他 AI 算法來説有着更高的研究門檻，經過我們的調研發現終身學習研發存在<strong>模型訓練流程複雜、算法效果難以衡量</strong>和<strong>算法落地應用困難</strong>三大挑戰。</p><p><strong>第一個挑戰是終身學習模型訓練流程較為複雜</strong>，比如對於一個剛入門終身學習的同學來説，可能對終身學習算法流程中的未知任務識別模塊比較感興趣，但是要想完整實現終身學習還需要填補任務定義、任務分配等模塊，而這對於剛入門的同學不太友好，想復現別人的工作還需要去額外完成其他終身學習模塊。</p><p>針對這一挑戰，KubeEdge-Ianvs 中對終身學習全生命週期的各個模塊都進行了設計，包括並不限於任務定義、任務分配、未知任務識別和未知任務處理等多個終身學習核心算法模塊，各個模塊之間是解耦合的，用戶可以只研究自己感興趣的模塊，其他模塊採用默認配置即可跑通終身學習實驗。</p><p><strong>第二個挑戰是終身學習算法效果衡量困難</strong>，不同論文中的終身學習算法由於其測試流程不一樣難以比較其工作的優劣。同時大部分論文的工作都是在 MNIST、CIFAR10 這些非真實數據集上進行的實驗，由於缺乏在真實世界數據集上的測試，算法在現實世界中的實際應用效果往往要大打折扣。</p><p>針對這一挑戰，KubeEdge-Ianvs 中對終身學習的測試流程進行了統一，提供 BWT、FWT 等公認的終身學習系統指標，方便衡量算法效果。同時 KubeEdge-Ianvs 開源了 Cloud-Robotics 等真實世界終身學習數據集，並配套了對應的運行樣例，用戶可以直接開箱使用該真實世界數據集測試自己提出的算法的效果。</p><p><strong>第三個挑戰是終身學習算法落地較為困難</strong>，算法研發與實際部署之間存在一定鴻溝。用戶訓練好的模型需要進一步封裝才能實際在生產環境上使用。</p><p>針對這一挑戰，KubeEdge-Ianvs 在開發時就考慮到了和其姊妹項目 KubeEdge-Sedna 開源服務平台是配套兼容關係，因此在 KubeEdge-Ianvs 上研發的終身學習算法可以直接遷移到 KubeEdge-Sedna 平台上實現落地部署，解決了從研發到落地最後一公里的問題。</p><p>總而言之，Ianvs 終身學習優勢包括：</p><ul><li><p><strong>覆蓋終身學習全生命週期</strong>，包括任務定義、任務分配、未知任務識別和未知任務處理等多個模塊，各個模塊是解耦合的；</p></li><li><p><strong>統一化的測試流程</strong>，系統內置權威的終身學習測試指標，並且支持測試結果的可視化；並提供真實世界數據集用於終身學習測試，能更好測試終身學習算法在真實環境的效果；</p></li><li><p><strong>和</strong><span>&nbsp;</span><strong>KubeEdge-Sedna 終身學習相兼容</strong>，研發算法可以快捷遷移到 Sedna 上實現落地部署。</p></li></ul><span id="OSC_h2_6"></span><h2>2.2 Ianvs 終身學習新特性</h2><p>Ianvs 在去年發佈的 0.1.0 版本中已具備支持單任務學習範式和增量學習範式的算法研發與測試，在新版的 Ianvs 中增加了支持對終身學習範式的相關算法的研發與測試的功能，同時也為終身學習算法測試提供了新的開源數據集。主要新特性如下：</p><span id="OSC_h3_7"></span><h3>特性一：覆蓋終身學習全生命週期</h3><p>Ianvs 終身學習具體架構如下圖所示，主要包括任務定義、任務分配、未知任務識別和未知任務處理等模塊，覆蓋終身學習全生命週期。</p><p>&nbsp;</p><p><img alt="圖片" src="https://static001.geekbang.org/infoq/60/6050b9d43e911475220f06f46c31a403.png" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p>對於已處理任務，Ianvs 通過任務定義模塊，將已知任務抽象成若干個模型存儲進雲端知識庫中。在遇到新任務時，Ianvs 首先通過未知任務識別模塊判斷推理樣本屬於未知任務還是已知任務。若是已知任務，則從雲端知識庫中調度對應模型部署在邊側處理該任務，同時基於已知任務樣本對模型進行增量更新。若是未知任務，則 Ianvs 通過未知任務處理模塊處理該任務，利用外部系統標註並重新訓練新的模型用於處理該任務。處理完成後，新的任務模型或是更新後的已知任務模型再重新整合至雲端知識庫中。</p><p>為了方便初學者使用 Ianvs，在 Ianvs 倉庫中的 examples/robot/ 文件夾下提供了一個可以直接運行的樣例 https://github.com/kubeedge/ianvs/examples/robot/ ， 詳細的教程在第三節。</p><span id="OSC_h3_8"></span><h3>特性二：統一化的測試流程和真實世界數據集</h3><p>Ianvs 對終身學習測試流程進行了統一，主要參考了 NIPS2017 的論文 「Gradient Episodic Memory for Continual Learning」，復現了其中提出的 BWT 和 FWT 指標，用於評價終身學習算法的抗遺忘能力和未知任務泛化能力。</p><p>Ianvs 還開源了 Cloud-Robotics 等真實世界數據集，並提供了配套的可以開箱即用的實驗代碼，幫助用戶快速上手 Ianvs 終身學習。</p><p>數據集官網鏈接：https://kubeedge-ianvs.github.io/</p><p><img src="https://static001.geekbang.org/infoq/1e/1e8f57b13470035bc9206eb90fe80ec0.png" referrerpolicy="no-referrer"></p><span id="OSC_h3_9"></span><h3>特性三：支持快捷落地部署</h3><p>如下圖所示，Ianvs 中終身學習算法實現的組件與 Sedna 上終身學習算法實現的組件是相兼容的，因此在 Ianvs 上研發測試的算法可以無障礙遷移部署到 Sedna 上，方便相關從業人員實地部署算法。</p><p><img alt="圖片" src="https://static001.geekbang.org/infoq/91/913df4ee6292b224808ec6b3e7e3032f.png" referrerpolicy="no-referrer"></p><span id="OSC_h1_10"></span><h1>三、lanvs 終身學習快速教，程</h1><p>在這章中我們通過運行 Ianvs 終身學習的 cloud-robotics 樣例向大家講解 Ianvs 終身學習的基本流程。Ianvs 安裝流程以及終身學習更詳細的介紹可以參考：Ianvs-lifelong-learning-tutorial</p><p>相關鏈接：https://ianvs.readthedocs.io/en/latest/</p><p>1）首先我們需要配置好 Cloud-Robotics 的數據集，先創建數據集的文件夾，注意如果你把數據集放到別的位置，本教程中的部分路徑配置也要一併修改。</p><blockquote><p>mkdir /data</p><p>&nbsp;</p><p>cd /data</p><p>&nbsp;</p><p>mkdir datasets</p><p>&nbsp;</p><p>cd datasets</p></blockquote><p>Cloud-Robotics 數據集可以根據該數據集專屬網站的指示操作獲得，鏈接：https://kubeedge-ianvs.github.io/download.html</p><p>2）下載完成後解壓數據集：unzip cloud-robotics.zip</p><p>3）配置好數據集後，我們可以準備運行示例代碼了。Cloud-Robotics 示例運行的代碼放在 /ianvs/project/ianvs/examples/robot/lifelong_learning_bench/ 下，我們首先要配置 python 路徑（這裏如果 Ianvs 安裝位置不一樣的話需要更改路徑）：</p><blockquote><p>export PYTHONPATH=$PYTHONPATH:/ianvs/project/ianvs/examples/robot/lifelong_learning_bench/testalgorithms/rfnet/RFNet</p></blockquote><p>4）然後我們檢查一下 yaml 文件的信息：</p><p><img alt="圖片" src="https://static001.geekbang.org/infoq/4d/4dafcc020a4950e7bd1c6505e75cf829.png" referrerpolicy="no-referrer"></p><p>5）上圖 benchmarkjob.yaml 中 workplace 是存放模型訓練輸出的路徑，可以改成你需要的路徑。</p><p><img alt="圖片" src="https://static001.geekbang.org/infoq/ae/aebaf7029f5459ef0e0e4458cff0d8b8.png" referrerpolicy="no-referrer"></p><p>6）上圖 testenv-robot.yaml 中 train_url 和 test_url 是數據集索引的路徑，如果你的數據集存放位置和教程不一樣，則需要修改 train_url 和 test_url 的路徑。</p><p><img alt="圖片" src="https://static001.geekbang.org/infoq/da/da7c61c3e5bd4110f1bb82f3110c86d8.png" referrerpolicy="no-referrer"></p><p>7）在上圖 rfnet_algorithm.yaml 中可以根據你的需求添加測試的<strong>終身學習算法</strong>，比如任務定義、任務分配等算法。本樣例中提供了一個簡單的示例。</p><p>8）其他的配置文件暫時沒有需要調整的。接下來我們就可以運行示例代碼了：</p><pre>cd /ianvs/project/ianvs
ianvs -f examples/robot/lifelong_learning_bench/benchmarkingjob.yaml</pre><p><img alt="圖片" src="https://static001.geekbang.org/infoq/90/9089fecf78972336f37aaf91c5c30e8a.png" referrerpolicy="no-referrer"></p><p>在模型終身學習任務結束後你可以看到以下內容，包括 BWT、FWT 等終身學習系統衡量指標：</p><p><img alt="圖片" src="https://static001.geekbang.org/infoq/6a/6a86722ddf7ffdf6e21531931fd3c9e6.png" referrerpolicy="no-referrer"></p><p>9）出現以上顯示結果，則成功跑通了一個 Ianvs 終身學習樣例！</p><p>如果讀者對於本次版本發佈的更多細節感興趣，歡迎查閲 Ianvs v0.2 Release Note：https://github.com/kubeedge/ianvs/releases/tag/v0.2.0</p><p>後續 KubeEdge SIG AI 將發佈系列文章，陸續具體介紹終身學習全面升級的特性，歡迎各位讀者繼續關注社區動態。</p><span id="OSC_h3_11"></span><h3>相關鏈接</h3><p><strong>[1]</strong><span>&nbsp;</span>開源項目 GitHub 地址：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkubeedge%2Fianvs" rel="nofollow" target="_blank">https://github.com/kubeedge/ianvs</a></u></p><p><strong>[2]<span>&nbsp;</span></strong>數據集官網鏈接：<u>https://kubeedge-ianvs.github.io/</u></p><p><strong>[3]<span>&nbsp;</span></strong>Ianvs 安裝流程以及終身學習更詳細的介紹鏈接：<u>https://ianvs.readthedocs.io/en/latest/</u></p><p><strong>[4]<span>&nbsp;</span></strong>Cloud-Robotics 數據集：<u><strong>https://kubeedge-ianvs.github.io/download.html</strong></u></p><p><strong>[5]<span>&nbsp;</span></strong>Ianvs v0.2 Release Note：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkubeedge%2Fianvs%2Freleases%2Ftag%2Fv0.2.0" rel="nofollow" target="_blank">https://github.com/kubeedge/ianvs/releases/tag/v0.2.0</a></u></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" rel="nofollow" target="_blank"><strong>點擊關注，第一時間瞭解華為雲新鮮技術~</strong></a></p></div></div>
                                    ]]>
            </description>
            <pubDate>Wed, 01 Nov 2023 09:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4526289/blog/10140642</guid>
            <link>https://my.oschina.net/u/4526289/blog/10140642</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[小米 HyperOS 內置 32 位 App 轉譯器，性能比原生支持更好]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>小米手機系統軟件部總監張國全介紹了 Xiaomi HyperOS 對第三方應用進行兼容的開發工作。</p><p>據介紹，小米 14&nbsp; 搭載的 CPU 雖然僅支持 64 位架構，但 HyperOS 通過內置 32 位轉譯內核的方式讓用戶在新設備上無縫運行 32 位應用。</p><p>相比小米 13 通過 CPU 小核原生運行 32 位應用，<strong>小米 14 憑藉譯碼器可以在大核上運行 32 位應用</strong>，所以即便 CPU 不支持 32 位但依然實現了 32 位應用的兼容支持，而且性能反而更好。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-543d609013f751cb4c431b863bcca7c25bb.png" referrerpolicy="no-referrer"></p><p>此外，小米工程師分析了每年不兼容的三方應用，發現有一大類三方應用修改的內容都比較相似、在應用適配新系統前會出現種閃退和無法使用的問題，因此自研了一套 <strong>CompatEngine 引擎</strong>，可以不依賴三方應用開發者主動做兼容適配第三方應用，經驗證目前超過 90% 未適配應用均可正常使用。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 01 Nov 2023 09:19:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264814</guid>
            <link>https://www.oschina.net/news/264814</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Chrome 支持運行 Kotlin、Java 等 GC 編程語言]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>谷歌 Chrome 開發者博客<strong><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.chrome.com%2Fblog%2Fwasmgc%2F" target="_blank">官宣</a></u></strong>：Chrome 已默認啓用 <strong>WebAssembly 垃圾回收 (WasmGC) </strong>功能&nbsp;—— 能夠<strong>將具有 GC 的編程語言編譯為 WebAssembly (Wasm)</strong>。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/1103/165225_wBLu_2720166.png" referrerpolicy="no-referrer"></p></blockquote><p>下面是示例代碼</p><ul><li><strong>Kotlin Wasm</strong></li></ul><pre><code class="language-java">import kotlinx.browser.document
import kotlinx.dom.appendText
import org.w3c.dom.HTMLDivElement

fun main() {
    (document.getElementById("warning") as HTMLDivElement).style.display = "none"
    document.body?.appendText("Hello, ${greet()}!")
}

fun greet() = "world"</code></pre><p>據介紹，<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWebAssembly%2Fgc%2Fblob%2Fmain%2Fproposals%2Fgc%2FOverview.md" target="_blank">WasmGC </a></u>是 WebAssembly 社區羣組發佈的一項提案。當前的 Wasm 最小可行化實現只能處理線性內存中的 number 類型數據，即整數和浮點數。隨着引用類型 (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWebAssembly%2Freference-types%2Fblob%2Fmaster%2Fproposals%2Freference-types%2FOverview.md" target="_blank">reference types</a>) 提案的發佈，Wasm 還可以保留外部引用。</p><p>WasmGC 現在添加了結構體和數組堆類型，因此<strong>支持非線性內存分配</strong>。每個 WasmGC 對象都有固定的類型和結構，這使得虛擬機可以輕鬆生成有效的代碼來訪問其字段，而不會像 JavaScript 等動態語言那樣存在去優化的風險。</p><p>因此，<strong>該提案通過結構和數組堆類型為 WebAssembly 增加了對高級託管語言的有效支持</strong>，使得針對 Wasm 的語言編譯器能夠與主機 VM 中的垃圾回收器集成。簡單來説，通過 WasmGC，將編程語言移植到 Wasm 意味着編程語言的垃圾回收器不再需要成為移植的一部分，而是可以<strong>直接使用現有的垃圾回收器</strong>。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 01 Nov 2023 09:02:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264807/wasmgc-chrome</guid>
            <link>https://www.oschina.net/news/264807/wasmgc-chrome</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[深言科技聯合清華大學 NLP 實驗室開源 LingoWhale-8B 模型]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">深言科技與清華大學 NLP 實驗室共同研發的語鯨 LingoWhale-8B 模型已面向社會開源。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#000000">深言科技（DeepLang AI）由清華大學計算機系自然語言處理實驗室（THUNLP）與北京智源人工智能研究院（BAAI）共同孵化，是國內最早開展大模型研發與探索大模型落地的創業公司之一。公司創始團隊曾深度參與智源·悟道大模型的研發，目前已發佈產品包括世界首箇中文及跨語言反向詞典 WantWords、名句語義檢索系統 WantQuotes、智能寫作工具深言達意等。</span></p><p><span style="color:#000000">根據<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FDJ8saXn9wOhuK2v_x-lVSQ" target="_blank">介紹</a>，LingoWhale-8B 模型是擁有約 80 億參數的中英雙語大語言模型，在 C-Eval、MMLU、CMMLU 等多個權威的公開評測基準上，在 10B 以下開源模型中達到領先效果。</span></p><p>LingoWhale-8B 是深言科技與清華大學 NLP 實驗室共同推出的語鯨系列大模型中首個開源的中英雙語大語言模型。</p><p>LingoWhale-8B 模型在數萬億 token 的高質量中英數據上進行預訓練，具有強大的基礎能力，在多個公開評測基準上均達到領先效果。在預訓練階段，模型使用 8K 的上下文長度進行訓練，能夠完成更長上下文的理解和生成任務。LingoWhale-8B 模型對學術研究<strong>完全開放</strong>，開發者通過郵件申請並獲得官方商用許可後，即可<strong>免費商用</strong>。</p><p>在開源模型權重的同時，項目團隊也提供了符合用戶習慣的 Huggingface 推理接口以及 LoRA 等參數高效微調示例，便於開發者快速使用 LingoWhale-8B 模型。</p><p>受模型參數量影響，大模型固有的幻覺問題、數學計算能力相對較弱、生成內容有無法預見性等問題在 LingoWhale-8B 模型中仍然存在。因此建議在使用前瞭解這些問題，評估可能存在的風險。後續版本的語鯨大模型將會針對此類問題進行持續優化。</p><h4><strong>測評分析</strong></h4><p><span style="background-color:#ffffff"><span style="color:#3f3f3f">截至 10 月 24 日，在中文領域權威評測 C-Eval 中，</span></span><strong>LingoWhale-8B 模型的性能僅次於 GPT-4</strong><span style="background-color:#ffffff"><span style="color:#3f3f3f">。在 C-Eval、CMMLU、GAOKAO 測評中，性能超過 GPT-3.5Turbo，在 10B 以下尺寸模型中性能處於領先位置。</span></span></p><p><span style="background-color:#ffffff"><span style="color:#3f3f3f"><img alt="" height="122" src="https://oscimg.oschina.net/oscnet/up-61dd8a402d70f3fb6aec85b2fed702eeeb7.png" width="500" referrerpolicy="no-referrer"></span></span></p><p><strong><span style="color:#3f3f3f">一些示例：</span></strong></p><p><img alt="" height="500" src="https://oscimg.oschina.net/oscnet/up-333f791c81206afba4f06c2312f9341df88.png" width="269" referrerpolicy="no-referrer">&nbsp;<img alt="" height="501" src="https://oscimg.oschina.net/oscnet/up-9749d978fa111b77c07bdf07348dec30ef5.png" width="299" referrerpolicy="no-referrer"></p><p><img alt="" height="289" src="https://oscimg.oschina.net/oscnet/up-1ad6a289253e964f8715f8610900e858395.png" width="269" referrerpolicy="no-referrer">&nbsp;<img alt="" height="354" src="https://oscimg.oschina.net/oscnet/up-082b16c3e8e0198200f7aa32d91bcfda558.png" width="299" referrerpolicy="no-referrer"></p><p><img alt="" height="1087" src="https://oscimg.oschina.net/oscnet/up-c1b525b15cc376c23f24cd7500bd6fd3fa8.png" width="270" referrerpolicy="no-referrer">&nbsp;<img alt="" height="1087" src="https://oscimg.oschina.net/oscnet/up-5c686d13e35bbfc670e1c3fbad8b9824689.png" width="188" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 01 Nov 2023 06:06:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264763</guid>
            <link>https://www.oschina.net/news/264763</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[國外 HR：如果看到簡歷有參與開源貢獻的內容，直接扔掉]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>自稱曾負責 FAANG（美國科技巨頭）招聘工作的「獵頭」在推特<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fallgarbled%2Fstatus%2F1719266732869886325" target="_blank">發表瞭如下內容</a></u>：</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/1103/120614_vhOu_2720166.png" referrerpolicy="no-referrer"></p></blockquote><p>他表示自己在招人的時候，<strong>如果看到開發者的簡歷出現參與開源貢獻的內容</strong>，會直接把簡歷扔掉。他認為，開發者有這麼多的空閒時間來不求回報地寫代碼，對工作的投入程度能有多高？</p><p>他繼續補充道：「對於初級開發者來説，他們參與開源可以理解。但對於高級開發者來説，這表明他們缺乏成熟度。」</p><p>最後他附上了自己拒絕別人求內推的截圖：</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-fb3a53178796db604e1b3319b0bf7346147.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 01 Nov 2023 04:19:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264751</guid>
            <link>https://www.oschina.net/news/264751</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[等了 7 年，vscode 史上呼聲最高的「浮動窗口」 特性，終於實現了]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote><p>7 年，你知道我這 7 年怎麼過來的嗎？</p></blockquote><p><img alt="張家輝表情包 gif，抖音張家輝表情包合集_手機搜狐網" src="https://static.oschina.net/uploads/img/202311/03121335_cc2C.gif" referrerpolicy="no-referrer"></p><p>等了 7 年，開發者呼聲極高的 vscode 「浮動窗口」 特性，終於實現了。</p><p><img height="1400" src="https://static.oschina.net/uploads/space/2023/1103/120112_40ZK_3820517.png" width="2174" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fvscode%2Fissues%2F10121" target="_blank">https://github.com/microsoft/vscode/issues/10121</a></p><p>該提案是 2016 年就有人提出，數千人贊同，期間帖子也增長到 300 多條，可見這一特性的呼聲之高。</p><p><img height="1536" src="https://static.oschina.net/uploads/space/2023/1103/121308_KoQP_3820517.png" width="2660" referrerpolicy="no-referrer"></p><p>就在近期發佈的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fupdates%2Fv1_84%23_floating-editor-windows" target="_blank">vscode October 2023 (version 1.84) </a>更新中，終於實現了對浮動窗口的支持（預覽特性）：</p><div class="ckeditor-html5-video" style="text-align:center"><video controls="controls" controlslist="nodownload" src="https://code.visualstudio.com/assets/updates/1_84/floating-windows.mp4">
  &nbsp;
 </video></div><p>vscode 團隊也開心地在 issue 最後「結帖」。</p><p><img height="1540" src="https://static.oschina.net/uploads/space/2023/1103/120113_i7Zd_3820517.png" width="1872" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 01 Nov 2023 04:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264749/vscode-floating-editor-windows</guid>
            <link>https://www.oschina.net/news/264749/vscode-floating-editor-windows</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[LAMMPS —— 分子動力學模擬工具包]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>LAMMPS （"Large-scale Atomic/Molecular Massively Parallel Simulator"，大尺度原子/分子並行模擬工具）是由桑迪亞國家實驗室開發的一套分子動力學模擬的開源程序包。LAMMPS 當前使用 C++編寫，早期版本使用 Fortran77 以及 Fortran90。</p><p>LAMMPS 使用 MPI 實現多機器並行計算，在新的版本中，支持基於 CUDA 和 OpenCL 的 GPU 計算。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-fa7cce2ba0e5a4796cb2d6eb8a1e3dccd07.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-323a95d8c05b97b23b41450fa6c6867b9f0.png" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p>LAMMPS 提供了元素週期表中原子對應的經驗勢函數，可進行與實際體系對應的分子動力學模擬，例如計算金屬鋁的晶格常數，或水的密度，得到與實驗吻合的結果。另一方面也提供了多種模型勢函數，可用於進行粗粒化模擬，例如模擬基於粒子-彈簧模型的高分子鏈的性質。</p><p>LAMMPS 作為實用程序包，採取了很多成熟的優化算法。例如在短程相互作用的計算中運用韋爾萊表和元胞列表優化臨近粒子的掃描。</p><p>用戶可在下至個人電腦，上至計算機集羣上運行 LAMMPS。在並行環境下，LAMMPS 使用空間分解技術，將整個模擬體系分解成若干個更小的體系傳遞給不同處理器執行，邊界的處理則使用「幽靈原子」保證整體的連續。LAMMPS 對粒子密度均勻的立方體盒子體系的效率最高。</p><p>LAMMPS 具有廣泛的硬件加速支持，例如 GPU (CUDA, OpenCL, HIP, SYCL), Intel Xeon Phi, 以及基於 OpenMP 多線程支持。</p><p>LAMMPS 最初為一美國政府與私人機構合作項目，由美國能源部與另外三所私有企業實驗室合作開發。目前由桑迪亞國家實驗室負責維護和發佈。</p></div>
                                                                ]]>
            </description>
            <pubDate>Wed, 01 Nov 2023 03:20:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/lammps</guid>
            <link>https://www.oschina.net/p/lammps</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 開源的知識圖譜抽取與構建工具 DeepKE]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Farxiv.org%2Fpdf%2F2201.03335.pdf">DeepKE</a><span>&nbsp;</span>是一個開源的知識圖譜抽取與構建工具，支持<strong>cnSchema、低資源、長篇章、多模態</strong>的知識抽取工具，可以基於<strong>PyTorch</strong>實現<strong>命名實體識別</strong>、<strong>關係抽取</strong>和<strong>屬性抽取</strong>功能。同時為初學者提供了<a href="https://gitee.com/ZJU_NLP/DeepKE">用戶手冊</a>,<span>&nbsp;</span><a href="https://gitee.com/link?target=https%3A%2F%2Fzjunlp.github.io%2FDeepKE%2F">文檔</a>，<a href="https://gitee.com/link?target=https%3A%2F%2Fcolab.research.google.com%2Fdrive%2F1vS8YJhJltzw3hpJczPt24O0Azcs3ZpRi%3Fusp%3Dsharing">Google Colab 教程</a>,<span>&nbsp;</span><a href="https://gitee.com/link?target=http%3A%2F%2Fdeepke.zjukg.cn%2FCN%2Findex.html">在線演示</a>,<span>&nbsp;</span><a href="https://gitee.com/link?target=https%3A%2F%2Farxiv.org%2Fpdf%2F2201.03335.pdf">論文</a>和<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fzjunlp%2FDeepKE%2Fblob%2Fmain%2Fdocs%2Fslides%2FSlides-DeepKE-cn.pdf">演示文稿</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 01 Nov 2023 03:15:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264738</guid>
            <link>https://www.oschina.net/news/264738</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 同城售後系統退款業務重構心得]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h1_1"></span><h1><span><span><span>一、重構背景</span></span></span></h1><span id="OSC_h3_2"></span><h3><span><span><span>1.1、退款</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>到家、小時購、天選退款有</span></span></span><span><span><strong><span>2 套</span></strong></span></span><span><span><span>結構，代碼邏輯混亂；</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>其中小時購、天選部分售後單是和平生 pop 交互退款，部分是和售後中台交互退款；並且</span></span></span><span><span><strong><span>兼容 3 套</span></strong></span></span><span><span><span>邏輯；</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>痛點</span></strong></span></span><span><span><span>：代碼繁重，缺乏合理性的設計，後續迭代</span></span></span><span><span><strong><span>開發</span></strong></span></span><span><span><span>以及</span></span></span><span><span><strong><span>維護成本高</span></strong></span></span><span><span><span>，同時增加了系統的</span></span></span><span><span><strong><span>風險和不穩定性</span></strong></span></span></p><span id="OSC_h3_3"></span><h3><span><span><span>1.2、金額計算</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>到家、小時購兩套獨立的邏輯結構計算，在此基礎上針對退差和非退差又實現了</span></span></span><span><span><strong><span>2 套</span></strong></span></span><span><span><span>邏輯；</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>針對商品件維度、商品行維度、售後單維度計算金額混亂，</span></span></span><span><span><strong><span>缺乏領域邊界</span></strong></span></span><span><span><span>和</span></span></span><span><span><strong><span>分層設計</span></strong></span></span><span><span><span>；</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>痛點</span></strong></span></span><span><span><span>：售後單維度、商品行維度、拆分件維度金額</span></span></span><span><span><strong><span>計算混亂</span></strong></span></span><span><span><span>，代碼</span></span></span><span><span><strong><span>缺乏層次結構</span></strong></span></span><span><span><span>；代碼</span></span></span><span><span><strong><span>易讀性</span></strong></span></span><span><span><span>、</span></span></span><span><span><strong><span>維護成本</span></strong></span></span><span><span><span>、後續</span></span></span><span><span><strong><span>擴展性</span></strong></span></span><span><span><span>存在問題</span></span></span></p><span id="OSC_h3_4"></span><h3><span><span><span>1.3、售後逆向賬</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>售後單詳情接口、申訴單詳情接口，針對到家和小時購做了</span></span></span><span><span><strong><span>兩套</span></strong></span></span><span><span><span>邏輯；</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>其中售後單詳情接口針對小時購黑名單、小時購白名單、天選、到家退差、到家非退差做了</span></span></span><span><span><strong><span>5 套</span></strong></span></span><span><span><span>邏輯處理；</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>並且這兩個接口都是實時從拆分獲取金額進行售後逆向拆分計算，可以直接從數據庫中進行取值賦值，不需要進行售後單維度的拆分計算；</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>痛點</span></strong></span></span><span><span><span>：代碼大量</span></span></span><span><span><strong><span>冗餘</span></strong></span></span><span><span><span>、改動</span></span></span><span><span><strong><span>成本高</span></strong></span></span><span><span><strong><span>、</span></strong></span></span><span><span><span>增加了系統的</span></span></span><span><span><strong><span>風險</span></strong></span></span><span><span><span>和</span></span></span><span><span><strong><span>不穩定性</span></strong></span></span></p><span id="OSC_h1_5"></span><h1><span><span><span>二、重構思路和方案</span></span></span></h1><span id="OSC_h3_6"></span><h3><span><span><span>2.1、重構思路</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>什麼是重構呢？</span></strong></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>名詞</span></strong></span></span><span><span><span>：對軟件內部結構的一種調整，目的是在不改變軟件觀察行為的的前提下提高其可理解性、降低其修改成本；</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>動詞</span></strong></span></span><span><span><span>：使用一系列手法，在不改變軟件可觀察行為的前提下，調整其結構</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>重構的目的是使系統或代碼更容易被理解、修改、迭代</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>重構祕訣：膽大心細</span></strong></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>膽大</span></strong></span></span><span><span><span>（意味着有勇氣和決心去改變和改進現有的代碼。重構可能涉及對複雜的代碼結構進行修改，甚至可能需要重寫部分代碼。膽大的開發者願意麪對這些挑戰，相信通過改變可以帶來更好的結果）</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>心細</span></strong></span></span><span><span><span>（指的是在進行重構時保持細緻入微的思考和行動。這包括仔細分析代碼的結構和邏輯，理解代碼的功能和依賴關係，以及考慮每個重構步驟可能帶來的潛在影響。心細的開發者會在重構過程中小心翼翼地處理每個細節，以確保代碼的正確性和可維護性）</span></span></span></p><div><span>1.</span><span><span><span><span>把握好重構時機：當我發現售後退款、金額計算等業務模塊代碼存在質量問題、可讀性差、可維護性差或存在壞味道時，並且在項目需求排期並不緊張的情況下，是進行重構的好時機；</span></span></span></span></div><div><span>2.</span><span><span><span><span>前期梳理很重要，先找到痛點 ；不宜長線作戰，不宜和業務並行</span></span></span></span></div><div><span>3.</span><span><span><span><span>明確出目標和價值：售後退款、金額計算重構後能提高開發效率、降低維護、開發成本等</span></span></span></span></div><div><span>4.</span><span><span><span><span>確定重構的目標：首先要明確需要進行重構的代碼塊或功能，並明確重構的目標是什麼。例如，可能需要提高代碼的可讀性、可維護性或性能。</span></span></span></span></div><div><span>5.</span><span><span><span><span>分析代碼壞味道：使用代碼靜態分析工具或手動檢查代碼，識別出可能存在的</span></span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.qinglite.cn%2Fdoc%2F87036476d565d55f9" target="_blank" rel="nofollow"><span><span><span>代碼壞味道</span></span></span></a><span><span><span>；例如退款業務中存在 1000 多行的類、600 多行的方法，過多的變量參數、諸多重複代碼等</span></span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.qinglite.cn%2Fdoc%2F87036476d565d55f9" target="_blank" rel="nofollow"><span><span><span>代碼壞味道</span></span></span></a><span><span><span>。</span></span></span></span></div><div><span>6.</span><span><span><span><span>選擇適當的重構技術：根據售後</span></span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.qinglite.cn%2Fdoc%2F87036476d565d55f9" target="_blank" rel="nofollow"><span><span><span>代碼壞味道</span></span></span></a><span><span><span>的種類和重構的目標，選擇適當的重構技術。我採用的重構手法是：</span></span></span><span><span><strong><span>小規模重構--&gt;大規模重構--&gt;頂層設計模式；</span></strong></span></span><span><span><span>採用</span></span></span><span><span><strong><span>先小後大，從大到全</span></strong></span></span><span><span><span>的思路進行重構設計</span></span></span><span><span><strong><span>。小規模重構</span></strong></span></span><span><span><span>：提取方法、消除超大類或函數方法、提取類、重命名、合併重複代碼等方法；</span></span></span><span><span><strong><span>大規模重構：</span></strong></span></span><span><span><span>採用的是</span></span></span><span><span><span style="background-color:#ffffff; color:#121212">分層、模塊化、解耦、抽象可複用性等手法；</span></span></span><span><span><strong><span>設計模式</span></strong></span></span><span><span><span>：退款業務採用策略模式+抽象工廠；金額計算業務採用策略模式+抽象工廠+責任鏈模式</span></span></span></span></div><div><span>7.</span><span><span><span><span>編寫測試用例：在進行重構之前，編寫適當的測試用例來驗證重構後的代碼的正確性。測試用例應該覆蓋重構的代碼塊或功能的各種情況。</span></span></span></span></div><div><span>8.</span><span><span><span><span>執行重構：根據選擇的重構技術，逐步修改代碼。確保每次修改後的代碼仍然通過之前編寫的測試用例。</span></span></span></span></div><div><span>9.</span><span><span><span><span>運行測試用例：在每次重構之後，運行之前編寫的測試用例，確保重構後的代碼仍然正確。</span></span></span></span></div><div><span>10.</span><span><span><span><span>重構後的代碼評估：評估重構後的代碼是否達到了預期的目標，例如是否提高了代碼的可讀性、可維護性或性能。</span></span></span></span></div><span id="OSC_h3_7"></span><h3><span><span><span>2.2、重構方案</span></span></span></h3><span id="OSC_h4_8"></span><h4><span><span><span>2.2.1、重構前系統交互圖</span></span></span></h4><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-10-26-11-376gFGFKNu12gfcLVl.jpg" referrerpolicy="no-referrer"></div><span id="OSC_h4_9"></span><h4><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span>2.2.2、重構後系統交互圖</span></span></span></h4><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-10-24-14-36ObaevqtLBg9cVzc.jpg" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span></span></span></span><span><span><span>退款業務強耦合到售後系統中，並且業務代碼分散到各個業務層，嚴重缺乏系統的領域邊界和分層設計，重構後退款業務邏輯不強依賴售後核心業務邏輯，做到可以獨立部署。</span></span></span></p><span id="OSC_h4_10"></span><h4><span><span><span>2.2.3、重構前金額計算流程圖</span></span></span></h4><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-10-24-14-36iGWAfxWUQyTZ36p7.jpg" referrerpolicy="no-referrer"></div><span id="OSC_h4_11"></span><h4><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span></span></span></span><span><span><span>2.2.4、重構後金額計算流程圖</span></span></span></h4><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>﻿</span></span></span><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-10-24-14-36j10tVMXAKR9byPI10.jpg" referrerpolicy="no-referrer"></p><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span></span></span></span><span><span><span>將 2 套金額計算業務邏輯利用設計模式將其合併為 1 套金額計算業務邏輯，打造防腐層</span></span></span></p><span id="OSC_h3_12"></span><h3><span><span><span>2.3、重構設計類圖</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>依據上述制定的設計方案流程圖，我進行了 UML 類圖的繪製，以下是關於金額計算業務模塊的類圖</span></span></span></p><span id="OSC_h4_13"></span><h4><span><span><span>2.3.1、抽象工廠+策略模式類圖</span></span></span></h4><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-10-26-20-06MV8CDpmNrSRORvC.jpg" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span></span></span></span></p><span id="OSC_h4_14"></span><h4><span><span><span>2.3.2、責任鏈模式類圖</span></span></span></h4><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-10-24-19-53VbsjALJmOdmrz24d.jpg" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span></span></span></span></p><span id="OSC_h1_15"></span><h1><span><span><span>三、系統穩定性保障</span></span></span></h1><span id="OSC_h3_16"></span><h3><span><span><span>3.1、小步重構</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>將售後重構分成退款、金額計算、逆向賬三個步驟，並在每個步驟之後運行測試用例。這樣可以及時發現並修復引入的錯誤，避免錯誤在整個系統中蔓延</span></span></span></p><span id="OSC_h3_17"></span><h3><span><span><span>3.2、逐步驗證</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>在每個重構步驟之後，進行系統的逐步驗證。分批次進行上線灰度，灰度配置絕對隔離，不能複用。確保系統的各個部分在重構過程中都能正常運行，並與其他部分協調良好。</span></span></span></p><span id="OSC_h3_18"></span><h3><span><span><span>3.3、監控和性能測試</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>在重構完成後，進行系統的監控和性能測試，確保重構沒有引入性能問題或影響系統的穩定性。如果發現問題，及時進行修復和優化。</span></span></span></p><span id="OSC_h3_19"></span><h3><span><span><span>3.4、團隊代碼審查和測試</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>在進行重構時，與團隊成員進行合作，並進行代碼審查。多個人的視角和經驗可以幫助發現潛在的問題，並提供改進的建議；針對重構代碼進行深度解刨，能更有效地保障重構的安全性。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>重構業務及時通知測試人員，使測試人員能夠評估到測試點，更加完善測試用例</span></span></span></p><span id="OSC_h3_20"></span><h3><span><span><span>3.5、灰度步驟</span></span></span></h3><span id="OSC_h4_21"></span><h4><span><span><span>3.5.1、bcp 持續比對校驗</span></span></span></h4><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-10-24-18-21kccs6qUAZpiH6EU.jpg" referrerpolicy="no-referrer"></div><span id="OSC_h4_22"></span><h4><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span>3.5.2、按照商家灰度</span></span></span></h4><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>依據售後單量 </span></span></span><span><span><span style="color:#c41d7f">小-&gt;中-&gt;大 </span></span></span><span><span><span>的順序逐步進行灰度切量，觀察其退款、金額計算等售後單數據是否異常</span></span></span></p><span id="OSC_h1_23"></span><h1><span><span><span>四、重構成果</span></span></span></h1><div><span>1.</span><span><span><span><span>降低開發、維護成本</span></span></span></span></div><div><span>2.</span><span><span><span><span>提升代碼質量、系統穩定性</span></span></span></span></div><div><span>3.</span><span><span><span><span>系統擴展性和靈活性的加強；</span></span></span></span></div><div><span>4.</span><span><span><span><span>系統應用、業務邊界定位更加清晰</span></span></span></span></div><div><span>5.</span><span><span><span><span>統一和規範售後核心業務脈絡，降低業務學習成本，提升開發效率</span></span></span></span></div><div><span>6.</span><span><span><span><span>提升自己的技術能力、代碼質量意識、問題解決能力、團隊合作和溝通能力；經典著作《重構》這本書中有這麼一段話：</span></span></span></span></div><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span style="color:#e13c39">一開始，我所做的重構都停留在細枝末節上。隨着代碼趨向簡潔，我發現自己可以看到一些設計層面的東西了，這些是我以前理解不到的，如果沒有重構，我達不到這種高度</span></span></span></p><span id="OSC_h1_24"></span><h1><span><span><span>五、code show</span></span></span></h1><span id="OSC_h3_25"></span><h3><span><span><span>5.1、重構前金額計算</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>到家售後單金額計算 service 方法</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-10-24-17-21suiEaSppoaot524r.png" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span> 京東售後單金額計算 service 方法 </span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>一個大的金額計算 class 類就有 1000 多行代碼，每個方法中都有幾百行代碼，以下是到家售後單金額計算部分代碼</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-10-24-17-24SIMdGahcCnlwMft.png" referrerpolicy="no-referrer"></div><span id="OSC_h3_26"></span><h3><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span></span></span></span><span><span><span>5.2、重構後金額計算</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>到家和京東售後單金額計算用同一個接口才承接業務實現，並且使用策略+抽象工廠模式實現到家、小時購、天選業務的金額計算</span></span></span></p><div><img alt="" height="485" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-10-24-16-06zo6Ussx10DiTM9aZ.png" width="949" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span></span></span></span></p><p><span><span><span>策略模式獲取金額拆分結果集</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-10-24-16-197BtKUjnliCO0tWL.png" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span></span></span></span></p><p><span><span><span>金額計算核心方法只有 4 步驟</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-10-24-16-07Hh7lMDbD24dz710Z8.png" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span></span></span></span></p><p><span><span><span>其中金額計算的核心則採用的是責任鏈業務進行計算</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-10-24-16-18tYPt18htIb24Wqq18K.png" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span></span></span></span></p><p><span><span><span>在件維度、sku 維度針對不同的業務又採用了責任鏈模式進行金額計算</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-10-24-16-20yiO6J10jVGmJJdK.png" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span></p><span id="OSC_h1_27"></span><h1><span><span><span>六、參考文獻</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>代碼的壞味道： </span></span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.qinglite.cn%2Fdoc%2F87036476d565d55f9" target="_blank" rel="nofollow"><span><span><span>https://www.qinglite.cn/doc/87036476d565d55f9</span></span></span></a><span><span><span>﻿</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span style="background-color:#ffffff; color:#202124">《重構改善既有代碼的設計》：[美]MartinFowler</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>《敏捷軟件開發》：[美]RobertC.Martin</span></span></span></p><blockquote><p>作者：京東零售，高凱</p><p>來源：京東雲開發者社區，轉載請註明來源</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Wed, 01 Nov 2023 03:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/10140342</guid>
            <link>https://my.oschina.net/u/4090830/blog/10140342</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
    </channel>
</rss>
