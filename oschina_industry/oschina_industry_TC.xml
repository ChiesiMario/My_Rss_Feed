<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-綜合資訊]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="https://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-綜合資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 28 Dec 2023 03:23:10 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[《2023 中國開源開發者報告》正式發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:center">《2023 中國開源開發者報告》正式發佈。</p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-acb8a37b712e865f5503ef42f50d1364d40.png" referrerpolicy="no-referrer"></p><p>此報告由開源中國與 Gitee 發佈，整體分為三章，分別是：</p><ul><li><p>第一章《開源開發者事件回顧》</p></li><li><p>第二章《2023 LLM 技術報告》</p></li><li><p>第三章《&lt;Gitee × OSS Compass&gt; Insight：中國開發者開源新動向》</p></li></ul><p>&nbsp;</p><p>毫無疑問，開源開發者圈子來看，2023 年是大模型 LLM 年、生成式 AI GenAI 年。</p><p>LLM 領域大放異彩，此報告濃墨重彩地在《2023 LLM 技術報告》中梳理了 2023 年 LLM 的技術行情。報告整體圍繞 LLM Tech Map 梳理邏輯來展開，從基礎設施、大模型、Agent、AI 編程、工具和平台，以及算力幾個方面，為開發者整理了當前 LLM 中最為熱門和硬核的技術領域以及相關的軟件產品和開源項目。</p><p style="text-align:center"><img src="https://oscimg.oschina.net/oscnet/up-8ed4d8f6c27fc4df42c56ed8660ba9ec23b.png" referrerpolicy="no-referrer"></p><p><strong>《2023 LLM 技術報告》詳情可查看（這是子報告）：</strong><br><strong><a href="https://talk.gitee.com/report/china-open-source-2023-llm-report.pdf" target="_blank">https://talk.gitee.com/report/china-open-source-2023-llm-report.pdf</a></strong></p><p>&nbsp;</p><p>除了 LLM，開源開發者圈當然還有更多高亮事件，此次年度報告中整理成了另一篇章《開源開發者事件回顧》，這一篇章梳理成了 9 個大塊：</p><ul><li><p>【AIGC】回顧 2023 大語言模型 LLM 元年的重磅事件。</p></li><li><p><span style="color:#27ae60"><strong>【1024 黃金眼】關注 IT 相關民生事件，以老百姓的眼睛看 IT 圈，和開發者零距離接觸。</strong></span></p></li><li><p>【項目停更】到了該説「再見」的時候了，江湖有緣再見。</p></li><li><p><span style="color:#27ae60"><strong>【生產事故】冥場面！速來圍觀 2023 十大生產事故「名場面」。</strong></span></p></li><li><p>【開源治理】開源健康發展必不可少的一環。</p></li><li><p><span style="color:#27ae60"><strong>【硬核發版】最硬核、最極客的年度發版彙總！</strong></span></p></li><li><p>【熱門話題】回顧 2023 年度熱門開發者事件！</p></li><li><p><span style="color:#27ae60"><strong>【重磅官宣】2023 年度開源官宣。</strong></span></p></li><li><p>【R.I.P.】謹以此篇紀念今年離我們而去的行業巨擘。</p></li></ul><p>這些事件，作為圈內人的你還有印象嗎？</p><p>&nbsp;</p><p>第三章《&lt;Gitee × OSS Compass&gt; Insight：中國開發者開源新動向》中，採用 Gitee 與 OSS Compass 作為數據來源，試圖通過數據來反映 2023 年開源開發者圈子的相關情況。亮點數據：</p><ul><li><p>TypeScript 是增長最快的編程語言，增長率達到 49.04%</p></li><li><p>MulanPSL-2.0 在「2023 年使用增長率最快的開源許可證」中排行第二，增長率為 18.34%</p></li><li><p>較為活躍的社區代表： OpenHarmony、openEuler 與 MindSpore</p></li></ul><p>&nbsp;</p><p><strong><span style="background-color:#e67e22">詳情請查看完整報告：</span><br><a href="https://talk.gitee.com/report/china-open-source-2023-annual-report.pdf" target="_blank">https://talk.gitee.com/report/china-open-source-2023-annual-report.pdf</a></strong></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:53:06 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273070/china-open-source-2023-annual-report</guid>
            <link>https://www.oschina.net/news/273070/china-open-source-2023-annual-report</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[中國信通院發佈「方升」大模型基準測試體系]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">2023 年 12 月 24 日，中國信息通信研究院（簡稱「中國信通院」）發佈「方升」大模型評測體系，旨在建立業界大模型基準測試統一的「度量衡」。「方升」測試體系涵蓋大模型基準測試的關鍵四要素，即測試指標、測試方法、測試數據集和測試工具，目前已形成《大規模預訓練模型基準測試-總體技術要求》標準。</span></p><p><img height="167" src="https://oscimg.oschina.net/oscnet/up-ebb8952d715044001bb29e8d67808584ad5.png" width="500" referrerpolicy="no-referrer"></p><p><img height="281" src="https://oscimg.oschina.net/oscnet/up-8b441a7bb22997359392d02a0644c603284.png" width="500" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">測試指標方面，「方升」測試體系主要針對行業、應用、通用和安全四個維度對大模型進行全面、客觀、統一的評估，為了加速大模型應用落地，重點強化了行業和應用導向能力的考查。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">在測試方法方面，「方升」測試體系創新性提出自適應動態測試方法，從測試數據標籤化、測試題庫實時化、測試方案定製化、測試流程自動化四個方面全面提升大模型基準測試質量，重點解決大模型「刷榜」問題。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">測試數據方面，<span>「</span>方升」測試體系搭建動態測試數據庫，涵蓋測試數據集 107 個，測試數據條數達到 123 萬，聯合產業界多家機構首次推出面向行業、通用、應用、安全領域的評測數據集 6 個。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">測試框架與工具方面，中國信通院在構建超自動化測試平台和智能化結果評估系統方面持續發力，探索解決國內外人工智能自動化測試流程中存在的「阻塞點」，全面提高測試效率。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">「方升」大模型基準測試體系由中國信通院聯合北京智源研究院、認知智能全國重點實驗室和天津大學共同發佈。此外，國網智能電網研究院、首都之窗、天津大學、中國電信研究院、中國聯通軟件研究院、華為、甲骨易、海天瑞聲、東方財富 9 家單位成為「方升」大模型基準測試首批合作伙伴。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:37:06 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273067</guid>
            <link>https://www.oschina.net/news/273067</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[《2023 中國開源開發者報告》]]>
            </title>
            <description>
                <![CDATA[此報告由開源中國與 Gitee 發佈，整體分為三章，分別是：第一章《開源開發者事件回顧》、第二章《2023 LLM 技術報告》、第三章《<gitee ×="" oss="" compass=""> Insight：中國開發者開源新動向》...</gitee>]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:31:06 GMT</pubDate>
            <guid isPermaLink="false">https://talk.gitee.com/report/china-open-source-2023-annual-report.pdf?fr=news</guid>
            <link>https://talk.gitee.com/report/china-open-source-2023-annual-report.pdf?fr=news</link>
        </item>
        <item>
            <title>
                <![CDATA[《2023 大語言模型 LLM 技術報告》]]>
            </title>
            <description>
                <![CDATA[從基礎設施、大模型、Agent、AI 編程、工具和平台，以及算力幾個方面，為開發者整理了當前 LLM 中最為熱門和硬核的技術領域以及相關的軟件產品和開源項目。]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:30:37 GMT</pubDate>
            <guid isPermaLink="false">https://talk.gitee.com/report/china-open-source-2023-llm-report.pdf?fr=news</guid>
            <link>https://talk.gitee.com/report/china-open-source-2023-llm-report.pdf?fr=news</link>
        </item>
        <item>
            <title>
                <![CDATA[BMF —— 下一代視頻處理引擎]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>BMF（Babit Multimedia Framework）是字節跳動開發的跨平台、可定製的多媒體處理框架。經過 4 年多的測試和改進，BMF 已經過量身定製，能夠熟練地應對現實生產環境中的挑戰。目前廣泛應用於字節跳動的視頻串流、直播轉碼、雲剪輯以及移動端前/後處理場景。該框架每天處理超過 20 億個視頻。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>以下是一些主要功能：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><p><span><span>跨平台支持：與 Linux、Windows 和 Mac OS 原生兼容，並針對 x86 和 ARM CPU 進行優化。</span></span></p></li><li><p><span><span>易於使用：BMF 提供 Python、Go 和 C++ API，使開發人員能夠靈活地用自己喜歡的語言進行編碼。</span></span></p></li><li><p><span><span>可定製性：由於其解耦的架構，開發人員可以通過添加自己的模塊來增強框架的功能。</span></span></p></li><li><p><span><span>高性能：BMF 擁有強大的調度器，對異構加速硬件的強大支持。此外還有與&nbsp;<a href="https://www.nvidia.com/"><strong>NVIDIA</strong></a>&nbsp;合作開發的高度優化的 GPU 管道，用於視頻轉碼和 AI 推理。</span></span></p></li><li><p><span><span>高效的數據轉換：BMF 提供跨流行框架（PyTorch/OpenCV/TensorRT）以及硬件設備（CPU/GPU）之間的無縫數據格式轉換。</span></span></p></li></ul><p style="text-align:start"><img alt="" height="375" src="https://static.oschina.net/uploads/space/2023/0824/164846_r8VC_4252687.gif" width="500" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:25:06 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/bmf</guid>
            <link>https://www.oschina.net/p/bmf</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 跨平台的 hap 查看器 HapViewer]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-hapviewer" class="anchor" href="https://gitee.com/westinyang/hap-viewer#hapviewer"></a>HapViewer</h1><img src="https://gitee.com/westinyang/hap-viewer/raw/master/src/main/resources/icon/icon.png" width="128px" referrerpolicy="no-referrer"><h2><a id="user-content-項目介紹" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D"></a>項目介紹</h2><p>一個跨平台的 hap 查看器，方便開發者在電腦上預覽 hap 的信息，並提供一鍵安裝到設備等功能</p><p>目前支持解析的應用</p><ul><li>應用平台：OpenHarmony、HarmonyOS</li><li>編譯目標：API9+</li><li>應用模型：Stage（FA 模型暫不考慮）</li></ul><p>開源倉庫</p><ul><li><a href="https://gitee.com/westinyang/hap-viewer">Gitee</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fwestinyang%2Fhap-viewer">Github</a></li></ul><h3><a id="user-content-系列項目" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E7%B3%BB%E5%88%97%E9%A1%B9%E7%9B%AE"></a>系列項目</h3><ul><li><strong>電腦版（跨平台）</strong>：<a href="https://gitee.com/westinyang/hap-viewer">westinyang/hap-viewer</a></li><li>手機版（Android）：<a href="https://gitee.com/westinyang/hap-viewer-android">westinyang/hap-viewer-android</a></li></ul><h3><a id="user-content-衍生項目" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E8%A1%8D%E7%94%9F%E9%A1%B9%E7%9B%AE"></a>衍生項目</h3><ul><li><a href="https://gitee.com/ericple/hapv-cli">hapv-cli</a><code>命令行版的 hap 查看器，目前由@ericple 維護</code></li></ul><h2><a id="user-content-下載安裝" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85"></a>下載安裝</h2><ul><li><a href="https://gitee.com/westinyang/hap-viewer/releases">https://gitee.com/westinyang/hap-viewer/releases</a></li></ul><h2><a id="user-content-使用説明" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E"></a>使用説明</h2><ul><li>安裝和卸載功能需要自己配置好 hdc 到環境變量</li><li>由於目前 hdc 的 bug，hdc list targets 不顯示 Android 設備，但安裝時候會監測到 Android 設備，如果同時連接 Android 和 OpenHarmony 設備，使用 hdc 安裝命令會提示需要指定一個（我覺得這是個 bug），那目前軟件本身還沒有做設備列表的讀取和選擇，只支持連接一個設備進行操作</li></ul><h2><a id="user-content-開發技術" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF"></a>開發技術</h2><blockquote><p>GraalVM 讓 Java 再次變得強大，使用<code>NativeImage</code>把程序編譯為目標平台的可執行文件，脫離 jvm 直接運行，啓動速度快，內存負載低。<br>
關於 GraalVM 技術的最佳實踐和教程，請參考我的另一個開源項目：<a href="https://gitee.com/westinyang/java-graalvm-start">westinyang/java-graalvm-start</a></p></blockquote><ul><li>GraalVM CE 22.3.0 (Java 17) Native Image</li><li>JavaFX 21-ea+5</li><li>ControlsFX 11.1.2</li><li>gluonfx-maven-plugin</li></ul><h2><a id="user-content-功能列表" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E5%8A%9F%E8%83%BD%E5%88%97%E8%A1%A8"></a>功能列表</h2><ul class="task-list"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 打開應用（選擇、拖拽、默認打開方式）</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 解析應用（基本信息、逆向解析 resources.index 讀取應用名稱）</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 技術探測（原生開發、Cocos、Flutter、Qt）</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 實用工具（安裝、重裝、卸載、解壓）</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 解析 API9 Stage 模型的安裝包</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""><del>解析 API9 FA 模型 (ArkTS/JS) 的安裝包</del></li></ul><h2><a id="user-content-兼容測試" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E5%85%BC%E5%AE%B9%E6%B5%8B%E8%AF%95"></a>兼容測試</h2><ul><li>Windows 7 <code>未測試，理論兼容</code></li><li>Windows 10/11 <code>已測試</code></li><li>macOS 11.x Big Sur (Intel) <code>已測試</code></li><li>Ubuntu 20.04 <code>已測試</code></li></ul><h2><a id="user-content-截圖預覽" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E6%88%AA%E5%9B%BE%E9%A2%84%E8%A7%88"></a>截圖預覽</h2><p><img src="https://gitee.com/westinyang/hap-viewer/raw/master/screenshot/all.png" alt="" referrerpolicy="no-referrer"></p><h2><a id="user-content-視頻演示" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E8%A7%86%E9%A2%91%E6%BC%94%E7%A4%BA"></a>視頻演示</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1HX4y127ub">OpenHarmony 首個跨平台的 hap 查看器，將 Open 進行到底，為開源鴻蒙生態助力</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1cg4y197mc">開源鴻蒙 hap 查看器，新增探測 Flutter、Qt 技術，安卓版新主題</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Wb4y1T7VL">開源鴻蒙 hap 查看器，里程碑式新算法，API9~10、系統應用也支持</a></li></ul><h2><a id="user-content-許可聲明" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E8%AE%B8%E5%8F%AF%E5%A3%B0%E6%98%8E"></a>許可聲明</h2><ul><li>本項目是以 Apache2.0 許可開源，如需衍生或商用請註明出處</li><li>軟件圖標出處：<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.flaticon.com%2Ffree-icon%2Fapk_9704667">https://www.flaticon.com/free-icon/apk_9704667</a></li></ul>]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:09:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/westinyang/hap-viewer</guid>
            <link>https://gitee.com/westinyang/hap-viewer</link>
        </item>
        <item>
            <title>
                <![CDATA[博通宣佈終止現有 VMware 合作伙伴計劃]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.crn.com%2Fnews%2Fvirtualization%2Fbroadcom-hands-vmware-partners-termination-notice" target="_blank">外媒報道稱</a></u>，博通近日宣佈將在 2024 年 2 月 4 日終止 VMware 此前與經銷商簽訂的「所有合作伙伴協議」，要求原有經銷商必須與博通重新簽約，且只有營收流水超過 50 萬美元（當前約 357 萬元人民幣）以上的經銷商才能加入新的計劃，其他合作伙伴都無法再銷售 VMware 產品。 &nbsp;</p><p>這一策略引發了部分經銷商的不滿和擔憂。他們認為博通此舉破壞了信任，並表示對於小型經銷商而言，這將是一個艱難的年末。一些合作伙伴表示，他們需要重新審視與 VMware 的關係，並考慮是否繼續銷售 VMware 產品。</p><p>博通對 VMware 的重組不僅對合作夥伴關係產生影響，也引發了對 VMware 未來發展的關注。業界觀察家表示，博通需要平衡 VMware 的既有業務和新戰略方向，以確保公司的長期發展。</p><p>隨着博通對 VMware 業務重組的深入推進，業界將關注其未來的戰略動向，以及如何平衡既有業務和新戰略的關係。對於合作伙伴和經銷商而言，他們將面臨重新簽約和適應新戰略的挑戰。</p><p>博通（Broadcom）此前以 690 億美元（當前約 4926.6 億元人民幣）併購 VMware，之後解僱了 1300 名 VMWare 員工，並將 VMware 雲服務「永久許可證」改為訂閲制度。</p><p><strong>延伸閲讀</strong></p><ul><li><a href="https://www.oschina.net/news/270967/vmware-by-broadcom-business-transformation" target="news">VMware 產品全面改為訂閲制</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:09:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273056/broadcom-hands-vmware-partners-termination-notice</guid>
            <link>https://www.oschina.net/news/273056/broadcom-hands-vmware-partners-termination-notice</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 萬字帶你熟悉靜態分析工具的評估測試]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>本文分享自華為雲社區《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F418850%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" target="_blank" rel="nofollow">靜態分析工具的評估測試</a>》，作者： Uncle_Tom。</p><span id="OSC_h1_1"></span><h1>1. 垂直極限</h1><p>還是先説故事。那是 2014 年參加的一個測試驅動（TDD）的培訓，培訓是 TDD 推廣的志願者組織的，在一個咖啡館裏搞的，週末兩天的免費培訓。</p><p>培訓過程中的一張圖和一個視頻讓我至今記憶尤新。</p><span id="OSC_h2_2"></span><h2>1.1. 一張圖</h2><p><img alt="" src="https://bbs-img.huaweicloud.com/blogs/img/20231224/1703421009200317830.png" referrerpolicy="no-referrer"></p><p>上面的兩個圖（原來培訓的那個圖找不到了，自己隨手塗鴉了一下）。</p><p>左邊是經過完整的系統的測試的軟件產品，每個節點都通過測試，這樣一層層的搭建起來的系統。看着就堅實可靠。</p><p>右邊的測試則是隨意的，很多地方都缺失了。任何一個風吹草動，一個異常都可能造成整個大廈傾覆。</p><p>不用説大家立刻就可以看懂，那個軟件產品更可靠，更讓人放心。</p><span id="OSC_h2_3"></span><h2>1.2. 一段影像</h2><p>視頻是電影《垂直極限》中開頭的一段。雖然過去 20 多年了，但這部電影仍然被奉做山難電影的經典之作，有興趣的朋友還是可以找來看一看的。</p><p><img alt="Vertical_limit" src="https://bbs-img.huaweicloud.com/blogs/img/20231224/1703420993405166999.png" referrerpolicy="no-referrer"></p><p>一個風和日麗的日子裏，老爸帶着兒子、女兒在一個高聳、陡峭的山峯上攀巖。他們已經來到了山峯的一半，在他們的上面個還有另一羣攀巖愛好者。</p><p>老爸一邊整理着自己的安全栓（攀巖過程中打在岩石中，然後利用登山繩固定自己的安全扣），一邊對兒子説：「檢查下你妹妹的安全栓。」</p><p>兒子看向下面的妹妹，妹妹説：「告訴他我們已經不是小孩子了。」</p><p>兒子打趣的對老爸説：「爸，她還需要一個安全栓。」</p><p>爸爸看向下面的兄妹兩人説：「萬一出事，那樣可撐不住。安妮，我不管你有多老練，聰明的攀巖者都會做好安全措施，兩個栓才安全，三個更好。在巖壁上再放個安全栓，我們才繼續攀。」</p><p>女兒生氣的對爸爸説：「爸，你別聽哥哥的，他在開玩笑，我放了三個安全栓。」</p><p>電影總是這樣，一段舒緩的節奏後面，總會有段緊張的讓人喘不過氣來的場面。不出意外，意外就會發生。</p><p>話音未落，先是一個登山包從山上面墜落下來，快速的經過三人。上面的菜鳥在登山的過程中揹包意外脫落，幫着的聖山包的登山繩造成一連串的連鎖反應，兩個登山者也不幸地被連帶着墜落下去。老爸、兒子也被着一連串的變故拖累到掛在了半空中，女兒的三個安全栓無法承擔三個人的重量，一個、兩個先後崩飛，只靠着最後的一個安全栓勉強的維持着女兒，以及掛在半空的老爸和兒子。最後在老爸的要求下，兒子不得不割斷了繩索，女兒和兒子看着老爸墜了下去。</p><p>看到這裏，大家都不禁須臾不已，再看看上面的圖，對系統的完整的測試有了更深刻的認識。</p><span id="OSC_h2_4"></span><h2>1.3. 思考</h2><p>在軟件的開發過程中，每一個節點的測試都是在為系統增加一個安全栓。由這樣一層層搭建起來的系統，整個系統才是安全、可靠的。否則任何一個意外都可能將整個系統帶飛。做工具和做單點能力驗證不同，需要更多的測試節點來保障工具的穩定性和可靠性。這個從學院裏出來的大部分朋友還沒有意識到這個問題，加之項目的管理的問題，就會把各種坑坑窪窪帶到生產中，使後期維護陷入無盡的深淵。</p><p>大家都喜歡做 0 到 1 的事情，出彩啊。很少有人願意做為 0 到 1 填坑的基礎工作，但一個工具要生存，能夠贏得最終的勝利，需要無數的這些幕後英雄。就像長津湖戰役一樣，指揮很重要，但更多的是需要後面無數的無名英雄，那些人才是撐起整個勝利的英雄。</p><p>那麼對於靜態分析工具，我們該如何構建一個穩定、可靠的靜態分析工具？如何評價一個靜態分析工具的檢查能力？</p><p>自從程序的誕生，程序分析便緊隨其後，人們視圖通過一個程序來分析編制的程序，保證編製程序運行結果的正確性。儘管後面的萊斯定理給出了這個問題的「不可判定性」，但並不會妨礙程序分析在這方面的卓越表現。</p><p><img alt="" src="https://bbs-img.huaweicloud.com/blogs/img/20231224/1703421059373679236.png" referrerpolicy="no-referrer"></p><p>儘管現在大模型能夠幫助我們生成程序代碼和對已有程序進行問題檢查，這似乎可以繞過我們一值以來使用的模式匹配的檢查方式，可以簡化模式的提煉，和根據模式再編寫檢查規則。 但如何保障生成代碼的安全性和可靠性，以及如何評估大模型的能力，仍然將是人工智能在今後很長一段時間需要解決的問題。</p><p>通過下面對三組測試用例的分析，希望能夠給靜態分析工具的測試和評估給大家一個指導性的啓發。</p><span id="OSC_h1_5"></span><h1>2. Juliet Java、C/CPP 測試用例集</h1><span id="OSC_h2_6"></span><h2>2.1. 創建背景</h2><p>2005 年美國國家標準與技術研究院 (National Institute of Standards and Technology (NIST))，簡稱 NIST，下屬的軟件質量組，成立了軟件保障指標和工具評估項目（Software Assurance Metrics And Tool Evaluation (SAMATE)），簡稱 SAMATE 項目。項目組的主要目的是通過開發支持軟件工具評估的方法、衡量工具和技術的有效性以及識別工具和方法中的差距來改善軟件保障，主要工作包括定義錯誤類，收集具有已知錯誤的程序語料庫，以及更好地瞭解工具的有效性。</p><p>圍繞這個目標，軟件保障指標和工具評估項目（SAMATE）建立了兩個子項目：</p><ul><li><p>軟件保障參考數據集（Software Assurance Reference Dataset (SARD)），簡稱 SARD，用於收集整理 C、C++、Java、PHP 和 C#針對軟件弱點的測試用例集；</p></li><li><p>軟件工具博覽會（Static Analysis Tool Exposition (SATE)），簡稱 SATE，用於工具製造商對用例進行測試和工具研討。截至 2021 年，已經舉辦了六場 SATE 活動。</p></li></ul><span id="OSC_h2_7"></span><h2>2.2. Juliet 用例集簡介</h2><p>Juliet 測試用例集就是軟件保障參考數據集 (SARD) 下的一個是用於檢測 C/C++ 和 Java 程序已知缺陷的集合。</p><p><strong>2010 年 12 月 1.0 版本。</strong>Juliet 測試用例集最早的 1.0 發佈於 2010 年 12 月，由軟件保障指標和工具評估項目（SAMATE）的開發團隊完成，名字選取了當時軟件保障參考數據集（SARD）的第十個貢獻者：國際無線電（International Radiotelephony）的字母表中的第十個單詞 「Juliet」 而的得名。</p><div><p><strong>2011 年 1.1 - 1.1.1 版本。</strong>Juliet 1.1 版本，是 Juliet 的開發團隊根據多個因素為選定的缺陷創建了測試用例，包括團隊的經驗、缺陷的重要性或嚴重性以及其出現的頻率。測試用例涵蓋了 2011 年 CWE/SAN TOP 25 個最危險的編程錯誤中的 14 個。剩下的 11 個缺陷是設計問題，例如 CWE-862 授權機制缺失，和 CWE-250 帶着不必要的權限執行，這些問題不適合用靜態分析的方式來檢測，所以未包含在測試用例中。</p><p><strong>2012 年 1.2 版本。</strong>2012 年的 Juliet 1.2 版本。基本形成了現在使用版本。是我們現在使用最多的版本，程序分析、自動修復、深度學習的論文基本上都使用了這裏面的用例，用於證明理論、工具的有效性。</p></div><div><p><strong>2017 年 1.3 版本。</strong>只對 1.2 版本的個別錯誤進行了修正。</p><ul><li>Juliet C/C++ 涵蓋 118 個 CWE 問題，1689 個場景，用例數: 181,140, 其中正例：117,041, 反例：64,099。</li><li>Juliet Java 涵蓋 112 個 CWE 問題，933 個場景，用例數: 96,537, 其中正例：67,656, 反例：28,881。</li></ul><strong>2022 年 1.3.1 版本。</strong>增加了 SARIF 的支持，試圖通過 SARIF 精確的給出告警的位置信息，但對數據流的支持的並不好，不能完全依靠現有的 SARIF 版本。 
 <p>注：關於 SARIF 請參考：</p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F245851" rel="nofollow" target="_blank">DevSecOps 工具與平台交互的橋樑 – SARIF 入門</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F254864" rel="nofollow" target="_blank">DevSecOps 工具與平台交互的橋樑 – SARIF 進階</a></li></ul><span id="OSC_h2_8"></span><h2>2.3. Juliet 用例構造的特點</h2><span id="OSC_h3_9"></span><h3>2.3.1. 統一明確的命名方式</h3><p>測試用例使用 CWE 作為命名和組織的基礎。測試用例力求對目標缺陷使用最具體的 CWE 條目。每個測試用例文件與一個 CWE 條目相關聯。</p><span id="OSC_h4_10"></span><h4>2.3.1.1. 測試用例文件名命名規範</h4><p>測試用例名由四個元素的組合唯一標識：</p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><th>組成部分</th><th>描述</th><th>是否強制</th></tr></tbody><tbody><tr><td>CWE</td><td>字符</td><td>是</td></tr><tr><td>CWE ID</td><td>CWE 的編號</td><td>是</td></tr><tr><td>_</td><td>分隔，下劃線</td><td>是</td></tr><tr><td>CWE 短描述</td><td>CWE 英文名稱的縮短版本，單詞之間用下劃線"_"連接</td><td>是</td></tr><tr><td>__</td><td>分隔，兩個下劃線"_"</td><td>是</td></tr><tr><td>問題場景</td><td>表示用例場景。場景描述單詞之間用下劃線"_"連接</td><td>是</td></tr><tr><td>_</td><td>分隔，下劃線，問題場景和案例編號之間進行連接</td><td>是</td></tr><tr><td>案例編號</td><td>基礎案例編號採用「01」</td><td>是</td></tr><tr><td>一個案例多文件定義</td><td>對同一個案例，如使用多個文件，可採用 a，b 等進行區別，或採用下劃線加不同的作用定義，例如_good 或_bad，表示正例或反例</td><td>否</td></tr></tbody></table><p>例如：</p><p>單文件用例：</p><strong>CWE190_Integer_Overflow__byte_console_readLine_add_01.java</strong><ul><li>CWE190： CWE 的編號，可以在 CWE 網站上查詢到這個編號對應的問題：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcwe.mitre.org%2Fdata%2Fdefinitions%2F190.html%3B" rel="nofollow" target="_blank">https://cwe.mitre.org/data/definitions/190.html;</a></li><li>Integer_Overflow：CWE190 描述的簡寫，整型溢出。CWE190 的完整描述是：整型溢出或越界折返;</li><li>byte_console_readLine_add： 場景描述：通過 readLine 函數從控制界面讀取字節流；</li><li>01：代表基礎用例。</li></ul><p><strong>多文件用例, 下面的一組文件構成了一個用例：</strong></p><ul><li>CWE190_Integer_Overflow__byte_console_readLine_add_81_bad.java</li><li>CWE190_Integer_Overflow__byte_console_readLine_add_81_base.java</li><li>CWE190_Integer_Overflow__byte_console_readLine_add_81_goodB2G.java</li><li>CWE190_Integer_Overflow__byte_console_readLine_add_81_goodG2B.java</li><li>CWE190_Integer_Overflow__byte_console_readLine_add_81a.java 
   <ul><li>CWE190： CWE 的編號，可以在 CWE 網站上查詢到這個編號對應的問題：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcwe.mitre.org%2Fdata%2Fdefinitions%2F190.html%3B" rel="nofollow" target="_blank">https://cwe.mitre.org/data/definitions/190.html;</a></li><li>Integer_Overflow：CWE190 描述的簡寫，整型溢出。CWE190 的完整描述是：整型溢出或越界折返;</li><li>byte_console_readLine_add： 場景描述：通過 readLine 函數從控制界面讀取字節流；</li><li>81: 數據流案例，案例將參數傳遞給通過引用調用的抽象方法；</li><li>_bad: 表示這是個反例的文件；</li><li>_base: 表示這個是用例的主文件；</li><li>_goodB2G: good 表示這是個正例的文件，同時 B2G 表示污點（Bad）會經過清洗到達（2(to)）爆發點，但由於做了清洗，變成了無污染的，不會引起問題（Good）;</li><li>_goodG2B: good 表示這是個正例的文件，同時 G2B 表示污點經過清洗變成無污染（Good）到達（2(to)）爆發點（Bad），但由於是無污染的數據，也不會引起問題;</li><li>a: 表示這是個輔助文件。</li></ul></li></ul><span id="OSC_h4_11"></span><h4>2.3.1.2. 測試用例函數名命名規範</h4><p>有問題（反例）函數，通常以 bad 命名, 並可使用正則表達式匹配：<code>^bad$</code>;</p><p>沒問題（正例）的函數，通常以 good 命名, 並可使用正則表達式匹配：<code>^good$</code>;</p> 對於用例中存在多個正例的函數，有以下三種命名方式，可使用正則表達式匹配： 
 <code>^good(\d+|G2B\d*|B2G\d*)$</code>; 
 <ul><li>默認或通用的方式，採用例如： good1（）、good2（）、good3（）的命名方式；</li><li>當一個好的源將安全數據傳遞到一個潛在的壞接收器時，採用例如：goodG2B（）、goodG2B1（）、goodG2B2（）、goodG2B3（） 的方式命名;</li><li>當不良源將不安全或潛在不安全的數據傳遞給良好源時，採用例如：goodB2G（）、goodB2G1（）、goodB2G2（）、goodB2G3（）的方式命名；</li></ul><ul><li>對於數據流用例還遵守以下命名方式：有問題的污染源，採用正則表達式：<code>^badSource$；</code>有問題的爆發點，採用正則表達式：<code>^badSink$；</code>無問題的污染源，採用正則表達式：<code>^good(G2B\d*|B2G\d*)?Source$；</code>無問題的爆發點，採用正則表達式：<code>^good(G2B\d*|B2G\d*)?Sink$</code>。</li></ul><span id="OSC_h4_12"></span><h4>2.3.1.3. 命名規則在測試中帶來的好處</h4><p>從文件名就能判斷出檢測問題、場景、適用的案例類型，有的還可以知道文件是正例、還是反例；</p><p>從發生問題的函數名就可以知道，所處的函數是正例，還是反例；</p><p>通常檢測工具都會給出問題所在的文件和函數，這樣在查看問題的時候能夠立刻判斷出檢測結果的有效性；</p> 嚴格的命名方式，也便於使用程序自動化的檢查結果做出快速的判斷。 
 <span id="OSC_h3_13"></span><h3>2.3.2. 每個問題給出發生問題的可能場景</h3><p>Juliet 還為每個問題（CWE）枚舉了一些發生場景，一些場景還使用模板結合控制流和數據流進行了枚舉，從而測試更加廣泛的問題發生的可能性，以提高問題的覆蓋率。</p><p>Juliet 一共採用了三類模板：</p><ul><li>控制流模板（point-flaw）</li><li>單一污點源和爆發點模板（source-sink）；</li><li>多污點源和爆發點模板（sources-sinks);</li></ul><p>Juliet Java</p><ul><li>Juliet Java 一共 122 個 CWE, 覆蓋 933 個場景。</li><li>用模板生成的場景 823 個，這包括：point-flaw： 92 個場景；sources-sink： 197 個場景；sources-sinks： 534 個場景;</li></ul><ul><li>單一場景 110 個。</li></ul><p>Juliet C/C++</p><ul><li>Juliet C/C++ 一共 118 個 CWE, 覆蓋 1689 個場景。</li><li>用模板生成的場景 1509 個，這包括：</li></ul><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><th>Template</th><th>C</th><th>CPP</th><th>Total</th></tr></tbody><tbody><tr><td>point-flaw</td><td>259</td><td>18</td><td>277</td></tr><tr><td>sources-sink</td><td>499</td><td>233</td><td>723</td></tr><tr><td>sources-sinks</td><td>357</td><td>152</td><td>509</td></tr><tr><td>Total</td><td>1106</td><td>403</td><td>1509</td></tr></tbody></table></div><div><p>而單一場景 180 個。</p><span id="OSC_h3_14"></span><h3>2.3.3. 每個場景使用不同的案例進行覆蓋</h3><p>Juliet 用例還真對每個場景結合控制流和數據流進行了枚舉，以達到每個場景在不同代碼條件下的檢測能力的覆蓋。</p><p>從下表我們看到類型基本上涵蓋了編程語言通常所需要的基本語法，例如條件判斷（if），條件分支（swith），循環（while，for），函數間和程序間不同層數的調用，以及不同類型的參數傳遞方式。</p><p>案例類型明細</p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><th>案列編號</th><th>案例類型（流類型）</th><th>類型描述</th><th>C</th><th>CPP</th><th>JAVA</th></tr></tbody><tbody><tr><td>01</td><td>無</td><td>基線——最簡單的缺陷形式</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>02</td><td>控制流</td><td>if(true) 和 if(false)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>03</td><td>控制流</td><td>if(5==5) 和 if(5!=5)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>04</td><td>控制流</td><td>if(PRIVATE_STATIC_FINAL_TRUE) 和 if(PRIVATE_STATIC_FINAL_FALSE)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>05</td><td>控制流</td><td>if(privateTrue) 和 if(privateFalse)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>06</td><td>控制流</td><td>if(PRIVATE_STATIC_FINAL_FIVE==5) 和 if(PRIVATE_STATIC_FINAL_FIVE!=5)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>07</td><td>控制流</td><td>if(privateFive==5) 和 if(privateFive!=5)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>08</td><td>控制流</td><td>if(privateReturnsTrue()) 和 if(privateReturnsFalse())</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>09</td><td>控制流</td><td>if(IO.STATIC_FINAL_TRUE) 和 if(IO.STATIC_FINAL_FALSE)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>10</td><td>控制流</td><td>if(IO.staticTrue) 和 if(IO.staticFalse)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>11</td><td>控制流</td><td>if(IO.staticReturnsTrue()) 和 if(IO.staticReturnsFalse())</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>12</td><td>控制流</td><td>if(IO.staticReturnsTrueOrFalse())</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>13</td><td>控制流</td><td>if(IO.STATIC_FINAL_FIVE==5) 和 if(IO.STATIC_FINAL_FIVE!=5)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>14</td><td>控制流</td><td>if(IO.staticFive==5) 和 if(IO.staticFive!=5)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>15</td><td>控制流</td><td>switch(6) and switch(7)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>16</td><td>控制流</td><td>while(true)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>17</td><td>控制流</td><td>for 循環</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>18</td><td>控制流</td><td>goto 語句</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>21</td><td>控制流</td><td>流由私有變量的值控制。所有方法都包含在一個文件中。</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>22</td><td>控制流</td><td>流由公共靜態變量的值控制。source 和 sink 在兩個不同的文件裏。</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>31</td><td>數據流</td><td>在同一方法中使用數據副本流動</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>32</td><td>數據流</td><td>在同一個函數中使用兩個指向同一個值的指針的數據流</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>33</td><td>數據流</td><td>在同一函數中使用對數據的 C++ 引用</td><td>N</td><td>Y</td><td>N</td></tr><tr><td>34</td><td>數據流</td><td>使用包含兩個訪問相同數據的方法的聯合（在同一函數內）</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>41</td><td>數據流</td><td>作為參數從一個方法傳遞到同一類中的另一個方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>42</td><td>數據流</td><td>在同一類中從一個方法返回到另一個方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>43</td><td>數據流</td><td>數據使用 C++ 引用從同一源文件中的一個函數流向另一個函數</td><td>N</td><td>Y</td><td>N</td></tr><tr><td>44</td><td>數據流</td><td>數據作為參數從一個函數傳遞到通過函數指針調用的同一源文件中的函數</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>45</td><td>數據流</td><td>作為私有類成員變量從一個方法傳遞到同一類中的另一個方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>51</td><td>數據流</td><td>在同一個包的不同類中作為參數從一個方法傳遞到另一個方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>52</td><td>數據流</td><td>在同一個包的三個不同類中作為參數從一個方法傳遞到另一個方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>53</td><td>數據流</td><td>在同一個包的四個不同類中作為參數從一個方法傳遞到另一個方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>54</td><td>數據流</td><td>在同一個包的五個不同類中作為參數從一個方法傳遞到另一個方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>61</td><td>數據流</td><td>在同一個包的不同類中通過一個方法的返回值傳遞到另一個方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>62</td><td>數據流</td><td>使用 C++ 引用從不同源文件中的一個函數到另一個函數的數據流</td><td>N</td><td>Y</td><td>N</td></tr><tr><td>63</td><td>數據流</td><td>指向不同源文件中從一個函數傳遞到另一個函數的數據的指針</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>64</td><td>數據流</td><td>void 指向不同源文件中從一個函數傳遞到另一個函數的數據的指針</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>65</td><td>數據流</td><td>數據作為參數從一個函數傳遞到通過函數指針調用的不同源文件中的函數</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>66</td><td>數據流</td><td>在同一個包中的不同類中通過數組從一個方法傳遞到另一個方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>67</td><td>數據流</td><td>在同一個包中的不同類中通過類從一個方法傳遞到另一個方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>68</td><td>數據流</td><td>在同一個包中的不同類中通過類的成員變量從一個方法傳遞到另一個方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>71</td><td>數據流</td><td>在同一個包中的不同類中通過類的引用從一個方法傳遞到另一個方法</td><td>N</td><td>N</td><td>Y</td></tr><tr><td>72</td><td>數據流</td><td>在同一個包中的不同類中將向量從一個方法傳遞到另一個方法</td><td>N</td><td>Y</td><td>Y</td></tr><tr><td>73</td><td>數據流</td><td>在同一個包中的不同類中將 LinkedList 從一個方法傳遞到另一個方法</td><td>N</td><td>Y</td><td>Y</td></tr><tr><td>74</td><td>數據流</td><td>在同一個包中的不同類中將 HashMap 從一個方法傳遞到另一個方法</td><td>N</td><td>Y</td><td>Y</td></tr><tr><td>75</td><td>數據流</td><td>將序列化對象從一個方法傳遞到同一包中不同類中的另一個方法</td><td>N</td><td>N</td><td>Y</td></tr><tr><td>81</td><td>數據流</td><td>將參數傳遞給通過引用調用的抽象方法</td><td>N</td><td>Y</td><td>Y</td></tr><tr><td>82</td><td>數據流</td><td>將參數傳遞給通過指針調用的虛函數的數據</td><td>N</td><td>Y</td><td>N</td></tr><tr><td>83</td><td>數據流</td><td>通過在堆棧上聲明類對象將數據傳遞給類構造函數和析構函數</td><td>N</td><td>Y</td><td>N</td></tr><tr><td>84</td><td>數據流</td><td>通過在堆上聲明類對象並在使用後將其刪除來傳遞給類構造函數和析構函數的數據</td><td>N</td><td>Y</td><td>N</td></tr></tbody></table><span id="OSC_h3_15"></span><h3>2.3.4. 缺點</h3><p>Juliet 可以説是堪稱完美的測試用例集，但隨着時間的推移，編程語言的迭代，它也顯現出一些缺點：</p><ul><li>一些用例的寫法開始變得老舊，可能不能勝任新的場景；</li><li>沒有對語言的所有語法特點做覆蓋，特別是新的一些語法類型；比如：lamda 表達式；</li><li>用例的設計存在大量的重疊，特別是對數據流的檢測，每個場景都使用了相同的模板，產生了大量的用例。其實對於數據流的處理，完全可以分成：污染源、污染傳遞、污染清理、以及爆發四個不同的維度進行分別測試，這樣可以大大提升測試效率。</li></ul><span id="OSC_h1_16"></span><h1>3. OwaspBenchmark 測試用例集</h1><span id="OSC_h2_17"></span><h2>3.1. 用例背景</h2><p>OWASP(Open Worldwide Application Security Project (OWASP)) 基金會致力於通過其社區主導的開源軟件項目、全球數百個分會、數萬名成員以及舉辦當地和全球會議來提高軟件的安全性。</p><span id="OSC_h2_18"></span><h2>3.2. 用例簡介</h2><p>OWASP Benchmark Project 是一個 Java 測試套件，旨在評估自動化軟件漏洞檢測工具的準確性、覆蓋率和速度。</p><ul><li>1.0 版本於 2015 年 4 月 15 日發佈，共有 20983 個測試用例。</li><li>1.1 版本於 2015 年 5 月 23 日發佈。1.1 版本在前一版本的基礎上進行了改進，確保每個漏洞區域都有真陽性和假陽性。</li><li>1.2 版本於 2016 年 6 月 5 日首次發佈（1.2 測試版於 2015 年 8 月 15 日發佈）。自那以後，v1.2 版本一直在不斷調整。1.2 版本將測試用例數量控制在小於 3000 個測試用例，以便快速得到測試結果。</li></ul><span id="OSC_h2_19"></span><h2>3.3. 用例設計和組成方式</h2><p>下面以 1.2 版本為例進行説明。</p><span id="OSC_h3_20"></span><h3>3.3.1. 用例問題的覆蓋</h3><p>從下面這個表可以看出 Benchmark 更多的注重覆蓋 Web 類的問題的檢查，同時重點覆蓋了 OWASP TOP 10 中的主要能夠通過靜態檢查工具檢查的問題。關於 OWASP TOP 10 可以參考:<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F312926" rel="nofollow" target="_blank">CWE 4.6 和 OWASP TOP10(2021)</a>。</p><p>Benchmark 用例集主要以加密問題，以及注入類問題為主，這也巧合的與靜態檢查技術相互匹配。加密問題多用抽象語法樹（AST）的遍歷來返現加密函數，並對其做出判斷。而注入類問題多用數據流的污點分析技術來追蹤外部輸入是否會對爆發點形成可達的路徑。有關污點分析技術，可以參考:<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F330804" rel="nofollow" target="_blank">使用污點分析檢查 log4j 問題</a>。</p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><th>檢測問題</th><th>CWE TOP 25（2023）</th><th>OWASP TOP 10（2021）</th><th>正確用例</th><th>錯誤用例</th><th>用例總數</th></tr></tbody><tbody><tr><td>CWE-22 對路徑名的限制不恰當 (路徑遍歷)</td><td>8</td><td>A01：2021-中斷訪問控制</td><td>135</td><td>133</td><td>268</td></tr><tr><td>CWE-327 使用已被攻破或存在風險的密碼學算法</td><td>-</td><td>A02：2021-加密故障</td><td>116</td><td>130</td><td>246</td></tr><tr><td>CWE-328 可逆的單向哈希</td><td>-</td><td>A02：2021-加密故障</td><td>107</td><td>129</td><td>236</td></tr><tr><td>CWE-330 使用不充分的隨機數</td><td>-</td><td>A02：2021-加密故障</td><td>275</td><td>218</td><td>493</td></tr><tr><td>CWE-501 違背信任邊界</td><td>-</td><td>A04：2021-不安全的設計</td><td>43</td><td>83</td><td>126</td></tr><tr><td>CWE-614 HTTPS 會話中未設置’Secure’屬性的敏感 Cookie</td><td>-</td><td>A02：2021-加密故障</td><td>31</td><td>36</td><td>67</td></tr><tr><td>CWE-643 XPath 表達式中數據轉義處理不恰當 (XPath 注入)</td><td>-</td><td>A03：2021-注入</td><td>20</td><td>15</td><td>35</td></tr><tr><td>CWE-78 OS 命令中使用的特殊元素轉義處理不恰當 (OS 命令注入)</td><td>5</td><td>A03：2021-注入</td><td>125</td><td>126</td><td>251</td></tr><tr><td>CWE-79 在 Web 頁面生成時對輸入的轉義處理不恰當 (跨站腳本)</td><td>2</td><td>A03：2021-注入</td><td>209</td><td>246</td><td>455</td></tr><tr><td>CWE-89 SQL 命令中使用的特殊元素轉義處理不恰當 (SQL 注入)</td><td>3</td><td>A03：2021-注入</td><td>232</td><td>272</td><td>504</td></tr><tr><td>CWE-90 LDAP 查詢中使用的特殊元素轉義處理不恰當 (LDAP 注入)</td><td>-</td><td>A03：2021-注入</td><td>32</td><td>27</td><td>59</td></tr></tbody></table><span id="OSC_h3_21"></span><h3>3.3.2. 問題場景的覆蓋</h3><p>Benchmark 用例對每個問題採用: 場景枚舉 + 組合的方式完成用例的設計，並通過此方法形成問題的覆蓋。</p><p>這裏以我們熟悉的：CWE89 SQL 注入問題來説明這種用例的設計方式。用例集中 CWE 89 SQL 注入問題一共有 232 個正例，272 個反例，共計 504 個用例。</p><p>因為 SQL 是注入是通過外部不可信數據，傳播到 SQL 腳本執行的位置而導致的安全問題。這個外部數據傳播的過程可以分為：</p><ul><li>接收數據</li></ul><p>用例使用了我們常用的從 http 請求中得到外部數據，然後將數據以不同方法存入不同類型的字段。用例中列舉了下面 9 種不同的方法。例如放入：字符串、枚舉、數組等。</p><p><img alt="" src="https://bbs-img.huaweicloud.com/blogs/img/20231226/1703604543686840668.png" referrerpolicy="no-referrer"></p><ul><li>數據傳遞</li></ul><p>用例接收到數據後，使用不同的傳遞方式，向程序內傳遞，並對信息採用不同的操作方式進行加工。用例中列舉了下面 10 種不同的方法。例如：通過，創建一個新類然後調用函數傳遞、if 條件表達式、內部類等。</p><p><img alt="" src="https://bbs-img.huaweicloud.com/blogs/img/20231226/1703604561629143041.png" referrerpolicy="no-referrer"></p><ul><li>問題爆發</li></ul><p>最終數據會拼裝成 SQL 語句，並通過不同的調用方式執行。用例中列舉了 3 類，28 種不同的執行方式。</p><p><img alt="" src="https://bbs-img.huaweicloud.com/blogs/img/20231226/1703604573373250631.png" referrerpolicy="no-referrer"></p><ul><li>場景組合</li></ul><p>得到上面三種基本節點後，通過組合的方式形成用例。下表列舉了 CWE89 SQL 注入 272 個反例組合的場景：</p><p><img alt="" src="https://bbs-img.huaweicloud.com/blogs/img/20231226/1703604585829917726.png" referrerpolicy="no-referrer"></p><span id="OSC_h3_22"></span><h3>3.3.3. OwaspBenchmark 用例集的缺點</h3><p>OwaspBenchmark 應為涵蓋了 Web 應用的主要安全問題，使用例集基本上成為了 Web 應用安全測試的基本用例集。但它也存在一些缺點。</p><ul><li>用例名只採用了簡單的編號方式，從用例看不出測試目標：用例反應的問題、場景、正例、反例這些基本信息，而不得不給每個用例加了一個 xml 文件來説明這些用例的基礎信息。</li><li>用例缺少場景的描述，工具測試後，無法得到覆蓋場景和非覆蓋場景的統計信息，只知道覆蓋率。具體哪些場景缺失，要一個個用例去自己分析。</li><li>缺少檢測語言語法級別的場景的覆蓋，例如 lamda 表達式，工具在數據流的分析過程中，任何一個語法的不適配都會導致分析中斷。</li></ul><span id="OSC_h1_23"></span><h1>4. Alipay 測試用例集</h1><span id="OSC_h2_24"></span><h2>4.1. 用例背景</h2><p>針對 xAST 領域缺乏有效衡量技術能力標準的業界痛點，螞蟻安全團隊聯合螞蟻程序分析團隊、浙江大學網絡空間安全學院的 20 餘位專家學者，共同設計了 xAST 評價體系及其測試樣本套件 Benchmark，致力於成為應用安全測試工具的「度量衡」。</p><ul><li><p>目標：打造具備行業共識的 xAST 能力評價體系技術標準</p></li><li><p>價值：衡量 xAST 產品技術能力，指引 xAST 技術發展方向，輔助企業產品選型</p></li></ul><span id="OSC_h2_25"></span><h2>4.2. 用例設計和組成方式</h2><p>用例設計的核心思想是：分層設計，降低評價複雜度。</p><p>從底層到上層分成引擎能力、規則能力和產品化能力這三層。對這三層分別設計評價體系和測試樣本，既降低了每一層評價的複雜度，又使測試結果可以直接反映問題出在哪一層。</p><p>看的出，用例集的設計者試圖希望結合 Juliet、Owaspbenchmark 的優點，在形成一種分層的評估測試方式。來完善前面兩個用例集在語法層面的不足。</p><p>目前用例集只推出了一個雛形，還在建設中。</p><span id="OSC_h1_26"></span><h1>5. 理想的測試用例集</h1><p>最後再來總結下，理想的測試用例集應該是怎樣的。</p><ul><li>能夠從用例的命名上，清楚的反映：測試問題、場景、正例、反例；或從目標函數上明確知道在這個函數內的告警是正確的告警，還是誤報；</li><li>能夠覆蓋業界主要的安全問題，例如：CWE TOP 25、OWASP TOP 10 等常見的問題；</li><li>能夠覆蓋檢測語言的主要語法和語言的主要使用方式；</li><li>能夠有一定的場景枚舉和組合，以增加測試用例的複雜度，這有點類似 fuzzy 測試了。</li></ul><p>寫在最後，測試用例集的結果，只能反映一個工具的基礎能力，並不能取代通過實際的工程來打磨檢查工具。</p><p>一般的程序員只需要在問題和實現上建立一條通道就好，但程序分析的程序員卻需要考慮各種程序員實現問題的可能性。</p><span id="OSC_h1_27"></span><h1>6. 參考</h1><ul><li>SAMATE:<span>&nbsp;</span>https://www.nist.gov/itl/ssd/software-quality-group/samate</li><li>SARD:<span>&nbsp;</span>https://samate.nist.gov/SARD/</li><li>Juliet C/CPP 1.3:<span>&nbsp;</span>https://samate.nist.gov/SARD/test-suites/112</li><li>Juliet Java 1.3:<span>&nbsp;</span>https://samate.nist.gov/SARD/test-suites/111</li><li>owasp benchmark:<span>&nbsp;</span>https://owasp.org/www-project-benchmark/</li><li>Alipay sast:<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Falipay%2Fant-application-security-testing-benchmark" rel="nofollow" target="_blank">https://github.com/alipay/ant-application-security-testing-benchmark</a></li></ul><p>&nbsp;</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" rel="nofollow" target="_blank"><strong>點擊關注，第一時間瞭解華為雲新鮮技術~</strong></a></p></div></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4526289/blog/10433132</guid>
            <link>https://my.oschina.net/u/4526289/blog/10433132</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[周鴻禕：鴻蒙原生必將成功]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>360 集團創始人、董事長周鴻禕今日在微博宣佈，360 瀏覽器等應用完成了鴻蒙原生核心版本的開發。並表示，未來還會把全線產品轉移到鴻蒙生態裏。</p><blockquote><p><span style="color:#333333">我在直播裏很多次旗幟鮮明地表態，任何情況下都會支持華為，不能只停留在口號。今天我們正式宣佈 360 瀏覽器等應用完成了鴻蒙原生核心版本的開發，未來我們還會把全線產品轉移到鴻蒙生態裏。我相信鴻蒙會成為中國最大的操作系統，鴻蒙原生必將成功。</span></p></blockquote><p><img height="391" src="https://oscimg.oschina.net/oscnet/up-f5c3b4b96af20fc9564ad022c5e8336ee24.png" width="500" referrerpolicy="no-referrer">&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 09:14:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272979</guid>
            <link>https://www.oschina.net/news/272979</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[RISC-V 新成果！openKylin 社區完成對 RV64G 架構支持]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">openKylin 社區繼與深度數智聯合發佈默認搭載 openKylin 1.0 操作系統的全球首款 RISC-V 筆記本電腦 DC-ROMA 後，近日，聯合蘇州睿芯公司，</span><strong><span style="color:#000000">openKylin 平台正式部署上線對 RV64G 架構支持</span></strong><span style="color:#000000">，後續 RV64G 非壓縮指令集愛好者可以通過社區平台開發編譯並部署自己的代碼。</span></span></p><div><p style="text-align:center"><img alt="" height="410" src="https://oscimg.oschina.net/oscnet/up-d435b9748188f6ead24dab10652e7b259f4.png" width="940" referrerpolicy="no-referrer"></p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">RISC-V 是一個自由的指令集，硬件廠商可以基於國際基金會認可的標準，自主擴展，目前市場上很多廠商是基於 RV64GC 來生產產品，但是也有廠商基於 RV64G 來生產產品，為配合國內廠商的市場需求，openKylin 社區率先推出對 RV64G 架構支持。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#6ec1f5">一、RV64G 架構簡介</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">相比較於目前在嵌入式小型設備上應用更廣泛的 RV64GC（即大家比較熟悉的 riscv64）, RV64G 更加聚焦於通用計算場景功能，服務器或者桌面系統。其中：</span></span></p><ul><li><span><span style="color:#000000">「RV」代表 RISC-V；</span></span></li></ul><ul><li><span><span style="color:#000000">「64」代表所支持的指令是 64 位的（實際上，交叉編譯器在生成代碼時可能會採用 32 位指令減小生成的目標代碼長度），地址長度和寄存器長度都為 64 位；</span></span></li><li><span><span style="color:#000000">「G」代表通用（General）計算平台。實際上，「G」等效於「IMAFD」，其中「I」代表整數（Integer）計算指令、整數 load、整數 store 以及控制流（如分支跳轉）指令，這些指令在任何 RISC-V 的實現中都是必須的；「M」代表乘法（Multiply），即平台支持乘法和除法運算；「A」代表原子（Atomic）擴展，支持對寄存器進行的原子讀、修改和原子寫操作，這些操作在多核設計中非常有用；「F」代表單精度浮點（Float）運算支持，「D」代表雙精度浮點（Double）運算支持。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">RV64G 和 RV64GC 之間的主要區別在於是否包含壓縮指令集（C 指令集）。RV64GC 在 RV64G 的基礎上增加了 C 指令集，這些指令用於縮小指令長度，降低代碼佔用空間，RV64G 則不包含這些壓縮指令，因此 RV64G 的應用程序可以在 RV64GC 的硬件上運行，反之則不行。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">比較而言，RV64GC 比 RV64G 具有更高的代碼密度，程序具有更小的 footprint，可以更有效地利用內存空間，這些特點讓 RV64GC 指令在嵌入式應用中更有優勢；另一方面，RV64G 的硬件實現可能比 RV64GC 更簡單，可採用簡化指令譯碼邏輯，更容易預測指令預取模式，減少內存訪問次數、提高指令執行速度，降低功耗，設計人員可以更好的對高性能計算進行優化。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#6ec1f5">二、開發過程</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">1.基礎工具鏈改造編譯驗證。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">第一階段，對基礎編譯工具進行適配，包括 gcc，glibc，binutils 源碼包的修改編譯，技術攻關，以適配 RV64G 新架構。運行新編譯的 gcc 版本，檢查相關輸出參數，確認為-- -with-arch=rv64imafd 表示修改成功。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">2.stage0/ bootstroop 階段相關包的編譯。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">基於第一階段完成的基礎編譯工具鏈，開始 bootstroo 階段相關包的編譯工作。包括 apt，dpkg，llvm，python3，perl，cmake，make，openmpi，netplan.io，openssl，meson 等軟件包的編譯工作。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">3.初期上層應用包編譯工作。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">完成前兩步中的軟件包編譯工作後，需要進一步擴展軟件包的數量。在本地編譯環境下通過腳本逐層編譯更多上層應用包。同時驗證使用 RV64GC 相關依賴包與現有 RV64G 包混合編譯沒有問題。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">4.Choort 平台編譯環境調試製作。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">使用目前已重新編譯的 RV64G 架構新軟件包，來構建 OKBS 平台的 chroot 基礎環境，調試過程碰到架構符號相關的較多問題，需要多次重構測試，過程中不斷嘗試修改 chroot 的系統文件。直到可以正常編譯出 rv64g.deb 格式的二進制文件。製作完成的 chroot 地址為：</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><span style="color:#0052ff">http://api.build.openkylin.top/devel/openkylin/yangtze/rv64g</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">5.平台架構新增部署，與編譯機搭建。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">為了與現有 RV64GC 架構做區分，在 OKBS 系統上增加 RV64G 架構相關配置數據。利用之前基於新架構編譯完成的軟件包，新增創建 source.list 源，作為編譯環境的依賴源。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">6.初期編譯環境調試。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">上線初期，解決新架構 chroot 與 OKBS 系統融合，編譯依賴源 RV64G 架構修改等問題。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#6ec1f5">三、RV64G 架構支持優勢</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">1.</span><strong><span style="color:#000000">支持 RV64G 架構的代碼同源編譯</span></strong><span style="color:#000000">，即</span><strong><span style="color:#000000">代碼一次提交</span></strong><span style="color:#000000">。可在 OKBS 平台同源編譯出 AMD64、I386、ARM64、RV64GC、RV64G 五個架構的二進制包，無需再單獨維護一套 RV64G 軟件源及代碼倉庫，提升 RV64G 架構代碼開發維護效率。</span></span></p><div><p style="text-align:center"><img height="343" src="https://oscimg.oschina.net/oscnet/up-e3b0d0deee341c3cf2c9b95667d25b56b29.png" width="921" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">2.</span><strong><span style="color:#000000">支持 RV64G 架構軟件倉庫的同源發佈</span></strong><span style="color:#000000">，有效提升 RV64G 架構軟件倉庫的管理和維護升級效率。</span></span></p><div><p style="text-align:center"><img alt="" height="521" src="https://oscimg.oschina.net/oscnet/up-c9f3cf8283f562f55599cdc9ece977b4ecb.png" width="1358" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><div><p style="text-align:center"><img alt="" height="224" src="https://oscimg.oschina.net/oscnet/up-989b966311f60b0bceab547c82705c8fde3.png" width="640" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">3.</span><strong><span style="color:#000000">鏡像製作與版本發佈統一規範化</span></strong><span style="color:#000000">。在鏡像製作與版本發佈管理上可與其他架構以同流程處理，統一 RV64G 架構版本構建規範。</span></span></p><div><p style="text-align:center"><img alt="" height="418" src="https://oscimg.oschina.net/oscnet/up-ff54131837683f63c926c6bcabafa8a63cd.png" width="652" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">4.</span><strong><span style="color:#000000">解決與 RV64GC 架構名稱衝突的問題</span></strong><span style="color:#000000">，至此可以兼容 RISCV-V 規範的兩種指令集架構的編譯工作。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">5.</span><strong><span style="color:#000000">編譯機可同時支持 RV64GC 和 RV64G 兩種架構</span></strong><span style="color:#000000">，有效提升編譯機資源利用率。</span></span></p><div><p style="text-align:center"><img height="484" src="https://oscimg.oschina.net/oscnet/up-78f5b565841630b75a362cc5f5ff57d9363.png" width="909" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><div><p style="text-align:center"><img alt="" height="408" src="https://oscimg.oschina.net/oscnet/up-28aee798583cba92a8d59b14df44d4e814c.png" width="360" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">後續蘇州睿芯公司將繼續攜手 openKylin 社區，成立 RV64G SIG 組，加大資源投入，解決軟件包編譯過程中遇到的問題，並完成該架構鏡像製作、硬件適配、軟件源管理和生態需求軟件自主構建等，進一步集成基於 RV64G 架構的桌面與服務器整機系統。歡迎感興趣的小夥伴加入我們，攜手共創！</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 07:52:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272960</guid>
            <link>https://www.oschina.net/news/272960</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[一個公司到底需要幾個 DBA]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>前段時間某家公司透露自家有 1000 人的 DBA 團隊，一時成為了數據庫圈內討論的焦點。昨天又讀到「<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0NDIxNDg5Mg%3D%3D%26mid%3D2247486204%26idx%3D1%26sn%3D179fbefbee62f538f07dfcbc81fe9585%26scene%3D21%23wechat_redirect" target="_blank">DBA 團隊的規模應該是什麼樣的配置</a>」。正好到年底了，不少公司也要做新年的預算，其中就包括 HC 的規劃。所以也分享一點想法。</p><p>先明確這裏講的 DBA 指的是專職負責數據庫管理的人員，不算還身兼其他職責的人員，也不包括數據庫內核開發人員。</p><p>首先 1000 人的 DBA 團隊肯定是言過其實的，這也是當初新聞公佈後，引起大家討論的原因。在我們所居住的藍色星球上，應該還不存在 1000 人規模的 DBA 天團。那麼正常一個公司該養幾個 DBA 比較合適呢？下面就按照公司的發展階段進行闡述。</p><h2>&lt; 30 人 - 不需要 DBA</h2><p>公司研發人數在 30 人以下規模時是不需要 DBA 的，通常這個階段的職責由團隊裏的後端工程師，DevOps / 平台工程師或者技術負責人來兼職。這個階段建議無腦選擇雲數據庫託管服務，因為自帶開箱即用的運維，監控，備份。至於數據庫的日常變更，可以引入工具，也可以選擇不引入。如果不引入的話，由技術負責人通過設計評審，代碼審核等方式也能應付。</p><h2>30 人 ～ 50 人 - 第一個 DBA 和工具</h2><p>數據庫相關工作的併發加大，兼職已經很難應付。同時因為業務開始有起色，所以需要為更長期的數據治理做鋪墊。所以這個階段公司就需要考慮引入專門的 DBA 來負責數據庫相關事宜，隨着引入第一個 DBA，也要同時考慮引入相關的數據庫工具，其中最核心的就是涉及研發流程的數據庫變更審核工具。至於究竟在哪個節點引入，一個是看之前兼職同學處理 DBA 事務的佔比，50% 是一個零界點。另一個是看整個技術團隊高優先級工作項裏， 是否超過 50% 都是數據庫相關。當然還有一個指標，就是故障數，如果已經連續兩個月發生過影響業務的數據庫故障，那引入 DBA 就是迫在眉睫了。</p><p>再説一下引入的第一個 DBA 的定位。通常在這個階段，公司還很難吸引到比較優秀的 DBA，也沒有必要。第一個 DBA 不需要構建體系，只要建立起機制。機制分兩部分，一部分是數據庫運維的常態化，比如優化監控，巡檢以及備份。另一部分則是規範數據庫訪問和變更上線的流程。這兩件事情都需要依託工具來落地。前者通常是圍繞雲平台提供的能力，通過配置或者少量的二開來實現；後者則基本完全依賴於引入工具，業內比較流行的 Archery, Yearning 便是出自 DBA 之手，解決這塊的問題。Bytebase 同樣也是由兼具研發和 DBA 背景的團隊打造的開源產品。</p><p>這個階段，也需要研發負責人在一旁做策應。因為引入 DBA 和工具，會限制研發的自由度，而 DBA 和研發的訴求點並不一致，DBA 又是新加入的成員。這個時候需要研發負責人從中斡旋，避免雙方牴觸，產生部門牆。説到底，在這個階段，仍然是業務絕對優先，所以如果研發以業務優先為理由不願意配合，DBA 建立的流程工具都能被繞過。</p><p>另一方面研發負責人也要着力培養 DBA 去熟悉業務，幫助他能跟隨公司成長到下一階段。</p><h2>100 人 - 第二個 DBA</h2><p>通常在研發規模達到百人左右時，就必須引入第二個 DBA。這裏最重要的是能有一個互備。至於引入的 DBA 定位，如果第一個 DBA 成長起來的話，那第二個 DBA 可以是相對初級的，老人帶新人。但如果第一個 DBA 沒有跟上公司的成長，那麼這時就需要引入一個相對資深的 DBA。這個階段要開始構建體系，首先要審視當前使用的數據庫種類，之前業務發展，可能對於數據庫選型並沒有做約束，現在就到了決策數據庫選型的時候，儘可能統一。另外也要審視使用的數據庫工具鏈，是否需要進行替換。關健就是這兩件事情，選對數據庫，選對工具。這也是為什麼需要一個更資深的 DBA，所謂觀千劍而識器。如果是一個相對經驗不足的 DBA，在強勢的業務研發面前，很難據理力爭。這個階段之後，無論是要換數據庫還是相關工具，那都是浩大的工程，絕對比找一個有經驗的 DBA 代價要大。</p><p>研發負責人在這個階段算是基本退出了數據庫日常工作，交由這組 DBA 二人轉了。</p><h2>&gt; 200 人 - DBA 團隊</h2><p>極限操作的話，公司也可以維持 2 個 DBA 的配置很長時間。國內上市公司，千人研發團隊，2 個 DBA 配置也不是個例。但 DBA 人數還是和風險掛鈎的，這裏還是建議按照人員配比，儘量 DBA : 研發的配比不要低於 1:200。業務上了規模後，一個 DBA 但凡一年能幫助公司規避掉一次故障，就能收回人力成本。</p><p>另一方面，到這個階段勢必會出現一系列定製化需求，標準工具往往無法全部滿足，所以這個時候也需要 DBA 親自下場做深度二開。</p><p>不過在公司研發達到 500 人規模前，也要謹慎控制 DBA 團隊的擴張。DBA 團隊擴充到 5 人後，通常都會走上自研工具鏈的道路，否則無法支撐團隊規模。但這個階段選擇自研道路，往往不會對業務帶來增量。因為自研雖然在某些功能點更貼近業務，但從整體的產品體驗來説，肯定是遠遠不如市面上成熟的標品，此消彼長。</p><p>那該如何給 DBA 團隊尤其是 DBA 團隊負責人提供成長空間呢。這裏有兩條路徑，一是培養 DBA 負責人去超越 DBA 的職能，往職責更大的存儲負責人/基礎設施負責人方向走；另一條路，是鼓勵 DBA 負責人走出公司，在行業內建立起影響力。</p><p>總之就是避免讓 DBA 團隊自己往前走的太快。雖然數據庫在整個研發鏈路裏是一塊基石，但它不是樞紐。自研數據庫工具鏈的時機，是要配合公司整體研發平台的自研規劃，而且通常是在整體研發平台自研規劃基本確立後，再進行數據庫相關的規劃。</p><h2>&gt; 1000 人 - 中央和地方</h2><p>能走到這步，公司往往已經形成了 BU 編制，這就會牽扯到是否每個 BU 會自建 DBA 團隊。這通常就不再是技術問題，而是組織問題了。一個強勢的業務 BU 通常都會希望可以有獨立的建制，但是往往自己運行一段時間後，又發現招不到/留不住人，然後即使名義上還是獨立，實際還是回退到中央集權。國內幾家大廠有中央集權的，也有地方自治的。到了這個階段兵無常勢，水無常形。</p><h2>如何評估 DBA 團隊的績效</h2><p>兩句話：</p><ul><li>專業的人做專業的事</li><li>善戰者無赫赫之功</li></ul><p>地鐵在既定的軌道上運行，依然也還是要配備 2 名駕駛員。事前預防，事中止血，事後補救，目前圍繞數據庫的日常工作，無論是雲平台還是第三方工具，還只能承擔 co-pilot 的角色，最終還需要 DBA 拍板。希望每個研發都具備數據庫常識的理想很豐滿，但現實很骨感。面試時雖然都考察了 MVCC 原理的八股文，但真的上了前線，往往連最基本的執行計劃也看不懂。</p><h2>總結</h2><p><img src="https://oscimg.oschina.net/oscnet/up-f36de6034e654d8a673cf05664d8e135703.png" alt="file" referrerpolicy="no-referrer"></p><p>新的一年也希望 DBA 們穩如泰山，數據庫都平平安安。</p><p><img src="https://oscimg.oschina.net/oscnet/up-07e2c0e2378dffdef4b198c2c7ec24344e0.png" alt="file" referrerpolicy="no-referrer"></p><hr><p>💡 更多資訊，請關注 Bytebase 公號：Bytebase</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 06:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/10433139</guid>
            <link>https://my.oschina.net/u/6148470/blog/10433139</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[三星成功驗證 CXL 內存與 Red Hat Linux 的互操作性]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">三星電子發佈<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.samsung.com%2Fglobal%2Fsamsung-electronics-and-red-hat-partnership-to-lead-expansion-of-cxl-memory-ecosystem-with-key-milestone" target="_blank">公告稱</a>，已與 Red Hat 合作，在真實用戶環境中成功驗證了 CXL (Compute Express Link) 內存操作；此舉系業內首次，將進一步擴大其 CXL 生態系統。</span></p><p><span style="color:#000000">該公司表示，他們針對 Red Hat Enterprise Linux 9.3 發行版優化了 CXL 內存，並在 Red Hat 的 KVM 和 Podman 環境中驗證了內存識別、讀取和寫入操作。由此，數據中心客戶將無需對現有硬件進行額外調整，即可使用三星 CXL 內存。</span></p><p style="color:#424242; margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000">紅帽公司高級副總裁兼亞太區負責人 Marjet Andriesse 稱，「三星 CXL 內存擴展器與紅帽企業級 Linux 互操作性的成功驗證具有重要意義，因為它拓展了 CXL 內存擴展器在基於 IaaS 和 PaaS 的紅帽軟件中的適用性。這是硬件和軟件集成的重要里程碑，為下一代內存開發構建了一個開源生態系統。」</span></p><p style="color:#424242; margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000"><img alt="" height="317" src="https://oscimg.oschina.net/oscnet/up-902ea73f4e148bd1626fdd7de2c37b4b0dd.jpg" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">目前，雙方正在合作制定《RHEL 9.3 CXL 內存啓用指南》，幫助用戶在 RHEL 9.3 上利用三星的 CXL 內存，並在各種用戶環境中構建高性能計算系統。</span></p><p><span style="color:#000000">兩家公司於 2022 年 5 月首次簽署了一份諒解備忘錄（MOU），開始在 CXL 上進行合作。合作關係涵蓋一系列存儲和內存產品，包括 NVMe SSD、CXL 內存、計算內存/存儲和結構。</span></p><p><span style="color:#000000">三星執行副總裁兼內存產品規劃主管 Yongcheol Bae 在接受 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zdnet.com%2Farticle%2Fsamsung-verifies-cxl-memory-with-red-hat%2F" target="_blank">ZDNet</a> 採訪時表示：通過最新的驗證，三星將成為業內第一家提供支持 CXL 2.0 的 CXL 模塊、開源軟件和 CXL DRAM 的公司。雙方還將致力於靈活的數據放置和汽車以及其他項目，以實現為 CXL 內存打造強大生態系統的最終目標。</span></p><p><span style="color:#000000">CXL 是一個統一的接口標準，於 2019 年推出，通過 PCIe 接口以比以前更低的延遲和更高的帶寬連接各種處理器和內存設備。這樣，現有的數據中心就能以低成本提高速度、延遲和可擴展性。</span></p><p><span style="color:#000000">市場研究公司 Yole Group 數據指出，CXL 市場目前估值約為 1400 萬美元；且得益於 2024 年底 CXL 2.0 的推出，預計到 2028 年還將增長至 160 億美元。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 06:46:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272935/samsung-verifies-cxl-memory-with-red-hat</guid>
            <link>https://www.oschina.net/news/272935/samsung-verifies-cxl-memory-with-red-hat</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[ClkLog —— 免費、可商用的輕量級完全開源的埋點用戶分析系統]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-項目簡介" class="anchor" href="https://gitee.com/clklog/clklog#%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B"></a>項目簡介</h1><p>ClkLog 是一款記錄用戶行為分析和畫像的免費可商用開源軟件，技術人員可快速搭建私有的應用系統。項目基於神策分析 SDK，採用 ClickHouse 數據庫對採集數據進行存儲，採用前後端分離的方式來實現的訪問統計和用戶畫像分析系統。在這裏，你可以輕鬆看到用戶訪問網頁、APP、小程序或業務系統的行為軌跡，同時也可以從時間、地域、渠道、用戶訪客類型等多維度瞭解用戶的全方位信息。</p><h1><a id="user-content-核心功能" class="anchor" href="https://gitee.com/clklog/clklog#%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD"></a>核心功能</h1><ul><li><p><strong>數據採集</strong>：支持網頁、小程序、IOS、Android 等多端數據採集</p></li><li><p><strong>流量概覽</strong>：提供流量渠道、設備、地域、訪客類型多維度分析</p></li><li><p><strong>用戶畫像</strong>：解析用戶唯一 ID，定位追蹤用戶全生命週期畫像</p></li><li><p><strong>數據下載</strong>：支持各項彙總數據、明細數據的下載</p></li></ul><h1><a id="user-content-技術棧選擇" class="anchor" href="https://gitee.com/clklog/clklog#%E6%8A%80%E6%9C%AF%E6%A0%88%E9%80%89%E6%8B%A9"></a>技術棧選擇</h1><ul><li><p><strong>後端</strong>：Redis 、Zookeeper、Kafka 、Flink</p></li><li><p><strong>前端</strong>：vue、vue-element-admin、element-ui 、echarts</p></li><li><p><strong>數據</strong>：Clickhouse</p></li></ul><h1><a id="user-content-示意圖" class="anchor" href="https://gitee.com/clklog/clklog#%E7%A4%BA%E6%84%8F%E5%9B%BE"></a>示意圖</h1><table><thead><tr><th><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/1.png" alt="" referrerpolicy="no-referrer"></th><th><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/2.png" alt="" referrerpolicy="no-referrer"></th></tr></thead><tbody><tr><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/3.png" alt="" referrerpolicy="no-referrer"></td><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/4.png" alt="" referrerpolicy="no-referrer"></td></tr><tr><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/5.png" alt="" referrerpolicy="no-referrer"></td><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/6.png" alt="" referrerpolicy="no-referrer"></td></tr><tr><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/7.png" alt="" referrerpolicy="no-referrer"></td><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/8.png" alt="" referrerpolicy="no-referrer"></td></tr></tbody></table><h1><a id="user-content-在線體驗" class="anchor" href="https://gitee.com/clklog/clklog#%E5%9C%A8%E7%BA%BF%E4%BD%93%E9%AA%8C"></a>在線體驗</h1><p>演示地址：<a href="https://gitee.com/link?target=https%3A%2F%2Fdemo.clklog.com" target="_blank"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fdemo.clklog.com">https://demo.clklog.com</a></p><h1><a id="user-content-快速接入" class="anchor" href="https://gitee.com/clklog/clklog#%E5%BF%AB%E9%80%9F%E6%8E%A5%E5%85%A5"></a>快速接入</h1><p>官方文檔：<a href="https://gitee.com/link?target=https%3A%2F%2Fclklog.com"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fclklog.com">https://clklog.com</a></p><h1><a id="user-content-協議許可" class="anchor" href="https://gitee.com/clklog/clklog#%E5%8D%8F%E8%AE%AE%E8%AE%B8%E5%8F%AF"></a>協議許可</h1><ul><li><p>開源協議：<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.gnu.org%2Flicenses%2Fagpl-3.0.en.html">AGPL V3.0</a></p></li><li><p>免費使用：Clklog 遵循 AGPL V3.0 開源許可證, 使用的組織或個人在複製、分發、轉發或修改時請遵守相關條款，不得移除 ClkLog 相關版權標識進行。如有違反，ClkLog 將保留對侵權者追究責任的權利。</p></li><li><p>商業使用：請聯繫客服進行細節諮詢</p></li></ul><h1><a id="user-content-聯繫我們" class="anchor" href="https://gitee.com/clklog/clklog#%E8%81%94%E7%B3%BB%E6%88%91%E4%BB%AC"></a>聯繫我們</h1><ul><li><p>客服郵箱：<a href="mailto:info@clklog.com">info@clklog.com</a></p></li><li><p>客服手機：16621363853</p></li><li><p>客服微信：opensoft66</p></li><li><p>客服二維碼：<img title="" src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/contactqrcode.jpg" alt="" width="120" referrerpolicy="no-referrer"></p></li></ul>]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 06:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/clklog/clklog</guid>
            <link>https://gitee.com/clklog/clklog</link>
        </item>
        <item>
            <title>
                <![CDATA[華為雲多個開源項目通過信通院可信認證]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>2023</span></span></span><span><span><span>年 12 月 21 日，由中國信息通信研究院主辦的《2024 中國信通院 ICT 深度觀察報告會》開源和軟件供應鏈分論壇上重磅發佈了可信開源評估結果。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>華為雲共計 3 個開源社區、5 個開源項目通過可信開源社區、可信開源項目認證，其中，三個開源社區：KubeEdge、Karmada、Volcano 在社區運營、社區治理與社區開發能力方面均獲得了先進級評級。</span></span></span></span></span></span></p><p style="margin-left:0.0001pt; margin-right:0px; text-align:center"><img height="2594" src="https://oscimg.oschina.net/oscnet/up-8c3992cba052f6407c45af867bb5b58ff96.jpg" width="3892" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:center">&nbsp;</p><span id="OSC_h2_1"></span><h2><span><span><span><strong><span><span><span>3</span></span></span></strong><strong><span><span><span>大開源社區通過可信開源社區 4 大專項測評，獲先進級評級</span></span></span></strong></span></span></span></h2><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>華為雲 3 大開源社區（KubeEdge、Volcano、Karmada）順利通過信通院可信開源社區成熟度能力檢驗，並在社區運營、社區治理與社區開發能力方面獲得先進級社區評級，該認證為中國信通院可信開源治理能力成熟度認證的最高等級。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:center"><img height="790" src="https://oscimg.oschina.net/oscnet/up-42e95f4a1bd080702470d5d9ffe006ece7f.jpg" width="563" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>可信開源社區評估從基礎設施、社區治理、社區運營與社區開發等角度，梳理開源社區應關注的內容及指標，聚焦於如何構建活躍的開發者生態與可信的開源社區。先進級評級是可信開源社區評估的最高級別，相較於基礎級和增強級而言，先進級要求社區能夠針對開源社區進行更加專業化和自動化等管理。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>先進級認證不僅是對華為雲 3 大開源社區在開源軟件的開發流程、產生的技術貢獻、貢獻者管理、社區氛圍營造等維度結果的認可，更是對開源社區工作的肯定，未來這些社區將會持續加大技術研發投入，與社區用戶、合作伙伴共建開源生態，持續創新。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:center"><img height="1864" src="https://oscimg.oschina.net/oscnet/up-f9465e80d1c92d3bb6719470eea23494dbf.jpg" width="4096" referrerpolicy="no-referrer"></p><span id="OSC_h2_2"></span><h2><span><span><span><strong><span><span><span>5</span></span></span></strong><strong><span><span><span>個開源項目通過中國信通院可信開源項目測評</span></span></span></strong></span></span></span></h2><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>華為雲一鍵構建分佈式雲原生平台 Kurator、雲原生無代理服務網格 Sermant、時序數據庫 openGemini、企業級前端組件庫 DevUI、OpenTiny Vue 均已通過中國信通院的可信開源項目認證檢測，並獲得可信開源項目評估證書。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:center"><img height="829" src="https://oscimg.oschina.net/oscnet/up-f237b87e138d721a6a69683b4b3edcc989f.jpg" width="582" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>可信開源項目重點考察開源項目在許可證合規性、軟件安全性、軟件活躍度、技術成熟度、服務支持力和軟件兼容性六個方面的能力。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>通過可信開源項目認證，意味着以上這些項目通過了業界開源項目認證標準的檢驗，項目具有高質量、高可靠性、高安全性和高可維護性，這些項目可以為用戶提供更好的開源軟件使用體驗。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>本次通過可信認證的開源社區與開源項目目前已廣泛應用於各行各業，通過不斷完善開發者生態，提升產品易用性，為企業或個人提供更多的選擇和機會，幫助個人或企業更好的利用開源技術提升業務效率和創新能力。</span></span></span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 03:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6410005/blog/10332529</guid>
            <link>https://my.oschina.net/u/6410005/blog/10332529</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[openGemini 獲 1 項大獎，2 項認證，一年一個台階]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:center"><img height="306" src="https://oscimg.oschina.net/oscnet/up-2305df6d4314acb367af05d3ada47349caa.jpg" width="1021" referrerpolicy="no-referrer"></p><p>最近，openGemini 先後獲得開放原子基金會授予的 「2023 快速成長開源項目」 獎項，以及由中國信通院評估頒發的 「可信開源項目」 和 「可信數據庫」 兩項證書，成為社區最值得慶賀的事，可謂是「寒冬喜來茶當酒，竹爐湯沸火初紅」。回頭望，旭日東昇，社區就像一個朝氣蓬勃的小孩，正在一天天長大。這些榮譽的背後，是 openGemini 團隊、眾多社區開發者不斷努力和創新的結果。</p><ul><li><span id="OSC_h3_1"></span><h3><span><strong>2023 年度快速成長開源項目</strong></span></h3></li></ul><p style="margin-left:0; margin-right:0">開放原子基金會「2023 年度快速成長開源項目」評委會從時間範圍內的定量指標數據增長速度和定性指標情況發展速度兩個維度考察，綜合衡量了開源項目在 2023 年度社區治理（社區管理、開源合規管理、社區運營、基礎設施能力、安全治理）和社區活躍度（生態參與度、社區影響力和項目活躍度）方面的表現，決定授予 openGemini 社區「2023 年度快速成長開源項目」，充分肯定了 openGemini 社區在治理與生態方面做出的努力。</p><p style="margin-left:0px; margin-right:0px; text-align:center"><img height="889" src="https://oscimg.oschina.net/oscnet/up-6cfaf4c1a329a2a347fa19b42618269367e.jpg" width="600" referrerpolicy="no-referrer"></p><ul><li><span id="OSC_h3_2"></span><h3><span><strong>可信開源項目</strong></span></h3></li></ul><p style="margin-left:0; margin-right:0">「可信開源項目」 是由中國信通院推動的開源項目評估，對開源項目的健康程度與可持續性展開評測，以降低開源項目的安全風險，完善開源項目的開發者、用戶生態。重點考察開源項目在許可證合規性、軟件安全性、軟件活躍度、技術成熟度、服務支持力和軟件兼容性六個方面的能力，全面衡量社區版開源項目的健康程度，為開源項目使用方提供選型的參考依據。openGemini 通過該項認證，充分證明瞭社區的健康程度和可持續性發展。</p><p style="margin-left:0px; margin-right:0px; text-align:center"><img height="807" src="https://oscimg.oschina.net/oscnet/up-c0917d6ee0589169bff1269025c1be55999.jpg" width="600" referrerpolicy="no-referrer"></p><ul><li><span id="OSC_h3_3"></span><h3><span><strong>可信數據庫</strong></span></h3></li></ul><p style="margin-left:0; margin-right:0">「可信數據庫」是由中國信通院開展的面向數據庫產品及周邊工具、數據庫服務商和應用側為評價目標的權威評測體系，重點考察時序數據庫基礎能力、兼容能力、管理能力、高可用能力、擴展性、兼容性等七個方面能力。openGemini 通過該項認證，再次證明 openGemini 項目是高質量、高安全的，能夠滿足海量時序數據存儲、處理、應用等各類場景數據管理需求。</p><p style="margin-left:0px; margin-right:0px; text-align:center"><img height="803" src="https://oscimg.oschina.net/oscnet/up-659dbe1066941e46180a914be7c208ddc31.jpg" width="600" referrerpolicy="no-referrer"></p><span id="OSC_h3_4"></span><h3><span><strong>再接再厲</strong></span><span><strong><em>✦</em></strong></span></h3><p style="margin-left:0; margin-right:0">作為一個開源項目，openGemini 一直致力於為開發者提供更好的平台和軟件，幫助他們瞭解數據庫架構、功能原理和內核開發過程，降低開發門檻，最終具備問題自我定位、自我修復的能力。同時也為最終用戶提供更好的工具（目前社區的派生項目已達 20 餘個），幫助他們更好的使用 openGemini，降低生產成本，提高產品競爭力。在這個過程中，openGemini 團隊不僅注重技術的創新和優化，還積極投入社區建設，與其他開源項目合作，推動整個開源社區的發展。</p><p style="margin-left:0; margin-right:0">在未來，openGemini 社區將繼續努力，不斷提升自身的技術實力和社區影響力，為用戶和開發者提供更好的時序數據庫軟件。同時，openGemini 也將繼續與其他開源項目合作，共同推動整個開源社區的發展，為技術的進步和社會的發展做出貢獻。一年一個台階，明年我們拭目以待！</p><p style="margin-left:0; margin-right:0">今日恰值冬至，祝福大家冬至歡愉，常安常樂。</p><p style="margin-left:0px; margin-right:0px; text-align:center"><img height="288" src="https://oscimg.oschina.net/oscnet/up-1ccc6c43a3a6a9ae796c53a6365d4d0d6e5.png" width="200" referrerpolicy="no-referrer"></p><hr><p style="color:#121212; margin-left:0; margin-right:0; text-align:justify">openGemini 官網：<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.opengemini.org%2F" target="_blank">http://www.openGemini.org</a></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:justify">openGemini 開源地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FopenGemini" target="_blank">https://github.com/openGemini</a></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:justify">openGemini 公眾號：</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:justify"><img src="https://oscimg.oschina.net/oscnet/up-9c3a28f01ff2ece95893e6eb22755543105.jpg" style="margin-top:20px" referrerpolicy="no-referrer"></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:justify">歡迎關注～ 誠邀你加入 openGemini 社區，共建、共治、共享未來！</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 03:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3234792/blog/10331495</guid>
            <link>https://my.oschina.net/u/3234792/blog/10331495</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[你好！Apache Seata]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>北京時間 2023 年 10 月 29 日，分佈式事務開源項目 Seata 正式通過 Apache 基金會的投票決議，<strong>以全票通過的優秀表現正式成為 Apache 孵化器項目！</strong></p><p>根據 Apache 基金會郵件列表顯示，在包含 13 個約束性投票 (binding votes) 和 6 個無約束性投票 (non-binding votes) 的投票全部持贊同意見，無棄權票和反對票，投票順利通過。</p><p><em>「Welcome&nbsp;Seata&nbsp;to&nbsp;the&nbsp;ASF&nbsp;incubator.」</em></p><p><img src="https://oscimg.oschina.net/oscnet/up-240076d1009f584bb6fe458f33fe0bedb6f.png" alt="" referrerpolicy="no-referrer"></p><h2>項目歷史</h2><ul><li><p>**早在&nbsp;**2007 年****阿里巴巴和螞蟻集團內部開發了分佈式事務中間件，用於解決電商、支付、物流等業務場景中應用數據的一致性問題。內部項目分別被稱為 TXC (Taobao Transaction Constructor)/XTS (eXtended Transaction Service)，該項目幾乎在每筆訂單的交易支付鏈路幾乎都有使用。</p></li><li><p><strong>自 2013 年以來</strong></p><p>阿里巴巴和螞蟻集團已在阿里雲和金融雲上向企業客戶分別發佈了分佈式事務雲服務產品 GTS(global transaction service)/DTX(Distributed Transaction-eXtended)，在各個行業領域積累了大量用戶。</p></li><li><p><strong>2019 年 1 月</strong></p><p>阿里巴巴集團正式開源了該項目，項目命名為 Fescar (Fast &amp; Easy Commit and Rollback)）。項目開源以來，它受到了眾多開發人員的熱烈歡迎和讚揚，開源一週收穫了超 3k star，曾一度蟬聯 GitHub Trending 排行榜第一。</p></li><li><p><strong>2019 年 4 月</strong></p><p>螞蟻集團數據中間件團隊加入了 Fescar 社區。為了創建一個更加開放和中立的社區，Fescar 改名為 Seata（Simple Extensible Autonomous Transaction Architecture），代碼倉庫從 Alibaba organization 遷移到其獨立的 Seata organization。</p></li><li><p><strong>2019 年 12 月</strong></p><p>Seata 開源項目正式發佈 1.0.0 GA 版本，標誌着項目已基本可生產使用。</p></li><li><p><strong>2023 年 10 月</strong></p><p>為了更好的通過社區驅動技術的演進，阿里和螞蟻集團正式將 Seata 捐贈給 Apache 基金會，提案通過了 Apache 基金會的投票決議。</p></li></ul><h2>項目現狀</h2><ul><li>Seata 開源 4 年來主項目在 GitHub&nbsp;<strong>累計收穫 star 超 24k，累計發佈版本超 40 次，參與代碼貢獻人數超 300 人。</strong></li><li>Seata 被各領域企業/組織廣泛應用於解決分佈式事務問題，在 GitHub「Used by」超過 3.1k 的倉庫依賴，金融領域企業紛紛試點使用。</li><li>Seata 對於市面上主流的關係數據庫，RPC 框架做了廣泛的支持，同時被許多第三方社區做了主動和被動集成。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-c486e4329d5fe25e8f7bbd6d4290fdf4740.png" alt="" referrerpolicy="no-referrer"></p><h2>項目特性</h2><ul><li>提供 AT、TCC、Saga 和 XA 事務模式，支持事務模式的混用，滿足不同業務場景的數據一致性需求。</li><li>提供 Java、Golang 等多語言 SDK 支持。</li><li>支持了 Apache Dubbo、Spring Cloud Alibaba、gRPC、Motan、sofaRPC、HttpClient 等服務調用框架。</li><li>支持了 MySQL、MariaDB、Oracle、PostgreSQL、OceanBase、TiDB、SQLServer、PolarDB、Dameng 等關係數據庫無侵入 AT 事務模式的支持。</li><li>支持基於多種關係數據庫、Redis 存儲的存算分離的集羣模式，支持基於 Raft 的存算不分離集羣模式，滿足不同運維場景下的集羣高可用需求。</li><li>支持了市面上主流的註冊中心和配置中心。</li><li>提供了豐富的插件化擴展機制，支持用戶自定義 SDK 側 30 多個擴展點。</li></ul><h2>致謝</h2><p>感謝所有曾經參與到社區的貢獻者。</p><p>特別感謝願意給 Seata 提供指導的 champion 和 mentors。</p><p>Champion：</p><ul><li>Sheng&nbsp;Wu(wusheng&nbsp;at&nbsp;apache&nbsp;dot&nbsp;org)</li></ul><p>Mentors：</p><ul><li>Sheng&nbsp;Wu(wusheng&nbsp;at&nbsp;apache&nbsp;dot&nbsp;org)</li><li>Justin&nbsp;Mclean(justin&nbsp;at&nbsp;classsoftware&nbsp;dot&nbsp;com)</li><li>Huxing&nbsp;Zhang(huxing&nbsp;at&nbsp;apache&nbsp;dot&nbsp;org)</li><li>Heng&nbsp;Du(duhengforever&nbsp;at&nbsp;apache&nbsp;dot&nbsp;org)</li></ul><p>我們堅信將 Seata 引入 ASF 可以推動更強大、更多元化的開源社區的發展。我們將努力踐行 Apache Way，同時歡迎更多的公司和個人加入到開發者隊伍中來，讓 Seata 社區更加健康和健壯的成長，讓更多人享受開源帶來的技術紅利！</p><h2>項目寄語</h2><p>四年前，我們秉持開源開放的理念，在社區寫下了第一行代碼。回顧過去四年，Seata 開源社區的技術演進和社區運營就像一次創業旅程。這四年我們取得了不菲的成績，Seata 的出現快速佔領了開發者的心智，<strong>成為了分佈式事務領域的事實標準，在理論實踐中我們牽頭推動了行業標準的建立。</strong> Seata 捐贈給 ASF 是我們邁向更多元化社區治理和全球化發展的重要里程碑。</p><p><em>--&nbsp;季敏｜Seata&nbsp;開源社區創始人</em></p><p>阿里雲是開源的受益方，也在持續貢獻開源，繼 Apache RocketMQ、Apache Dubbo 之後，我們將 Seata 也捐贈給了 ASF。相信 Seata 的捐贈，將進一步推動雲原生微服務領域的技術發展。一直以來，阿里雲通過投入開源，建立技術標準，幫助千萬開發者使用更先進的雲原生技術，讓社區生態和雲之間建立起非常好的連接，助力企業和雲協同發展。</p><p><em>--&nbsp;丁宇｜阿里云云原生應用平台負責人</em></p><p>分佈式事務是微服務架構最複雜，技術水位最深的部分，阿里&amp;螞蟻在開源捐獻之前申請了數十個專利，開源之後在社區推動下高速發展，<strong>吸收 70%+ 外部開發者，大幅降低分佈式的複雜度，擴展了分佈式事務的生態；</strong> 未來隨着微服務高速發展，隨着數據一致性要求越來越高，相信分佈式事務會發揮越來越大的作用！</p><p><em>-- 李豔林｜阿里雲微服務團隊負責人</em></p><p>Seata 是一款由阿里巴巴和螞蟻集團共同參與開發的分佈式事務解決方案，廣泛應用於兩家公司的內部系統。它的突出特點在於高性能和簡單易用，為微服務架構下的分佈式事務處理提供了高效且可靠的解決方案。我們堅信將 Seata 捐贈給 ASF，社區將會得到更好的發展，能為更多的開發者提供更優質的服務。同時，我們也期待更多的開發者能夠加入到 Seata 的開發中來，共同推動分佈式事務解決方案的進步和發展。</p><p><em>--&nbsp;謝吉寶｜阿里云云原生中間件負責人</em></p><p>恭喜 Seata 全票通過進入 Apache 孵化器！2019 年，螞蟻集團和阿里集團攜手一起開源了分佈式事務框架 Seata，各自貢獻了內部分佈式事務的最佳實踐。經過了四年的發展，Seata 早已成為一個被社區廣泛認可的分佈式事務項目，大量的貢獻者在 Seata 裏面貢獻代碼，豐富了 Seata 的各種功能，很多用戶在自己的環境中使用 Seata，給 Seata 帶來了大量的實踐落地案例。<strong>Seata 進入 Apache 孵化器不是終點，而是新的起點，</strong> 期待 Seata 後面能夠持續按照 The Apache Way 的方式運作，以更加中立的姿態，吸引更多的貢獻者和用戶，走向更加寬闊的未來。</p><p><em>--&nbsp;黃挺｜螞蟻集團中間件負責人</em></p><p>非常高興 Seata 這個阿里和螞蟻合作多年的開源項目進入 Apache 基金會進行孵化，相信 Apache Way 會幫助項目更加社區化、服務更多人，也期待 Apache 的 Seata 能為社區帶來更多微小而美好的改變。對於螞蟻開源來説，Seata 進入 Apache 孵化也是一個重要的里程碑，希望未來有更多螞蟻團隊發起的項目也能走上 Apache 之路。</p><p><em>--&nbsp;王旭｜螞蟻開源技術委員會副主席</em></p><p>很高興能夠作為 Champion 和 Mentor ，幫助 Seata 社區進入到 Apache 孵化器。Seata 項目在過去的 4 年，在分佈式事務領域取得了長足的進度，並以開放的心態面向社區，並一步步的做好走進 Apache 孵化器的各項準備工作。希望在未來的一到兩年的實踐中，項目成員能夠很好的學習以及融入 ASF 的文化中，並進一步增加社區的多元化和國際化。進入孵化器是一個里程碑，更是一個新的開始，祝賀 Seata 項目。</p><p><em>--&nbsp;吳晟｜Apache&nbsp;軟件基金會會員、Apache&nbsp;軟件基金會首位中國董事、Apache&nbsp;軟件基金會孵化器 PMC 成員和項目導師</em></p><p>我關注 Seata 這個項目關注很長時間，從 Fescar 到 Seata，該項目從誕生之初就保持了旺盛的生命力，在近幾年社區和逐步壯大，逐步成長為分佈式事務這個領域傑出的一個開源項目，很高興看到 Seata 加入 Apache 基金會進行孵化，相信 Seata 今後會以更加中立的身份，吸引更多的貢獻者，一羣走一起走可以走的更穩更遠。很榮幸以導師的身份陪伴 Seata 的孵化之旅，預祝 Seata 一切順利！&nbsp;</p><p><em>--&nbsp;張乎興｜Apache&nbsp;基金會成員、Apache Tomcat&nbsp;和&nbsp;Apache Dubbo&nbsp;社區&nbsp;PMC&nbsp;成員、Apache Seata(incubating)&nbsp;導師</em></p><p>Seata 作為在阿里跟螞蟻久經驗證的分佈式事務框架，不僅經歷了歷年海量流量的驗證，而且在開源之後迅速成長為國內分佈式事務領域的事實標準。很高興看到 Seata 成為 Apache 基金會孵化項目，作為一個新的開始，希望 Seata 能夠吸引更多的開發者，打磨更多的場景，行穩致遠，相信在眾多開發者的共同努力下，Seata 一定能夠成為數據與應用之間的堅實橋樑。&nbsp;</p><p><em>--&nbsp;杜恆｜ASF member、Apache RocketMQ PMC member</em></p><p>Seata 作為分佈式事務協調器，是微服務架構中最重要的獨立組件之一，也是整個阿里巴巴微服務領域最精華的部分之一。Seata 項目從開源以來就受到了廣泛的開發者支持，而現在它將進入 Apache 基金會孵化，我相信會在 Apache Way 開放的文化幫助下，Seata 項目將繼續成為微服務架構中的一顆明星，為我們帶來更多便利和創新。</p><p><em>--&nbsp;王小瑞｜AutoMQ&nbsp;聯合創始人&nbsp;&amp;&nbsp;CEO、Apache RocketMQ&nbsp;作者、PMC Chair</em></p><p>在分佈式、微服務領域，Seata 絕對佔得重要的一席，它開創性的創造了多種事務模式。Dubbo &amp; Spring Cloud Alibaba 一直和 Seata 有深度的集成與合作，我本人也與作者季敏、社區核心成員有過多次深入交流，<strong>這是一個有技術追求、有責任心、充滿活力的開源社區。</strong> 非常高興見證 Seata 加入 ASF 大家庭，開啓新的旅程，祝一切順利。</p><p><em>--&nbsp;劉軍｜Apache Dubbo PMC Chair、Spring Cloud Alibaba&nbsp;負責人</em></p><p>分佈式事務一直是一個被大眾敬而遠之，視而不見卻實際存在的問題,四年前 Seata 將業界對待分佈式事務的「鴕鳥心態」轉為輕鬆面對，將一個業界最難攻克的問題，以一種標準化、無侵入、低成本的方式引進，<strong>目前登記在冊已有數百家企業，覆蓋各式各樣的業務場景。</strong> 如果説四年前 Seata 是一粒種在這個領域的種子，那麼目前已經枝繁葉茂了，相信捐贈給 ASF 後更加的中立與開放,吸引更多開發者共同建設，共同演進分佈式事務領域的未來技術架構，將這顆已經枝繁葉茂的大樹做到碩果累累。</p><p><em>--&nbsp;陳健斌｜Apache Seata（incubating）PPMC&nbsp;成員</em></p><p>作為分佈式事務領域的重要項目，Seata 自誕生以來，一直致力於解決微服務架構下的數據一致性問題，<strong>幫助開發者構建高性能、易擴展、易使用的分佈式應用。</strong> 現在，Seata 即將踏上新的征程。我們相信 Seata 在捐贈給 ASF 這個大家庭後，將會得到更廣泛的關注和使用，也相信在未來的日子裏，Seata 將會為更多的開發者解決分佈式事務的難題。</p><p><em>--&nbsp;王良｜Apache Seata（incubating）PPMC&nbsp;成員</em></p><p>Seata 作為一個強大而穩定的開源分佈式事務解決方案，為廣大開發者在分佈式事務的場景下，提供了極大的幫助和便利。貢獻給 Apache 將進一步推動項目發展和全球社區的參與度。祝願在 Apache 的託管下，能夠不斷髮展，更加中立化，標準化，助力全球更多的開發者構建可靠的分佈式事務業務。</p><p><em>--&nbsp;雷志遠｜Apache Seata（incubating）PPMC&nbsp;成員</em></p><p>作為一名中間件老兵，有幸見證：微服務浪潮下，源自國內的分佈式事務中間件從阿里、螞蟻內部創新孵化，到商業化，再到開源，一步步走向更廣闊的天地，產生更大的價值。相信，捐贈給 ASF 將讓 SEATA 成為世界上更多「苦分佈式事務久矣」的開發者們的解藥！</p><p><em>--&nbsp;申海強｜Apache Seata（incubating）PPMC&nbsp;成員、前阿里分佈式事務中間件核心成員</em></p><p>有幸跟隨着這個項目從 Fescar 到 Seata 再到現在捐獻給 Apache 基金會，見證了在這四年時間裏一間又一間的企業因為 Seata 而解決了分佈式事務的難題。現在 Seata 站在了全新的起點上將以開放、包容的姿態去面對每一個用戶，悉心聆聽每一個聲音，開拓出這條能夠通往全球的道路。</p><p><em>--&nbsp;張嘉偉｜Apache Seata(incubating)&nbsp;PPMC&nbsp;成員</em></p><p>非常高興看到 Seata 成為 Apache 孵化項目，這定會是分佈式事務領域的標杆解決方案。從最初的 Fescar 到 Seata，我與你一路相伴，讓我們一起努力，期待 Seata 蛻變成 Apache Seata。</p><p><em>--&nbsp;吳江坷｜Apache Seata（incubating)PPMC&nbsp;成員</em></p><p>在微服務開發模式下，分佈式系統的數據一致性常常成為系統的難題。Seata 開源以來，社區積累了各種事務模式解決方案和豐富的用戶使用案例。非常高興 Seata 項目能加入 Apache 基金會，社區將更加開放和多元化，將吸引更多的提交者，幫助更多的用戶，項目成為分佈式事務的事實標準。</p><p><em>--&nbsp;王欣｜Apache Dubbo&nbsp;社區&nbsp;PMC&nbsp;成員、Apache Seata（incubating）PPMC&nbsp;成員</em></p><h2>寫到最後</h2><p>為促進分佈式事務技術的普及和實踐，增進 Apache Seata（incubating）使用者的交流與學習，我們將定期邀請業內資深的技術專家，分享實戰經驗。</p><p>歡迎訂閲 <a href="https://www.oschina.net/action/GoToLink?url=mailto%3Adev-subscribe%40seata.apache.org" target="_blank">dev-subscribe@seata.apache.org</a> 郵件組，關注 Apache Seata（incubating）社區技術發展。</p><p>Seata 官網：<em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fseata.io%2Fzh-cn%2F" target="_blank">https://seata.io/zh-cn/</a></em></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 03:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3874284/blog/10419504</guid>
            <link>https://my.oschina.net/u/3874284/blog/10419504</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[dubbo-go v3.2.0 -alpha 版本預覽]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><em>作者：王宇軒， Apache Dubbo Committer</em></p><p>隨着 Dubbo3 在雲原生微服務方向的快速發展，Dubbo 的 go 語言實現迎來了 Dubbo3 版本以來最全面、最大幅度的一次升級，這次升級是全方位的，涉及 API、協議、流量管控、可觀測能力等。</p><p>總的來説，新版本的 dubbo-go：</p><ul><li><strong>全面升級 Triple 協議，</strong> 兼容 gRPC、標準 HTTP 客戶端，提供簡單明瞭的 API 用於編寫 RPC server 與 client，解決組件間的基本通信問題。</li><li><strong>針對微服務場景，提供了完善的服務治理能力，</strong> 這包括配置管理、可觀測性、流量管控規則、生態集成與適配等的全面升級。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-1ba6bcbccf62c5e941408b62bab31e2ff20.png" alt="" referrerpolicy="no-referrer"></p><h2>全新升級的 Triple 協議</h2><p>基於 dubbo-go 實現的 Triple 協議，你可以輕鬆編寫瀏覽器、gRPC 兼容的 RPC 服務，並讓這些服務同時運行在 HTTP/1 和 HTTP/2 上。</p><p><img src="https://oscimg.oschina.net/oscnet/up-c2f770e1d49c85a280727a64e462490922a.png" alt="" referrerpolicy="no-referrer"></p><p>如上圖所示，你可以使用 "http+json" 的標準形式訪問 dubbo-go 發佈的後端 triple 服務，基於這一特性， 我們可以在 dubbo 客戶端在瀏覽器頁面、移動設備上訪問後端服務，使用標準 cURL 工具訪問服務，也可以讓比如 Spring 體系的應用輕鬆的調通 Dubbo 服務。</p><p>由於 Triple 協議完全兼容 gRPC 協議，Dubbo 後端服務有可以直接調通標準的 gRPC 服務，它們之間可以無縫的互通，不論是 unary 還是 streaming 通信模式。</p><h3>發佈一個 triple rpc 服務</h3><p>為了體驗升級後的 triple 協議，我們接下來會嘗試啓動一個 dubbo-go server，併發佈一個基於 triple 協議的服務。</p><p>創建一個新的 server 並啓動 server，它將在指定的端口監聽 triple 協議請求。</p><pre><code>func main() {
  srv, err := server.NewServer(
    server.WithServerProtocol(
      protocol.WithTriple(),
      protocol.WithPort(50051),
    ),
  )
  if err != nil {
    panic(err)
  }
  if err := greettriple.RegisterGreetServiceHandler(srv, &amp;api.GreetTripleServer{}); err != nil {
    panic(err)
  }
  if err := srv.Serve(); err != nil {
    panic(err)
  }
}
</code></pre><h3>cURL 訪問服務</h3><p>Triple 服務啓動完成之後，最簡單方式是使用 HTTP/1.1 POST 訪問服務，參數則作以標準 JSON 格式作為 HTTP 負載傳遞。如下是使用 cURL 命令的訪問示例：</p><pre><code>curl \
    --header "Content-Type: application/json" \
    --data '{"name": "Dubbo"}' \
    http://localhost:50051/greet.GreetService/Greet
</code></pre><p>Triple 協議的一項重大升級是支持標準 http 工具直接訪問，通過 cURL 可以極大的降低 dubbo-go 服務的測試驗證、前端接入成本。</p><h2>簡單明瞭的 API</h2><p>Dubbo Go SDK 支持使用 IDL 或編程語言特有的方式定義服務，並提供一套輕量的 API 來發布或調用這些服務。在上一節的示例中，我們已經看到了部分 dubbo-go API 的使用方式，接下來，讓我們更仔細全面的看一下新版本的 API 設計。</p><h3>RPC Server 與 Client</h3><p>對於一些 RPC 通信的場景，開發者只需要使用 dubbo-go 編寫一個最簡單的 RPC server 或者 RPC client，這在新版本 dubbo-go 中只需要幾行代碼即可完成。</p><p>通常，我們會使用 Protocol Buffer (IDL) 來定義一個 Dubbo 服務。</p><pre><code>syntax = "proto3";
package greet;

message GreetRequest {
  string name = 1;
}

message GreetResponse {
  string greeting = 1;
}

service GreetService {
  rpc Greet(GreetRequest) returns (GreetResponse) {}
}
</code></pre><p>使用 Protocol Buffers Compiler 從 IDL 生成 stub 代碼（篇幅關係，我們不在此展示，具體請參見官網 dubbo-go 快速開始）。接下來，我們實現 greettriple.GreeterClient 接口並提供自定義服務實現。</p><pre><code>type GreeterServer struct {
}

func (s *GreeterServer) SayHello(ctx context.Context, in *greet.HelloRequest) (*greet.User, error) {
  return &amp;greet.User{Name: "Hello " + in.Name, Id: "12345", Age: 21}, nil
}
</code></pre><p>以下是一個簡單的 RPC server 示例，執行協議信息，並註冊服務到 server 中：</p><pre><code>func main() {
  srv, err := server.NewServer(
    server.WithServer_Protocol(
      protocol.WithTriple(),
      protocol.WithPort(50052),
    ),
  )
  if err != nil {
    panic(err)
  }
  if err := greettriple.RegisterGreetServiceHandler(srv, &amp;api.GreetTripleServer{}); err != nil {
    panic(err)
  }
  if err := srv.Serve(); err != nil {
    panic(err)
  }
}
</code></pre><p>如前面 Triple 協議一節所述，你可以使用 cURL 直接測試以上 server 服務運行正常。與此同時，對應的 RPC client 示例如下：</p><pre><code>func main() {
  // for the most brief RPC case
  cli, err := client.NewClient(
    client.WithURL("tri://127.0.0.1:50052"),
  )
  if err != nil {
    panic(err)
  }
  svc, err := greettriple.NewGreetService(cli)
  if err != nil {
    panic(err)
  }

  common.TestClient(svc)
}
</code></pre><h3>微服務開發</h3><p>如果你正在開發微服務應用，那麼除了 RPC 通信之外，你通常還需要為應用配置一些服務治理能力，比如 retistry 註冊中心、配置中心、可觀測能力等。</p><p>以下展示瞭如何使用 dubbo-go 開發一個微服務應用。</p><p>首先，創建一個代表微服務的應用 Server，將服務註冊給它，添加註冊中心等服務治理配置。</p><pre><code>
func main() {
  // configure global configurations and common modules
  ins, err := dubbo.NewInstance(
    dubbo.WithName("dubbo_test"),
    dubbo.WithRegistry(
      registry.WithZookeeper(),
      registry.WithAddress("127.0.0.1:2181"),
    ),
    dubbo.WithProtocol(
      protocol.WithTriple(),
      protocol.WithPort(50052),
    ),
  )
    // create a server with registry and protocol set above
  srv, err := ins.NewServer()
  if err != nil {
    panic(err)
  }
    // register a service to server
  if err := greettriple.RegisterGreetServiceHandler(srv, &amp;api.GreetTripleServer{}); err != nil {
    panic(err)
  }
    // start the server
  if err := srv.Serve(); err != nil {
    panic(err)
  }
}
</code></pre><p>其中，Instance 是我們在新版本中引入的全局配置，你可以將所有微服務全局配置在這裏進行初始化。這裏，我們設置了微服務通信協議 protocol 和註冊中心 registry，如以下代碼片段所示：</p><pre><code>ins, err := dubbo.NewInstance(
    dubbo.WithName("dubbo_test"),
    dubbo.WithRegistry(
        registry.WithZookeeper(),
        registry.WithAddress("127.0.0.1:2181"),
    ),
    dubbo.WithProtocol(
        protocol.WithTriple(),
        protocol.WithPort(50052),
    ),
)
</code></pre><p>接下來的操作就非常簡單明瞭了，我們創建一個 server，將服務註冊給它並啓動，如下所示。如果有更多的服務，則可以依次註冊到 server 後再啓動。</p><pre><code>// create a server with registry and protocol set above
srv, err := ins.NewServer()
// register a service to server
if err := greettriple.RegisterGreetServiceHandler(srv, &amp;api.GreetTripleServer{}); err != nil {
    panic(err)
}
// start the server
if err := srv.Serve(); err != nil {
    panic(err)
}
</code></pre><p>以上就是一個微服務應用的基本開發過程，如果你的微服務應用要調用一些遠程 Dubbo 服務，那麼你只需要參照以下方式創建一個 client 就行了。</p><p>下面的代碼示例創建了一個 client，緊接着生成了一個 GreetService 遠程服務代理，之後，就可以像調用本地方法一樣調用遠端 Dubbo 服務了。client 將基於註冊中心實現 server 實例的自動發現並自動為流量應用負載均衡策略。</p><pre><code>func main() {
  // configure global configurations and common modules
  ins, err := dubbo.NewInstance(
    dubbo.WithName("dubbo_test"),
    dubbo.WithRegistry(
      registry.WithZookeeper(),
      registry.WithAddress("127.0.0.1:2181"),
    ),
  )
  
  // configure the params that only client layer cares
  cli, err := ins.NewClient()
  if err != nil {
    panic(err)
  }

  svc, err := greettriple.NewGreetService(cli)
  if err != nil {
    panic(err)
  }

  resp, err := svc.Greet(context.Background(), &amp;greet.GreetRequest{Name: "triple"})
  if err != nil {
    return err
  }
  logger.Infof("TRIPLE unary call resp: %s", resp.Greeting)
}
</code></pre><h2>企業級服務治理能力</h2><h3>動態配置</h3><p>除了 API 模式之外，Dubbo-go 支持基於配置文件驅動的編碼方式，這對於一些更大規模的微服務開發場景非常適用。在這種模式下，我們將 registry、protocol 等組件配置，甚至包括服務聲明等都放在 dubbogo.yml 文件中，框架會在啓動過程中完成配置文件加載。</p><p>以下是一個基於 dubbogo.yml 的微服務應用的開發示例：</p><p><img src="https://oscimg.oschina.net/oscnet/up-428c365aca1834e8772eaabd7bdbe8c423d.png" alt="" referrerpolicy="no-referrer"></p><p>其中，server.go 定義如下：</p><pre><code>func main() {
  greettriple.SetProviderService(&amp;GreeterServiceImpl{})
  if err := dubbo.Load(); err != nil {
    panic(err)
  }
}
</code></pre><p>dubbogo.yml 示例內容如下：</p><pre><code>dubbo:
  application: # 應用信息，服務啓動後會將相關信息註冊到註冊中心，可被客戶端從 url 中識別
    name: myApp
  registries:
    nacos:
      protocol: nacos # 註冊中心選擇 nacos 
      address: 127.0.0.1:8848 # nacos ip
      group: DEFAULT_GROUP # nacos group, 默認 DEFAULT_GROUP
      namespace: 9fb00abb-278d-42fc-96bf-e0151601e4a1 # nacos namespaceID, should be created before. 默認 public
      username: abc
      password: abc
  protocols:
    dubbo:
      name: tri
      port: 20000
  provider:
    services:
      UserProviderWithCustomGroupAndVersion: # 接口三元組：接口名、版本號、分組。client 和 server 需要保持一致。
        interface: org.apache.dubbo.UserProvider.Test # 接口名必填
        version: myInterfaceVersion # 默認為空
        group: myInterfaceGroup # 默認為空
</code></pre><p>可以看到相比於之前的 API 編碼方式，這裏的 server.go 只有兩行代碼，dubbo.Load() 會完成所有配置的自動組裝並啓動相關組件，我們只需要在啓動應用時指定 export DUBBO_GO_CONFIG_PATH=$ABSOLUTE_PATH/conf/dubbogo.yml 即可。</p><h3>可觀測性</h3><p>自 3.2.0 版本開始，dubbo-go 重點升級了內置 metrics 指標採集能力，提供 RPC 調用（RT、QPS、調用量、請求成功數、請求失敗數、併發請求數等）、註冊中心、元數據中心、配置中心交互統計等豐富的內置採集埋點，支持多維度的指標聚合。</p><p>dubbo-go 內置 metrics 指標導出到 Prometheus + Grafana 體系的能力，以下是 dubbo-go v3.2.0 示例在 Grafana 的監控效果圖，具體示例我們將與隨後發佈在 dubbo-go-samples/metrics。</p><p><img src="https://oscimg.oschina.net/oscnet/up-d75533206a38fc2219b6f61e4a677d4d907.png" alt="" referrerpolicy="no-referrer"></p><h3>流量管控</h3><p>Dubbo 提供了豐富的流量管控策略：</p><ul><li><strong>地址發現與負載均衡，</strong> 地址發現支持服務實例動態上下線，負載均衡確保流量均勻的分佈到每個實例上。</li><li><strong>基於路由規則的流量管控，</strong> 路由規則對每次請求進行條件匹配，並將符合條件的請求路由到特定的地址子集。</li></ul><p>服務發現保證調用方看到最新的提供方實例地址，服務發現機制依賴註冊中心 (Zookeeper、Nacos、Istio 等) 實現。在消費端，Dubbo 提供了多種負載均衡策略，如隨機負載均衡策略、一致性哈希負載、基於權重的輪詢、最小活躍度優先、P2C 等。</p><p>Dubbo 的流量管控規則可以基於應用、服務、方法、參數等粒度精準的控制流量走向，根據請求的目標服務、方法以及請求體中的其他附加參數進行匹配，符合匹配條件的流量會進一步的按照特定規則轉發到一個地址子集。以下是 dubbo-go 流量管控規則可以實現的一些具體管控場景示例：</p><ul><li>基於權重的比例流量分發</li><li>灰度驗證</li><li>金絲雀發佈</li><li>按請求參數的路由</li><li>同區域優先</li><li>超時時間調整</li><li>重試</li><li>限流降級</li></ul><p>以下是一個基於 dubbo-go 實現的全鏈路灰度示例：</p><p><img src="https://oscimg.oschina.net/oscnet/up-5db7bb3a33e5312c6b284dee83c2f07e978.png" alt="" referrerpolicy="no-referrer"></p><p>以下是一個基於 dubbo-go 實現的按比例流量轉發示例：</p><p><img src="https://oscimg.oschina.net/oscnet/up-feff2328b1b30e38c9f80fedf30ef7d4849.png" alt="" referrerpolicy="no-referrer"></p><p>關於 dubbo-go 流量管控，我們以一個商城系統提供了一個完整的 demo 示例，感興趣的讀者可以參考詳細信息：</p><ul><li>流量管控規則詳情 <strong>[</strong><strong>1]</strong></li><li>流量管控商場示例解讀 <strong>[</strong><strong>2]</strong></li></ul><h3>生態</h3><p>dubbo-go 總體上遵循框架內核+插件的的設計理念，左側的框架內覈定義了 dubbo-go 作為微服務框架的一些核心概念，右側的插件部分則提供了核心概念擴展實現。</p><p><img src="https://oscimg.oschina.net/oscnet/up-130d4ae7744867b2043dfa8d36fc953563e.png" alt="" referrerpolicy="no-referrer"></p><p>框架內核，可分為 4 個層次，從上到下依次為：</p><ul><li><p><strong>API 層</strong></p><p>dubbo-go 同時支持基於 IDL、interface/struct 的服務契約定義，兼顧跨語言與易用性訴求；支持基於純 yaml 文件的微服務配置模式；提供了同步、異步、單次 (unary)、流式 (streaming) 等 RPC 通信與編碼模型。</p></li><li><p><strong>服務治理層</strong></p><p>dubbo-go 內置了多維度的服務治理能力抽象，確保滿足微服務開發與集羣治理的核心訴求，這包括地址發現（Service Discovery）、負載均衡（Load Balancing）、可觀測指標（Metrics）、流量管控（Traffic Management）、全鏈路追蹤（Tracing）等。</p></li><li><p><strong>RPC 協議層</strong></p><p>dubbo-go 實現的最核心的 RPC 協議是 - triple 協議，triple 可同時工作在 http1/2 之上 (支持 CURL 直接訪問)，兼容 gRPC；從設計上，dubbo-go 還提供了多協議發佈服務的支持，你可以在一個進程內同時發佈 triple、dubbo2、rest、jsonRPC 等多種不同通信協議的服務。</p></li><li><p><strong>傳輸層</strong>支持 HTTP1/2、TCP 傳輸層，兼顧性能與通用性，同時支持多種序列化方式。</p></li></ul><p>插件體系極大的豐富了 dubbo-go 功能與生態，社區內置提供了大量的內置擴展實現，同時，開發者可以非常容易的根據需求增加擴展實現。以下是一些典型的插件定義：</p><ul><li><p><strong>Protocol</strong></p><p>dubbo-go 基於 protocol 插件內置提供了 triple、dubbo2、rest 等協議支持，通過擴展 protocol 可以為 dubbo-go 擴展更多協議。</p></li><li><p><strong>Service Discovery</strong></p><p>支持 Nacos、Zookeeper、Polaris 等主流注冊中心集成。</p></li><li><p><strong>Traffic Management</strong></p><p>dubbo-go 支持 Dubbo 體系定義的流量規則，可以實現在運行期動態的調整服務行為如超時時間、重試次數、限流參數等，通過控制流量分佈可以實現 A/B 測試、金絲雀發佈、多版本按比例流量分配、條件匹配路由、黑白名單等。</p></li><li><p><strong>Metrics</strong></p><p>提供 RPC 調用（RT、QPS、調用量、請求成功數、請求失敗數、併發請求數等）、註冊中心、元數據中心、配置中心交互統計等豐富的內置採集埋點，支持多維度的指標聚合。</p></li><li><p><strong>Logging</strong></p><p>提供通用的日誌採集接口定義，內置 Zap、Logrus 支持。</p></li><li><p><strong>Tracing</strong></p><p>提供分佈式鏈路追蹤能力，通過此插件擴展可接入 Zipkin、Jaeger、Skywalking 等鏈路追蹤系統。</p></li></ul><h2>總結</h2><p>dubbo-go 3.2.0 的首個 alpha 版本將於 11 月底發佈，本文是發版前的搶先預覽，感興趣的讀者也可以訪問源碼嚐鮮：<em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go%2Ftree%2Ffeature-triple%2Fprotocol%2Ftriple%2Finternal" target="_blank">https://github.com/apache/dubbo-go/tree/feature-triple/protocol/triple/internal</a></em></p><p>接下來，我們將持續推進 3.2.0 版本迭代並計劃與 2 月份發佈正式穩定版本，詳細 Roadmap 請關注項目倉庫：<em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go" target="_blank">https://github.com/apache/dubbo-go</a></em></p><p>社區期待 Go 語言相關開發者的加入，可搜索關注&nbsp;「apachedubbo」&nbsp;微信公眾號並回復 「dubbogo」 接受邀請，加入官方社羣組織。</p><p><strong>相關鏈接：</strong></p><p>[1]&nbsp;流量管控規則詳情</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcn.dubbo.apache.org%2Fzh-cn%2Foverview%2Fcore-features%2Ftraffic%2F" target="_blank">https://cn.dubbo.apache.org/zh-cn/overview/core-features/traffic/</a></em></p><p>[2]&nbsp;流量管控商場示例解讀</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcn.dubbo.apache.org%2Fzh-cn%2Foverview%2Ftasks%2Ftraffic-management%2F" target="_blank">https://cn.dubbo.apache.org/zh-cn/overview/tasks/traffic-management/</a></em></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 03:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3874284/blog/10422864</guid>
            <link>https://my.oschina.net/u/3874284/blog/10422864</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Pororoca —— HTTP 測試工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Pororoca 是一個</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="background-color:#ffffff; color:#1f2328">支持 HTTP/2 和 HTTP/3 的</span><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>&nbsp;HTTP 測試工具，受到 Postman 的啓發，但有許多改進。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>適用於 Windows、Mac OSX 和 Linux。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><img alt="" height="300" src="https://static.oschina.net/uploads/space/2023/1128/164543_T3WY_4252687.png" width="500" referrerpolicy="no-referrer"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><strong>特性：</strong></p><ul><li>支持<a href="https://http2.github.io/">HTTP/2</a>和<a href="https://developers.cloudflare.com/http3/">HTTP/3</a>。</li><li>集合範圍的環境。</li><li>輕鬆的變量管理。</li><li><span style="background-color:#ffffff; color:#1f2328">Secret&nbsp;</span>變量。</li><li>集合和環境可以一起導出到單個文件中。</li><li>與 Postman 完全導出和導入兼容性。</li><li>內存使用量低得多 - 比 Postman 少兩到三倍。</li><li>自動化測試。</li><li>WebSockets。</li><li>啓動時間快。</li><li>免費且開源。</li></ul><p><strong>注意：</strong>在 Windows 上，對 HTTP/2 的支持需要 Windows 10 或更高版本。支持 HTTP/3 需要 Linux 或 Windows 11 及更高版本。HTTP/3 仍處於實驗階段。</p></div>
                                                                ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 02:06:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/pororoca</guid>
            <link>https://www.oschina.net/p/pororoca</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 物聯網終端操作系統 TencentOS Tiny]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-開放原子開源基金會首批孵化項目" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E5%BC%80%E6%94%BE%E5%8E%9F%E5%AD%90%E5%BC%80%E6%BA%90%E5%9F%BA%E9%87%91%E4%BC%9A%E9%A6%96%E6%89%B9%E5%AD%B5%E5%8C%96%E9%A1%B9%E7%9B%AE"></a>開放原子開源基金會首批孵化項目</h1><p><img src="https://gitee.com/TencentOS/TencentOS-tiny/raw/master/doc/image/introduction/TencentOS_tiny_log.png" alt="" referrerpolicy="no-referrer"></p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FTencent%2FTencentOS-tiny%2Fblob%2Fmaster%2FLICENSE"><img src="http://img.shields.io/badge/license-BSD-blue.svg" alt="license" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FTencent%2FTencentOS-tiny%2Fpulls"><img src="https://img.shields.io/badge/PRs-welcome-blue.svg" alt="PRs Welcome" referrerpolicy="no-referrer"></a></p><p><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/README_en.md">(English Documents Available)</a></p><h1><a id="user-content-一 tencentos-tiny-簡介" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E4%B8%80tencentos-tiny-%E7%AE%80%E4%BB%8B"></a>一、TencentOS Tiny 簡介</h1><p><a href="https://gitee.com/link?target=https%3A%2F%2Fcloud.tencent.com%2Fproduct%2Ftos-tiny">TencentOS tiny</a> 是騰訊面向物聯網領域開發的實時操作系統，具有低功耗，低資源佔用，模塊化，安全可靠等特點，可有效提升物聯網終端產品開發效率。TencentOS tiny 提供精簡的 RTOS 內核，內核組件可裁剪可配置，可快速移植到多種主流 MCU (如 STM32 全系列) 及模組芯片上。而且，基於 RTOS 內核提供了豐富的物聯網組件，內部集成主流物聯網協議棧（如 CoAP/MQTT/TLS/DTLS/LoRaWAN/NB-IoT 等），可助力物聯網終端設備及業務快速接入騰訊雲物聯網平台。</p><h2><a id="user-content-1tencentos-tiny 整體架構" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#1tencentos-tiny%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84"></a>1、TencentOS tiny 整體架構</h2><p><img src="https://gitee.com/TencentOS/TencentOS-tiny/raw/master/doc/image/introduction/TencentOS_tiny_Architecture.png" alt="" referrerpolicy="no-referrer"></p><p>TencentOS tiny 主體架構圖，從下到上主要包括：</p><p><strong>CPU 庫</strong> ：TencentOS tiny 支持的 CPU IP 核架構，當前主要支持 ARM Cortex M0/3/4/7，Cortex A7，RISC-V、MSP430、AVR、STM8 等。</p><p><strong>驅動管理層</strong> ：包括板級支持包（BSP，主要由 MCU 芯片廠家開發與維護）、硬件抽象層（HAL，主要由 TencentOS tiny 提供，方便不同芯片的適配與移植）、設備驅動（Drivers，例如 Wi-Fi、GPRS、LoRa 等模塊的驅動程序）。</p><p><strong>內核</strong> ：TencentOS tiny 實時內核包括任務管理、實時調度、時間管理、中斷管理、內存管理、異常處理、軟件定時器、鏈表、消息隊列、信號量、互斥鎖、事件標誌等模塊。</p><p><strong>IoT 協議棧</strong>：TencentOS tiny 提供 lwip、AT Adapter、SAL 層，支持不同的網絡硬件，例如以太網、串口 Wi-Fi、GPRS、NB-IoT、4G 等通信模塊。TCP/IP 網絡協議棧上提供常用的物聯網協議棧，例如 CoAP、MQTT，支撐終端業務快速接入騰訊雲。</p><p><strong>安全框架</strong>：TencentOS tiny 為了確保物聯網終端數據傳輸安全以及設備認證安全，提供了完整的安全解決方案。安全框架提供的 DTLS 和 TLS 安全協議，加固了 COAP 及 MQTT 的傳輸層，可確保物聯網終端在對接騰訊雲時實現安全認證和數據加密；另外針對低資源的終端硬件，安全框架還提供與騰訊雲 IoTHub 配套的密鑰認證方案，確保資源受限設備也能在一定程度上實現設備安全認證。</p><p><strong>組件框架</strong>：TencentOS tiny 提供文件系統、KV 存儲、自組網、JS 引擎、低功耗框架、設備框架、OTA、調試工具鏈等一系列組件，供用戶根據業務場景選用。</p><p><strong>開放 API（規劃開發中）</strong>：TencentOS tiny 將在協議中間件和框架層上提供開放 API 函數，方便用戶調用中間件功能，使用戶無需過多關心中間件具體實現，快速對接騰訊雲，實現終端業務上雲的需求，期望最大程度減少終端物聯網產品開發週期，節省開發成本。</p><p><strong>示例應用</strong>：TencentOS tiny 提供的示例代碼，模塊測試代碼等，方便用戶參考使用。</p><h2><a id="user-content-2tencentos-tiny-優勢" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#2tencentos-tiny-%E4%BC%98%E5%8A%BF"></a>2、TencentOS tiny 優勢</h2><h3><a id="user-content-1 小體積" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#1%E5%B0%8F%E4%BD%93%E7%A7%AF"></a>(1).小體積</h3><p>最小內核：RAM 0.6KB，ROM 1.8KB
典型 LoraWAN 及傳感器應用：RAM 3.3KB，ROM 12KB</p><h3><a id="user-content-2 低功耗" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#2%E4%BD%8E%E5%8A%9F%E8%80%97"></a>(2).低功耗</h3><p>休眠最低功耗低至 2uA
支持外設功耗管理框架</p><h3><a id="user-content-3 豐富的-iot-組件" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#3%E4%B8%B0%E5%AF%8C%E7%9A%84-iot-%E7%BB%84%E4%BB%B6"></a>(3).豐富的 IoT 組件</h3><p>集成主流 IoT 協議棧
多種通信模組 SAL 層適配框架；
支持 OTA 升級
提供簡單易用端雲 API，加速用戶業務接入騰訊雲</p><h3><a id="user-content-4 可靠的安全框架" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#4%E5%8F%AF%E9%9D%A0%E7%9A%84%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6"></a>(4).可靠的安全框架</h3><p>多樣化的安全分級方案
均衡安全需求&amp;成本控制</p><h3><a id="user-content-5 良好的可移植性" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#5%E8%89%AF%E5%A5%BD%E7%9A%84%E5%8F%AF%E7%A7%BB%E6%A4%8D%E6%80%A7"></a>(5).良好的可移植性</h3><p>內核及 IoT 組件高度解耦，提供標準適配層
提供自動化移植工具，提升開發效率</p><h3><a id="user-content-6 便捷的調試手段" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#6%E4%BE%BF%E6%8D%B7%E7%9A%84%E8%B0%83%E8%AF%95%E6%89%8B%E6%AE%B5"></a>(6).便捷的調試手段</h3><p>提供雲化的最後一屏調試功能
故障現場信息自動上傳雲平台，方便開發人員調試分析</p><h2><a id="user-content-3tencentos-tiny 攜手合作夥伴共建 iot 生態" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#3tencentos-tiny%E6%90%BA%E6%89%8B%E5%90%88%E4%BD%9C%E4%BC%99%E4%BC%B4%E5%85%B1%E5%BB%BAiot%E7%94%9F%E6%80%81"></a>3、TencentOS tiny 攜手合作夥伴共建 IoT 生態</h2><p><img src="https://gitee.com/TencentOS/TencentOS-tiny/raw/master/doc/image/introduction/Partners.png" alt="" referrerpolicy="no-referrer"></p><p>TencentOS tiny 自開源發佈以來也在努力發展合作伙伴，期待合作共贏，共同擴展 IoT 應用生態。目前已經與多家 MCU/IP 核廠家達成了合作，包括意法半導體、恩智浦半導體、兆易半導體、ARM、華大半導體、芯來科技等；也與無線 SOC 和模組廠家達成了廣泛的合作關係，包括瑞興恆方、國民技術、Nordic 藍牙、亮牛半導體、有人物聯網等，</p><p>除了 MCU 和模組外，TencentOS tiny 也積極推進終端產品及項目的落地，目前已經形成了 AI 智慧農業、智能貨櫃、智慧會議室等方案，並且在騰訊內部與微信支付、騰訊雲智慧行業、 AI 平台部、騰訊微瓴、QQ family 達成內部合作，共同擴展行業生態；同時也開始積極發展外部客戶，目前與深圳光合顯示科技的墨水屏零售標籤、鑫悅購充電樁等達成業務合作。TencentOS tiny 將攜手合作夥伴為物聯網終端廠家提供更優質的 IoT 終端軟件解決方案，方便各種物聯網設備快速接入騰訊雲，共同擴展 IoT 生態，更好地支撐智慧城市、智能水錶、智能家居、智能穿戴、車聯網等多種行業應用。</p><p>歡迎 IoT 相關項目合作，有合作需求的請郵件聯繫 TencentOS tiny 官方工作人員，郵箱地址 ： <a href="mailto:supowang@tencent.com">supowang@tencent.com</a></p><h1><a id="user-content-二 tencentos-tiny-代碼目錄" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E4%BA%8Ctencentos-tiny-%E4%BB%A3%E7%A0%81%E7%9B%AE%E5%BD%95"></a>二、TencentOS tiny 代碼目錄</h1><ul><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/09.Code_Directories.md">TencentOS tiny 代碼目錄説明</a></li></ul><h1><a id="user-content-三 tencentos-tiny-參考文檔" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E4%B8%89tencentos-tiny-%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>三、TencentOS tiny 參考文檔</h1><h2><a id="user-content-1 移植指南" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#1%E7%A7%BB%E6%A4%8D%E6%8C%87%E5%8D%97"></a>1、移植指南</h2><ul><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/10.Porting_Manual_for_KEIL.md">TencentOS tiny 移植指南（KEIL 版本）</a></li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/11.Porting_Manual_for_IAR.md">TencentOS tiny 移植指南（IAR 版本）</a></li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/12.Porting_Manual_for_GCC.md">TencentOS tiny 移植指南（GCC 版本）</a></li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/tools/mdk_pack/Documentation/README.md">TencentOS tiny 移植指南（基於 MDK pack)</a></li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/tools/STM32CubeMX_pack/Documentation/README.md">TencentOS tiny 移植指南（基於 STM32 CubeMx)</a></li></ul><h2><a id="user-content-2tencentos-tiny-開發指南" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#2tencentos-tiny-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97"></a>2、TencentOS tiny 開發指南</h2><ul><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/04.Development_Manual.md">TencentOS tiny 內核開發指南</a></li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/05.SDK_Manual.md">TencentOS tiny API 參考</a></li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/08.QCloud_IoTHub_Quick_Start.md">TencentOS tiny 對接騰訊雲 IoTHub 開發指南</a></li></ul><h2><a id="user-content-3tencentos-tiny-騰訊雲大學視頻教程" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#3tencentos-tiny-%E8%85%BE%E8%AE%AF%E4%BA%91%E5%A4%A7%E5%AD%A6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B"></a>3、TencentOS tiny 騰訊雲大學視頻教程</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fcloud.tencent.com%2Fedu%2Fpaths%2Fseries%2FIoT">TencentOS tiny 端側開發實踐課</a></li></ul><h1><a id="user-content-四 tencentos-tiny-開源協議" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E5%9B%9Btencentos-tiny-%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE"></a>四、TencentOS tiny 開源協議</h1><ul><li>TencentOS tiny 遵循 <a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/LICENSE">BSD-3 開源許可協議</a></li></ul><h1><a id="user-content-五 tencentos-tiny-支持的物聯網平台" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E4%BA%94tencentos-tiny-%E6%94%AF%E6%8C%81%E7%9A%84%E7%89%A9%E8%81%94%E7%BD%91%E5%B9%B3%E5%8F%B0"></a>五、TencentOS tiny 支持的物聯網平台</h1><p>TencentOS tiny 能支持物聯網終端設備和業務快速接入<a href="https://gitee.com/link?target=https%3A%2F%2Fcloud.tencent.com%2Fproduct%2Fiotexplorer">騰訊雲物聯網平台 IoT Explorer</a>。</p><p>TencentOS tiny 結合騰訊雲物聯網開發平台 IoT Explorer，已經構築起連接通訊芯片到雲開發的能力，加上已經建設完成的國內最大規模 LoRa 網絡，騰訊徹底打通從芯片通訊開發、網絡支撐服務，物理設備定義管理，數據分析和多場景應用開發等全鏈條 IoT 雲開發服務能力，重新定義了物聯網開發模式，助力億級設備多方式多模式低門檻接入騰訊雲服務。作為物聯網基礎設施建設服務者，騰訊將持續打造開放的物聯網生態體系，促進物聯網生態良性發展。</p><h1><a id="user-content-六 tencentos-tiny-快速入門參考" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E5%85%ADtencentos-tiny-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%8F%82%E8%80%83"></a>六、TencentOS tiny 快速入門參考</h1><p>TencentOS tiny 聯合合作夥伴 (南京厚德物聯網) 設計了定製開發板，如下圖：
<img src="https://gitee.com/TencentOS/TencentOS-tiny/raw/master/doc/image/introduction/EVB_MX.png" alt="" referrerpolicy="no-referrer"></p><ul><li><a href="https://gitee.com/link?target=http%3A%2F%2Fwww.holdiot.com%2Fproduct%2Fshowproduct.php%3Fid%3D8">TencentOS tiny 定製開發板介紹頁</a>，開發者可以基於定製開發板進行快速入門學習，點擊下載參考文檔</li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/15.TencentOS_tiny_EVB_MX_Plus_Quick_Start.md">TencentOS-tiny 定製開發板入門指南</a></li></ul><h1><a id="user-content-七貢獻代碼" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E4%B8%83%E8%B4%A1%E7%8C%AE%E4%BB%A3%E7%A0%81"></a>七、貢獻代碼</h1><ul><li><ol><li>在您自己的 GitHub 賬戶下 Fork TencentOS tiny 開源項目；</li></ol></li><li><ol start="2"><li>根據您的需求在本地 clone 一份 TencentOS tiny 代碼；</li></ol></li><li><ol start="3"><li>您修改或者新增功能後，push 到您 fork 的遠程分支；</li></ol></li><li><ol start="4"><li>創建 pull request，向 TencentOS tiny 官方開發分支提交合入請求；</li></ol></li><li><ol start="5"><li>TencentOS tiny 研發團隊會定期 review 代碼，通過測試後合入。</li></ol></li></ul><h1><a id="user-content-八加入 tencentos-tiny 官方 qq 技術交流羣" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E5%85%AB%E5%8A%A0%E5%85%A5tencentos-tiny%E5%AE%98%E6%96%B9qq%E6%8A%80%E6%9C%AF%E4%BA%A4%E6%B5%81%E7%BE%A4"></a>八、加入 TencentOS tiny 官方 QQ 技術交流羣</h1><p>掃碼加羣，請備註 TencentOS tiny 開發者，工作人員會根據備註進行審核：</p><p><img src="https://gitee.com/TencentOS/TencentOS-tiny/raw/master/doc/image/introduction/qq.png" alt="" referrerpolicy="no-referrer"></p><h1><a id="user-content-九第三方開發者評測" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E4%B9%9D%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BC%80%E5%8F%91%E8%80%85%E8%AF%84%E6%B5%8B"></a>九、第三方開發者評測</h1><p>1.基於 TencentOS tiny 的環境監測實戰項目
<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav73782956%3Ffrom%3Dsearch%26seid%3D4421984671929108231">【TencentOS tiny】環境監測實戰項目最終完整版</a>
感謝阿正的貢獻</p><p>2.基於野火 stm32f103 開發板上移植的 TencentOS tiny 例程、源碼剖析、視頻講解。
感謝 CSDN 博客專家傑傑的貢獻</p><h2><a id="user-content-簡單上手" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E7%AE%80%E5%8D%95%E4%B8%8A%E6%89%8B"></a>簡單上手：</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F101034426">超詳細的 TencentOS tiny 移植到 STM32F103 全教程</a></li></ul><h2><a id="user-content-深度源碼分析" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E6%B7%B1%E5%BA%A6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90"></a>深度源碼分析：</h2><ul><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F99618912">【TencentOS tiny 學習】源碼分析（1）——task</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F99665883">【TencentOS tiny 學習】源碼分析（2）——調度器</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F99687678">【TencentOS tiny 學習】源碼分析（3）——隊列</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F99781093">【TencentOS tiny 學習】源碼分析（4）——消息隊列</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F100052643">【TencentOS tiny 學習】源碼分析（5）——信號量</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F100056641">【TencentOS tiny 學習】源碼分析（6）——互斥鎖</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F100492219">【TencentOS tiny 學習】源碼分析（7）——事件</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F101846089">【TencentOS tiny 學習】源碼分析（8）——軟件定時器</a></p></li></ul><h2><a id="user-content-配套例程" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E9%85%8D%E5%A5%97%E4%BE%8B%E7%A8%8B"></a>配套例程：</h2><ul><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2Fhello-world">【TencentOS tiny 學習】例程（0）——hello world</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F01-task">【TencentOS tiny 學習】例程（1）——task</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F02-queue">【TencentOS tiny 學習】例程（2）——隊列</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F03-msg_queue">【TencentOS tiny 學習】例程（3）——消息隊列</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F04-sem">【TencentOS tiny 學習】例程（4）——信號量</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F05-mutex">【TencentOS tiny 學習】例程（5）——互斥鎖</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F06-event">【TencentOS tiny 學習】例程（6）——事件</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F07-timer">【TencentOS tiny 學習】例程（7）——軟件定時器</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F08-mmblk">【TencentOS tiny 學習】例程（8）——內存池</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F09-mmheap">【TencentOS tiny 學習】例程（9）——內存堆</a></p></li></ul><h2><a id="user-content-視頻教程" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B"></a>視頻教程：</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%3Ffrom%3Dsearch%26seid%3D10160676184801585522">【TencentOS tiny 學習】視頻彙總</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D1">【視頻】01-初識 TencentOS tiny</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D2">【視頻】02-TencentOS tiny 基礎知識</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D3">【視頻】03-TencentOS tiny 移植</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D4">【視頻】04-TencentOS tiny 任務-1</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D5">【視頻】05-TencentOS tiny 任務-2</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D6">【視頻】06-TencentOS tiny 隊列-1</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D7">【視頻】07-TencentOS tiny 隊列-2</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D8">【視頻】08-TencentOS tiny 消息隊列</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D9">【視頻】09-TencentOS tiny 信號量-1</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D10">【視頻】10-TencentOS tiny 信號量-2</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D11">【視頻】11-TencentOS tiny 互斥鎖-1</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D12">【視頻】12-TencentOS tiny 互斥鎖-2</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D13">【視頻】13-TencentOS tiny 互斥鎖-3</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D14">【視頻】14-TencentOS tiny 事件-1</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D15">【視頻】15-TencentOS tiny 事件-2</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D16">【視頻】16-TencentOS tiny 軟件定時器-1</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D11">【視頻】17-TencentOS tiny 軟件定時器-2</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D18">【視頻】18-TencentOS tiny 軟件定時器-3</a></li></ul><h2><a id="user-content-相關 ppt 資料" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E7%9B%B8%E5%85%B3ppt%E8%B5%84%E6%96%99"></a>相關 PPT 資料：</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2FPPT">【TencentOS tiny 學習】視頻 PPT</a></li></ul>]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 01:54:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/TencentOS/TencentOS-tiny</guid>
            <link>https://gitee.com/TencentOS/TencentOS-tiny</link>
        </item>
        <item>
            <title>
                <![CDATA[微軟悄然推出 Copilot Android 版應用]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">微軟在一週前悄然<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Ftechosarusrex%2Fstatus%2F1739569672058450165" target="_blank">上線</a>了 Android 版本的 Copilot 應用，目前可從 Google Play 商店進行下載，但 iOS 版本尚未推出。</span></p><p><span style="color:#000000"><img alt="" height="423" src="https://oscimg.oschina.net/oscnet/up-fbbce70c8deda05fed32340399295f80d10.jpg" width="300" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">Android 版的 Copilot 應用與 ChatGPT 非常相似，可以訪問聊天機器人功能，通過 DALL-E 3 生成圖像，並可以為電子郵件和文檔起草文本。它還能夠免費訪問 OpenAI 最新的 GPT-4 模型，而如果用戶使用 ChatGPT，就必須付費。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Dec 2023 02:37:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272891/microsoft-copilot-app-for-android</guid>
            <link>https://www.oschina.net/news/272891/microsoft-copilot-app-for-android</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
