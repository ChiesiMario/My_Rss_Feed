<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-綜合資訊]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="https://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-綜合資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Wed, 29 Nov 2023 20:30:33 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[國內首個農業開源鴻蒙操作系統]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0px; margin-right:0px; text-align:start">11 月 29 日，在全球首個以供應鏈為主題的國家級展會——中國國際供應鏈促進博覽會上，中信農業科技股份有限公司（簡稱「中信農業」）聯合深圳開鴻數字產業發展有限公司（簡稱「深開鴻」）、華為技術有限公司（簡稱「華為」）正式對外發布了<strong>國內首個自主可控的農業開源鴻蒙操作系統。</strong></p><p style="margin-left:0px; margin-right:0px; text-align:start">據介紹，農業開源鴻蒙是致力於維護農業數據安全，打造自主可控的農業操作系統。</p><p><img src="https://static.oschina.net/uploads/space/2023/1129/170904_6My8_2720166.png" referrerpolicy="no-referrer"></p><p>下圖是農業開源鴻蒙操作系統的演示：</p><p><img height="906" src="https://static.oschina.net/uploads/space/2023/1129/171101_l9cl_2720166.png" width="2232" referrerpolicy="no-referrer"></p><p><img height="928" src="https://static.oschina.net/uploads/space/2023/1129/171017_86bC_2720166.png" width="2226" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-116c65e954d843c9b90f6fb5ba8f83258c5.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-c8e4bc96284803ab6547db6797684372387.png" referrerpolicy="no-referrer"></p><p>來源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fj4EIO_8RPUdwqLJBhsozAQ" target="_blank">https://mp.weixin.qq.com/s/j4EIO_8RPUdwqLJBhsozAQ</a></u></em></p><p>深開鴻 CEO 王成錄博士介紹道，農業開源鴻蒙操作系統是基於 KaihongOS 的新一代面向數字農業領域的萬物智聯操作系統，為大小不一、類型多樣設備的互聯和協同提供統一的數字底座，讓所有農業設備都用統一的操作系統，講同一種語言，而且全棧關鍵核心技術均為國產自主研發，從底層操作系統源頭上保證了數據的安全可靠。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 09:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268706</guid>
            <link>https://www.oschina.net/news/268706</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[微軟開源 Azure RTOS，更名為 Eclipse ThreadX]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">微軟<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftechcommunity.microsoft.com%2Ft5%2Finternet-of-things-blog%2Fmicrosoft-contributes-azure-rtos-to-open-source%2Fba-p%2F3986318" target="_blank">宣佈</a>將 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fazure-rtos" target="_blank">Azure RTOS</a> 託管至&nbsp;<span style="background-color:#ffffff">Eclipse 基金會，並更名為&nbsp;Eclipse ThreadX。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">Azure RTOS 是一個帶有 ThreadX 實時操作系統（RTOS）的嵌入式開發套件。ThreadX 是一個普及性很高的小型 RTOS，</span>可為資源受限的設備提供可靠、超快的性能；<span style="background-color:#ffffff">目前已部署在全球超過 120 億台設備上。除了作為 RTOS 內核的 Azure RTOS ThreadX 之外，Azure RTOS 還提供了一組系統組件來加速構建嵌入式系統和物聯網應用程序。</span></span></p><p><span style="color:#000000">在基金會管理下，<span style="background-color:#ffffff">Eclipse ThreadX 項目計劃將於 2024 年第一季度在 MIT 協議下開源提供。「</span><span style="background-color:#ffffff">ThreadX 將成為世界上第一個開源實時操作系統。</span><span style="background-color:#ffffff">」</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff"><img alt="" height="374" src="https://oscimg.oschina.net/oscnet/up-70e9a7d446ccf867ef9551516c458a9610d.png" width="700" referrerpolicy="no-referrer"></span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">公告稱，Eclipse ThreadX 為實時應用提供了一個供應商中立、開放源代碼、安全認證的操作系統。它是第一個也是唯一一個具有這種獨特混合屬性的實時操作系統，可滿足廣泛的需求，使行業採用者、開發人員和最終用戶都能從中受益。</span><span style="background-color:#ffffff">主要優點包括：</span></span></p><ul><li><span style="color:#000000">不間斷訪問：更廣泛、持續地訪問 ThreadX 技術</span></li><li><span style="color:#000000">加速創新：通過社區參與提供更快的更新和改進</span></li><li><span style="color:#000000">開放且可預測：透明的開發流程以增強社區協作</span></li><li><span style="color:#000000">更廣泛的覆蓋範圍：對於各種應用來説更易於訪問和通用</span></li></ul><p><span style="color:#000000">「這一變革性合作為嵌入式 RTOS 技術的空前發展鋪平了道路，並將在新成立的 </span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fprojects.eclipse.org%2Fproposals%2Feclipse-threadx" target="_blank">Eclipse ThreadX Project</a>&nbsp;<span style="color:#000000"><span style="background-color:#ffffff">和</span></span>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fprojects.eclipse.org%2Finterest-groups%2Fthreadx-interest-group" target="_blank">Eclipse ThreadX Interest Group</a><span style="color:#4c4d4e">&nbsp;</span><span style="color:#000000">的框架內展開。<span style="background-color:#ffffff">與我們一起塑造嵌入式系統的未來並利用開源的力量促進創新！</span>」&nbsp;</span></p><p><span style="color:#000000"><span style="background-color:#ffffff">Eclipse 基金會<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Feclipse-foundation.blog%2F2023%2F11%2F21%2Fintroducing-eclipse-threadx%2F" target="_blank">認為</a>，</span></span><span style="background-color:#ffffff"><span style="color:#222222">ThreadX 將憑藉其全面的屬性，迅速擴大在航空航天、汽車、物聯網、醫療、交通、自動化和消費可穿戴設備等廣泛用例中的採用。「Eclipse ThreadX 為行業帶來了改變遊戲規則的機會。」</span></span></p><p><strong><span style="background-color:#ffffff"><span style="color:#222222">項目官網：</span></span></strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fthreadx.io%2F" target="_blank">https://threadx.io/</a></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 09:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268705/microsoft-azure-rtos-eclipse-threadx</guid>
            <link>https://www.oschina.net/news/268705/microsoft-azure-rtos-eclipse-threadx</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[1 - 10 月我國電子信息製造業生產持續回升]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>2023 年 1-10 月份電子信息製造業運行情況已<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F-NlHIDx-kRamtsv2EoBppQ" target="_blank">公佈</a>。1-10&nbsp;<span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">月份，我國電子信息製造業生產持續回升，出口降幅收窄，效益持續改善，投資穩定增長，地區間營收分化明顯。</span></p><p style="margin-left:0; margin-right:0"><strong>一、生產持續回升</strong></p><p style="margin-left:0; margin-right:0">1—10 月份，規模以上電子信息製造業增加值同比增長 1.7%，增速較前三季度提高 0.3 個百分點；<span>增速分別比同期工業、高技術製造業低 2.4 個和 0.2 個百分點。10 月份，規模以上電子信息製造業增加值同比增長 4.8%，較同期工業高 0.2 個百分點。</span></p><p><img height="284" src="https://oscimg.oschina.net/oscnet/up-c7e8347b11afa929069846f119706440564.png" width="500" referrerpolicy="no-referrer"></p><p>1—10 月份，主要產品中，手機產量 12.5 億台，同比增長 1.6%，其中智能手機產量 9.06 億台，同比下降 4.8%；微型計算機設備產量 2.81 億台，同比下降 20.8%；集成電路產量 2765 億塊，同比增長 0.9%；光電子器件產量 11753 億隻，同比增長 9.3%。</p><p style="margin-left:0; margin-right:0"><strong>二、出口降幅收窄</strong></p><p>1—10 月份，規模以上電子信息製造業出口交貨值同比下降 6.9%，降幅較前三季度收窄 1.2 個百分點，比同期工業降幅深 2.7 個百分點。10 月份，規模以上電子信息製造業出口交貨值與去年同期持平。</p><p><img height="278" src="https://oscimg.oschina.net/oscnet/up-8fddcd7d4c558e2d88e81617b79a9576a58.png" width="500" referrerpolicy="no-referrer"></p><p>據海關統計，1—10 月份，我國出口筆記本電腦 11774 萬台，同比下降 18%；出口手機 6.42 億台，同比下降 6.5%；出口集成電路 2218 億個，同比下降 4.1%。</p><p style="margin-left:0; margin-right:0"><strong>三、效益持續改善</strong></p><p style="margin-left:0px; margin-right:0px; text-align:justify">1—10 月份，規模以上電子信息製造業實現營業收入 12.1 萬億元，同比下降 2.9%，較前三季度降幅收窄 0.5 個百分點；營業成本 10.5 萬億元，同比下降 2.6%；實現利潤總額 4826 億元，同比下降 18.2%，較前三季度降幅收窄 0.4 個百分點；營業收入利潤率為 4%，較前三季度持平。</p><p><img height="280" src="https://oscimg.oschina.net/oscnet/up-8fb3765349827aa46ce821c7b2ef59dfc32.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><strong>四、投資穩定增長</strong></p><p style="margin-left:0; margin-right:0">1—10 月份，電子信息製造業固定資產投資同比增長 9.6%，比同期工業投資增速高 0.7 個百分點，但比高技術製造業投資增速低 1.7 個百分點。</p><p><img height="274" src="https://oscimg.oschina.net/oscnet/up-ed620009a27ece0de52f59079cdf61d17da.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><strong>五、地區間營收分化明顯</strong></p><p>1—10 月份，規模以上電子信息製造業東部地區實現營業收入 82003 億元，同比下降 3%，較前三季度降幅收窄 0.8 個百分點；中部地區實現營業收入 19834 億元，同比下降 3.9%，較前三季度降幅收窄 1.3 個百分點；西部地區實現營業收入 17982 億元，同比下降 1.9%，較前三季度降幅加深 1.8 個百分點；東北地區實現營業收入 823 億元，同比增加 9%，較前三季度回落 0.5 個百分點。四個地區電子信息製造業營業收入佔全國比重分別為 68.0%、16.4%、14.9% 和 0.7%。</p><p><img height="310" src="https://oscimg.oschina.net/oscnet/up-b0043b1d7c4585093e396d4d7d5f544fe2a.png" width="500" referrerpolicy="no-referrer"></p><p>1—10 月份，規模以上電子信息製造業京津冀地區實現營業收入 5995 億元、同比下降 6.3%，較前三季度降幅持平，營收佔全國比重 5%；長三角地區實現營業收入 33990 億元、同比下降 3.8%，較前三季度降幅收窄 1.1 個百分點，營收佔全國比重 28.2%。</p><p><span style="color:#888888">（注：1.文中統計數據除註明外，其餘均為國家統計局數據或據此測算。2.文中「電子信息製造業」與國民經濟行業分類中的「計算機、通信和其他電子設備製造業」為同一口徑。）</span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 08:04:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268691</guid>
            <link>https://www.oschina.net/news/268691</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[滴滴向所有用戶補償 10 元無門檻打車通用券]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>滴滴出行今日就 11 月 27 日夜間發生的系統故障進行了説明，並再一次道歉。同時，滴滴還為所有用戶派發了一張「致歉補償券」，無門檻使用，立減 10 元。</p><blockquote><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-f2fd281711327e482dba21d9ff535b24145.png" referrerpolicy="no-referrer"></p></blockquote><p>掃碼領取：</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-28207da7bde2ec3598e23358e58cbbeaafd.png" referrerpolicy="no-referrer"></p><p>滴滴表示，目前滴滴 App 的所有服務已經全部恢復。初步確定，這起事故的起因是底層系統軟件發生故障，並非網傳的「遭受攻擊」，後續將深入開展技術風險隱患排查和升級工作，全面保障服務穩定性。</p><hr><p><strong>事件回顧</strong></p><ul><li><a href="https://www.oschina.net/news/268635" target="news">滴滴史上最嚴重服務故障，罪魁禍首是底層軟件 or 「降本增笑」？</a></li><li><a href="https://www.oschina.net/news/268480" target="news">滴滴昨晚系統服務故障，技術團隊連夜修復</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 07:04:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268677</guid>
            <link>https://www.oschina.net/news/268677</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[AWS 推出 AI 聊天機器人 Amazon Q]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">AWS 正式加入聊天機器人賽道，宣佈推出一款名為 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Faws.amazon.com%2Fcn%2Fblogs%2Faws%2Famazon-q-brings-generative-ai-powered-assistance-to-it-pros-and-developers-preview%2F" target="_blank">Amazon Q</a> 的生成式 AI 助手；可以幫助用戶完成工作中的各種任務，如聊天、生成內容和採取行動。</span></p><p><span style="color:#000000">根據介紹，Amazon Q 主要面向企業提供，旨在幫助員工完成日常任務，例如總結文檔、填寫內部文件以及回答有關公司政策的問題。其可供企業使用多種功能，包括開發應用程序、轉換代碼、生成商業智能、充當業務應用程序的生成式 AI 助手以及幫助客戶通過 Amazon Connect 產品的服務代理。</span></p><p><span style="color:#000000"><img alt="" height="260" src="https://oscimg.oschina.net/oscnet/up-1f94a6a3ef5eecb740529e810e21d309130.png" width="700" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">AWS 首席執行官 Adam Selipsky 介紹稱，Amazon Q 可以利用來自各種應用程序的業務數據，包括辦公軟件 Microsoft 365、企業協作軟件 Slack、客戶服務軟件 Salesforce、網絡儲存應用 Dropbox 和 Amazon S3。目前開箱即用地支持 40 多種應用程序和服務。</span></p><p><span style="color:#000000">他還強調了安全和隱私的重要性，並表示 Amazon Q 尊重用戶現有的身份、角色和權限，不會使用用戶的內容來訓練其底層模型。</span></p><p><span style="color:#000000">Selipsky 表示，AWS 已將許多功能融入 Amazon Q 中以幫助開發人員，其中包括允許程序員在構建應用程序時提出問題的自然語言對話功能。與此同時，該公司還在將 Amazon Q 集成到 Visual Studio Code 和 IntelliJ IDEA 等 IDE 中。</span></p><p><span style="color:#000000">Amazon Q 目前處於預覽階段，部分功能免費對外提供。亞馬遜計劃未來將面向企業用戶收取每人每月 20 美元的費用，為開發人員和 IT 人員提供功能的版本則將收取每人每月 25 美元。</span></p><p><span style="color:#000000">更多詳情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Faws.amazon.com%2Fcn%2Fblogs%2Faws%2Famazon-q-brings-generative-ai-powered-assistance-to-it-pros-and-developers-preview%2F" target="_blank">查看官方博客</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 06:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268675/amazon-q</guid>
            <link>https://www.oschina.net/news/268675/amazon-q</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Go 語言微服務框架重磅升級：dubbo-go v3.2.0 -alpha 版本預覽]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="news_comment_top_ad" data-tracepid="news_comment_top" style="text-align: center;"><a style="color:#A00;font-weight:bold;" href="https://my.oschina.net/u/3859945/blog/10150339" target="_blank">【直播預告】替代 Oracle，我們還有多長的路要走？ <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><p style="text-align:justify">隨着 Dubbo3 在雲原生微服務方向的快速發展，Dubbo 的 go 語言實現迎來了 Dubbo3 版本以來最全面、最大幅度的一次升級，這次升級是全方位的，涉及 API、協議、流量管控、可觀測能力等。總的來説，新版本的 dubbo-go：</p><ul><li><strong>全面升級 Triple 協議，</strong>兼容 gRPC、標準 HTTP 客戶端，提供簡單明瞭的 API 用於編寫 RPC server 與 client，解決組件間的基本通信問題。</li><li><strong>針對微服務場景，提供了完善的服務治理能力，</strong>這包括配置管理、可觀測性、流量管控規則、生態集成與適配等的全面升級。</li></ul><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-c4c6b5317adb83a4b234eb8fcd15d8c9_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h3_1"></span><h3>全新升級的 Triple 協議</h3><p style="text-align:justify">基於 dubbo-go 實現的 Triple 協議，你可以輕鬆編寫瀏覽器、gRPC 兼容的 RPC 服務，並讓這些服務同時運行在 HTTP/1 和 HTTP/2 上。</p><p style="text-align:center"><img src="https://pic1.zhimg.com/80/v2-8146beb5d33000f7180c25928e62fba0_720w.webp" referrerpolicy="no-referrer"></p><p>如上圖所示，你可以使用 "http+json" 的標準形式訪問 dubbo-go 發佈的後端 triple 服務，基於這一特性， 我們可以在 dubbo 客戶端在瀏覽器頁面、移動設備上訪問後端服務，使用標準 cURL 工具訪問服務，也可以讓比如 Spring 體系的應用輕鬆的調通 Dubbo 服務。</p><p style="text-align:justify">由於 Triple 協議完全兼容 gRPC 協議，Dubbo 後端服務有可以直接調通標準的 gRPC 服務，它們之間可以無縫的互通，不論是 unary 還是 streaming 通信模式。</p><span id="OSC_h4_2"></span><h4>發佈一個 triple rpc 服務</h4><p style="text-align:justify">為了體驗升級後的 triple 協議，我們接下來會嘗試啓動一個 dubbo-go server，併發佈一個基於 triple 協議的服務。</p><p style="text-align:justify">創建一個新的 server 並啓動 server，它將在指定的端口監聽 triple 協議請求。</p><pre><code>func main() {
  srv, err := server.NewServer(
    server.WithServerProtocol(
      protocol.WithTriple(),
      protocol.WithPort(50051),
    ),
  )
  if err != nil {
    panic(err)
  }
  if err := greettriple.RegisterGreetServiceHandler(srv, &amp;api.GreetTripleServer{}); err != nil {
    panic(err)
  }
  if err := srv.Serve(); err != nil {
    panic(err)
  }
}</code></pre><span id="OSC_h4_3"></span><h4>cURL 訪問服務</h4><p style="text-align:justify">Triple 服務啓動完成之後，最簡單方式是使用 HTTP/1.1 POST 訪問服務，參數則作以標準 JSON 格式作為 HTTP 負載傳遞。如下是使用 cURL 命令的訪問示例：</p><pre><code>curl \
    --header "Content-Type: application/json" \
    --data '{"name": "Dubbo"}' \
    http://localhost:50051/greet.GreetService/Greet</code></pre><p style="text-align:justify">Triple 協議的一項重大升級是支持標準 http 工具直接訪問，通過 cURL 可以極大的降低 dubbo-go 服務的測試驗證、前端接入成本。</p><span id="OSC_h3_4"></span><h3>簡單明瞭的 API</h3><p style="text-align:justify">Dubbo Go SDK 支持使用 IDL 或編程語言特有的方式定義服務，並提供一套輕量的 API 來發布或調用這些服務。在上一節的示例中，我們已經看到了部分 dubbo-go API 的使用方式，接下來，讓我們更仔細全面的看一下新版本的 API 設計。</p><span id="OSC_h4_5"></span><h4>RPC Server 與 Client</h4><p style="text-align:justify">對於一些 RPC 通信的場景，開發者只需要使用 dubbo-go 編寫一個最簡單的 RPC server 或者 RPC client，這在新版本 dubbo-go 中只需要幾行代碼即可完成。</p><p style="text-align:justify">通常，我們會使用 Protocol Buffer (IDL) 來定義一個 Dubbo 服務。</p><pre><code>syntax = "proto3";
package greet;

message GreetRequest {
  string name = 1;
}

message GreetResponse {
  string greeting = 1;
}

service GreetService {
  rpc Greet(GreetRequest) returns (GreetResponse) {}
}</code></pre><p style="text-align:justify">使用 Protocol Buffers Compiler 從 IDL 生成 stub 代碼（篇幅關係，我們不在此展示，具體請參見官網 dubbo-go 快速開始）。接下來，我們實現 greettriple.GreeterClient 接口並提供自定義服務實現。</p><pre><code>type GreeterServer struct {
}

func (s *GreeterServer) SayHello(ctx context.Context, in *greet.HelloRequest) (*greet.User, error) {
  return &amp;greet.User{Name: "Hello " + in.Name, Id: "12345", Age: 21}, nil
}</code></pre><p style="text-align:justify">以下是一個簡單的 RPC server 示例，執行協議信息，並註冊服務到 server 中：</p><pre><code>func main() {
  srv, err := server.NewServer(
    server.WithServer_Protocol(
      protocol.WithTriple(),
      protocol.WithPort(50052),
    ),
  )
  if err != nil {
    panic(err)
  }
  if err := greettriple.RegisterGreetServiceHandler(srv, &amp;api.GreetTripleServer{}); err != nil {
    panic(err)
  }
  if err := srv.Serve(); err != nil {
    panic(err)
  }
}</code></pre><p style="text-align:justify">如前面 Triple 協議一節所述，你可以使用 cURL 直接測試以上 server 服務運行正常。與此同時，對應的 RPC client 示例如下：</p><pre><code>func main() {
  // for the most brief RPC case
  cli, err := client.NewClient(
    client.WithURL("tri://127.0.0.1:50052"),
  )
  if err != nil {
    panic(err)
  }
  svc, err := greettriple.NewGreetService(cli)
  if err != nil {
    panic(err)
  }

  common.TestClient(svc)
}</code></pre><span id="OSC_h4_6"></span><h4>微服務開發</h4><p style="text-align:justify">如果你正在開發微服務應用，那麼除了 RPC 通信之外，你通常還需要為應用配置一些服務治理能力，比如 retistry 註冊中心、配置中心、可觀測能力等。</p><p style="text-align:justify">以下展示瞭如何使用 dubbo-go 開發一個微服務應用。</p><p style="text-align:justify">首先，創建一個代表微服務的應用 Server，將服務註冊給它，添加註冊中心等服務治理配置。</p><pre><code>func main() {
  // configure global configurations and common modules
  ins, err := dubbo.NewInstance(
    dubbo.WithName("dubbo_test"),
    dubbo.WithRegistry(
      registry.WithZookeeper(),
      registry.WithAddress("127.0.0.1:2181"),
    ),
    dubbo.WithProtocol(
      protocol.WithTriple(),
      protocol.WithPort(50052),
    ),
  )
    // create a server with registry and protocol set above
  srv, err := ins.NewServer()
  if err != nil {
    panic(err)
  }
    // register a service to server
  if err := greettriple.RegisterGreetServiceHandler(srv, &amp;api.GreetTripleServer{}); err != nil {
    panic(err)
  }
    // start the server
  if err := srv.Serve(); err != nil {
    panic(err)
  }
}</code></pre><p style="text-align:justify">其中，Instance 是我們在新版本中引入的全局配置，你可以將所有微服務全局配置在這裏進行初始化。這裏，我們設置了微服務通信協議 protocol 和註冊中心 registry，如以下代碼片段所示：</p><pre><code>ins, err := dubbo.NewInstance(
    dubbo.WithName("dubbo_test"),
    dubbo.WithRegistry(
        registry.WithZookeeper(),
        registry.WithAddress("127.0.0.1:2181"),
    ),
    dubbo.WithProtocol(
        protocol.WithTriple(),
        protocol.WithPort(50052),
    ),
)</code></pre><p style="text-align:justify">接下來的操作就非常簡單明瞭了，我們創建一個 server，將服務註冊給它並啓動，如下所示。如果有更多的服務，則可以依次註冊到 server 後再啓動。</p><pre><code>// create a server with registry and protocol set above
srv, err := ins.NewServer()
// register a service to server
if err := greettriple.RegisterGreetServiceHandler(srv, &amp;api.GreetTripleServer{}); err != nil {
    panic(err)
}
// start the server
if err := srv.Serve(); err != nil {
    panic(err)
}</code></pre><p style="text-align:justify">以上就是一個微服務應用的基本開發過程，如果你的微服務應用要調用一些遠程 Dubbo 服務，那麼你只需要參照以下方式創建一個 client 就行了。</p><p style="text-align:justify">下面的代碼示例創建了一個 client，緊接着生成了一個 GreetService 遠程服務代理，之後，就可以像調用本地方法一樣調用遠端 Dubbo 服務了。client 將基於註冊中心實現 server 實例的自動發現並自動為流量應用負載均衡策略。</p><pre><code>func main() {
  // configure global configurations and common modules
  ins, err := dubbo.NewInstance(
    dubbo.WithName("dubbo_test"),
    dubbo.WithRegistry(
      registry.WithZookeeper(),
      registry.WithAddress("127.0.0.1:2181"),
    ),
  )
  
  // configure the params that only client layer cares
  cli, err := ins.NewClient()
  if err != nil {
    panic(err)
  }

  svc, err := greettriple.NewGreetService(cli)
  if err != nil {
    panic(err)
  }

  resp, err := svc.Greet(context.Background(), &amp;greet.GreetRequest{Name: "triple"})
  if err != nil {
    return err
  }
  logger.Infof("TRIPLE unary call resp: %s", resp.Greeting)
}</code></pre><span id="OSC_h3_7"></span><h3>企業級服務治理能力</h3><span id="OSC_h4_8"></span><h4>動態配置</h4><p style="text-align:justify">除了 API 模式之外，Dubbo-go 支持基於配置文件驅動的編碼方式，這對於一些更大規模的微服務開發場景非常適用。在這種模式下，我們將 registry、protocol 等組件配置，甚至包括服務聲明等都放在 dubbogo.yml 文件中，框架會在啓動過程中完成配置文件加載。</p><p style="text-align:justify">以下是一個基於 dubbogo.yml 的微服務應用的開發示例：</p><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-7420aaf1df69816f650d9fafc20a94e5_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify">其中，server.go 定義如下：</p><pre><code>func main() {
  greettriple.SetProviderService(&amp;GreeterServiceImpl{})
  if err := dubbo.Load(); err != nil {
    panic(err)
  }
}</code></pre><p style="text-align:justify">dubbogo.yml 示例內容如下：</p><pre><code>dubbo:
  application: # 應用信息，服務啓動後會將相關信息註冊到註冊中心，可被客戶端從 url 中識別
    name: myApp
  registries:
    nacos:
      protocol: nacos # 註冊中心選擇 nacos 
      address: 127.0.0.1:8848 # nacos ip
      group: DEFAULT_GROUP # nacos group, 默認 DEFAULT_GROUP
      namespace: 9fb00abb-278d-42fc-96bf-e0151601e4a1 # nacos namespaceID, should be created before. 默認 public
      username: abc
      password: abc
  protocols:
    dubbo:
      name: tri
      port: 20000
  provider:
    services:
      UserProviderWithCustomGroupAndVersion: # 接口三元組：接口名、版本號、分組。client 和 server 需要保持一致。
        interface: org.apache.dubbo.UserProvider.Test # 接口名必填
        version: myInterfaceVersion # 默認為空
        group: myInterfaceGroup # 默認為空</code></pre><p style="text-align:justify">可以看到相比於之前的 API 編碼方式，這裏的 server.go 只有兩行代碼，dubbo.Load() 會完成所有配置的自動組裝並啓動相關組件，我們只需要在啓動應用時指定 export DUBBO_GO_CONFIG_PATH=$ABSOLUTE_PATH/conf/dubbogo.yml 即可。</p><span id="OSC_h4_9"></span><h4>可觀測性</h4><p style="text-align:justify">自 3.2.0 版本開始，dubbo-go 重點升級了內置 metrics 指標採集能力，提供 RPC 調用（RT、QPS、調用量、請求成功數、請求失敗數、併發請求數等）、註冊中心、元數據中心、配置中心交互統計等豐富的內置採集埋點，支持多維度的指標聚合。</p><p style="text-align:justify">dubbo-go 內置 metrics 指標導出到 Prometheus + Grafana 體系的能力，以下是 dubbo-go v3.2.0 示例在 Grafana 的監控效果圖，具體示例我們將與隨後發佈在 dubbo-go-samples/metrics。</p><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-b4ec54c1891c2d1f09b91227746c751e_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h4_10"></span><h4>流量管控</h4><p style="text-align:justify">Dubbo 提供了豐富的流量管控策略：</p><ul><li><strong>地址發現與負載均衡，</strong>地址發現支持服務實例動態上下線，負載均衡確保流量均勻的分佈到每個實例上。</li><li><strong>基於路由規則的流量管控，</strong>路由規則對每次請求進行條件匹配，並將符合條件的請求路由到特定的地址子集。</li></ul><p style="text-align:justify">服務發現保證調用方看到最新的提供方實例地址，服務發現機制依賴註冊中心 (Zookeeper、Nacos、Istio 等) 實現。在消費端，Dubbo 提供了多種負載均衡策略，如隨機負載均衡策略、一致性哈希負載、基於權重的輪詢、最小活躍度優先、P2C 等。</p><p style="text-align:justify">Dubbo 的流量管控規則可以基於應用、服務、方法、參數等粒度精準的控制流量走向，根據請求的目標服務、方法以及請求體中的其他附加參數進行匹配，符合匹配條件的流量會進一步的按照特定規則轉發到一個地址子集。以下是 dubbo-go 流量管控規則可以實現的一些具體管控場景示例：</p><ul><li>基於權重的比例流量分發</li><li>灰度驗證</li><li>金絲雀發佈</li><li>按請求參數的路由</li><li>同區域優先</li><li>超時時間調整</li><li>重試</li><li>限流降級</li></ul><p style="text-align:justify">以下是一個基於 dubbo-go 實現的全鏈路灰度示例：</p><p style="text-align:center"><img src="https://pic1.zhimg.com/80/v2-d3af29d517bd1d38914a8b7df29c0384_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify">以下是一個基於 dubbo-go 實現的按比例流量轉發示例：</p><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-4688342e32359c6fa7e25ef3bc3c22b6_720w.webp" referrerpolicy="no-referrer"></p><p>關於 dubbo-go 流量管控，我們以一個商城系統提供了一個完整的 demo 示例，感興趣的讀者可以參考詳細信息：</p><ul><li>流量管控規則詳情<strong>[1]</strong></li><li>流量管控商場示例解讀<strong>[2]</strong></li></ul><span id="OSC_h4_11"></span><h4>生態</h4><p style="text-align:justify">dubbo-go 總體上遵循框架內核+插件的的設計理念，左側的框架內覈定義了 dubbo-go 作為微服務框架的一些核心概念，右側的插件部分則提供了核心概念擴展實現。</p><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-c4c6b5317adb83a4b234eb8fcd15d8c9_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify">框架內核，可分為 4 個層次，從上到下依次為：</p><ul><li><strong>API 層</strong></li></ul><p style="text-align:justify">dubbo-go 同時支持基於 IDL、interface/struct 的服務契約定義，兼顧跨語言與易用性訴求；支持基於純 yaml 文件的微服務配置模式；提供了同步、異步、單次 (unary)、流式 (streaming) 等 RPC 通信與編碼模型。</p><ul><li><strong>服務治理層</strong></li></ul><p style="text-align:justify">dubbo-go 內置了多維度的服務治理能力抽象，確保滿足微服務開發與集羣治理的核心訴求，這包括地址發現（Service Discovery）、負載均衡（Load Balancing）、可觀測指標（Metrics）、流量管控（Traffic Management）、全鏈路追蹤（Tracing）等。</p><ul><li><strong>RPC 協議層</strong></li></ul><p style="text-align:justify">dubbo-go 實現的最核心的 RPC 協議是 - triple 協議，triple 可同時工作在 http1/2 之上 (支持 CURL 直接訪問)，兼容 gRPC；從設計上，dubbo-go 還提供了多協議發佈服務的支持，你可以在一個進程內同時發佈 triple、dubbo2、rest、jsonRPC 等多種不同通信協議的服務。</p><ul><li><strong>傳輸層</strong></li></ul><p style="text-align:justify">支持 HTTP1/2、TCP 傳輸層，兼顧性能與通用性，同時支持多種序列化方式。</p><p style="text-align:justify">插件體系極大的豐富了 dubbo-go 功能與生態，社區內置提供了大量的內置擴展實現，同時，開發者可以非常容易的根據需求增加擴展實現。以下是一些典型的插件定義：</p><ul><li><strong>Protocol</strong></li></ul><p style="text-align:justify">dubbo-go 基於 protocol 插件內置提供了 triple、dubbo2、rest 等協議支持，通過擴展 protocol 可以為 dubbo-go 擴展更多協議。</p><ul><li><strong>Service Discovery</strong></li></ul><p style="text-align:justify">支持 Nacos、Zookeeper、Polaris 等主流注冊中心集成。</p><ul><li><strong>Traffic Management</strong></li></ul><p style="text-align:justify">dubbo-go 支持 Dubbo 體系定義的流量規則，可以實現在運行期動態的調整服務行為如超時時間、重試次數、限流參數等，通過控制流量分佈可以實現 A/B 測試、金絲雀發佈、多版本按比例流量分配、條件匹配路由、黑白名單等。</p><ul><li><strong>Metrics</strong></li></ul><p style="text-align:justify">提供 RPC 調用（RT、QPS、調用量、請求成功數、請求失敗數、併發請求數等）、註冊中心、元數據中心、配置中心交互統計等豐富的內置採集埋點，支持多維度的指標聚合。</p><ul><li><strong>Logging</strong></li></ul><p style="text-align:justify">提供通用的日誌採集接口定義，內置 Zap、Logrus 支持</p><ul><li><strong>Tracing</strong></li></ul><p style="text-align:justify">提供分佈式鏈路追蹤能力，通過此插件擴展可接入 Zipkin、Jaeger、Skywalking 等鏈路追蹤系統。</p><span id="OSC_h3_12"></span><h3>總結</h3><p style="text-align:justify">dubbo-go 3.2.0 的首個 alpha 版本將於 11 月底發佈，本文是發版前的搶先預覽，感興趣的讀者也可以訪問源碼嚐鮮：<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fapache%2Fdubbo-go%2Ftree%2Ffeature-triple%2Fprotocol%2Ftriple%2Finternal%253Fspm%253Da2c6h.13046898.publish-article.3.79d66ffahA9acR" target="_blank">https://github.com/apache/dubbo-go/tree/feature-triple/protocol/triple/internal</a></em></u></p><p style="text-align:justify">接下來，我們將持續推進 3.2.0 版本迭代並計劃與 2 月份發佈正式穩定版本，詳細 Roadmap 請關注項目倉庫：<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fapache%2Fdubbo-go%253Fspm%253Da2c6h.13046898.publish-article.4.79d66ffahA9acR" target="_blank">https://github.com/apache/dubbo-go</a></em></u></p><p style="text-align:justify"><strong>相關鏈接：</strong></p><p style="text-align:justify">[1] 流量管控規則詳情</p><p style="text-align:justify"><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fcn.dubbo.apache.org%2Fzh-cn%2Foverview%2Fcore-features%2Ftraffic%2F%253Fspm%253Da2c6h.13046898.publish-article.5.79d66ffahA9acR" target="_blank">https://cn.dubbo.apache.org/zh-cn/overview/core-features/traffic/</a></em></u></p><p style="text-align:justify">[2] 流量管控商場示例解讀</p><p style="text-align:justify"><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fcn.dubbo.apache.org%2Fzh-cn%2Foverview%2Ftasks%2Ftraffic-management%2F%253Fspm%253Da2c6h.13046898.publish-article.6.79d66ffahA9acR" target="_blank">https://cn.dubbo.apache.org/zh-cn/overview/tasks/traffic-management/</a></em></u></p><p style="text-align:justify"><em>作者：王宇軒， Apache Dubbo Committer</em></p><p style="text-align:justify"><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.aliyun.com%2Farticle%2F1380725%3Futm_content%3Dg_1000384715" target="_blank">原文鏈接</a></strong></p><p style="text-align:justify"><strong>本文為阿里雲原創內容，未經允許不得轉載。</strong></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 06:49:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/yunqi/blog/10314426</guid>
            <link>https://my.oschina.net/yunqi/blog/10314426</link>
            <author>
                <![CDATA[阿里云云棲號]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[AI 生成圖片著作權侵權第一案宣判：被告構成侵權，賠償 500 元]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>11 月 29 日消息，近日，北京互聯網法院針對<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FrdzctOfPu9zQaKO4ZVDCwQ" target="_blank">人工智能生成圖片（AI 繪畫圖片）著作權侵權糾紛</a></u>作出一審判決，據悉該案為 AI 生成圖片相關領域著作權第一案。</p><p>法院最終判決，<strong>被告構成侵權，需向原告公開道歉，並賠償 500 元</strong>。</p><p>據悉，原告李某使用 AI 生成涉案圖片後發佈於小紅書平台；被告系百家號博主，發佈文章配圖使用了原告該 AI 生成的圖片，原告遂起訴。</p><p>北互審理認為涉案人工智能生成圖片（AI 繪畫圖片）具備「獨創性」要件，體現了人的獨創性智力投入，應當被認定為作品，受到著作權法保護等。</p><p><img alt="1701225443968.png" src="https://static.oschina.net/uploads/img/202311/29143541_fABc.png" referrerpolicy="no-referrer"></p><p><img alt="圖片" src="https://static.oschina.net/uploads/img/202311/29143541_3GlB.png" referrerpolicy="no-referrer"></p><p>來源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FWu3-GuFvMJvJKJobqqq7vQ" target="_blank">https://mp.weixin.qq.com/s/Wu3-GuFvMJvJKJobqqq7vQ</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 06:35:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268672</guid>
            <link>https://www.oschina.net/news/268672</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[恭喜 Devlive DataCap 新晉一位 Committer]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote><p>非常感謝所有對 DataCap 項目的支持和貢獻，我們迎來了新的一位來自互聯網行業的大數據資深運維工程師，感謝他對 DataCap 的支持以及代碼的貢獻。</p></blockquote><h3>關於 DataCap</h3><hr><p>DataCap 是數據轉換、集成和可視化的集成軟件。支持多種數據源，文件類型，大數據相關數據庫，關係型數據庫，NoSQL 數據庫等。通過軟件可以實現管理多種數據源，對該源下的數據進行各種操作轉換，製作數據圖表，監控數據源等各種功能。</p><h3>DataCap 喜迎一位 Committer 成員</h3><hr><table><tbody><tr><th>名字</th><th>職業</th><th>GitHub ID</th></tr></tbody><tbody><tr><td>陳文明</td><td>大數據資深運維工程師</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fchenwenming-zj" target="_blank">chenwenming-zj</a></td></tr></tbody></table><h4>個人描述</h4><hr><p>有多年大數據組件維護經驗，對 Hadoop 集羣有豐富的經驗，同時對 Apache Kafka 以及各個大數據組件有一定的經驗。</p><ol><li>優化過億 Blocks 的 NameNode，優化解決集羣小文件問題，減少 NameNode RPC 壓力</li><li>遷移並運維過 PB 級別的 Hadoop 集羣</li><li>維護管理萬級別 Topic 的 Kafka 集羣，自動化腳本實現分區均衡遷移，Reassignment 限速等</li></ol><h4>對 DataCap 的認識</h4><hr><p>在做公司 Clickhouse 遷移時，從 GitHub 中搜索，發現 datacap 項目，結合公司內部業務，經過一段時間運行後發現缺失，服務功能缺失 JVM 動態加載功能，因為我對 Shell 比較熟悉且做過 JVM 優化工作，特意在源碼中支持了服務啓動讀取 JVM 配置功能。</p><h4>代碼提交之路</h4><hr><ol><li>在 datacap 上提交了相關代碼 (commit 57473faf4f45616a96962b7f84b9b5b81ecfbc42(HEAD-&gt;dev_get_jvm, origin/dev_get_jvm)</li></ol><h4>得到的收穫</h4><hr><ol><li>作為大數據運維,很少參與工程項目，非常榮幸能在 datacap 上貢獻自己微薄的代碼</li><li>這次參與也體會到團隊協助的力量，希望 datacap 做的越來越好</li></ol><h4>對新人的建議</h4><hr><ol><li>上線前整理 checklist</li><li>一定要寫好註釋，方便以後維護，要寫好註釋，可以寫某個方法是做什麼的，主要步驟是什麼</li><li>測試！一定要多測試，先上測試環境，再上線</li><li>新參與項目時，可以多參考官方文檔</li></ol><h4>如何參與 DataCap</h4><hr><ul><li>參考官網 <a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fdatacap.devlive.org%2Fdeveloper_guide%2Fenv.html" target="_blank">開發者文檔</a></li><li>通過 Issues 列表參與 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdevlive-community%2Fdatacap%2Fissues" target="_blank">GitHub</a>&nbsp;&amp;&nbsp; <a href="https://gitee.com/devlive-community/datacap/issues">Gitee</a></li><li>加入我們的微信羣&amp;釘釘羣（在代碼倉庫中可以看到二維碼）</li><li>微信公眾號後台留言（搜索微信公公眾號 <code>devlive-sf</code> 關注，標記 DataCap 項目給我們留言即可）</li></ul></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 04:27:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268646</guid>
            <link>https://www.oschina.net/news/268646</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[兩名玩家利用 DNF 漏洞獲利近 1 億元人民幣，已被公訴]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>日前，南京市玄武區人民檢察院依法對 2 名涉嫌非法獲取計算機信息系統數據罪被告人提起公訴。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-22fa6166d578719921e446311de49657bc3.png" referrerpolicy="no-referrer"></p><p>2022 年 8 月以來，被告人唐某利用深圳市騰訊計算機系統有限公司運營的網絡遊戲《地下城與勇士》個人揹包和倉庫程序的漏洞，使用被告人蔡某某提供的腳本，利用遊戲漏洞非法複製出「矛盾的結晶體」「扭曲的次元結晶」 「無瑕的金綠柱石」 等八種遊戲道具，將所複製的遊戲道具放在多個遊戲公會倉庫內，再進行出售。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-078b174cef4e6dae71ce7917a7f3ddb43e1.png" referrerpolicy="no-referrer"></p><p>2022 年 8 月起，被告人唐某先後向王某某、王某、周某出售非法獲取的遊戲道具，獲利人民幣 9163 萬餘元。被告人蔡某某將被告人唐某複製的遊戲道具出售給王某某，獲利人民幣 182 萬餘元。</p><p><img src="https://oscimg.oschina.net/oscnet/up-855b94f09d04a42b9687726b3241276edaa.jpg" referrerpolicy="no-referrer"></p><hr><p>DNF 昨日在官網迴應了此事：</p><blockquote><p><img height="1284" src="https://oscimg.oschina.net/oscnet/up-d04269bfc1d55a0b8914d959668a5eccc08.png" width="1506" referrerpolicy="no-referrer"></p></blockquote><p>來源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdnf.qq.com%2Fwebplat%2Finfo%2Fnews_version3%2F119%2F495%2F498%2Fm21449%2F202311%2F944229.shtml" target="_blank">https://dnf.qq.com/webplat/info/news_version3/119/495/498/m21449/202311/944229.shtml</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 03:45:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268643</guid>
            <link>https://www.oschina.net/news/268643</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Jenkins 任務如何遷移到 Zadig 工作流]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-645523f745c4b7ebf67fbdd388751cbe2ff.png" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">我們在「</span><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247491115%26idx%3D1%26sn%3D83e593f77e1aec4d59cee72cca711927%26chksm%3Dcfb4528bf8c3db9de4d0adbe3c0cb15600d35e647c869867dc2e99a599cd7f58ca6208bb4443%26scene%3D21%23wechat_redirect" target="_blank">不想放棄 Jenkins？這麼做也能雲原生</a><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">」一文中詳細描述瞭如何在保留 Jenkins 的前提下，通過 Zadig 快速提升效率和工程師幸福度。然而，儘管這樣做可以取得一些顯著的成果，卻未能實質解決運維人員對系統維護的繁重負擔。實際情況中，Jenkins 的管理和維護存在諸如插件兼容性、內存泄漏、用戶權限管理、腳本維護等多方面的問題，導致運維人員仍需花費大量時間進行系統維護。因此，是否可以完全棄用 Jenkins，並將現有任務全部遷移到 Zadig 上執行呢？</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><strong>答案是肯定的</strong></span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">。Zadig 不僅具備 Jenkins 的全部功能，而且能夠實現軟件開發過程中複雜流程的自動化。</span></p><span id="OSC_h1_1"></span><h1><strong>一、Zadig 工作流到底有何獨特之處？</strong></h1><p style="margin-left:0; margin-right:0">Zadig 工作流引擎起初基於 Kubernetes 原生能力搭建，藉助 Kubernertes 的資源動態分配能力，實現多任務的併發執行，相比 Jenkins 至少可以節省<span>&nbsp;</span><span><strong>50%</strong></span><span>&nbsp;</span>的資源，並可以提高至少<span>&nbsp;</span><strong><span>40%</span></strong><span>&nbsp;</span>的任務執行效率。</p><p style="margin-left:0; margin-right:0">Zadig 工作流的設計更貼合實際業務場景，支持編排產品交付過程中涉及到的任何系統和工具，如：項目管理系統、代碼託管平台、測試平台、部署工具、配置管理工具、數據管理工具、審批系統、企業自建系統等等。Zadig 工作流除了具備 CI 工作流的基本能力（比如克隆代碼、執行 shell 腳本、觸發器、通知、緩存等等）外，支持以下更多能力：</p><ul><li><p style="margin-left:0; margin-right:0"><span>支持多服務共享構建、構建模板、利用 Serverless 資源構建</span></p></li><li><p style="margin-left:0; margin-right:0">支持多服務的併發構建、併發部署、併發測試</p></li><li><p style="margin-left:0; margin-right:0">支持項目管理中的任務狀態變更、配置變更、數據變更</p></li><li><p style="margin-left:0; margin-right:0">支持藍綠髮布、金絲雀發佈、分批次灰度發佈、MSE 全鏈路和 Istio 全鏈路發佈</p></li><li><p style="margin-left:0; margin-right:0">支持發佈過程審批</p></li><li><p style="margin-left:0; margin-right:0">在執行時支持根據實際的分支策略，自由選擇<span>&nbsp;</span><span style="background-color:rgba(0, 0, 0, 0.19)">Branch</span><span style="background-color:#ffffff">、</span><span style="background-color:rgba(0, 0, 0, 0.19)">PR/MR</span>、<span style="background-color:rgba(0, 0, 0, 0.19)">Branch+PR/MR</span>、<span style="background-color:rgba(0, 0, 0, 0.19)">Tag</span>、<span style="background-color:rgba(0, 0, 0, 0.19)">Commit</span><span>&nbsp;</span>方式進行構建</p></li><li><p style="margin-left:0; margin-right:0"><span>......</span></p></li></ul><span id="OSC_h3_2"></span><h3><span style="color:#fd2968">工作流實現方式的細節差異</span></h3><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; box-sizing:border-box; color:rgba(0, 0, 0, 0.9); display:table; font-family:system-ui,-apple-system,&quot;system-ui&quot;,&quot;Helvetica Neue&quot;,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei UI&quot;,&quot;Microsoft YaHei&quot;,Arial,sans-serif; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:0.544px; margin:0px 0px 10px; max-width:100%; orphans:2; outline:0px; overflow-wrap:break-word !important; padding:0px; text-align:justify; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:657px; word-spacing:0px"><tbody><tr><td style="background-color:#ff7faa; border-color:#3e3e3e #f0f9ff #3e3e3e #3e3e3e; border-image:initial; border-style:none solid none none; border-width:0px 1px 0px 0px"><p style="margin-left:0; margin-right:0"><span style="color:#ffffff"><strong>工作流關鍵環節</strong></span></p></td><td style="background-color:#ff7faa; border-color:#3e3e3e #f0f9ff #3e3e3e #3e3e3e; border-image:initial; border-style:none solid none none; border-width:0px 1px 0px 0px"><p style="margin-left:0; margin-right:0"><span style="color:#ffffff"><strong>Jenkins</strong></span></p></td><td style="background-color:#ff7faa; border-color:#3e3e3e #f0f9ff #3e3e3e #3e3e3e; border-image:initial; border-style:none solid none none; border-width:0px 1px 0px 0px"><p style="margin-left:0; margin-right:0"><span style="color:#ffffff"><strong>Zadig</strong></span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>執行環境</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">手工製作環境</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">可擴展雲原生環境及依賴包</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>代碼信息</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">分散配置代碼源</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">統一管理多種代碼來源</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>執行腳本與變量</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">分散編寫腳本</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">統一配置腳本規範</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>定時觸發</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">定時觸發</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">多種可定製觸發策略</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>代碼變更觸發</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">插件代碼觸發</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">海量多種觸發策略</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>工作流間的串接</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">根據工作流狀態觸發</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">服務化靈活編排調度</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>多任務併發執行</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">編寫腳本控制併發</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">雲原生任務 GUI 配置併發</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>任務併發數量控制</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">資源節點控制併發</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">統一管理併發調度策略</span></p></td></tr></tbody></table><p>&nbsp;</p><span id="OSC_h1_3"></span><h1><strong><span style="color:#ff2968">二、如何將 Jenkins 上的配置</span></strong><strong><span style="color:#ff2968">遷移到 Zadig 上</span></strong></h1><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">下面詳細介紹如何將已經在 Jenkins 上的相應配置遷移到 Zadig 上，按照不同的階段拆解遷移的過程。</span></p><span id="OSC_h3_4"></span><h3><span style="color:#fd2968"><strong>比較一：執行環境</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">對於工作流任務依賴的環境，在 Jenkins 上需在對應節點上手工製作，而在 Zadig 上支持管理任務運行時基礎環境和依賴的軟件包，方便平台運維統一管控業務構建、測試等過程使用的基礎資源，保障資源的安全及合規。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 任務的執行環境通過在配置中選擇運行節點來指定，任務執行過程中用到的軟件包需要在對應節點上安裝和管理。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img alt="" src="https://oscimg.oschina.net/oscnet/up-b03a84b1b4a2458670650dacef1c171c016.png" referrerpolicy="no-referrer"></p><p>&nbsp;<span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig 任務的執行環境通過在配置中選擇操作系統和依賴軟件包來指定。</span></p><p><img height="1414" src="https://oscimg.oschina.net/oscnet/up-66a8378c904b5f89d3ee1eb8d897bdb75a2.png" width="2904" referrerpolicy="no-referrer"></p><p><img height="1414" src="https://oscimg.oschina.net/oscnet/up-2683317702faa1d26a984502cad7be11112.png" width="2904" referrerpolicy="no-referrer"></p><p><img height="1414" src="https://oscimg.oschina.net/oscnet/up-2acc8d6572e9822324abf804ba7b27b1fcf.png" width="2904" referrerpolicy="no-referrer"></p><span id="OSC_h3_5"></span><h3><span style="color:#fd2968"><strong>比較二：代碼信息</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">對企業內部使用的代碼源，在 Jenkins 上將其分散在不同的任務中進行管理，而在 Zadig 上由管理員統一集成，以確保代碼源的安全性。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">下面以 GitLab 為例，比對 Jenkins 和 Zadig 上代碼信息的配置。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 通過配置「源碼管理」來實現構建代碼源的定義。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-febe241da9a1686ed0b8f46d3f0f7b21095.png" width="2904" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0">Zadig 支持 GitLab、GitHub、Gerrit、Gitee 、其他通用 Git 代碼源等代碼託管平台的集成，完成集成後可列出代碼庫中有權限的代碼倉庫信息，包括 Branch、PR/MR、Tag 等等，對於開發者更加直觀、體驗更友好。</p><p style="margin-left:0; margin-right:0"><strong><span>·<span>&nbsp;</span></span></strong>步驟 1：集成代碼源。具體過程參考<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fsettings%2Fcodehost%2Fgitlab%2F" target="_blank"><span style="color:#0080ff">GitLab 代碼源集成</span></a><span>&nbsp;</span>[1]</p><p style="margin-left:0; margin-right:0"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-999d1878b4bf86f8d9eea338e6e44eed49c.png" width="2904" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><strong><span>·<span>&nbsp;</span></span></strong><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">步驟 2：任務中配置代碼信息。Zadig 構建、測試、代碼掃描及通用任務均支持拉取代碼信息。</span></p><p style="margin-left:0; margin-right:0"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-d823c5f1fe7a383959d3e9661142357980c.png" width="2904" referrerpolicy="no-referrer"></p><span id="OSC_h3_6"></span><h3><span style="color:#fd2968"><strong>比較三：執行腳本及變量</strong></span></h3><p style="margin-left:0; margin-right:0">對於服務執行腳本和變量的定義，在 Jenkins 上分散在各個任務中進行管理，而在 Zadig 上可以通過構建模版來標準化服務的構建過程，降低運維管理的負擔。</p><p style="margin-left:0; margin-right:0">下面以一個多服務的代碼倉庫的構建並推送鏡像為例，比較 Jenkins 腳本編寫和 Zadig 腳本編寫的差異。</p><p style="margin-left:0; margin-right:0">Jenkins 執行腳本及變量如下圖所示，腳本中主要進行服務構建、鏡像構建以及鏡像推送過程。其中 $SERVICE、$VERSION、$PWD 變量需要在配置中定義。</p><p style="margin-left:0; margin-right:0"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-38c673bada87035ad70e58c24f0e028dd21.png" width="2904" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-ae40af20e6b1b72caaf08dd2bc574e43e05.png" width="2904" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig 執行腳本及變量如下圖所示，Zadig 構建內置 $SERVICE、$IMAGE 變量，腳本更加簡潔。</span></p><p style="margin-left:0; margin-right:0"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-29b021813c3330edbc16205166a2a0f7d25.png" width="2904" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-c151777d9c835d19a639bed96ea643e76c6.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">兩者之間的差異：</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">1. Zadig 任務執行過程中根據工作流配置的鏡像倉庫自動完成<span style="background-color:rgba(0, 0, 0, 0.19)"><span>&nbsp;</span>docker login<span>&nbsp;</span></span>操作，所以無需在腳本中聲明。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">2. 在 Zadig 中鏡像命名規則支持統一配置和管理，具體可參考<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fproject%2Fservice%2Fk8s%2F%23%E7%AD%96%E7%95%A5%E9%85%8D%E7%BD%AE" target="_blank"><span style="color:#0080ff">文檔</span></a><span>&nbsp;</span>[2]，所以無需在腳本中定義<span style="background-color:rgba(0, 0, 0, 0.19)"><span>&nbsp;</span>IMAGE<span>&nbsp;</span></span>變量的生成規則。</p><span id="OSC_h3_7"></span><h3>&nbsp;</h3><span id="OSC_h3_8"></span><h3><span style="color:#fd2968"><strong>比較四：定時觸發</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">工作流任務的定時執行場景比較常見，Jenkins 針對工作流任務的默認參數可以配置定時觸發，而 Zadig 上除了可以指定觸發時間週期外，還支持配置任務的執行變量，更加靈活。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 觸發器支持配置 Cron 表達式來定時觸發任務。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1428" src="https://oscimg.oschina.net/oscnet/up-916400c25cec910faaf5caa14f50bb82bb0.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig 定時器支持多種觸發方式，包括定時循環、間隔循環和 Cron 表達式，以滿足各種定時觸發的需求。此外，相較於 Jenkins 使用默認參數執行，Zadig 定時器允許配置不同的工作流執行變量，提供更靈活的定製選項。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1428" src="https://oscimg.oschina.net/oscnet/up-5a857454ef740f8ecc70b00f4ebc517306b.png" width="2904" referrerpolicy="no-referrer"></p><span id="OSC_h3_9"></span><h3>&nbsp;</h3><span id="OSC_h3_10"></span><h3><span style="color:#fd2968"><strong>比較五：代碼變更觸發</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">開發者提交代碼自動觸發工作流執行是持續集成和持續部署（CI/CD）中常見的實踐。在 Jenkins 中，為實現這一需求，需要依賴插件。相比之下，Zadig 則內建 Git 觸發器功能，無需額外插件，通過靈活的配置滿足各種觸發場景，從而提升整體效率。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 可以通過安裝插件實現代碼變更觸發任務的執行。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1428" src="https://oscimg.oschina.net/oscnet/up-8969ed3234ff36d444ddfcb159cb3ac0191.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig Git 觸發器支持代碼變更觸發，通過定義代碼信息、觸發事件、代碼文件目錄以及工作流執行變量，來配置觸發規則。這使得在代碼庫發生變更時，可以靈活而精準地觸發相應的工作流，以滿足各種複雜的自動化流程的執行。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1444" src="https://oscimg.oschina.net/oscnet/up-0b6f382446af82a670dc25d831d63126c0a.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">除了上述兩種觸發器，Zadig 還支持多種其他觸發器，包括「JIRA 觸發器」、「飛書項目觸發器」和「通用觸發器」等，使用詳情參考</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fproject%2Fworkflow-trigger%2F" target="_blank"><span style="background-color:#ffffff; color:#0080ff">文檔</span></a><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><span>&nbsp;</span>[3]。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><span id="OSC_h3_11"></span><h3><span style="color:#fd2968"><strong>比較六：工作流之間的串接編排</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">企業內部對於一些服務化的任務，例如安全掃描服務，需要進行統一管理並在多個工作流中使用。通常，這些任務由安全部門或平台團隊進行統一管理，然後在各個業務工作流中進行調用。為了降低實施和後續維護的負擔，一般選擇採用多工作流串接的方式，以實現更高效的任務調度和管理。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 通過配置「構建其他工程」來觸發其他任務。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1432" src="https://oscimg.oschina.net/oscnet/up-6af1ce2aae3f7eeb01d1a3f2b037c0589c9.png" width="2936" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig 的工作流本身採用了服務化的設計，使得測試、代碼掃描等配置可以實現集中化的管理，然後輕鬆掛接到各個工作流中使用。這種設計使得配置和管理變得更加高效，同時在不同的工作流中靈活地應用這些服務，提高了整體工作流的可維護性和可擴展性。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1432" src="https://oscimg.oschina.net/oscnet/up-5dd0db5d0c2484d09a8fe71af3c8ab26fd2.png" width="2936" referrerpolicy="no-referrer"></p><span id="OSC_h3_12"></span><h3>&nbsp;</h3><span id="OSC_h3_13"></span><h3><span style="color:#fd2968"><strong>比較七：多任務併發執行</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">多任務併發執行在複雜的軟件開發流程、持續集成和部署中尤為關鍵。這能夠顯著減少工程師的等待時間，提高整體研發效率，從而加速項目進程，更靈活地應對不斷變化的需求。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 流水線支持不同的 "stage" 併發執行，詳細配置請參考以下結構。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="582" src="https://oscimg.oschina.net/oscnet/up-3be3980e313fc5d5e0caa6dfb825822a50a.png" width="822" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig 工作流僅需在「階段」上打開「併發執行」的開關，即可實現階段內多個任務的併發執行。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1432" src="https://oscimg.oschina.net/oscnet/up-df878ddc393fe89803cc5ccd6adb4fbc5c8.png" width="2936" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1432" src="https://oscimg.oschina.net/oscnet/up-19fbbbb66f8dfb1f131220b679faf5efc10.png" width="2936" referrerpolicy="no-referrer"></p><span id="OSC_h3_14"></span><h3>&nbsp;</h3><span id="OSC_h3_15"></span><h3><span style="color:#fd2968"><strong>比較八：任務併發數量控制</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 和 Zadig 均支持同一工作流的多個任務併發執行。Jenkins 通過資源節點來控制併發數量，而 Zadig 則統一管理併發調度策略，具有靈活控制任務優先級能力。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 通過在節點上配置「任務執行數量」來控制多個任務的併發，單個 Jenkins 任務的併發可以在任務配置中指定。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1418" src="https://oscimg.oschina.net/oscnet/up-16aee0879ad6a67f8bb0a2a8f6d9e645af0.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-2a9a5bef154eeb56b5410d206a91d0bbb51.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig 通過在任務配置中修改「任務併發數量設置」實現併發數控制，其中「工作流任務併發數量」控制同時執行的工作流任務數，「單任務服務併發數」控制同一個工作流任務中服務的併發數量。除此之外，面對低優先級任務佔用全局併發數量的場景，可以通過配置工作流的「執行併發數」來解決。Zadig 具有更自由的任務併發數控制，能夠靈活應對企業內部複雜的任務併發場景。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1418" src="https://oscimg.oschina.net/oscnet/up-4acde3574c2e0b7e1f4d8fad7f01f629f9f.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1418" src="https://oscimg.oschina.net/oscnet/up-e7872ba2b6aec2838c8c1ad71c7ccdc7f78.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">除以上能力外，Jenkins 通過插件來擴展更多的能力，而 Zadig 可以通過開發「自定義任務」，和企業自建系統打通，來滿足企業複雜流程，具體開發過程參考</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fsettings%2Fcustom-task%2F" target="_blank"><span style="background-color:#ffffff; color:#0080ff">文檔</span></a><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><span>&nbsp;</span>[4]。</span></p><span id="OSC_h4_16"></span><h4><strong>參考鏈接</strong></h4><p style="margin-left:0; margin-right:0; text-align:left"><span>[1]&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fsettings%2Fcodehost%2Fgitlab%2F" target="_blank"><span style="color:#0080ff">https://docs.koderover.com/zadig/settings/codehost/gitlab/</span></a></p><p style="margin-left:0; margin-right:0; text-align:left"><span>[2]&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fproject%2Fservice%2Fk8s%2F%23%E7%AD%96%E7%95%A5%E9%85%8D%E7%BD%AE" target="_blank"><span style="color:#0080ff">https://docs.koderover.com/zadig/project/service/k8s/#策略配置</span></a></p><p style="margin-left:0; margin-right:0; text-align:left">[3]&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fproject%2Fworkflow-trigger%2F" target="_blank"><span style="color:#0080ff">https://docs.koderover.com/zadig/project/workflow-trigger/</span></a></p><p style="margin-left:0; margin-right:0; text-align:left">[4]&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fsettings%2Fcustom-task%2F" target="_blank"><span style="color:#0080ff">https://docs.koderover.com/zadig/settings/custom-task/</span></a></p><p style="margin-left:0px; margin-right:0px; text-align:center">&nbsp;</p><p style="margin-left:0px; margin-right:0px; text-align:center"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">立即體驗 Zadig V2.0 新架構，開啓高效交付之旅！🚀&nbsp;</span></p><p style="margin-left:0px; margin-right:0px; text-align:center"><strong><span style="color:#ff2968">Zadig 開放，鏈接，專業</span></strong></p><p style="margin-left:0px; margin-right:0px; text-align:center"><strong><span style="color:#ff2968"><img alt="" src="https://oscimg.oschina.net/oscnet/up-b3270466a68bf98a90c5d08b91cd0ebc98c.png" referrerpolicy="no-referrer"></span></strong></p><p style="margin-left:0px; margin-right:0px; text-align:center">&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center">&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkoderover%2Fzadig" target="_blank">Zadig 在 Github</a>&nbsp;/&nbsp;<a href="https://gitee.com/koderover/zadig">Zadig 在 Gitee</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><strong>推薦閲讀：</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247490415%26idx%3D1%26sn%3D1914c7fd25aac5d33b98663571bbb744%26chksm%3Dcfb457cff8c3ded9c02809aad88012fa802eac55222eebe70b8c637ca2c86a101045aa81e73a%26scene%3D21%23wechat_redirect" target="_blank">是時候和 Jenkins 説再見了</a>&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247491115%26idx%3D1%26sn%3D83e593f77e1aec4d59cee72cca711927%26chksm%3Dcfb4528bf8c3db9de4d0adbe3c0cb15600d35e647c869867dc2e99a599cd7f58ca6208bb4443%26scene%3D21%23wechat_redirect" target="_blank">不想放棄 Jenkins？這麼做也能雲原生</a>&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247491064%26idx%3D1%26sn%3D4bbe7bfe944feaa8b44a08e6156e04e2%26chksm%3Dcfb45158f8c3d84e40d44d2dd9228a844b9bcdeea1fe32a7b0ae41b9af982c11319a38f6675e%26scene%3D21%23wechat_redirect" target="_blank">Zadig 推出環境睡眠，平均節省一半測試資源</a>&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center">&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247490637%26idx%3D1%26sn%3D6e0498b37fb15f8b8903c4997e5611d8%26chksm%3Dcfb450edf8c3d9fb758d691081f09fd85d91dbb17534ba9c18c2300725462d3806581efbd237%26scene%3D21%23wechat_redirect" target="_blank">Zadig vs. Jenkins 詳細比對：時代的選擇與開發者之選</a>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 03:45:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/koderover/blog/10314033</guid>
            <link>https://my.oschina.net/koderover/blog/10314033</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Java 8 仍被廣泛使用，佔比 50%]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000"><span style="background-color:#ffffff">JetBrains&nbsp;最新發布的 2023 年度開發者生態系統調查報告指出，在面向 Java 開發者的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.jetbrains.com%2Flp%2Fdevecosystem-2023%2Fjava%2F" target="_blank">調查</a>中，</span>更多的開發人員選擇在生產中使用 Java 17，而不是 Java 11。Docker 逐漸成為打包 Web 應用程序的首選，且 Spring 和 Spring Boot 的使用率遙遙領先。</span></p><p><span style="color:#000000">具體而言，開發者最常使用的&nbsp;Java 版本是&nbsp;Java 8，佔比高達&nbsp;50%；其次分別是&nbsp;Java 17 (45%)、Java 11(38%) 以及&nbsp;Java 20 (11%)。</span></p><p><span style="color:#000000">「很遺憾看到這麼多人仍在使用 Java 8（及更舊的版本）。我想知道是什麼阻礙了他們升級到更新的版本並獲得強大的新語言功能，以及我們如何幫助他們將代碼遷移到更新的 Java 版本。」</span></p><p><img height="356" src="https://oscimg.oschina.net/oscnet/up-d79d8c2307c0972948764928b7719266a39.png" width="300" referrerpolicy="no-referrer"></p><p>其他一些發現包括：</p><ul><li><span style="color:#000000">58% 的受訪者表示，他們打包 Web 應用程序的方式是&nbsp;Docker，還有 56% 使用的是<span style="background-color:#ffffff">嵌入式服務器。</span></span></li><li>最常用的是單元測試框架是&nbsp;JUnit，以 84% 的佔比穩居首位。</li><li><span style="color:#000000">Web 框架方面，72</span>% 開發者正在使用&nbsp;Spring Boot。</li><li>Java EE 8 / Jakarta EE 8 使用率為 33%，Jakarta EE 10 以 10% 的使用率超過了 Jakarta EE 9 的 7%。</li><li>Java 開發中使用最多的&nbsp;IDE/編輯器是 IntelliJ IDEA，佔比 78%。</li><li><span style="background-color:#ffffff; color:#19191c">JavaScript、SQL、Python 和 HTML / CSS 是那些使用 Java 作為主要語言之一的人中最常用的語言和技術。</span></li></ul><p><img height="184" src="https://oscimg.oschina.net/oscnet/up-7a087c1c4d8482dffc48bd3f1d157872f49.png" width="500" referrerpolicy="no-referrer"></p><p>更多詳情可查看<strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.jetbrains.com%2Flp%2Fdevecosystem-2023%2Fjava%2F" target="_blank">此處</a></strong>。</p><p><strong>相關閲讀：</strong></p><ul><li style="text-align:start"><a href="https://www.oschina.net/news/267606/jetbrains-devecosystem-2023" target="_blank">JetBrains 報告：Scala/Go/Kotlin 薪酬最高，Objective-C 日薄西山</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 03:21:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268636/devecosystem-2023-java8</guid>
            <link>https://www.oschina.net/news/268636/devecosystem-2023-java8</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[滴滴史上最嚴重服務故障，罪魁禍首是底層軟件 or 「降本增笑」？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>2023 年 11 月 27 日晚間，<u><a href="https://www.oschina.net/news/268480">滴滴因系統故障導致 App 服務異常</a></u>，不顯示定位且無法打車。11 月 27 日晚，滴滴出行進行了回覆：非常抱歉，由於系統故障。</p><p>2023 年 11 月 28 日早間，滴滴出行消息稱，網約車等服務已恢復，騎車等在陸續修復中。11 月 28 日，在滴滴發出公告的同時，記者在上海、深圳等地使用滴滴呼叫網約車，發現網約車功能並未恢復使用，網絡加載異常，仍無法打車。11 月 28 日，滴滴向記者回應稱，網約車服務已恢復，司機乘客權益陸續恢復補發。</p><p><strong>11 月 29 日，滴滴再次發文致歉，稱初步確定事故起因是底層系統軟件發生故障</strong>。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-de730d329966eb2d4a658c5008f11be82a7.png" referrerpolicy="no-referrer"></p><p>來源：<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F2838754010%2FNuMAAaUEl" target="_blank">https://weibo.com/2838754010/NuMAAaUEl</a></em></u></p></blockquote><p>在滴滴官方發佈這份公告之前，已經有資深 IT 技術人士分析：「從表現上看，打車、共享單車全掛，不同的業務板塊之間應該是有隔離的，説明問題出在更加底層的基礎設施。攻擊者一般只能訪問到應用層，基礎設施訪問不到。要麼是被攻擊者打穿，要麼是自己系統操作不慎掛了。即便是前者，也算是一種系統缺陷，才會被打穿。」</p><p>360 安全專家認為，滴滴閃崩背後的技術原因可能有六種：</p><p>第一，系統更新升級過程中出現了編程錯誤、邏輯錯誤或未處理的異常情況：一般情況下，互聯網廠商發佈更新都會在晚上，與滴滴發生故障的時間也能對應，當然業務升級維護是放量更新，但現在滴滴全平台、全業務都故障了，説明肯定是他「家裏」的問題。</p><p>第二，服務器故障：比如滴滴的核心機房，可能恆溫恆濕環境出了問題，導致服務器過熱、CPU 燒了，或者核心機房所在地發生了自然災害如地震、洪水、海嘯等，這種情況下，硬件需要重新更換，裏面的服務軟件也需要重新配置，恢復週期相對較長，但這個可能性比較小。</p><p>第三，第三方服務故障：滴滴的後台架構可能使用了第三方服務或者組件。如果第三方出了問題，也可能會影響滴滴的正常運行。但出於安全性考慮，滴滴可能不會將核心業務託管給第三方，不過這個可能性也較小。</p><p>第四，DDOS 攻擊：黑客採用分佈式拒絕服務的方式，搶佔了大量的服務器資源，導致用戶無法訪問，但這個不太可能，因為 DDos 不會導致數據出錯，而且滴滴從體量上來説，有足夠的成本和能力去對抗。</p><p>第五，其他網絡攻擊：某些黑灰產團夥可能會通過拖庫盜取數據，然後在暗網上售賣，在這個過程中不排除會有誤操作，破壞了數據庫。</p><p>第六，勒索病毒：網絡攻擊黑客對滴滴的底層數據、業務代碼進行了加密。據披露現象，用戶的賬單和打車數據都算錯了，存在一定可能是滴滴為了避免更大損失主動暫停了業務。近期勒索攻擊事件屢屢發生，月初，某金融機構就是因為遭遇勒索病毒攻擊造成了業務停擺。</p><p>不過也有網絡安全公司專家認為，如果是來自外部的黑客攻擊，公司一般會在第一時間進行聲明。他猜測更集中於滴滴發生了內部重大業務調整，或有新業務接入原系統，但沒有做好預案，導致關聯業務或關聯繫統出現重大故障，這是大公司系統故障最常見的原因。</p><p>因此對於滴滴此次大規模的長時間故障，有行業人士認為，<strong>降本增效可能也是原因之一</strong>。</p><p>該人士認為，<strong>互聯網公司核心業務頻繁宕機，且長時間宕機，是降本增效的附屬品之一。系統投資少了，維護資源少了，程序員更換頻繁了，BUG 就多</strong>。</p><p>他舉例稱，一般在業務上行階段都有冗餘，為了迎接隨時爆發的訂單，上行階段要維持負載的上限不能過大，比如平時 70%，這樣遇到一個小爆發不用擔心會出問題，足以應對小高峯；但是下行期的邏輯就不同了，負載很高的時候抗一抗就行了，雖然後面遇到小高峯可能會難受，但是隨着時間的推移總體負載會下降。</p><hr><p>最後來看一下網傳的消息，有同行説滴滴這次嚴重故障是升級 k8s 版本導致，當時 SRE 工程師定位了三個小時都沒定位到問題。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-a181b0f3434ee33fc8d1903a1fdf9a188bc.png" referrerpolicy="no-referrer"></p><p><img src="https://static.oschina.net/uploads/space/2023/1129/113103_VOdZ_2720166.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-9c6757d79e017225bd7d61ecc642362132f.png" referrerpolicy="no-referrer"><span>&nbsp;</span></p></blockquote><p>從滴滴公開的技術分享來看，滴滴彈性雲在上個月升級了 k8s 版本：從 k8s 1.12 升級到 1.20。</p><ul><li>K8s 1.12<span>&nbsp;</span>發佈於 2018 年：<em><u><a href="https://www.oschina.net/news/100393/kubernetes-1-12-0-released" target="_blank">Kubernetes 1.12 正式發佈，新增 VMSS 支持</a></u></em></li><li>K8s 1.20 發佈於 2020 年：<em><u><a href="https://www.oschina.net/news/123008/kubernetes-1-20-released" target="_blank">Kubernetes 1.20 發佈：妙啊</a></u></em></li></ul><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-d0aafb8fd2141c9aaf3394b4081fcda9aef.png" referrerpolicy="no-referrer"><br><br><strong><em>來源：</em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FnMSIsS72fSXGqJO9Vy_Pfw" target="_blank"><u><em>滴滴彈性雲基於 K8S 的調度實踐</em></u></a></strong></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 03:14:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268635</guid>
            <link>https://www.oschina.net/news/268635</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[周鴻禕：「360 無法卸載」是徹底的謠言]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>俞敏洪在公眾號更新了與周鴻禕的採訪對話。對話中雙方聊到了大眾對 360 的誤解，<strong>周鴻禕表示，360 不能卸載是一個徹底的謠言。</strong></p><blockquote><p><img height="1206" src="https://static.oschina.net/uploads/space/2023/1129/110144_gNAL_2720166.png" width="1480" referrerpolicy="no-referrer"></p><p>來源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fpd2R8Y5Q6HtYODNfRvcbnA" target="_blank">https://mp.weixin.qq.com/s/pd2R8Y5Q6HtYODNfRvcbnA</a></u></em></p></blockquote><p>周鴻禕稱，因為 360 提供了完整的卸載過程。有的小朋友總是試圖用一個 Windows 的刪除想把 360 的目錄刪掉，這樣其實是刪不掉的，所以大家就會有一個錯誤的印象，好像 360 刪不掉。</p><p>但是你想，360 在電腦上是起保護作用的，最恨 360 的是什麼？是各種黑產、黑客，現在無論是國外的網軍做攻擊，還是國內的勒索軟件做攻擊，因為 360 裝的太廣，所以他們很重要的一個任務就是想辦法讓 360 失效，要不然 360 一報警他們就出問題了，<strong>所以你隨便用一個 Windows 做一個拖拽，把它移垃圾箱裏肯定是不行的</strong>。</p><p>甚至<strong>現在很多國外的攻擊軟件試圖調動 360 自己刪自己的過程，因為 360 提供了自己卸載自己的能力，所以在用戶卸載的時候，我們要區別是用戶真的在卸載，還是被攻擊了模擬用戶在卸載</strong>，因為很多軟件可以模擬用戶的操作。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-75c92d5bced77262bd78834927c10f9975c.png" referrerpolicy="no-referrer"></p><p>我們為了做自我保護，可能有一個比較煩瑣的提示過程，就是這樣以訛傳訛，好像就變成了 360 不能卸載，這是一個徹底的謠言。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 02:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268632</guid>
            <link>https://www.oschina.net/news/268632</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[RHEL 10 將移除 X.org，默認使用 Wayland]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/news/240614/rhel10-deprecated-xorg-server">根據此前的報道</a></u>，RHEL 9 已經標記將棄用 X.org 顯示服務器。現在紅帽官方<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.redhat.com%2Fde%2Fblog%2Frhel-10-plans-wayland-and-xorg-server" target="_blank">正式宣佈</a></u>，計劃於 2025 年上半年發佈的&nbsp;<strong>RHEL 10 將移除 X.org，默認使用 Wayland</strong>。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-1d62539558b9d502f364802ade1ca24877d.png" referrerpolicy="no-referrer"></p></blockquote><p>Red Hat 工程經理 Carlos Soriano Sanchez 説道：「從 X Window System 到 Wayland 的過渡已經持續了 15 年。Red Hat 從一開始就參與其中。隨着時間的推移，人們發現 X11 協議和 X.org 服務器存在需要解決的基礎問題，而 Wayland 就是解決方案。如今，Wayland 已被公認為事實上的窗口和顯示基礎設施解決方案。」</p><p>他還表示，「Xorg Server」和「X11」不是同義詞，X11 是一個通過 Xwayland 支持的協議，而 Xorg Server 是 X11 協議的實現之一。雖然 RHEL 10 默認使用 Wayland，但 X11 客戶端支持可通過 XWayland 來實現。</p><p>因此，RHEL 10 將使用 Xwayland 處理絕大部分尚未移植到 Wayland 的 X11 客戶端。但如果用戶必須 X.org，可以在其軟件生命週期內繼續用 RHEL 9。</p><p>Red Hat 認為，這一決定將使他們能夠專注於現代化的軟件棧和生態，解決諸如 HDR、增強安全性、混合低密度和高密度顯示設置、更好的 GPU/顯示器熱插拔、更好的手勢和滾動等問題。</p><p>有人認為，Red Hat 這一決策基本上是在宣佈&nbsp;<strong style="color:#121212"> X.Org Server 事實上已死亡。</strong>因為 Red Hat 工程師通常負責管理新的 X.Org Server 版本以及進行各種開發。除了 XWayland 之外，他們已多年沒有發佈過重要 X.Org Server 版本更新。而且除了推出安全修復程序或嚴重的錯誤修復程序之外，沒有人主動管理新功能版本甚至點版本。</p><p>到 2025 年，除了為 RHEL9 客戶提供安全/錯誤處理之外，Red Hat 將更不願意為 X.Org Server 投入開發資源。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 02:38:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268629/rhel-10-plans-wayland-and-xorg-server</guid>
            <link>https://www.oschina.net/news/268629/rhel-10-plans-wayland-and-xorg-server</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Linux 內核安全架構 & 軟件包構建方案 | 2023-11 月 WHLUG 回顧]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>2023 年 11 月 26 日下午，由 deepin 社區主辦的武漢 Linux 用戶組沙龍（WHLUG）在新青年創客咖啡舉行，吸引了來自武漢地區諸多 Linux 愛好者線下參與，10 餘名外地夥伴線上參與，大家共同探討技術話題，分享技術經驗和見解，現場氣氛熱烈。現在就讓我們一起來回顧本次活動的精彩瞬間吧！</p><p style="text-align:center"><img src="https://storage.deepin.org/thread/202311281539076258_%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17011569946326.png" referrerpolicy="no-referrer"></p><p>本次沙龍上，內核研發工程師 Avenger_285714 為大家分享了 Linux 內核安全框架相關內容。Avenger_285714 詳細介紹了當前內核所包含的 SELinux 安全子系統、Apparmor、Smack、Tomoyo 等安全模塊，以及 IMA 完整性校驗的原理和可用於不可變發行版的 loapin 模塊。同時分享了統信自研的內核安全機制：UOS Security Kernel Interface 和 elfverify 應用程序簽名、filearmor 文件保護和 SELinux 擴展，並與在場的小夥伴們討論了基於 inode 和基於路徑的安全措施之間的優劣及其應用前景。</p><p style="text-align:center"><img src="https://storage.deepin.org/thread/202311281539468047_%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17011570901113.png" referrerpolicy="no-referrer"></p><p>隨後，Shiroko 為大家展示了他近期新「折騰」出來的打包工具 ShiroDEB。據 Shiroko 介紹，ShiroDEB 作為一種軟件包構建方案，由構建工具和構建腳本組成。</p><p>為瞭解決依賴版本不同的問題，ShiroDEB 還可通過構建素材的形式將自建庫或其他工具容納到構建流程中，並會自動創建包含了自建庫等的軟件包。此外，也提供了一個可以調用構建素材的交互終端以供開發者使用。期待能夠接收社區用戶貢獻的構建腳本，形成屬於社區的用戶軟件倉庫。</p><p>項目地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fshirodeb" target="_blank">https://github.com/shirodeb</a>&nbsp;</p><p style="text-align:center"><img src="https://storage.deepin.org/thread/202311281540109947_%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17011570644077.png" referrerpolicy="no-referrer"></p><p>WHLUG 的創辦希望能夠幫助 Linux 社區的每一個人都可以充分地交流經驗和心得，本月活動的主題分享資料已經上傳至 Github，供大家下載：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fshirodeb" target="_blank">https://github.com/deepin-community/.WHLUG/tree/master/WHLUG-2023.11</a></p><p>我們期待 12 月的活動能夠聚集更多的愛好者！如果你有興趣在 WHLUG 上做分享，或是有更多意見和建議讓 WHLUG 變得更好，請告訴我們吧！</p><p style="text-align:center"><img src="https://storage.deepin.org/thread/202311281614425541_1.jpeg" referrerpolicy="no-referrer"></p><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 02:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268627</guid>
            <link>https://www.oschina.net/news/268627</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[高手問答第 310 期 —— 軟件發展史上那些不為人知的故事]]>
            </title>
            <description>
                <![CDATA[<h1 class="header article-title"><a href="https://www.oschina.net/question/4855753_2331437">高手問答第 310 期 —— 軟件發展史上那些不為人知的故事</a><div class="ui red label horizontal" data-tooltip="置頂">頂</div></h1><div class="extra ui horizontal list meta-wrap"><div class="item"><a href="https://my.oschina.net/u/4855753" class="__user"><span>OSC 噠噠</span></a><span class="org-label org-label--simple primary" data-tooltip="認證官方賬號"><i class="oicon oicon-org"></i></span> 發佈於，前天 14:26
                    </div><div class="item">閲讀 521</div><div class="item collect-btn " data-id="2331437" data-user-id="4855753" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i> 收藏 <span data-collect-count="" data-id="2331437" data-obj-type="2">0</span></div><div class="item comment-count"><a href="https://www.oschina.net/question/4855753_2331437#comments" class="normal"><i class="comment outline icon"></i> 答案 <span data-article-reply-count="">8</span></a></div></div><div class="tags"><a class="ui horizontal label" href="https://www.oschina.net/question/topic/masteronline" target="_blank"><img src="https://static.oschina.net/uploads/logo/masteronline_9WTeU.png" referrerpolicy="no-referrer">高手問答</a></div><div class="content" id="articleContent"><p><span><span><span><span>今天的世界是運行在軟件之上的。偉大的軟件不是一朝一夕發明出來的，而是人類文明長期積累的結果。可以</span></span><span><span>説</span></span><span><span>，軟件文明就是人類文明在電氣化時代的延續。那麼軟件發展史上有哪些關鍵事件和不為人知的故事呢？</span></span></span></span></p><p><strong><span><span><span><span>本期高手問答我們一起探討「軟件發展史上那些不為人知的故事」，做客高手問答的嘉賓是新書《軟件簡史》的作者<a href="https://my.oschina.net/u/6992678" rel="nofollow">張銀奎</a>老師。</span></span></span></span></strong></p><p><span style="background-color:#ffffff; color:#000000">可討論的問題包括但不限於：</span></p><ul><li><span><span><span><span>世界上第一個計算機程序是怎麼誕生的？</span></span></span></span></li><li><span><span><span><span>兩位現代計算機之父圖靈與馮·諾依曼有哪些交集和故事？</span></span></span></span></li><li><span><span><span><span>古老的提花織布機與計算機之間有什麼淵源？</span></span></span></span></li><li><span><span><span><span>在 ENIAC 出現之前，還有更早的計算機嗎？</span></span></span></span></li><li><span><span><span><span>最早的內存採用的是什麼技術？</span></span></span></span></li></ul><p><span><span><span><span>有其他相關的問題，也歡迎提問。</span></span></span></span></p><hr><h2>嘉賓介紹</h2><p><span><span><strong><span><span><strong>張銀奎</strong></span></span></strong><span><span>&nbsp;，國內知名的調試技術專家。畢業於上海交通大學信息與控制工程系，長期從事軟件開發和研究工作，曾在英特爾工作 13 年，對 IA-32 架構、操作系統內核、驅動程序，尤其是對軟件調試有較深入的研究。著有暢銷書《軟件調試》《格蠹彙編》等，格蠹科技（nanocode.cn）創始人，高端調試網站（advdbg.org）創建者。翻譯（合譯）作品有《二十一世紀機器人》《觀止——微軟創建 NT 和未來的奪命狂奔》《數據挖掘原理》《機器學習》《人工智能：複雜問題求解的結構和策略》等。</span></span></span></span></p><p><span><span><span><span><img alt="" height="334" src="https://oscimg.oschina.net/oscnet/up-6c20792bfc000c6d2385b84b080ce1a071b.png" width="500" referrerpolicy="no-referrer"></span></span></span></span></p><p><span><span><span><span>為鼓勵踴躍提問，我們會在問答結束後從提問者中抽取 3 名幸運會員贈予《</span></span><span><span>軟件簡史</span></span><span><span>》（上下冊）。</span></span></span></span></p><p><span><span><span><span><img alt="" height="328" src="https://oscimg.oschina.net/oscnet/up-4b1d01a7d62014760f9f4ba80aa1440ef55.png" width="250" referrerpolicy="no-referrer"></span></span></span></span></p><p><span><span><span><span>《</span></span><span><span>軟件簡史</span></span><span><span>》天貓有售：</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdetail.tmall.com%2Fitem.htm%3Fid%3D750806496720" rel="nofollow" target="_blank"><span><span>https://detail.tmall.com/item.htm?id=750806496720</span></span></a></span></span></p><p><span><span><span><span>OSChina 高手問答一貫的風格，不歡迎任何與主題無關的討論和噴子。</span></span></span></span></p><p><span><span><span><span>下面歡迎大家向 <a href="https://my.oschina.net/u/6992678" rel="nofollow">張銀奎</a> 老師積極提問，直接回帖提問即可。</span></span></span></span></p></div><div class="poll-wrap"></div><div class="additional-remarks"></div><div class="ui basic center aligned segment action"><div class="ui big buttons"><a class="ui basic button collect-btn hover" data-id="2331437" data-user-id="4855753" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i>收藏 (<span data-collect-count="" data-id="2331437" data-obj-type="2">0</span>)</a><div class="ui basic dropdown share button osc-share dropdown-share" data-tag="share-question"><i class="share icon"></i><span>分享</span><div class="menu"><a class="item" data-platform="weibo" data-value="weibo"><i class="weibo icon"></i>微博</a><a class="item" data-platform="qq" data-value="qq"><i class="qq icon"></i>QQ</a><a class="item" data-platform="wechat" data-value="wechat"><i class="weixin icon"></i>微信</a></div></div></div><div class="ui basic segment"><a class="ban" ban-report="" data-id="2331437" data-obj-type="2" data-url="https://www.oschina.net/question/4855753_2331437"><i class="flag red icon"></i>舉報</a></div></div>
            ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 02:27:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/question/4855753_2331437</guid>
            <link>https://www.oschina.net/question/4855753_2331437</link>
        </item>
        <item>
            <title>
                <![CDATA[Builder —— 拖放式 Headless CMS]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Builder 是一個適用於 React、Vue、Svelte、Qwik 等的拖放式&nbsp;headless CMS。與任何網站或應用程序集成，使用代碼庫中已有的組件進行拖放。</p><p><img alt="" height="415" src="https://static.oschina.net/uploads/space/2023/1127/145541_fgX7_4252687.gif" width="500" referrerpolicy="no-referrer"></p><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; box-sizing:border-box; color:#1f2328; display:block; font-family:-apple-system,BlinkMacSystemFont,&quot;Segoe UI&quot;,&quot;Noto Sans&quot;,Helvetica,Arial,sans-serif,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin-bottom:16px; margin-top:0px; max-width:100%; orphans:2; overflow:auto; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:max-content; word-spacing:0px"><tbody><tr><td style="border-style:solid; border-width:1px">Register components</td><td style="border-style:solid; border-width:1px">Rendered your visually created content</td></tr><tr><td style="border-style:solid; border-width:1px"><div><pre><span style="color:var(--color-prettylights-syntax-keyword)">import</span><span>{</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">Builder</span><span>}</span><span style="color:var(--color-prettylights-syntax-keyword)">from</span><span style="color:var(--color-prettylights-syntax-string)">'@builder.io/react'</span>
&nbsp;
<span style="color:var(--color-prettylights-syntax-comment)">// Register our heading component for use in</span><span style="color:var(--color-prettylights-syntax-comment)">// the visual editor</span><span style="color:var(--color-prettylights-syntax-keyword)">const</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">Heading</span><span style="color:var(--color-prettylights-syntax-constant)">=</span><span>props</span><span style="color:var(--color-prettylights-syntax-constant)">=&gt;</span><span>(</span><span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-entity-tag)">h1</span><span style="color:var(--color-prettylights-syntax-constant)">className</span><span style="color:var(--color-prettylights-syntax-constant)">=</span><span style="color:var(--color-prettylights-syntax-string)">"my-heading"</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span><span>{</span><span>props</span><span>.</span><span style="color:var(--color-prettylights-syntax-constant)">title</span><span>}</span><span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-constant)">/</span><span style="color:var(--color-prettylights-syntax-entity-tag)">h1</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span><span>)</span>
&nbsp;
<span style="color:var(--color-prettylights-syntax-storage-modifier-import)">Builder</span><span>.</span><span style="color:var(--color-prettylights-syntax-entity)">registerComponent</span><span>(</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">Heading</span><span>,</span><span>{</span>
&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">name</span>: <span style="color:var(--color-prettylights-syntax-string)">'Heading'</span><span>,</span>
&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">inputs</span>: <span>[</span><span>{</span><span style="color:var(--color-prettylights-syntax-constant)">name</span>: <span style="color:var(--color-prettylights-syntax-string)">'title'</span><span>,</span><span style="color:var(--color-prettylights-syntax-constant)">type</span>: <span style="color:var(--color-prettylights-syntax-string)">'text'</span><span>}</span><span>]</span><span>}</span><span>)</span></pre><div>&nbsp;</div></div></td><td style="border-style:solid; border-width:1px"><div><pre><span style="color:var(--color-prettylights-syntax-keyword)">import</span><span>{</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">BuilderComponent</span><span>,</span><span>builder</span><span>}</span><span style="color:var(--color-prettylights-syntax-keyword)">from</span><span style="color:var(--color-prettylights-syntax-string)">'@builder.io/react'</span>
&nbsp;
<span>builder</span><span>.</span><span style="color:var(--color-prettylights-syntax-entity)">init</span><span>(</span><span style="color:var(--color-prettylights-syntax-string)">'YOUR_KEY'</span><span>)</span>
&nbsp;
<span style="color:var(--color-prettylights-syntax-keyword)">export</span><span style="color:var(--color-prettylights-syntax-keyword)">const</span><span style="color:var(--color-prettylights-syntax-entity)">getStaticProps</span><span style="color:var(--color-prettylights-syntax-constant)">=</span><span style="color:var(--color-prettylights-syntax-keyword)">async</span><span>(</span><span>)</span><span style="color:var(--color-prettylights-syntax-constant)">=&gt;</span><span>(</span><span>{</span> 
&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">props</span>: <span>{</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">builderJson</span>: <span style="color:var(--color-prettylights-syntax-keyword)">await</span><span>builder</span><span>.</span><span style="color:var(--color-prettylights-syntax-entity)">get</span><span>(</span><span style="color:var(--color-prettylights-syntax-string)">'page'</span><span>,</span><span>{</span><span style="color:var(--color-prettylights-syntax-constant)">url</span>: <span style="color:var(--color-prettylights-syntax-string)">'/'</span><span>}</span><span>)</span><span>.</span><span style="color:var(--color-prettylights-syntax-entity)">promise</span><span>(</span><span>)</span>
&nbsp;&nbsp;<span>}</span><span>}</span><span>)</span>
&nbsp;
<span style="color:var(--color-prettylights-syntax-keyword)">export</span><span style="color:var(--color-prettylights-syntax-keyword)">function</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">BuilderPage</span><span>(</span><span>{</span> builderJson <span>}</span><span>)</span><span style="color:var(--color-prettylights-syntax-constant)">=&gt;</span><span>{</span>
&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-keyword)">return</span><span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">YourHeader</span><span style="color:var(--color-prettylights-syntax-constant)">/</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">BuilderComponent</span><span style="color:var(--color-prettylights-syntax-constant)">model</span><span style="color:var(--color-prettylights-syntax-constant)">=</span><span style="color:var(--color-prettylights-syntax-string)">"page"</span><span style="color:var(--color-prettylights-syntax-constant)">content</span><span style="color:var(--color-prettylights-syntax-constant)">=</span><span>{</span><span>builderJson</span><span>}</span><span style="color:var(--color-prettylights-syntax-constant)">/</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">YourFooter</span><span style="color:var(--color-prettylights-syntax-constant)">/</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span>
&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-constant)">/</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span><span>}</span></pre><div>&nbsp;</div></div></td></tr></tbody></table><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; box-sizing:border-box; color:#1f2328; display:block; font-family:-apple-system,BlinkMacSystemFont,&quot;Segoe UI&quot;,&quot;Noto Sans&quot;,Helvetica,Arial,sans-serif,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin-bottom:16px; margin-top:0px; max-width:100%; orphans:2; overflow:auto; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:max-content; word-spacing:0px"><tbody></tbody></table><p>&nbsp;</p></div>
                                                                ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 02:21:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/builder</guid>
            <link>https://www.oschina.net/p/builder</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 阿里雲自主研發的雲原生數據庫產品 PolarDB for PostgreSQL]]>
            </title>
            <description>
                <![CDATA[<div align="center"><p><a href="https://gitee.com/link?target=https%3A%2F%2Fdeveloper.aliyun.com%2Ftopic%2Fpolardb-for-pg"><img src="https://gitee.com/polardb/PolarDB-for-PostgreSQL/raw/POLARDB_11_STABLE/docs/.vuepress/public/images/polardb.png" alt="logo" referrerpolicy="no-referrer"></a></p><h1><a id="user-content-polardb-for-postgresql" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#polardb-for-postgresql"></a>PolarDB for PostgreSQL</h1><p><strong>阿里雲自主研發的雲原生數據庫產品</strong></p><h4><a id="user-content-english--簡體中文" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#english--%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87"></a><a href="https://gitee.com/polardb/PolarDB-for-PostgreSQL/blob/POLARDB_11_STABLE/README.md">English</a> | 簡體中文</h4><p><a href="https://gitee.com/link?target=https%3A%2F%2Fdeveloper.aliyun.com%2Ftopic%2Fpolardb-for-pg"><img src="https://img.shields.io/badge/%E5%AE%98%E6%96%B9%E7%BD%91%E7%AB%99-blueviolet?style=for-the-badge&amp;logo=alibabacloud" alt="official" referrerpolicy="no-referrer"></a></p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fcirrus-ci.com%2Fgithub%2FApsaraDB%2FPolarDB-for-PostgreSQL%2FPOLARDB_11_STABLE"><img src="https://img.shields.io/cirrus/github/ApsaraDB/PolarDB-for-PostgreSQL/POLARDB_11_STABLE?style=for-the-badge&amp;logo=cirrusci" alt="cirrus-ci-stable" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fcirrus-ci.com%2Fgithub%2FApsaraDB%2FPolarDB-for-PostgreSQL%2FPOLARDB_11_DEV"><img src="https://img.shields.io/cirrus/github/ApsaraDB/PolarDB-for-PostgreSQL/POLARDB_11_DEV?style=for-the-badge&amp;logo=cirrusci" alt="cirrus-ci-dev" referrerpolicy="no-referrer"></a><a href="https://gitee.com/polardb/PolarDB-for-PostgreSQL/blob/POLARDB_11_STABLE/LICENSE"><img src="https://img.shields.io/badge/license-Apache--2.0-blue?style=for-the-badge&amp;logo=apache" alt="license" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2FGitHub.com%2FApsaraDB%2FPolarDB-for-PostgreSQL%2Fissues"><img src="https://img.shields.io/github/issues/ApsaraDB/PolarDB-for-PostgreSQL?style=for-the-badge&amp;logo=github" alt="github-issues" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2FGitHub.com%2FApsaraDB%2FPolarDB-for-PostgreSQL%2Fpulls"><img src="https://img.shields.io/github/issues-pr/ApsaraDB/PolarDB-for-PostgreSQL?style=for-the-badge&amp;logo=github" alt="github-pullrequest" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FApsaraDB%2FPolarDB-for-PostgreSQL%2Fnetwork%2Fmembers"><img src="https://img.shields.io/github/forks/ApsaraDB/PolarDB-for-PostgreSQL?style=for-the-badge&amp;logo=github" alt="github-forks" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FApsaraDB%2FPolarDB-for-PostgreSQL%2Fstargazers"><img src="https://img.shields.io/github/stars/ApsaraDB/PolarDB-for-PostgreSQL?style=for-the-badge&amp;logo=github" alt="github-stars" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FApsaraDB%2FPolarDB-for-PostgreSQL%2Fgraphs%2Fcontributors"><img src="https://img.shields.io/github/contributors/ApsaraDB/PolarDB-for-PostgreSQL?style=for-the-badge&amp;logo=github" alt="github-contributors" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fopensource.alibaba.com%2Fcontribution_leaderboard%2Fdetails%3FprojectValue%3Dpolardb-pg"><img src="https://img.shields.io/badge/PolarDB--for--PostgreSQL-%E6%9F%A5%E7%9C%8B%E8%B4%A1%E7%8C%AE%E6%8E%92%E8%A1%8C%E6%A6%9C-orange?style=for-the-badge" alt="Leaderboard" referrerpolicy="no-referrer"></a></p></div><h2><a id="user-content-什麼是-polardb-for-postgresql" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E4%BB%80%E4%B9%88%E6%98%AF-polardb-for-postgresql"></a>什麼是 PolarDB for PostgreSQL</h2><p><img src="https://gitee.com/polardb/PolarDB-for-PostgreSQL/raw/POLARDB_11_STABLE/docs/zh/imgs/1_polardb_architecture.png" alt="arch.png" referrerpolicy="no-referrer"></p><p>PolarDB for PostgreSQL（下文簡稱為 PolarDB）是一款阿里雲自主研發的雲原生數據庫產品，100% 兼容 PostgreSQL，採用基於 Shared-Storage 的存儲計算分離架構，具有極致彈性、毫秒級延遲、HTAP 的能力。</p><ol><li>極致彈性：存儲與計算能力均可獨立地橫向擴展。
<ul><li>當計算能力不夠時，可以單獨擴展計算集羣，數據無需複製。</li><li>當存儲容量或 I/O 不夠時，可以單獨擴展存儲集羣，而不中斷業務。</li></ul></li><li>毫秒級延遲：
<ul><li>WAL 日誌存儲在共享存儲上，RW 到所有 RO 之間僅複製 WAL 的元數據。</li><li>獨創的 <em>LogIndex</em> 技術，實現了 Lazy 回放和 Parallel 回放，理論上最大程度地縮小了 RW 和 RO 節點間的延遲。</li></ul></li><li>HTAP 能力：基於 Shared-Storage 的分佈式並行執行框架，加速在 OLTP 場景下的 OLAP 查詢。一套 OLTP 型的數據，可支持 2 套計算引擎：
<ul><li>單機執行引擎：處理高併發的 TP 型負載。</li><li>分佈式執行引擎：處理大查詢的 AP 型負載。</li></ul></li></ol><p>PolarDB 還支持時空、GIS、圖像、向量、搜索、圖譜等多模創新特性，應對企業對數據處理日新月異的需求。</p><h2><a id="user-content-分支説明" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E5%88%86%E6%94%AF%E8%AF%B4%E6%98%8E"></a>分支説明</h2><p><code>POLARDB_11_STABLE</code> 為穩定分支，持存儲計算分離的雲原生形態。 <code>distribute</code> 分支支持分佈式形態。</p><h2><a id="user-content-產品架構" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E4%BA%A7%E5%93%81%E6%9E%B6%E6%9E%84"></a>產品架構</h2><p>PolarDB 採用了基於 Shared-Storage 的存儲計算分離架構。數據庫由傳統的 Share-Nothing 架構，轉變成了 Shared-Storage 架構。由原來的 N 份計算 + N 份存儲，轉變成了 N 份計算 + 1 份存儲。雖然共享存儲上數據是一份，但是數據在各節點內存中的狀態是不同的，需要通過內存狀態的同步來維護數據的一致性；同時主節點在刷髒時也需要做協調，避免只讀節點讀取到超前的 <strong>「未來頁面」</strong>，也要避免只讀節點讀取到過時的沒有在內存中被正確回放的 <strong>「過去頁面」</strong>。為瞭解決該問題，PolarDB 創造性地設計了 <em>LogIndex</em> 數據結構來維護頁面的回放歷史，該結構能夠實現主節點與只讀節點之間的同步。</p><p>在存儲計算分離後，I/O 單路延遲變大的同時，I/O 的吞吐也變大了。在處理分析型查詢時，僅使用單個只讀節點無法發揮出存儲側的大 I/O 帶寬優勢，也無法利用其他只讀節點的 CPU、內存和 I/O 資源。為瞭解決該問題，PolarDB 研發了基於 Shared-Storage 的並行執行引擎，能夠在 SQL 級別上彈性利用任意數目的 CPU 來加速分析查詢，支持 HTAP 的混合負載場景。</p><p>詳情請查閲 <a href="https://gitee.com/link?target=https%3A%2F%2Fapsaradb.github.io%2FPolarDB-for-PostgreSQL%2Fzh%2Ftheory%2Farch-overview.html">產品架構</a>。</p><h2><a id="user-content-快速入門" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8"></a>快速入門</h2><p>如果您已安裝 Docker，那麼可以從 DockerHub 上拉取 PolarDB for PostgreSQL 的，本地存儲實例鏡像，創建、運行並進入容器，然後直接使用 PolarDB 實例：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c"># 拉取單節點 PolarDB 鏡像</span></span><span id="LC2" class="line">docker pull polardb/polardb_pg_local_instance:single</span><span id="LC3" class="line"><span class="c"># 創建運行並進入容器</span></span><span id="LC4" class="line">docker run <span class="nt">-it</span><span class="nt">--cap-add</span><span class="o">=</span>SYS_PTRACE <span class="nt">--privileged</span><span class="o">=</span><span class="nb">true</span><span class="nt">--name</span> polardb_pg_single polardb/polardb_pg_local_instance:single bash</span><span id="LC5" class="line"><span class="c"># 測試實例可用性</span></span><span id="LC6" class="line">psql <span class="nt">-h</span> 127.0.0.1 <span class="nt">-c</span><span class="s1">'select version();'</span></span><span id="LC7" class="line">            version</span><span id="LC8" class="line"><span class="nt">--------------------------------</span></span><span id="LC9" class="line"> PostgreSQL 11.9 <span class="o">(</span>POLARDB 11.9<span class="o">)</span></span><span id="LC10" class="line"><span class="o">(</span>1 row<span class="o">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>對於更多進階部署方式，請移步在線文檔中的 <a href="https://gitee.com/link?target=https%3A%2F%2Fapsaradb.github.io%2FPolarDB-for-PostgreSQL%2Fzh%2Fdeploying%2Fdeploy.html">進階部署</a>。在部署前，我們建議您先了解一下 PolarDB for PostgreSQL 的 <a href="https://gitee.com/link?target=https%3A%2F%2Fapsaradb.github.io%2FPolarDB-for-PostgreSQL%2Fzh%2Fdeploying%2Fintroduction.html">架構簡介</a>。</p><h2><a id="user-content-文檔" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E6%96%87%E6%A1%A3"></a>文檔</h2><p>請移步本項目的 <a href="https://gitee.com/link?target=https%3A%2F%2Fapsaradb.github.io%2FPolarDB-for-PostgreSQL%2Fzh%2F">在線文檔網站</a> 查閲完整文檔。</p><p>如果需要在本地預覽或開發文檔，請參考 <a href="https://gitee.com/link?target=https%3A%2F%2Fapsaradb.github.io%2FPolarDB-for-PostgreSQL%2Fzh%2Fcontributing%2Fcontributing-polardb-docs.html">貢獻文檔</a>。</p><h2><a id="user-content-參與貢獻" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E5%8F%82%E4%B8%8E%E8%B4%A1%E7%8C%AE"></a>參與貢獻</h2><p>我們誠摯歡迎社區參與 PolarDB 的貢獻，無論是代碼還是文檔。</p><p>以下是貢獻者列表（由 <a href="https://gitee.com/link?target=https%3A%2F%2Fcontrib.rocks">contrib.rocks</a> 支持）：</p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FApsaraDB%2FPolarDB-for-PostgreSQL%2Fgraphs%2Fcontributors"><img src="https://contrib.rocks/image?repo=ApsaraDB/PolarDB-for-PostgreSQL" referrerpolicy="no-referrer"></a><h2><a id="user-content-軟件許可" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E8%BD%AF%E4%BB%B6%E8%AE%B8%E5%8F%AF"></a>軟件許可</h2><p>PolarDB for PostgreSQL 的源代碼遵循 Apache 2.0 許可證，基於遵循 PostgreSQL 許可證的 PostgreSQL 開發。其中還包含了部分遵循其它開源許可證的第三方組件。請移步 <a href="https://gitee.com/polardb/PolarDB-for-PostgreSQL/blob/POLARDB_11_STABLE/LICENSE">LICENSE</a> 和 <a href="https://gitee.com/polardb/PolarDB-for-PostgreSQL/blob/POLARDB_11_STABLE/NOTICE">NOTICE</a> 瞭解更多信息。</p><h2><a id="user-content-致謝" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E8%87%B4%E8%B0%A2"></a>致謝</h2><p>部分代碼和設計思路參考了其他開源項目，例如：PG-XC/XL (pgxc_ctl)、TBase (部分基於時間戳的 vacuum 和 MVCC)、Greenplum 以及 Citus (pg_cron)。感謝以上開源項目的貢獻。</p><h2><a id="user-content-加入社區" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E5%8A%A0%E5%85%A5%E7%A4%BE%E5%8C%BA"></a>加入社區</h2><ul><li><p>PolarDB PostgreSQL Slack：<a href="https://gitee.com/link?target=https%3A%2F%2Fapp.slack.com%2Fclient%2FT023NM10KGE%2FC023VEMKS02">https://app.slack.com/client/T023NM10KGE/C023VEMKS02</a></p></li><li><p>使用釘釘掃描如下二維碼，加入 PolarDB 技術推廣組釘釘羣</p><p><img src="https://gitee.com/polardb/PolarDB-for-PostgreSQL/raw/POLARDB_11_STABLE/docs/.vuepress/public/images/polardb_group.png" alt="polardb_group" referrerpolicy="no-referrer"></p></li></ul><hr><p>Copyright © Alibaba Group, Inc.</p>]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 02:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/polardb/PolarDB-for-PostgreSQL</guid>
            <link>https://gitee.com/polardb/PolarDB-for-PostgreSQL</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | PostgreSQL 數據脫敏方式盤點]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>數據脫敏是一種廣泛採用的保護敏感數據（如信用卡，社保卡，地址等信息）的方法。脫敏數據不僅僅是為了保護你和客戶的數據安全，在一些情況下，法律也有相應要求，最著名的例子就是 GDPR。</p><p><img src="https://oscimg.oschina.net/oscnet/up-4dab30bd6a2aa59a8d109180e68fa97cd9f.png" alt="" referrerpolicy="no-referrer"></p><p>市面上也有各種不同的數據脫敏方法，例如遮擋，替換，洗牌和加密，適用於不同場景。通過對敏感數據進行脫敏處理，組織能夠降低數據泄露和未經授權訪問的風險，同時仍然能夠使用真實數據進行開發、測試和分析等任務。</p><p>本文來盤點一下 PostgreSQL 的幾種常用脫敏方式。</p><h2>PostgreSQL Anonymizer</h2><p><img src="https://oscimg.oschina.net/oscnet/up-3aad9a7f7d2e9df748828641b923a88fb25.png" alt="file" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.postgresql.org%2Fabout%2Fnews%2Fpostgresql-anonymizer-10-privacy-by-design-for-postgres-2452%2F" target="_blank">PostgreSQL Anonymizer</a> 是個社區貢獻的擴展 ，可以為 PostgreSQL 添加不同的數據脫敏選項和方法。它將脫敏配置存儲在 PostgreSQL 的 SECURITY LABEL（安全標籤）中。</p><h3>動態脫敏</h3><p>PostgreSQL Anonymizer 實現動態脫敏的方式是通過將定義某個角色為 "MASKED" 以及脫敏規則。被授予 "MASKED" 角色的用戶將無法訪問原始數據，而其他角色仍然可以訪問。它現已支持多種的脫敏語法，你甚至可以編寫自己的規則。</p><p><img src="https://oscimg.oschina.net/oscnet/up-81ce353e198292328ef3b8e6dd45a7a4a3c.png" alt="file" referrerpolicy="no-referrer"></p><p>這種方法有一定的侷限性，例如在他們<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpostgresql-anonymizer.readthedocs.io%2Fen%2Flatest%2Fdynamic_masking%2F%23limitations" target="_blank">文檔中</a> 有提到，如果你同時使用脫敏插件和 GUI 工具如 DBeaver 或 pgAdmin 進行查詢的時候可能會出現問題；對於某些查詢來説，動態脫敏可能非常慢。此外，不同的脫敏變體需要不同的視圖，在角色或底層表發生變化時，這又很快變得難以管理起來。</p><h3>靜態脫敏</h3><p>PostgreSQL Anonymizer 還支持靜態脫敏，可以直接轉換原始數據集。比如可以用虛假數據替換原始數據，添加噪音或者混淆數據以隱藏敏感信息。</p><p>靜態脫敏的原則是更新包含至少一個被脫敏列的所有表的所有行。基本上意味着 PostgreSQL 將重寫磁盤上的所有數據。所以請注意，這種方法會破壞原始數據，並且是一個比較緩慢的過程。因此，在使用靜態脫敏之前，請三思而後行。</p><h2>Bytebase 動態數據脫敏</h2><p><img src="https://oscimg.oschina.net/oscnet/up-0fafa1a0df862325f60276f4a73b95107cd.png" alt="file" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bytebase.com%2Fdocs%2Fsecurity%2Fdata-masking%2Foverview%2F" target="_blank">Bytebase 動態數據脫敏</a> 不依賴於 PostgreSQL 視圖或其用戶，而是通過 Bytebase 內部管理脫敏策略和授權管理。當用戶通過 SQL 編輯器查詢時，會自動應用動態脫敏策略。</p><p><img src="https://oscimg.oschina.net/oscnet/up-03e05ae16e4f31409c552b924345c5e0a93.png" alt="file" referrerpolicy="no-referrer"></p><p>Bytebase 動態數據脫敏包括以下組件：</p><ul><li><strong>全局脫敏規則</strong>：工作空間的「管理員」和「DBA」可以批量定義全局脫敏規則。例如，可以將所有名為 email 的列脫敏程度設置為「半脫敏」。這樣，修改脫敏策略就無需手動修改數千列了，還節省了維護視圖的麻煩。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-a2bd3b732489e2b78eb7d1d7cd37cdb52a5.png" alt="file" referrerpolicy="no-referrer"></p><ul><li><strong>列脫敏規則</strong>：工作空間的「管理員」和「DBA」可以將列設置為不同的脫敏級別。列脫敏規則優先於全局脫敏規則。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-f37ca5c6e716c61e5b7faf61445e88dacc1.png" alt="file" referrerpolicy="no-referrer"></p><ul><li><strong>訪問未脫敏數據</strong>：對於脫敏數據，工作空間的「管理員」和「DBA」可以授予特定用戶訪問未脫敏數據的權限。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-20a2ff4276bc57d8ec25d94d8bd72a0f10e.png" alt="file" referrerpolicy="no-referrer"></p><p>📣 工作空間的「管理員」和「DBA」均為 Bytebase 的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bytebase.com%2Fdocs%2Fconcepts%2Froles-and-permissions%2F" target="_blank">角色</a>。</p><h2>對比</h2><p><img src="https://oscimg.oschina.net/oscnet/up-91ab870f77b13f4a5f0e46cac11ab3a1ef4.png" alt="file" referrerpolicy="no-referrer"></p><p>PostgreSQL Anonymizer 的優勢在於它是在數據庫本身中實現的。因此，無論查詢如何發送到數據庫，數據脫敏規則都會被強制執行。對於 Bytebase 動態數據脫敏，查詢必須通過 SQL 編輯器才會強制執行。</p><p>Bytebase 動態數據脫敏的優勢在於其與所有 PostgreSQL 發行版（和 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkzMjI2MDY5OQ%3D%3D%26mid%3D2247506225%26idx%3D1%26sn%3D71a523fb3059705ad743b766c5193404%26chksm%3Dc25ce705f52b6e13eefc8196cc7c800e36ce7d5e130bb0723d7e849d6f71d8831f9c6098c90b%26scene%3D21%23wechat_redirect" target="_blank">MySQL 發行版</a>🐬）都兼容，且支持細粒度的脫敏策略和訪問權限。只要團隊通過 Bytebase SQL 編輯器來查詢數據庫，那麼 Bytebase 動態數據脫敏可以保障組織敏感數據的安全。</p><p>🔧 歡迎<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkzMjI2MDY5OQ%3D%3D%26mid%3D2247505900%26idx%3D1%26sn%3D46296b29b2bca3d023a3c0fb8f291c70%26chksm%3Dc25ce9d8f52b60ce481827e3bc65ea4dc9eeb13427f8bae6cb7e44e07073cb7d5cbea4b943c7%26scene%3D21%23wechat_redirect" target="_blank">跟着教程</a>來試試 Bytebase 動態數據脫敏。</p><hr><p>💡 更多資訊，請關注 Bytebase 公號：Bytebase</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 02:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/10306946</guid>
            <link>https://my.oschina.net/u/6148470/blog/10306946</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Furion 文檔收費？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>今天訪問 Furion 官網發現它的文檔居然要付費才能看：</p><p><img height="1392" src="https://static.oschina.net/uploads/space/2023/1128/173151_D1kJ_2720166.png" width="2338" referrerpolicy="no-referrer"></p><p>http://furion.baiqian.ltd/docs/saas</p><p>而且還搞了個 499 的 VIP 技術支持服務……</p><p><img height="1858" src="https://static.oschina.net/uploads/space/2023/1128/173121_ZrVP_2720166.png" width="3360" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 09:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268540</guid>
            <link>https://www.oschina.net/news/268540</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
