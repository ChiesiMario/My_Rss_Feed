<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-綜合資訊]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="https://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-綜合資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Wed, 29 Nov 2023 05:58:38 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[恭喜 Devlive DataCap 新晉一位 Committer]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote><p>非常感謝所有對 DataCap 項目的支持和貢獻，我們迎來了新的一位來自互聯網行業的大數據資深運維工程師，感謝他對 DataCap 的支持以及代碼的貢獻。</p></blockquote><h3>關於 DataCap</h3><hr><p>DataCap 是數據轉換、集成和可視化的集成軟件。支持多種數據源，文件類型，大數據相關數據庫，關係型數據庫，NoSQL 數據庫等。通過軟件可以實現管理多種數據源，對該源下的數據進行各種操作轉換，製作數據圖表，監控數據源等各種功能。</p><h3>DataCap 喜迎一位 Committer 成員</h3><hr><table><tbody><tr><th>名字</th><th>職業</th><th>GitHub ID</th></tr></tbody><tbody><tr><td>陳文明</td><td>大數據資深運維工程師</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fchenwenming-zj" target="_blank">chenwenming-zj</a></td></tr></tbody></table><h4>個人描述</h4><hr><p>有多年大數據組件維護經驗，對 Hadoop 集羣有豐富的經驗，同時對 Apache Kafka 以及各個大數據組件有一定的經驗。</p><ol><li>優化過億 Blocks 的 NameNode，優化解決集羣小文件問題，減少 NameNode RPC 壓力</li><li>遷移並運維過 PB 級別的 Hadoop 集羣</li><li>維護管理萬級別 Topic 的 Kafka 集羣，自動化腳本實現分區均衡遷移，Reassignment 限速等</li></ol><h4>對 DataCap 的認識</h4><hr><p>在做公司 Clickhouse 遷移時，從 GitHub 中搜索，發現 datacap 項目，結合公司內部業務，經過一段時間運行後發現缺失，服務功能缺失 JVM 動態加載功能，因為我對 Shell 比較熟悉且做過 JVM 優化工作，特意在源碼中支持了服務啓動讀取 JVM 配置功能。</p><h4>代碼提交之路</h4><hr><ol><li>在 datacap 上提交了相關代碼 (commit 57473faf4f45616a96962b7f84b9b5b81ecfbc42(HEAD-&gt;dev_get_jvm, origin/dev_get_jvm)</li></ol><h4>得到的收穫</h4><hr><ol><li>作為大數據運維,很少參與工程項目，非常榮幸能在 datacap 上貢獻自己微薄的代碼</li><li>這次參與也體會到團隊協助的力量，希望 datacap 做的越來越好</li></ol><h4>對新人的建議</h4><hr><ol><li>上線前整理 checklist</li><li>一定要寫好註釋，方便以後維護，要寫好註釋，可以寫某個方法是做什麼的，主要步驟是什麼</li><li>測試！一定要多測試，先上測試環境，再上線</li><li>新參與項目時，可以多參考官方文檔</li></ol><h4>如何參與 DataCap</h4><hr><ul><li>參考官網 <a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fdatacap.devlive.org%2Fdeveloper_guide%2Fenv.html" target="_blank">開發者文檔</a></li><li>通過 Issues 列表參與 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdevlive-community%2Fdatacap%2Fissues" target="_blank">GitHub</a>&nbsp;&amp;&nbsp; <a href="https://gitee.com/devlive-community/datacap/issues">Gitee</a></li><li>加入我們的微信羣&amp;釘釘羣（在代碼倉庫中可以看到二維碼）</li><li>微信公眾號後台留言（搜索微信公公眾號 <code>devlive-sf</code> 關注，標記 DataCap 項目給我們留言即可）</li></ul></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 04:27:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268646</guid>
            <link>https://www.oschina.net/news/268646</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[兩名玩家利用 DNF 漏洞獲利近 1 億元人民幣，已被公訴]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>日前，南京市玄武區人民檢察院依法對 2 名涉嫌非法獲取計算機信息系統數據罪被告人提起公訴。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-22fa6166d578719921e446311de49657bc3.png" referrerpolicy="no-referrer"></p><p>2022 年 8 月以來，被告人唐某利用深圳市騰訊計算機系統有限公司運營的網絡遊戲《地下城與勇士》個人揹包和倉庫程序的漏洞，使用被告人蔡某某提供的腳本，利用遊戲漏洞非法複製出「矛盾的結晶體」「扭曲的次元結晶」 「無瑕的金綠柱石」 等八種遊戲道具，將所複製的遊戲道具放在多個遊戲公會倉庫內，再進行出售。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-078b174cef4e6dae71ce7917a7f3ddb43e1.png" referrerpolicy="no-referrer"></p><p>2022 年 8 月起，被告人唐某先後向王某某、王某、周某出售非法獲取的遊戲道具，獲利人民幣 9163 萬餘元。被告人蔡某某將被告人唐某複製的遊戲道具出售給王某某，獲利人民幣 182 萬餘元。</p><p><img src="https://oscimg.oschina.net/oscnet/up-855b94f09d04a42b9687726b3241276edaa.jpg" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 03:45:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268643</guid>
            <link>https://www.oschina.net/news/268643</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Jenkins 任務如何遷移到 Zadig 工作流]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-645523f745c4b7ebf67fbdd388751cbe2ff.png" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">我們在「</span><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247491115%26idx%3D1%26sn%3D83e593f77e1aec4d59cee72cca711927%26chksm%3Dcfb4528bf8c3db9de4d0adbe3c0cb15600d35e647c869867dc2e99a599cd7f58ca6208bb4443%26scene%3D21%23wechat_redirect" target="_blank">不想放棄 Jenkins？這麼做也能雲原生</a><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">」一文中詳細描述瞭如何在保留 Jenkins 的前提下，通過 Zadig 快速提升效率和工程師幸福度。然而，儘管這樣做可以取得一些顯著的成果，卻未能實質解決運維人員對系統維護的繁重負擔。實際情況中，Jenkins 的管理和維護存在諸如插件兼容性、內存泄漏、用戶權限管理、腳本維護等多方面的問題，導致運維人員仍需花費大量時間進行系統維護。因此，是否可以完全棄用 Jenkins，並將現有任務全部遷移到 Zadig 上執行呢？</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><strong>答案是肯定的</strong></span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">。Zadig 不僅具備 Jenkins 的全部功能，而且能夠實現軟件開發過程中複雜流程的自動化。</span></p><span id="OSC_h1_1"></span><h1><strong>一、Zadig 工作流到底有何獨特之處？</strong></h1><p style="margin-left:0; margin-right:0">Zadig 工作流引擎起初基於 Kubernetes 原生能力搭建，藉助 Kubernertes 的資源動態分配能力，實現多任務的併發執行，相比 Jenkins 至少可以節省<span>&nbsp;</span><span><strong>50%</strong></span><span>&nbsp;</span>的資源，並可以提高至少<span>&nbsp;</span><strong><span>40%</span></strong><span>&nbsp;</span>的任務執行效率。</p><p style="margin-left:0; margin-right:0">Zadig 工作流的設計更貼合實際業務場景，支持編排產品交付過程中涉及到的任何系統和工具，如：項目管理系統、代碼託管平台、測試平台、部署工具、配置管理工具、數據管理工具、審批系統、企業自建系統等等。Zadig 工作流除了具備 CI 工作流的基本能力（比如克隆代碼、執行 shell 腳本、觸發器、通知、緩存等等）外，支持以下更多能力：</p><ul><li><p style="margin-left:0; margin-right:0"><span>支持多服務共享構建、構建模板、利用 Serverless 資源構建</span></p></li><li><p style="margin-left:0; margin-right:0">支持多服務的併發構建、併發部署、併發測試</p></li><li><p style="margin-left:0; margin-right:0">支持項目管理中的任務狀態變更、配置變更、數據變更</p></li><li><p style="margin-left:0; margin-right:0">支持藍綠髮布、金絲雀發佈、分批次灰度發佈、MSE 全鏈路和 Istio 全鏈路發佈</p></li><li><p style="margin-left:0; margin-right:0">支持發佈過程審批</p></li><li><p style="margin-left:0; margin-right:0">在執行時支持根據實際的分支策略，自由選擇<span>&nbsp;</span><span style="background-color:rgba(0, 0, 0, 0.19)">Branch</span><span style="background-color:#ffffff">、</span><span style="background-color:rgba(0, 0, 0, 0.19)">PR/MR</span>、<span style="background-color:rgba(0, 0, 0, 0.19)">Branch+PR/MR</span>、<span style="background-color:rgba(0, 0, 0, 0.19)">Tag</span>、<span style="background-color:rgba(0, 0, 0, 0.19)">Commit</span><span>&nbsp;</span>方式進行構建</p></li><li><p style="margin-left:0; margin-right:0"><span>......</span></p></li></ul><span id="OSC_h3_2"></span><h3><span style="color:#fd2968">工作流實現方式的細節差異</span></h3><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; box-sizing:border-box; color:rgba(0, 0, 0, 0.9); display:table; font-family:system-ui,-apple-system,&quot;system-ui&quot;,&quot;Helvetica Neue&quot;,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei UI&quot;,&quot;Microsoft YaHei&quot;,Arial,sans-serif; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:0.544px; margin:0px 0px 10px; max-width:100%; orphans:2; outline:0px; overflow-wrap:break-word !important; padding:0px; text-align:justify; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:657px; word-spacing:0px"><tbody><tr><td style="background-color:#ff7faa; border-color:#3e3e3e #f0f9ff #3e3e3e #3e3e3e; border-image:initial; border-style:none solid none none; border-width:0px 1px 0px 0px"><p style="margin-left:0; margin-right:0"><span style="color:#ffffff"><strong>工作流關鍵環節</strong></span></p></td><td style="background-color:#ff7faa; border-color:#3e3e3e #f0f9ff #3e3e3e #3e3e3e; border-image:initial; border-style:none solid none none; border-width:0px 1px 0px 0px"><p style="margin-left:0; margin-right:0"><span style="color:#ffffff"><strong>Jenkins</strong></span></p></td><td style="background-color:#ff7faa; border-color:#3e3e3e #f0f9ff #3e3e3e #3e3e3e; border-image:initial; border-style:none solid none none; border-width:0px 1px 0px 0px"><p style="margin-left:0; margin-right:0"><span style="color:#ffffff"><strong>Zadig</strong></span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>執行環境</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">手工製作環境</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">可擴展雲原生環境及依賴包</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>代碼信息</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">分散配置代碼源</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">統一管理多種代碼來源</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>執行腳本與變量</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">分散編寫腳本</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">統一配置腳本規範</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>定時觸發</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">定時觸發</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">多種可定製觸發策略</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>代碼變更觸發</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">插件代碼觸發</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">海量多種觸發策略</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>工作流間的串接</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">根據工作流狀態觸發</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">服務化靈活編排調度</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>多任務併發執行</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">編寫腳本控制併發</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">雲原生任務 GUI 配置併發</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>任務併發數量控制</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">資源節點控制併發</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">統一管理併發調度策略</span></p></td></tr></tbody></table><p>&nbsp;</p><span id="OSC_h1_3"></span><h1><strong><span style="color:#ff2968">二、如何將 Jenkins 上的配置</span></strong><strong><span style="color:#ff2968">遷移到 Zadig 上</span></strong></h1><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">下面詳細介紹如何將已經在 Jenkins 上的相應配置遷移到 Zadig 上，按照不同的階段拆解遷移的過程。</span></p><span id="OSC_h3_4"></span><h3><span style="color:#fd2968"><strong>比較一：執行環境</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">對於工作流任務依賴的環境，在 Jenkins 上需在對應節點上手工製作，而在 Zadig 上支持管理任務運行時基礎環境和依賴的軟件包，方便平台運維統一管控業務構建、測試等過程使用的基礎資源，保障資源的安全及合規。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 任務的執行環境通過在配置中選擇運行節點來指定，任務執行過程中用到的軟件包需要在對應節點上安裝和管理。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img alt="" src="https://oscimg.oschina.net/oscnet/up-b03a84b1b4a2458670650dacef1c171c016.png" referrerpolicy="no-referrer"></p><p>&nbsp;<span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig 任務的執行環境通過在配置中選擇操作系統和依賴軟件包來指定。</span></p><p><img height="1414" src="https://oscimg.oschina.net/oscnet/up-66a8378c904b5f89d3ee1eb8d897bdb75a2.png" width="2904" referrerpolicy="no-referrer"></p><p><img height="1414" src="https://oscimg.oschina.net/oscnet/up-2683317702faa1d26a984502cad7be11112.png" width="2904" referrerpolicy="no-referrer"></p><p><img height="1414" src="https://oscimg.oschina.net/oscnet/up-2acc8d6572e9822324abf804ba7b27b1fcf.png" width="2904" referrerpolicy="no-referrer"></p><span id="OSC_h3_5"></span><h3><span style="color:#fd2968"><strong>比較二：代碼信息</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">對企業內部使用的代碼源，在 Jenkins 上將其分散在不同的任務中進行管理，而在 Zadig 上由管理員統一集成，以確保代碼源的安全性。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">下面以 GitLab 為例，比對 Jenkins 和 Zadig 上代碼信息的配置。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 通過配置「源碼管理」來實現構建代碼源的定義。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-febe241da9a1686ed0b8f46d3f0f7b21095.png" width="2904" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0">Zadig 支持 GitLab、GitHub、Gerrit、Gitee 、其他通用 Git 代碼源等代碼託管平台的集成，完成集成後可列出代碼庫中有權限的代碼倉庫信息，包括 Branch、PR/MR、Tag 等等，對於開發者更加直觀、體驗更友好。</p><p style="margin-left:0; margin-right:0"><strong><span>·<span>&nbsp;</span></span></strong>步驟 1：集成代碼源。具體過程參考<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fsettings%2Fcodehost%2Fgitlab%2F" target="_blank"><span style="color:#0080ff">GitLab 代碼源集成</span></a><span>&nbsp;</span>[1]</p><p style="margin-left:0; margin-right:0"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-999d1878b4bf86f8d9eea338e6e44eed49c.png" width="2904" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><strong><span>·<span>&nbsp;</span></span></strong><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">步驟 2：任務中配置代碼信息。Zadig 構建、測試、代碼掃描及通用任務均支持拉取代碼信息。</span></p><p style="margin-left:0; margin-right:0"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-d823c5f1fe7a383959d3e9661142357980c.png" width="2904" referrerpolicy="no-referrer"></p><span id="OSC_h3_6"></span><h3><span style="color:#fd2968"><strong>比較三：執行腳本及變量</strong></span></h3><p style="margin-left:0; margin-right:0">對於服務執行腳本和變量的定義，在 Jenkins 上分散在各個任務中進行管理，而在 Zadig 上可以通過構建模版來標準化服務的構建過程，降低運維管理的負擔。</p><p style="margin-left:0; margin-right:0">下面以一個多服務的代碼倉庫的構建並推送鏡像為例，比較 Jenkins 腳本編寫和 Zadig 腳本編寫的差異。</p><p style="margin-left:0; margin-right:0">Jenkins 執行腳本及變量如下圖所示，腳本中主要進行服務構建、鏡像構建以及鏡像推送過程。其中 $SERVICE、$VERSION、$PWD 變量需要在配置中定義。</p><p style="margin-left:0; margin-right:0"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-38c673bada87035ad70e58c24f0e028dd21.png" width="2904" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-ae40af20e6b1b72caaf08dd2bc574e43e05.png" width="2904" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig 執行腳本及變量如下圖所示，Zadig 構建內置 $SERVICE、$IMAGE 變量，腳本更加簡潔。</span></p><p style="margin-left:0; margin-right:0"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-29b021813c3330edbc16205166a2a0f7d25.png" width="2904" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-c151777d9c835d19a639bed96ea643e76c6.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">兩者之間的差異：</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">1. Zadig 任務執行過程中根據工作流配置的鏡像倉庫自動完成<span style="background-color:rgba(0, 0, 0, 0.19)"><span>&nbsp;</span>docker login<span>&nbsp;</span></span>操作，所以無需在腳本中聲明。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">2. 在 Zadig 中鏡像命名規則支持統一配置和管理，具體可參考<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fproject%2Fservice%2Fk8s%2F%23%E7%AD%96%E7%95%A5%E9%85%8D%E7%BD%AE" target="_blank"><span style="color:#0080ff">文檔</span></a><span>&nbsp;</span>[2]，所以無需在腳本中定義<span style="background-color:rgba(0, 0, 0, 0.19)"><span>&nbsp;</span>IMAGE<span>&nbsp;</span></span>變量的生成規則。</p><span id="OSC_h3_7"></span><h3>&nbsp;</h3><span id="OSC_h3_8"></span><h3><span style="color:#fd2968"><strong>比較四：定時觸發</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">工作流任務的定時執行場景比較常見，Jenkins 針對工作流任務的默認參數可以配置定時觸發，而 Zadig 上除了可以指定觸發時間週期外，還支持配置任務的執行變量，更加靈活。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 觸發器支持配置 Cron 表達式來定時觸發任務。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1428" src="https://oscimg.oschina.net/oscnet/up-916400c25cec910faaf5caa14f50bb82bb0.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig 定時器支持多種觸發方式，包括定時循環、間隔循環和 Cron 表達式，以滿足各種定時觸發的需求。此外，相較於 Jenkins 使用默認參數執行，Zadig 定時器允許配置不同的工作流執行變量，提供更靈活的定製選項。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1428" src="https://oscimg.oschina.net/oscnet/up-5a857454ef740f8ecc70b00f4ebc517306b.png" width="2904" referrerpolicy="no-referrer"></p><span id="OSC_h3_9"></span><h3>&nbsp;</h3><span id="OSC_h3_10"></span><h3><span style="color:#fd2968"><strong>比較五：代碼變更觸發</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">開發者提交代碼自動觸發工作流執行是持續集成和持續部署（CI/CD）中常見的實踐。在 Jenkins 中，為實現這一需求，需要依賴插件。相比之下，Zadig 則內建 Git 觸發器功能，無需額外插件，通過靈活的配置滿足各種觸發場景，從而提升整體效率。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 可以通過安裝插件實現代碼變更觸發任務的執行。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1428" src="https://oscimg.oschina.net/oscnet/up-8969ed3234ff36d444ddfcb159cb3ac0191.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig Git 觸發器支持代碼變更觸發，通過定義代碼信息、觸發事件、代碼文件目錄以及工作流執行變量，來配置觸發規則。這使得在代碼庫發生變更時，可以靈活而精準地觸發相應的工作流，以滿足各種複雜的自動化流程的執行。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1444" src="https://oscimg.oschina.net/oscnet/up-0b6f382446af82a670dc25d831d63126c0a.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">除了上述兩種觸發器，Zadig 還支持多種其他觸發器，包括「JIRA 觸發器」、「飛書項目觸發器」和「通用觸發器」等，使用詳情參考</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fproject%2Fworkflow-trigger%2F" target="_blank"><span style="background-color:#ffffff; color:#0080ff">文檔</span></a><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><span>&nbsp;</span>[3]。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><span id="OSC_h3_11"></span><h3><span style="color:#fd2968"><strong>比較六：工作流之間的串接編排</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">企業內部對於一些服務化的任務，例如安全掃描服務，需要進行統一管理並在多個工作流中使用。通常，這些任務由安全部門或平台團隊進行統一管理，然後在各個業務工作流中進行調用。為了降低實施和後續維護的負擔，一般選擇採用多工作流串接的方式，以實現更高效的任務調度和管理。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 通過配置「構建其他工程」來觸發其他任務。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1432" src="https://oscimg.oschina.net/oscnet/up-6af1ce2aae3f7eeb01d1a3f2b037c0589c9.png" width="2936" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig 的工作流本身採用了服務化的設計，使得測試、代碼掃描等配置可以實現集中化的管理，然後輕鬆掛接到各個工作流中使用。這種設計使得配置和管理變得更加高效，同時在不同的工作流中靈活地應用這些服務，提高了整體工作流的可維護性和可擴展性。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1432" src="https://oscimg.oschina.net/oscnet/up-5dd0db5d0c2484d09a8fe71af3c8ab26fd2.png" width="2936" referrerpolicy="no-referrer"></p><span id="OSC_h3_12"></span><h3>&nbsp;</h3><span id="OSC_h3_13"></span><h3><span style="color:#fd2968"><strong>比較七：多任務併發執行</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">多任務併發執行在複雜的軟件開發流程、持續集成和部署中尤為關鍵。這能夠顯著減少工程師的等待時間，提高整體研發效率，從而加速項目進程，更靈活地應對不斷變化的需求。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 流水線支持不同的 "stage" 併發執行，詳細配置請參考以下結構。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="582" src="https://oscimg.oschina.net/oscnet/up-3be3980e313fc5d5e0caa6dfb825822a50a.png" width="822" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig 工作流僅需在「階段」上打開「併發執行」的開關，即可實現階段內多個任務的併發執行。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1432" src="https://oscimg.oschina.net/oscnet/up-df878ddc393fe89803cc5ccd6adb4fbc5c8.png" width="2936" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1432" src="https://oscimg.oschina.net/oscnet/up-19fbbbb66f8dfb1f131220b679faf5efc10.png" width="2936" referrerpolicy="no-referrer"></p><span id="OSC_h3_14"></span><h3>&nbsp;</h3><span id="OSC_h3_15"></span><h3><span style="color:#fd2968"><strong>比較八：任務併發數量控制</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 和 Zadig 均支持同一工作流的多個任務併發執行。Jenkins 通過資源節點來控制併發數量，而 Zadig 則統一管理併發調度策略，具有靈活控制任務優先級能力。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 通過在節點上配置「任務執行數量」來控制多個任務的併發，單個 Jenkins 任務的併發可以在任務配置中指定。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1418" src="https://oscimg.oschina.net/oscnet/up-16aee0879ad6a67f8bb0a2a8f6d9e645af0.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-2a9a5bef154eeb56b5410d206a91d0bbb51.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig 通過在任務配置中修改「任務併發數量設置」實現併發數控制，其中「工作流任務併發數量」控制同時執行的工作流任務數，「單任務服務併發數」控制同一個工作流任務中服務的併發數量。除此之外，面對低優先級任務佔用全局併發數量的場景，可以通過配置工作流的「執行併發數」來解決。Zadig 具有更自由的任務併發數控制，能夠靈活應對企業內部複雜的任務併發場景。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1418" src="https://oscimg.oschina.net/oscnet/up-4acde3574c2e0b7e1f4d8fad7f01f629f9f.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1418" src="https://oscimg.oschina.net/oscnet/up-e7872ba2b6aec2838c8c1ad71c7ccdc7f78.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">除以上能力外，Jenkins 通過插件來擴展更多的能力，而 Zadig 可以通過開發「自定義任務」，和企業自建系統打通，來滿足企業複雜流程，具體開發過程參考</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fsettings%2Fcustom-task%2F" target="_blank"><span style="background-color:#ffffff; color:#0080ff">文檔</span></a><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><span>&nbsp;</span>[4]。</span></p><span id="OSC_h4_16"></span><h4><strong>參考鏈接</strong></h4><p style="margin-left:0; margin-right:0; text-align:left"><span>[1]&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fsettings%2Fcodehost%2Fgitlab%2F" target="_blank"><span style="color:#0080ff">https://docs.koderover.com/zadig/settings/codehost/gitlab/</span></a></p><p style="margin-left:0; margin-right:0; text-align:left"><span>[2]&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fproject%2Fservice%2Fk8s%2F%23%E7%AD%96%E7%95%A5%E9%85%8D%E7%BD%AE" target="_blank"><span style="color:#0080ff">https://docs.koderover.com/zadig/project/service/k8s/#策略配置</span></a></p><p style="margin-left:0; margin-right:0; text-align:left">[3]&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fproject%2Fworkflow-trigger%2F" target="_blank"><span style="color:#0080ff">https://docs.koderover.com/zadig/project/workflow-trigger/</span></a></p><p style="margin-left:0; margin-right:0; text-align:left">[4]&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fsettings%2Fcustom-task%2F" target="_blank"><span style="color:#0080ff">https://docs.koderover.com/zadig/settings/custom-task/</span></a></p><p style="margin-left:0px; margin-right:0px; text-align:center">&nbsp;</p><p style="margin-left:0px; margin-right:0px; text-align:center"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">立即體驗 Zadig V2.0 新架構，開啓高效交付之旅！🚀&nbsp;</span></p><p style="margin-left:0px; margin-right:0px; text-align:center"><strong><span style="color:#ff2968">Zadig 開放，鏈接，專業</span></strong></p><p style="margin-left:0px; margin-right:0px; text-align:center"><strong><span style="color:#ff2968"><img alt="" src="https://oscimg.oschina.net/oscnet/up-b3270466a68bf98a90c5d08b91cd0ebc98c.png" referrerpolicy="no-referrer"></span></strong></p><p style="margin-left:0px; margin-right:0px; text-align:center">&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center">&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkoderover%2Fzadig" target="_blank">Zadig 在 Github</a>&nbsp;/&nbsp;<a href="https://gitee.com/koderover/zadig">Zadig 在 Gitee</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><strong>推薦閲讀：</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247490415%26idx%3D1%26sn%3D1914c7fd25aac5d33b98663571bbb744%26chksm%3Dcfb457cff8c3ded9c02809aad88012fa802eac55222eebe70b8c637ca2c86a101045aa81e73a%26scene%3D21%23wechat_redirect" target="_blank">是時候和 Jenkins 説再見了</a>&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247491115%26idx%3D1%26sn%3D83e593f77e1aec4d59cee72cca711927%26chksm%3Dcfb4528bf8c3db9de4d0adbe3c0cb15600d35e647c869867dc2e99a599cd7f58ca6208bb4443%26scene%3D21%23wechat_redirect" target="_blank">不想放棄 Jenkins？這麼做也能雲原生</a>&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247491064%26idx%3D1%26sn%3D4bbe7bfe944feaa8b44a08e6156e04e2%26chksm%3Dcfb45158f8c3d84e40d44d2dd9228a844b9bcdeea1fe32a7b0ae41b9af982c11319a38f6675e%26scene%3D21%23wechat_redirect" target="_blank">Zadig 推出環境睡眠，平均節省一半測試資源</a>&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center">&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247490637%26idx%3D1%26sn%3D6e0498b37fb15f8b8903c4997e5611d8%26chksm%3Dcfb450edf8c3d9fb758d691081f09fd85d91dbb17534ba9c18c2300725462d3806581efbd237%26scene%3D21%23wechat_redirect" target="_blank">Zadig vs. Jenkins 詳細比對：時代的選擇與開發者之選</a>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 03:45:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/koderover/blog/10314033</guid>
            <link>https://my.oschina.net/koderover/blog/10314033</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Java 8 仍被廣泛使用，佔比 50%]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000"><span style="background-color:#ffffff">JetBrains&nbsp;最新發布的 2023 年度開發者生態系統調查報告指出，在面向 Java 開發者的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.jetbrains.com%2Flp%2Fdevecosystem-2023%2Fjava%2F" target="_blank">調查</a>中，</span>更多的開發人員選擇在生產中使用 Java 17，而不是 Java 11。Docker 逐漸成為打包 Web 應用程序的首選，且 Spring 和 Spring Boot 的使用率遙遙領先。</span></p><p><span style="color:#000000">具體而言，開發者最常使用的&nbsp;Java 版本是&nbsp;Java 8，佔比高達&nbsp;50%；其次分別是&nbsp;Java 17 (45%)、Java 11(38%) 以及&nbsp;Java 20 (11%)。</span></p><p><span style="color:#000000">「很遺憾看到這麼多人仍在使用 Java 8（及更舊的版本）。我想知道是什麼阻礙了他們升級到更新的版本並獲得強大的新語言功能，以及我們如何幫助他們將代碼遷移到更新的 Java 版本。」</span></p><p><img height="356" src="https://oscimg.oschina.net/oscnet/up-d79d8c2307c0972948764928b7719266a39.png" width="300" referrerpolicy="no-referrer"></p><p>其他一些發現包括：</p><ul><li><span style="color:#000000">58% 的受訪者表示，他們打包 Web 應用程序的方式是&nbsp;Docker，還有 56% 使用的是<span style="background-color:#ffffff">嵌入式服務器。</span></span></li><li>最常用的是單元測試框架是&nbsp;JUnit，以 84% 的佔比穩居首位。</li><li><span style="color:#000000">Web 框架方面，72</span>% 開發者正在使用&nbsp;Spring Boot。</li><li>Java EE 8 / Jakarta EE 8 使用率為 33%，Jakarta EE 10 以 10% 的使用率超過了 Jakarta EE 9 的 7%。</li><li>Java 開發中使用最多的&nbsp;IDE/編輯器是 IntelliJ IDEA，佔比 78%。</li><li><span style="background-color:#ffffff; color:#19191c">JavaScript、SQL、Python 和 HTML / CSS 是那些使用 Java 作為主要語言之一的人中最常用的語言和技術。</span></li></ul><p><img height="184" src="https://oscimg.oschina.net/oscnet/up-7a087c1c4d8482dffc48bd3f1d157872f49.png" width="500" referrerpolicy="no-referrer"></p><p>更多詳情可查看<strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.jetbrains.com%2Flp%2Fdevecosystem-2023%2Fjava%2F" target="_blank">此處</a></strong>。</p><p><strong>相關閲讀：</strong></p><ul><li style="text-align:start"><a href="https://www.oschina.net/news/267606/jetbrains-devecosystem-2023" target="_blank">JetBrains 報告：Scala/Go/Kotlin 薪酬最高，Objective-C 日薄西山</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 03:21:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268636/devecosystem-2023-java8</guid>
            <link>https://www.oschina.net/news/268636/devecosystem-2023-java8</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[滴滴史上最嚴重服務故障，罪魁禍首是底層軟件 or 「降本增笑」？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>2023 年 11 月 27 日晚間，<u><a href="https://www.oschina.net/news/268480">滴滴因系統故障導致 App 服務異常</a></u>，不顯示定位且無法打車。11 月 27 日晚，滴滴出行進行了回覆：非常抱歉，由於系統故障。</p><p>2023 年 11 月 28 日早間，滴滴出行消息稱，網約車等服務已恢復，騎車等在陸續修復中。11 月 28 日，在滴滴發出公告的同時，記者在上海、深圳等地使用滴滴呼叫網約車，發現網約車功能並未恢復使用，網絡加載異常，仍無法打車。11 月 28 日，滴滴向記者回應稱，網約車服務已恢復，司機乘客權益陸續恢復補發。</p><p><strong>11 月 29 日，滴滴再次發文致歉，稱初步確定事故起因是底層系統軟件發生故障</strong>。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-de730d329966eb2d4a658c5008f11be82a7.png" referrerpolicy="no-referrer"></p><p>來源：<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F2838754010%2FNuMAAaUEl" target="_blank">https://weibo.com/2838754010/NuMAAaUEl</a></em></u></p></blockquote><p>在滴滴官方發佈這份公告之前，已經有資深 IT 技術人士分析：「從表現上看，打車、共享單車全掛，不同的業務板塊之間應該是有隔離的，説明問題出在更加底層的基礎設施。攻擊者一般只能訪問到應用層，基礎設施訪問不到。要麼是被攻擊者打穿，要麼是自己系統操作不慎掛了。即便是前者，也算是一種系統缺陷，才會被打穿。」</p><p>360 安全專家認為，滴滴閃崩背後的技術原因可能有六種：</p><p>第一，系統更新升級過程中出現了編程錯誤、邏輯錯誤或未處理的異常情況：一般情況下，互聯網廠商發佈更新都會在晚上，與滴滴發生故障的時間也能對應，當然業務升級維護是放量更新，但現在滴滴全平台、全業務都故障了，説明肯定是他「家裏」的問題。</p><p>第二，服務器故障：比如滴滴的核心機房，可能恆溫恆濕環境出了問題，導致服務器過熱、CPU 燒了，或者核心機房所在地發生了自然災害如地震、洪水、海嘯等，這種情況下，硬件需要重新更換，裏面的服務軟件也需要重新配置，恢復週期相對較長，但這個可能性比較小。</p><p>第三，第三方服務故障：滴滴的後台架構可能使用了第三方服務或者組件。如果第三方出了問題，也可能會影響滴滴的正常運行。但出於安全性考慮，滴滴可能不會將核心業務託管給第三方，不過這個可能性也較小。</p><p>第四，DDOS 攻擊：黑客採用分佈式拒絕服務的方式，搶佔了大量的服務器資源，導致用戶無法訪問，但這個不太可能，因為 DDos 不會導致數據出錯，而且滴滴從體量上來説，有足夠的成本和能力去對抗。</p><p>第五，其他網絡攻擊：某些黑灰產團夥可能會通過拖庫盜取數據，然後在暗網上售賣，在這個過程中不排除會有誤操作，破壞了數據庫。</p><p>第六，勒索病毒：網絡攻擊黑客對滴滴的底層數據、業務代碼進行了加密。據披露現象，用戶的賬單和打車數據都算錯了，存在一定可能是滴滴為了避免更大損失主動暫停了業務。近期勒索攻擊事件屢屢發生，月初，某金融機構就是因為遭遇勒索病毒攻擊造成了業務停擺。</p><p>不過也有網絡安全公司專家認為，如果是來自外部的黑客攻擊，公司一般會在第一時間進行聲明。他猜測更集中於滴滴發生了內部重大業務調整，或有新業務接入原系統，但沒有做好預案，導致關聯業務或關聯繫統出現重大故障，這是大公司系統故障最常見的原因。</p><p>因此對於滴滴此次大規模的長時間故障，有行業人士認為，<strong>降本增效可能也是原因之一</strong>。</p><p>該人士認為，<strong>互聯網公司核心業務頻繁宕機，且長時間宕機，是降本增效的附屬品之一。系統投資少了，維護資源少了，程序員更換頻繁了，BUG 就多</strong>。</p><p>他舉例稱，一般在業務上行階段都有冗餘，為了迎接隨時爆發的訂單，上行階段要維持負載的上限不能過大，比如平時 70%，這樣遇到一個小爆發不用擔心會出問題，足以應對小高峯；但是下行期的邏輯就不同了，負載很高的時候抗一抗就行了，雖然後面遇到小高峯可能會難受，但是隨着時間的推移總體負載會下降。</p><hr><p>最後來看一下網傳的消息，有同行説滴滴這次嚴重故障是 K8S 的問題導致，當時 SRE 工程師定位了三個小時沒定位到。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/1129/113103_VOdZ_2720166.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-9c6757d79e017225bd7d61ecc642362132f.png" referrerpolicy="no-referrer"></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 03:14:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268635</guid>
            <link>https://www.oschina.net/news/268635</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[周鴻禕：「360 無法卸載」是徹底的謠言]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>俞敏洪在公眾號更新了與周鴻禕的採訪對話。對話中雙方聊到了大眾對 360 的誤解，<strong>周鴻禕表示，360 不能卸載是一個徹底的謠言。</strong></p><blockquote><p><img height="1206" src="https://static.oschina.net/uploads/space/2023/1129/110144_gNAL_2720166.png" width="1480" referrerpolicy="no-referrer"></p><p>來源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fpd2R8Y5Q6HtYODNfRvcbnA" target="_blank">https://mp.weixin.qq.com/s/pd2R8Y5Q6HtYODNfRvcbnA</a></u></em></p></blockquote><p>周鴻禕稱，因為 360 提供了完整的卸載過程。有的小朋友總是試圖用一個 Windows 的刪除想把 360 的目錄刪掉，這樣其實是刪不掉的，所以大家就會有一個錯誤的印象，好像 360 刪不掉。</p><p>但是你想，360 在電腦上是起保護作用的，最恨 360 的是什麼？是各種黑產、黑客，現在無論是國外的網軍做攻擊，還是國內的勒索軟件做攻擊，因為 360 裝的太廣，所以他們很重要的一個任務就是想辦法讓 360 失效，要不然 360 一報警他們就出問題了，<strong>所以你隨便用一個 Windows 做一個拖拽，把它移垃圾箱裏肯定是不行的</strong>。</p><p>甚至<strong>現在很多國外的攻擊軟件試圖調動 360 自己刪自己的過程，因為 360 提供了自己卸載自己的能力，所以在用戶卸載的時候，我們要區別是用戶真的在卸載，還是被攻擊了模擬用戶在卸載</strong>，因為很多軟件可以模擬用戶的操作。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-75c92d5bced77262bd78834927c10f9975c.png" referrerpolicy="no-referrer"></p><p>我們為了做自我保護，可能有一個比較煩瑣的提示過程，就是這樣以訛傳訛，好像就變成了 360 不能卸載，這是一個徹底的謠言。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 02:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268632</guid>
            <link>https://www.oschina.net/news/268632</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[RHEL 10 將移除 X.org，默認使用 Wayland]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/news/240614/rhel10-deprecated-xorg-server">根據此前的報道</a></u>，RHEL 9 已經標記將棄用 X.org 顯示服務器。現在紅帽官方<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.redhat.com%2Fde%2Fblog%2Frhel-10-plans-wayland-and-xorg-server" target="_blank">正式宣佈</a></u>，計劃於 2025 年上半年發佈的&nbsp;<strong>RHEL 10 將移除 X.org，默認使用 Wayland</strong>。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-1d62539558b9d502f364802ade1ca24877d.png" referrerpolicy="no-referrer"></p></blockquote><p>Red Hat 工程經理 Carlos Soriano Sanchez 説道：「從 X Window System 到 Wayland 的過渡已經持續了 15 年。Red Hat 從一開始就參與其中。隨着時間的推移，人們發現 X11 協議和 X.org 服務器存在需要解決的基礎問題，而 Wayland 就是解決方案。如今，Wayland 已被公認為事實上的窗口和顯示基礎設施解決方案。」</p><p>他還表示，「Xorg Server」和「X11」不是同義詞，X11 是一個通過 Xwayland 支持的協議，而 Xorg Server 是 X11 協議的實現之一。雖然 RHEL 10 默認使用 Wayland，但 X11 客戶端支持可通過 XWayland 來實現。</p><p>因此，RHEL 10 將使用 Xwayland 處理絕大部分尚未移植到 Wayland 的 X11 客戶端。但如果用戶必須 X.org，可以在其軟件生命週期內繼續用 RHEL 9。</p><p>Red Hat 認為，這一決定將使他們能夠專注於現代化的軟件棧和生態，解決諸如 HDR、增強安全性、混合低密度和高密度顯示設置、更好的 GPU/顯示器熱插拔、更好的手勢和滾動等問題。</p><p>有人認為，Red Hat 這一決策基本上是在宣佈&nbsp;<strong style="color:#121212"> X.Org Server 事實上已死亡。</strong>因為 Red Hat 工程師通常負責管理新的 X.Org Server 版本以及進行各種開發。除了 XWayland 之外，他們已多年沒有發佈過重要 X.Org Server 版本更新。而且除了推出安全修復程序或嚴重的錯誤修復程序之外，沒有人主動管理新功能版本甚至點版本。</p><p>到 2025 年，除了為 RHEL9 客戶提供安全/錯誤處理之外，Red Hat 將更不願意為 X.Org Server 投入開發資源。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 02:38:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268629/rhel-10-plans-wayland-and-xorg-server</guid>
            <link>https://www.oschina.net/news/268629/rhel-10-plans-wayland-and-xorg-server</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Linux 內核安全架構 & 軟件包構建方案 | 2023-11 月 WHLUG 回顧]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>2023 年 11 月 26 日下午，由 deepin 社區主辦的武漢 Linux 用戶組沙龍（WHLUG）在新青年創客咖啡舉行，吸引了來自武漢地區諸多 Linux 愛好者線下參與，10 餘名外地夥伴線上參與，大家共同探討技術話題，分享技術經驗和見解，現場氣氛熱烈。現在就讓我們一起來回顧本次活動的精彩瞬間吧！</p><p style="text-align:center"><img src="https://storage.deepin.org/thread/202311281539076258_%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17011569946326.png" referrerpolicy="no-referrer"></p><p>本次沙龍上，內核研發工程師 Avenger_285714 為大家分享了 Linux 內核安全框架相關內容。Avenger_285714 詳細介紹了當前內核所包含的 SELinux 安全子系統、Apparmor、Smack、Tomoyo 等安全模塊，以及 IMA 完整性校驗的原理和可用於不可變發行版的 loapin 模塊。同時分享了統信自研的內核安全機制：UOS Security Kernel Interface 和 elfverify 應用程序簽名、filearmor 文件保護和 SELinux 擴展，並與在場的小夥伴們討論了基於 inode 和基於路徑的安全措施之間的優劣及其應用前景。</p><p style="text-align:center"><img src="https://storage.deepin.org/thread/202311281539468047_%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17011570901113.png" referrerpolicy="no-referrer"></p><p>隨後，Shiroko 為大家展示了他近期新「折騰」出來的打包工具 ShiroDEB。據 Shiroko 介紹，ShiroDEB 作為一種軟件包構建方案，由構建工具和構建腳本組成。</p><p>為瞭解決依賴版本不同的問題，ShiroDEB 還可通過構建素材的形式將自建庫或其他工具容納到構建流程中，並會自動創建包含了自建庫等的軟件包。此外，也提供了一個可以調用構建素材的交互終端以供開發者使用。期待能夠接收社區用戶貢獻的構建腳本，形成屬於社區的用戶軟件倉庫。</p><p>項目地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fshirodeb" target="_blank">https://github.com/shirodeb</a>&nbsp;</p><p style="text-align:center"><img src="https://storage.deepin.org/thread/202311281540109947_%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17011570644077.png" referrerpolicy="no-referrer"></p><p>WHLUG 的創辦希望能夠幫助 Linux 社區的每一個人都可以充分地交流經驗和心得，本月活動的主題分享資料已經上傳至 Github，供大家下載：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fshirodeb" target="_blank">https://github.com/deepin-community/.WHLUG/tree/master/WHLUG-2023.11</a></p><p>我們期待 12 月的活動能夠聚集更多的愛好者！如果你有興趣在 WHLUG 上做分享，或是有更多意見和建議讓 WHLUG 變得更好，請告訴我們吧！</p><p style="text-align:center"><img src="https://storage.deepin.org/thread/202311281614425541_1.jpeg" referrerpolicy="no-referrer"></p><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 02:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268627</guid>
            <link>https://www.oschina.net/news/268627</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[高手問答第 310 期 —— 軟件發展史上那些不為人知的故事]]>
            </title>
            <description>
                <![CDATA[<h1 class="header article-title"><a href="https://www.oschina.net/question/4855753_2331437">高手問答第 310 期 —— 軟件發展史上那些不為人知的故事</a></h1><div class="extra ui horizontal list meta-wrap"><div class="item"><a href="https://my.oschina.net/u/4855753" class="__user"><span>OSC 噠噠</span></a><span class="org-label org-label--simple primary" data-tooltip="認證官方賬號"><i class="oicon oicon-org"></i></span> 發佈於，昨天 14:26
                    </div><div class="item">閲讀 244</div><div class="item collect-btn " data-id="2331437" data-user-id="4855753" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i> 收藏 <span data-collect-count="" data-id="2331437" data-obj-type="2">0</span></div><div class="item comment-count"><a href="https://www.oschina.net/question/4855753_2331437#comments" class="normal"><i class="comment outline icon"></i> 答案 <span data-article-reply-count="">2</span></a></div></div><div class="tags"><a class="ui horizontal label" href="https://www.oschina.net/question/topic/masteronline" target="_blank"><img src="https://static.oschina.net/uploads/logo/masteronline_9WTeU.png" referrerpolicy="no-referrer">高手問答</a></div><div class="content" id="articleContent"><p><span><span><span><span>今天的世界是運行在軟件之上的。偉大的軟件不是一朝一夕發明出來的，而是人類文明長期積累的結果。可以</span></span><span><span>説</span></span><span><span>，軟件文明就是人類文明在電氣化時代的延續。那麼軟件發展史上有哪些關鍵事件和不為人知的故事呢？</span></span></span></span></p><p><strong><span><span><span><span>本期高手問答我們一起探討「軟件發展史上那些不為人知的故事」，做客高手問答的嘉賓是新書《軟件簡史》的作者<a href="https://my.oschina.net/u/6992678" rel="nofollow">張銀奎</a>老師。</span></span></span></span></strong></p><p><span style="background-color:#ffffff; color:#000000">可討論的問題包括但不限於：</span></p><ul><li><span><span><span><span>世界上第一個計算機程序是怎麼誕生的？</span></span></span></span></li><li><span><span><span><span>兩位現代計算機之父圖靈與馮·諾依曼有哪些交集和故事？</span></span></span></span></li><li><span><span><span><span>古老的提花織布機與計算機之間有什麼淵源？</span></span></span></span></li><li><span><span><span><span>在 ENIAC 出現之前，還有更早的計算機嗎？</span></span></span></span></li><li><span><span><span><span>最早的內存採用的是什麼技術？</span></span></span></span></li></ul><p><span><span><span><span>有其他相關的問題，也歡迎提問。</span></span></span></span></p><hr><h2>嘉賓介紹</h2><p><span><span><strong><span><span><strong>張銀奎</strong></span></span></strong><span><span>&nbsp;，國內知名的調試技術專家。畢業於上海交通大學信息與控制工程系，長期從事軟件開發和研究工作，曾在英特爾工作 13 年，對 IA-32 架構、操作系統內核、驅動程序，尤其是對軟件調試有較深入的研究。著有暢銷書《軟件調試》《格蠹彙編》等，格蠹科技（nanocode.cn）創始人，高端調試網站（advdbg.org）創建者。翻譯（合譯）作品有《二十一世紀機器人》《觀止——微軟創建 NT 和未來的奪命狂奔》《數據挖掘原理》《機器學習》《人工智能：複雜問題求解的結構和策略》等。</span></span></span></span></p><p><span><span><span><span><img alt="" height="334" src="https://oscimg.oschina.net/oscnet/up-6c20792bfc000c6d2385b84b080ce1a071b.png" width="500" referrerpolicy="no-referrer"></span></span></span></span></p><p><span><span><span><span>為鼓勵踴躍提問，我們會在問答結束後從提問者中抽取 3 名幸運會員贈予《</span></span><span><span>軟件簡史</span></span><span><span>》（上下冊）。</span></span></span></span></p><p><span><span><span><span><img alt="" height="328" src="https://oscimg.oschina.net/oscnet/up-4b1d01a7d62014760f9f4ba80aa1440ef55.png" width="250" referrerpolicy="no-referrer"></span></span></span></span></p><p><span><span><span><span>《</span></span><span><span>軟件簡史</span></span><span><span>》天貓有售：</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdetail.tmall.com%2Fitem.htm%3Fid%3D750806496720" rel="nofollow" target="_blank"><span><span>https://detail.tmall.com/item.htm?id=750806496720</span></span></a></span></span></p><p><span><span><span><span>OSChina 高手問答一貫的風格，不歡迎任何與主題無關的討論和噴子。</span></span></span></span></p><p><span><span><span><span>下面歡迎大家向 <a href="https://my.oschina.net/u/6992678" rel="nofollow">張銀奎</a> 老師積極提問，直接回帖提問即可。</span></span></span></span></p></div><div class="poll-wrap"></div><div class="additional-remarks"></div><div class="ui basic center aligned segment action"><div class="ui big buttons"><a class="ui basic button collect-btn hover" data-id="2331437" data-user-id="4855753" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i>收藏 (<span data-collect-count="" data-id="2331437" data-obj-type="2">0</span>)</a><div class="ui basic dropdown share button osc-share dropdown-share" data-tag="share-question"><i class="share icon"></i><span>分享</span><div class="menu"><a class="item" data-platform="weibo" data-value="weibo"><i class="weibo icon"></i>微博</a><a class="item" data-platform="qq" data-value="qq"><i class="qq icon"></i>QQ</a><a class="item" data-platform="wechat" data-value="wechat"><i class="weixin icon"></i>微信</a></div></div></div><div class="ui basic segment"><a class="ban" ban-report="" data-id="2331437" data-obj-type="2" data-url="https://www.oschina.net/question/4855753_2331437"><i class="flag red icon"></i>舉報</a></div></div>
            ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 02:27:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/question/4855753_2331437</guid>
            <link>https://www.oschina.net/question/4855753_2331437</link>
        </item>
        <item>
            <title>
                <![CDATA[Builder —— 拖放式 Headless CMS]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Builder 是一個適用於 React、Vue、Svelte、Qwik 等的拖放式&nbsp;headless CMS。與任何網站或應用程序集成，使用代碼庫中已有的組件進行拖放。</p><p><img alt="" height="415" src="https://static.oschina.net/uploads/space/2023/1127/145541_fgX7_4252687.gif" width="500" referrerpolicy="no-referrer"></p><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; box-sizing:border-box; color:#1f2328; display:block; font-family:-apple-system,BlinkMacSystemFont,&quot;Segoe UI&quot;,&quot;Noto Sans&quot;,Helvetica,Arial,sans-serif,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin-bottom:16px; margin-top:0px; max-width:100%; orphans:2; overflow:auto; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:max-content; word-spacing:0px"><tbody><tr><td style="border-style:solid; border-width:1px">Register components</td><td style="border-style:solid; border-width:1px">Rendered your visually created content</td></tr><tr><td style="border-style:solid; border-width:1px"><div><pre><span style="color:var(--color-prettylights-syntax-keyword)">import</span><span>{</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">Builder</span><span>}</span><span style="color:var(--color-prettylights-syntax-keyword)">from</span><span style="color:var(--color-prettylights-syntax-string)">'@builder.io/react'</span>
&nbsp;
<span style="color:var(--color-prettylights-syntax-comment)">// Register our heading component for use in</span><span style="color:var(--color-prettylights-syntax-comment)">// the visual editor</span><span style="color:var(--color-prettylights-syntax-keyword)">const</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">Heading</span><span style="color:var(--color-prettylights-syntax-constant)">=</span><span>props</span><span style="color:var(--color-prettylights-syntax-constant)">=&gt;</span><span>(</span><span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-entity-tag)">h1</span><span style="color:var(--color-prettylights-syntax-constant)">className</span><span style="color:var(--color-prettylights-syntax-constant)">=</span><span style="color:var(--color-prettylights-syntax-string)">"my-heading"</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span><span>{</span><span>props</span><span>.</span><span style="color:var(--color-prettylights-syntax-constant)">title</span><span>}</span><span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-constant)">/</span><span style="color:var(--color-prettylights-syntax-entity-tag)">h1</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span><span>)</span>
&nbsp;
<span style="color:var(--color-prettylights-syntax-storage-modifier-import)">Builder</span><span>.</span><span style="color:var(--color-prettylights-syntax-entity)">registerComponent</span><span>(</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">Heading</span><span>,</span><span>{</span>
&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">name</span>: <span style="color:var(--color-prettylights-syntax-string)">'Heading'</span><span>,</span>
&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">inputs</span>: <span>[</span><span>{</span><span style="color:var(--color-prettylights-syntax-constant)">name</span>: <span style="color:var(--color-prettylights-syntax-string)">'title'</span><span>,</span><span style="color:var(--color-prettylights-syntax-constant)">type</span>: <span style="color:var(--color-prettylights-syntax-string)">'text'</span><span>}</span><span>]</span><span>}</span><span>)</span></pre><div>&nbsp;</div></div></td><td style="border-style:solid; border-width:1px"><div><pre><span style="color:var(--color-prettylights-syntax-keyword)">import</span><span>{</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">BuilderComponent</span><span>,</span><span>builder</span><span>}</span><span style="color:var(--color-prettylights-syntax-keyword)">from</span><span style="color:var(--color-prettylights-syntax-string)">'@builder.io/react'</span>
&nbsp;
<span>builder</span><span>.</span><span style="color:var(--color-prettylights-syntax-entity)">init</span><span>(</span><span style="color:var(--color-prettylights-syntax-string)">'YOUR_KEY'</span><span>)</span>
&nbsp;
<span style="color:var(--color-prettylights-syntax-keyword)">export</span><span style="color:var(--color-prettylights-syntax-keyword)">const</span><span style="color:var(--color-prettylights-syntax-entity)">getStaticProps</span><span style="color:var(--color-prettylights-syntax-constant)">=</span><span style="color:var(--color-prettylights-syntax-keyword)">async</span><span>(</span><span>)</span><span style="color:var(--color-prettylights-syntax-constant)">=&gt;</span><span>(</span><span>{</span> 
&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">props</span>: <span>{</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">builderJson</span>: <span style="color:var(--color-prettylights-syntax-keyword)">await</span><span>builder</span><span>.</span><span style="color:var(--color-prettylights-syntax-entity)">get</span><span>(</span><span style="color:var(--color-prettylights-syntax-string)">'page'</span><span>,</span><span>{</span><span style="color:var(--color-prettylights-syntax-constant)">url</span>: <span style="color:var(--color-prettylights-syntax-string)">'/'</span><span>}</span><span>)</span><span>.</span><span style="color:var(--color-prettylights-syntax-entity)">promise</span><span>(</span><span>)</span>
&nbsp;&nbsp;<span>}</span><span>}</span><span>)</span>
&nbsp;
<span style="color:var(--color-prettylights-syntax-keyword)">export</span><span style="color:var(--color-prettylights-syntax-keyword)">function</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">BuilderPage</span><span>(</span><span>{</span> builderJson <span>}</span><span>)</span><span style="color:var(--color-prettylights-syntax-constant)">=&gt;</span><span>{</span>
&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-keyword)">return</span><span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">YourHeader</span><span style="color:var(--color-prettylights-syntax-constant)">/</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">BuilderComponent</span><span style="color:var(--color-prettylights-syntax-constant)">model</span><span style="color:var(--color-prettylights-syntax-constant)">=</span><span style="color:var(--color-prettylights-syntax-string)">"page"</span><span style="color:var(--color-prettylights-syntax-constant)">content</span><span style="color:var(--color-prettylights-syntax-constant)">=</span><span>{</span><span>builderJson</span><span>}</span><span style="color:var(--color-prettylights-syntax-constant)">/</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">YourFooter</span><span style="color:var(--color-prettylights-syntax-constant)">/</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span>
&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-constant)">/</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span><span>}</span></pre><div>&nbsp;</div></div></td></tr></tbody></table><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; box-sizing:border-box; color:#1f2328; display:block; font-family:-apple-system,BlinkMacSystemFont,&quot;Segoe UI&quot;,&quot;Noto Sans&quot;,Helvetica,Arial,sans-serif,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin-bottom:16px; margin-top:0px; max-width:100%; orphans:2; overflow:auto; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:max-content; word-spacing:0px"><tbody></tbody></table><p>&nbsp;</p></div>
                                                                ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 02:21:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/builder</guid>
            <link>https://www.oschina.net/p/builder</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 阿里雲自主研發的雲原生數據庫產品 PolarDB for PostgreSQL]]>
            </title>
            <description>
                <![CDATA[<div align="center"><p><a href="https://gitee.com/link?target=https%3A%2F%2Fdeveloper.aliyun.com%2Ftopic%2Fpolardb-for-pg"><img src="https://gitee.com/polardb/PolarDB-for-PostgreSQL/raw/POLARDB_11_STABLE/docs/.vuepress/public/images/polardb.png" alt="logo" referrerpolicy="no-referrer"></a></p><h1><a id="user-content-polardb-for-postgresql" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#polardb-for-postgresql"></a>PolarDB for PostgreSQL</h1><p><strong>阿里雲自主研發的雲原生數據庫產品</strong></p><h4><a id="user-content-english--簡體中文" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#english--%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87"></a><a href="https://gitee.com/polardb/PolarDB-for-PostgreSQL/blob/POLARDB_11_STABLE/README.md">English</a> | 簡體中文</h4><p><a href="https://gitee.com/link?target=https%3A%2F%2Fdeveloper.aliyun.com%2Ftopic%2Fpolardb-for-pg"><img src="https://img.shields.io/badge/%E5%AE%98%E6%96%B9%E7%BD%91%E7%AB%99-blueviolet?style=for-the-badge&amp;logo=alibabacloud" alt="official" referrerpolicy="no-referrer"></a></p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fcirrus-ci.com%2Fgithub%2FApsaraDB%2FPolarDB-for-PostgreSQL%2FPOLARDB_11_STABLE"><img src="https://img.shields.io/cirrus/github/ApsaraDB/PolarDB-for-PostgreSQL/POLARDB_11_STABLE?style=for-the-badge&amp;logo=cirrusci" alt="cirrus-ci-stable" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fcirrus-ci.com%2Fgithub%2FApsaraDB%2FPolarDB-for-PostgreSQL%2FPOLARDB_11_DEV"><img src="https://img.shields.io/cirrus/github/ApsaraDB/PolarDB-for-PostgreSQL/POLARDB_11_DEV?style=for-the-badge&amp;logo=cirrusci" alt="cirrus-ci-dev" referrerpolicy="no-referrer"></a><a href="https://gitee.com/polardb/PolarDB-for-PostgreSQL/blob/POLARDB_11_STABLE/LICENSE"><img src="https://img.shields.io/badge/license-Apache--2.0-blue?style=for-the-badge&amp;logo=apache" alt="license" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2FGitHub.com%2FApsaraDB%2FPolarDB-for-PostgreSQL%2Fissues"><img src="https://img.shields.io/github/issues/ApsaraDB/PolarDB-for-PostgreSQL?style=for-the-badge&amp;logo=github" alt="github-issues" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2FGitHub.com%2FApsaraDB%2FPolarDB-for-PostgreSQL%2Fpulls"><img src="https://img.shields.io/github/issues-pr/ApsaraDB/PolarDB-for-PostgreSQL?style=for-the-badge&amp;logo=github" alt="github-pullrequest" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FApsaraDB%2FPolarDB-for-PostgreSQL%2Fnetwork%2Fmembers"><img src="https://img.shields.io/github/forks/ApsaraDB/PolarDB-for-PostgreSQL?style=for-the-badge&amp;logo=github" alt="github-forks" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FApsaraDB%2FPolarDB-for-PostgreSQL%2Fstargazers"><img src="https://img.shields.io/github/stars/ApsaraDB/PolarDB-for-PostgreSQL?style=for-the-badge&amp;logo=github" alt="github-stars" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FApsaraDB%2FPolarDB-for-PostgreSQL%2Fgraphs%2Fcontributors"><img src="https://img.shields.io/github/contributors/ApsaraDB/PolarDB-for-PostgreSQL?style=for-the-badge&amp;logo=github" alt="github-contributors" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fopensource.alibaba.com%2Fcontribution_leaderboard%2Fdetails%3FprojectValue%3Dpolardb-pg"><img src="https://img.shields.io/badge/PolarDB--for--PostgreSQL-%E6%9F%A5%E7%9C%8B%E8%B4%A1%E7%8C%AE%E6%8E%92%E8%A1%8C%E6%A6%9C-orange?style=for-the-badge" alt="Leaderboard" referrerpolicy="no-referrer"></a></p></div><h2><a id="user-content-什麼是-polardb-for-postgresql" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E4%BB%80%E4%B9%88%E6%98%AF-polardb-for-postgresql"></a>什麼是 PolarDB for PostgreSQL</h2><p><img src="https://gitee.com/polardb/PolarDB-for-PostgreSQL/raw/POLARDB_11_STABLE/docs/zh/imgs/1_polardb_architecture.png" alt="arch.png" referrerpolicy="no-referrer"></p><p>PolarDB for PostgreSQL（下文簡稱為 PolarDB）是一款阿里雲自主研發的雲原生數據庫產品，100% 兼容 PostgreSQL，採用基於 Shared-Storage 的存儲計算分離架構，具有極致彈性、毫秒級延遲、HTAP 的能力。</p><ol><li>極致彈性：存儲與計算能力均可獨立地橫向擴展。
<ul><li>當計算能力不夠時，可以單獨擴展計算集羣，數據無需複製。</li><li>當存儲容量或 I/O 不夠時，可以單獨擴展存儲集羣，而不中斷業務。</li></ul></li><li>毫秒級延遲：
<ul><li>WAL 日誌存儲在共享存儲上，RW 到所有 RO 之間僅複製 WAL 的元數據。</li><li>獨創的 <em>LogIndex</em> 技術，實現了 Lazy 回放和 Parallel 回放，理論上最大程度地縮小了 RW 和 RO 節點間的延遲。</li></ul></li><li>HTAP 能力：基於 Shared-Storage 的分佈式並行執行框架，加速在 OLTP 場景下的 OLAP 查詢。一套 OLTP 型的數據，可支持 2 套計算引擎：
<ul><li>單機執行引擎：處理高併發的 TP 型負載。</li><li>分佈式執行引擎：處理大查詢的 AP 型負載。</li></ul></li></ol><p>PolarDB 還支持時空、GIS、圖像、向量、搜索、圖譜等多模創新特性，應對企業對數據處理日新月異的需求。</p><h2><a id="user-content-分支説明" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E5%88%86%E6%94%AF%E8%AF%B4%E6%98%8E"></a>分支説明</h2><p><code>POLARDB_11_STABLE</code> 為穩定分支，持存儲計算分離的雲原生形態。 <code>distribute</code> 分支支持分佈式形態。</p><h2><a id="user-content-產品架構" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E4%BA%A7%E5%93%81%E6%9E%B6%E6%9E%84"></a>產品架構</h2><p>PolarDB 採用了基於 Shared-Storage 的存儲計算分離架構。數據庫由傳統的 Share-Nothing 架構，轉變成了 Shared-Storage 架構。由原來的 N 份計算 + N 份存儲，轉變成了 N 份計算 + 1 份存儲。雖然共享存儲上數據是一份，但是數據在各節點內存中的狀態是不同的，需要通過內存狀態的同步來維護數據的一致性；同時主節點在刷髒時也需要做協調，避免只讀節點讀取到超前的 <strong>「未來頁面」</strong>，也要避免只讀節點讀取到過時的沒有在內存中被正確回放的 <strong>「過去頁面」</strong>。為瞭解決該問題，PolarDB 創造性地設計了 <em>LogIndex</em> 數據結構來維護頁面的回放歷史，該結構能夠實現主節點與只讀節點之間的同步。</p><p>在存儲計算分離後，I/O 單路延遲變大的同時，I/O 的吞吐也變大了。在處理分析型查詢時，僅使用單個只讀節點無法發揮出存儲側的大 I/O 帶寬優勢，也無法利用其他只讀節點的 CPU、內存和 I/O 資源。為瞭解決該問題，PolarDB 研發了基於 Shared-Storage 的並行執行引擎，能夠在 SQL 級別上彈性利用任意數目的 CPU 來加速分析查詢，支持 HTAP 的混合負載場景。</p><p>詳情請查閲 <a href="https://gitee.com/link?target=https%3A%2F%2Fapsaradb.github.io%2FPolarDB-for-PostgreSQL%2Fzh%2Ftheory%2Farch-overview.html">產品架構</a>。</p><h2><a id="user-content-快速入門" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8"></a>快速入門</h2><p>如果您已安裝 Docker，那麼可以從 DockerHub 上拉取 PolarDB for PostgreSQL 的，本地存儲實例鏡像，創建、運行並進入容器，然後直接使用 PolarDB 實例：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c"># 拉取單節點 PolarDB 鏡像</span></span><span id="LC2" class="line">docker pull polardb/polardb_pg_local_instance:single</span><span id="LC3" class="line"><span class="c"># 創建運行並進入容器</span></span><span id="LC4" class="line">docker run <span class="nt">-it</span><span class="nt">--cap-add</span><span class="o">=</span>SYS_PTRACE <span class="nt">--privileged</span><span class="o">=</span><span class="nb">true</span><span class="nt">--name</span> polardb_pg_single polardb/polardb_pg_local_instance:single bash</span><span id="LC5" class="line"><span class="c"># 測試實例可用性</span></span><span id="LC6" class="line">psql <span class="nt">-h</span> 127.0.0.1 <span class="nt">-c</span><span class="s1">'select version();'</span></span><span id="LC7" class="line">            version</span><span id="LC8" class="line"><span class="nt">--------------------------------</span></span><span id="LC9" class="line"> PostgreSQL 11.9 <span class="o">(</span>POLARDB 11.9<span class="o">)</span></span><span id="LC10" class="line"><span class="o">(</span>1 row<span class="o">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>對於更多進階部署方式，請移步在線文檔中的 <a href="https://gitee.com/link?target=https%3A%2F%2Fapsaradb.github.io%2FPolarDB-for-PostgreSQL%2Fzh%2Fdeploying%2Fdeploy.html">進階部署</a>。在部署前，我們建議您先了解一下 PolarDB for PostgreSQL 的 <a href="https://gitee.com/link?target=https%3A%2F%2Fapsaradb.github.io%2FPolarDB-for-PostgreSQL%2Fzh%2Fdeploying%2Fintroduction.html">架構簡介</a>。</p><h2><a id="user-content-文檔" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E6%96%87%E6%A1%A3"></a>文檔</h2><p>請移步本項目的 <a href="https://gitee.com/link?target=https%3A%2F%2Fapsaradb.github.io%2FPolarDB-for-PostgreSQL%2Fzh%2F">在線文檔網站</a> 查閲完整文檔。</p><p>如果需要在本地預覽或開發文檔，請參考 <a href="https://gitee.com/link?target=https%3A%2F%2Fapsaradb.github.io%2FPolarDB-for-PostgreSQL%2Fzh%2Fcontributing%2Fcontributing-polardb-docs.html">貢獻文檔</a>。</p><h2><a id="user-content-參與貢獻" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E5%8F%82%E4%B8%8E%E8%B4%A1%E7%8C%AE"></a>參與貢獻</h2><p>我們誠摯歡迎社區參與 PolarDB 的貢獻，無論是代碼還是文檔。</p><p>以下是貢獻者列表（由 <a href="https://gitee.com/link?target=https%3A%2F%2Fcontrib.rocks">contrib.rocks</a> 支持）：</p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FApsaraDB%2FPolarDB-for-PostgreSQL%2Fgraphs%2Fcontributors"><img src="https://contrib.rocks/image?repo=ApsaraDB/PolarDB-for-PostgreSQL" referrerpolicy="no-referrer"></a><h2><a id="user-content-軟件許可" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E8%BD%AF%E4%BB%B6%E8%AE%B8%E5%8F%AF"></a>軟件許可</h2><p>PolarDB for PostgreSQL 的源代碼遵循 Apache 2.0 許可證，基於遵循 PostgreSQL 許可證的 PostgreSQL 開發。其中還包含了部分遵循其它開源許可證的第三方組件。請移步 <a href="https://gitee.com/polardb/PolarDB-for-PostgreSQL/blob/POLARDB_11_STABLE/LICENSE">LICENSE</a> 和 <a href="https://gitee.com/polardb/PolarDB-for-PostgreSQL/blob/POLARDB_11_STABLE/NOTICE">NOTICE</a> 瞭解更多信息。</p><h2><a id="user-content-致謝" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E8%87%B4%E8%B0%A2"></a>致謝</h2><p>部分代碼和設計思路參考了其他開源項目，例如：PG-XC/XL (pgxc_ctl)、TBase (部分基於時間戳的 vacuum 和 MVCC)、Greenplum 以及 Citus (pg_cron)。感謝以上開源項目的貢獻。</p><h2><a id="user-content-加入社區" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E5%8A%A0%E5%85%A5%E7%A4%BE%E5%8C%BA"></a>加入社區</h2><ul><li><p>PolarDB PostgreSQL Slack：<a href="https://gitee.com/link?target=https%3A%2F%2Fapp.slack.com%2Fclient%2FT023NM10KGE%2FC023VEMKS02">https://app.slack.com/client/T023NM10KGE/C023VEMKS02</a></p></li><li><p>使用釘釘掃描如下二維碼，加入 PolarDB 技術推廣組釘釘羣</p><p><img src="https://gitee.com/polardb/PolarDB-for-PostgreSQL/raw/POLARDB_11_STABLE/docs/.vuepress/public/images/polardb_group.png" alt="polardb_group" referrerpolicy="no-referrer"></p></li></ul><hr><p>Copyright © Alibaba Group, Inc.</p>]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 02:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/polardb/PolarDB-for-PostgreSQL</guid>
            <link>https://gitee.com/polardb/PolarDB-for-PostgreSQL</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | PostgreSQL 數據脫敏方式盤點]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>數據脫敏是一種廣泛採用的保護敏感數據（如信用卡，社保卡，地址等信息）的方法。脫敏數據不僅僅是為了保護你和客戶的數據安全，在一些情況下，法律也有相應要求，最著名的例子就是 GDPR。</p><p><img src="https://oscimg.oschina.net/oscnet/up-4dab30bd6a2aa59a8d109180e68fa97cd9f.png" alt="" referrerpolicy="no-referrer"></p><p>市面上也有各種不同的數據脫敏方法，例如遮擋，替換，洗牌和加密，適用於不同場景。通過對敏感數據進行脫敏處理，組織能夠降低數據泄露和未經授權訪問的風險，同時仍然能夠使用真實數據進行開發、測試和分析等任務。</p><p>本文來盤點一下 PostgreSQL 的幾種常用脫敏方式。</p><h2>PostgreSQL Anonymizer</h2><p><img src="https://oscimg.oschina.net/oscnet/up-3aad9a7f7d2e9df748828641b923a88fb25.png" alt="file" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.postgresql.org%2Fabout%2Fnews%2Fpostgresql-anonymizer-10-privacy-by-design-for-postgres-2452%2F" target="_blank">PostgreSQL Anonymizer</a> 是個社區貢獻的擴展 ，可以為 PostgreSQL 添加不同的數據脫敏選項和方法。它將脫敏配置存儲在 PostgreSQL 的 SECURITY LABEL（安全標籤）中。</p><h3>動態脫敏</h3><p>PostgreSQL Anonymizer 實現動態脫敏的方式是通過將定義某個角色為 "MASKED" 以及脫敏規則。被授予 "MASKED" 角色的用戶將無法訪問原始數據，而其他角色仍然可以訪問。它現已支持多種的脫敏語法，你甚至可以編寫自己的規則。</p><p><img src="https://oscimg.oschina.net/oscnet/up-81ce353e198292328ef3b8e6dd45a7a4a3c.png" alt="file" referrerpolicy="no-referrer"></p><p>這種方法有一定的侷限性，例如在他們<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpostgresql-anonymizer.readthedocs.io%2Fen%2Flatest%2Fdynamic_masking%2F%23limitations" target="_blank">文檔中</a> 有提到，如果你同時使用脫敏插件和 GUI 工具如 DBeaver 或 pgAdmin 進行查詢的時候可能會出現問題；對於某些查詢來説，動態脫敏可能非常慢。此外，不同的脫敏變體需要不同的視圖，在角色或底層表發生變化時，這又很快變得難以管理起來。</p><h3>靜態脫敏</h3><p>PostgreSQL Anonymizer 還支持靜態脫敏，可以直接轉換原始數據集。比如可以用虛假數據替換原始數據，添加噪音或者混淆數據以隱藏敏感信息。</p><p>靜態脫敏的原則是更新包含至少一個被脫敏列的所有表的所有行。基本上意味着 PostgreSQL 將重寫磁盤上的所有數據。所以請注意，這種方法會破壞原始數據，並且是一個比較緩慢的過程。因此，在使用靜態脫敏之前，請三思而後行。</p><h2>Bytebase 動態數據脫敏</h2><p><img src="https://oscimg.oschina.net/oscnet/up-0fafa1a0df862325f60276f4a73b95107cd.png" alt="file" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bytebase.com%2Fdocs%2Fsecurity%2Fdata-masking%2Foverview%2F" target="_blank">Bytebase 動態數據脫敏</a> 不依賴於 PostgreSQL 視圖或其用戶，而是通過 Bytebase 內部管理脫敏策略和授權管理。當用戶通過 SQL 編輯器查詢時，會自動應用動態脫敏策略。</p><p><img src="https://oscimg.oschina.net/oscnet/up-03e05ae16e4f31409c552b924345c5e0a93.png" alt="file" referrerpolicy="no-referrer"></p><p>Bytebase 動態數據脫敏包括以下組件：</p><ul><li><strong>全局脫敏規則</strong>：工作空間的「管理員」和「DBA」可以批量定義全局脫敏規則。例如，可以將所有名為 email 的列脫敏程度設置為「半脫敏」。這樣，修改脫敏策略就無需手動修改數千列了，還節省了維護視圖的麻煩。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-a2bd3b732489e2b78eb7d1d7cd37cdb52a5.png" alt="file" referrerpolicy="no-referrer"></p><ul><li><strong>列脫敏規則</strong>：工作空間的「管理員」和「DBA」可以將列設置為不同的脫敏級別。列脫敏規則優先於全局脫敏規則。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-f37ca5c6e716c61e5b7faf61445e88dacc1.png" alt="file" referrerpolicy="no-referrer"></p><ul><li><strong>訪問未脫敏數據</strong>：對於脫敏數據，工作空間的「管理員」和「DBA」可以授予特定用戶訪問未脫敏數據的權限。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-20a2ff4276bc57d8ec25d94d8bd72a0f10e.png" alt="file" referrerpolicy="no-referrer"></p><p>📣 工作空間的「管理員」和「DBA」均為 Bytebase 的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bytebase.com%2Fdocs%2Fconcepts%2Froles-and-permissions%2F" target="_blank">角色</a>。</p><h2>對比</h2><p><img src="https://oscimg.oschina.net/oscnet/up-91ab870f77b13f4a5f0e46cac11ab3a1ef4.png" alt="file" referrerpolicy="no-referrer"></p><p>PostgreSQL Anonymizer 的優勢在於它是在數據庫本身中實現的。因此，無論查詢如何發送到數據庫，數據脫敏規則都會被強制執行。對於 Bytebase 動態數據脫敏，查詢必須通過 SQL 編輯器才會強制執行。</p><p>Bytebase 動態數據脫敏的優勢在於其與所有 PostgreSQL 發行版（和 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkzMjI2MDY5OQ%3D%3D%26mid%3D2247506225%26idx%3D1%26sn%3D71a523fb3059705ad743b766c5193404%26chksm%3Dc25ce705f52b6e13eefc8196cc7c800e36ce7d5e130bb0723d7e849d6f71d8831f9c6098c90b%26scene%3D21%23wechat_redirect" target="_blank">MySQL 發行版</a>🐬）都兼容，且支持細粒度的脫敏策略和訪問權限。只要團隊通過 Bytebase SQL 編輯器來查詢數據庫，那麼 Bytebase 動態數據脫敏可以保障組織敏感數據的安全。</p><p>🔧 歡迎<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkzMjI2MDY5OQ%3D%3D%26mid%3D2247505900%26idx%3D1%26sn%3D46296b29b2bca3d023a3c0fb8f291c70%26chksm%3Dc25ce9d8f52b60ce481827e3bc65ea4dc9eeb13427f8bae6cb7e44e07073cb7d5cbea4b943c7%26scene%3D21%23wechat_redirect" target="_blank">跟着教程</a>來試試 Bytebase 動態數據脫敏。</p><hr><p>💡 更多資訊，請關注 Bytebase 公號：Bytebase</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 02:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/10306946</guid>
            <link>https://my.oschina.net/u/6148470/blog/10306946</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Furion 文檔收費？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>今天訪問 Furion 官網發現它的文檔居然要付費才能看：</p><p><img height="1392" src="https://static.oschina.net/uploads/space/2023/1128/173151_D1kJ_2720166.png" width="2338" referrerpolicy="no-referrer"></p><p>http://furion.baiqian.ltd/docs/saas</p><p>而且還搞了個 499 的 VIP 技術支持服務……</p><p><img height="1858" src="https://static.oschina.net/uploads/space/2023/1128/173121_ZrVP_2720166.png" width="3360" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 09:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268540</guid>
            <link>https://www.oschina.net/news/268540</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenUK：扶持開源將有效遏制人才流向美國]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000"><span style="background-color:#ffffff">英國開源非營利組織 OpenUK&nbsp;最新發布了 「</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenuk.uk%2Fstate-of-open-the-uk-in-2023-phase-three-skills-or-bust%2F" target="_blank">State of Open: The UK in 2023: Phase 3 Skills or Bust</a><span style="background-color:#ffffff">」 報告，此部分內容主要聚焦於英國開源軟件的貢獻者和維護者。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">「開源軟件是數字經濟的潛水艇。無論是互聯網、雲計算、人工智能、ML 還是區塊鏈，它都是我們所有技術生態系統的基礎。」</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff"><img alt="" height="420" src="https://oscimg.oschina.net/oscnet/up-a2e7775cd5fe8e3981df48a726e8410b676.jpg" width="300" referrerpolicy="no-referrer"></span></span></p><p><span style="color:#000000">Skills or Bust 重點分析了英國開源社區的數據，發現英國共有 320 萬個 GitHub 帳戶（佔英國人口的 4.5%）和 31800 個開源項目貢獻者。過去 12 個月裏，開源項目的貢獻者達 8200 人；開源項目新增了 1700 名貢獻者，實現了 20.7% 的增長。</span></p><p><span style="color:#000000"><span style="background-color:#ffffff">報告作者明確指出，英國政府有機會支持開源人才，並在英國建立一個更強大的技術部門。遠程工作是開源技術的一種常態，這意味着許多國際公司是根據技能而非地理位置來招聘人才的。隨着英國各地互聯互通的改善，無論是在城市還是農村地區，這都為掌握緊缺技能的人才提供了就業機會。這隻會推動英國科技經濟的增長，並確保其未來成為"下一個硅谷"。</span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">報告還揭示了 OpenUK 對英國技術和開源技能需求的調查見解：</span></p><ul><li><span style="color:#000000"><strong>77% </strong>的英國公司正在尋求編程技能</span></li><li><span style="color:#000000"><strong>後端開發人員是最受歡迎的職位</strong>（招聘比例為 51%），其次是雲工程師（36%）和開發運維工程師（32%）</span></li><li><span style="color:#000000"><strong>後端開發人員仍然是未來招聘的重點</strong>（28%），另外還有云工程師（23%）和開發運維工程師（16%）</span></li></ul><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><img alt="" height="500" src="https://oscimg.oschina.net/oscnet/up-7eec672f4d5ab2c1eec10c4fc10e98ebe5c.jpg" width="500" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">以及確定了支持英國科技行業增長至關重要的三個關鍵政策領域：</span></p><ul><li><span style="color:#000000"><strong>填補英國人才庫商業技能的空白&nbsp;</strong>—— 因收購而留下的空白，目前英國缺乏將其創新商業化所需的商業技能。</span></li><li><span style="color:#000000"><strong>留住經常逃往美國的人才&nbsp;</strong>—— 通過支持這些技能在英國的發展來阻止移民，並鼓勵技術工人移民。</span></li><li><span style="color:#000000"><strong>培訓人員掌握正確的工程和開發技能&nbsp;</strong>—— 英國目前還沒有，而且團隊缺乏實踐經驗。</span></li></ul><p><span style="color:#000000">OpenUK 首席執行官 Amanda Brock 稱，這十年以來，開源軟件的重要性一直被英國政府所忽視。而為此做出貢獻的開源工作者，是全球科技行業中受人尊敬和有影響力的一部分。</span></p><p><span style="color:#000000">「他們中的許多人都是 homeworkers，掌握着緊缺的技能，在這艘'全球潛艇'上工作併成長為領導者，將灣區的薪資帶入英國。現在是時候讓潛艇浮出水面了......」</span></p><p><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenuk.uk%2Fstateofopen" target="_blank"><span style="color:#2980b9">查看完整報告</span></a></strong></p><hr><p><strong><span style="color:#000000">相關閲讀</span></strong></p><ul><li><a href="https://www.oschina.net/news/249841/openuk-report-benefits-of-open-source" target="_blank">英國科技總增值 27% 來自開源，價值達 135.9 億英鎊</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 08:18:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268523/state-of-open-the-uk-in-2023</guid>
            <link>https://www.oschina.net/news/268523/state-of-open-the-uk-in-2023</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[大語言模型的前世今生]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>本文分享自華為雲社區《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F416109%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" target="_blank" rel="nofollow">大語言模型的前世今生</a>》，作者： 碼上開花_Lancer 。</p><p><strong>大規模語言模型（Large Language Models，LLM）</strong>，也稱大規模語言模型或大型語言模型，是一種由包含數百億以上參數的深度神經網絡構建的語言模型，使用自監督學習方法通過大量無標註文本進行訓練。自 2018 年以來，Google、OpenAI、Meta、百度、華為等公司和研究機構都相繼發佈了包括 BERT，GPT 等在內多種模型，並在幾乎所有自然語言處理任務中都表現出色。2019 年大模型呈現爆發式的增長，特別是 2022 年 11 月 ChatGPT（Chat Generative Pre-trained Transformer）發佈後，更是引起了全世界的廣泛關注。用戶可以使用自然語言與系統交互，從而實現包括問答、分類、摘要、翻譯、聊天等從理解到生成的各種任務。大型語言模型展現出了強大的對世界知識掌握和對語言的理解。</p><span id="OSC_h1_1"></span><h1>一、大規模語言模型基本概念</h1><p>語言是人類與其他動物最重要的區別，而人類的多種智能也與此密切相關。邏輯思維以語言的形式表達，大量的知識也以文字的形式記錄和傳播。如今，互聯網上已經擁有數萬億以上的網頁資源，其中大部分信息都是以自然語言描述。因此，如果人工智能算法想要獲取知識，就必須懂得如何理解人類使用的不太精確、可能有歧義、混亂的語言。語言模型（Language Model，LM）目標就是建模自然語言的概率分佈。詞彙表 V 上的語言模型，由函數 P(w1w2...wm) 表示，可以形式化地構建為詞序列 w1w2...wm 的概率分佈，表示詞序列 w1w2...wm 作為一個句子出現的可能性大小。由於聯合概率 P(w1w2...wm) 的參數量十分巨大，直接計算 P(w1w2...wm) 非常困難。按照《現代漢語詞典（第七版）》包含 7 萬單詞，句子長度按照 20 個詞計算，模型參數量達到 7.9792×1096 的天文數字。中文的書面語中超過 100 個單詞的句子也並不罕見，如果要將所有可能都納入考慮，模型的複雜度還會進一步急劇增加，無法進行存儲和計算。為了減少 P(w1w2...wm) 模型的參數空間，可以利用句子序列通常情況下從左至右的生成過程進行分解，使用鏈式法則得到：</p><p><img src="https://bbs-img.huaweicloud.com/blogs/img/20231125/1700874836405431196.png" referrerpolicy="no-referrer"></p><p>由此，w1w2...wm 的生成過程可以看作單詞逐個生成的過程。首先生成 w1，之後根據 w1 生成 w2，再根據 w1 和 w2 生成 w3，以此類推，根據前 m− 1 個單詞生成最後一個單詞 wm。例如：對於句子「把努力變成一種習慣」的概率計算，使用上述公式可以轉化為：</p><p><img src="https://bbs-img.huaweicloud.com/blogs/img/20231125/1700874878791508245.png" referrerpolicy="no-referrer"></p><p>通過上述過程將聯合概率 P(w1w2...wm) 轉換為了多個條件概率的乘積。但是，僅通過上述過程模型的參數空間依然沒有下降，P(wm|w1w2...wm.1) 的參數空間依然是天文數字。為瞭解決上述問題，可以進一步假設任意單詞 wi 出現的概率只與過去 n − 1 個詞相關，即：</p><p><img src="https://bbs-img.huaweicloud.com/blogs/img/20231125/1700874915077390823.png" referrerpolicy="no-referrer"></p><p>滿足上述條件的模型被稱為 n 元語法或 n 元文法 (n-gram) 模型。其中 n-gram 表示由 n 個連續單詞構成的單元，也被稱為 n 元語法單元。儘管 n 元語言模型能緩解句子概率為 0 的問題，但語言是由人和時代創造的，具備無窮的可<br> 能性，再龐大的訓練語料也無法覆蓋所有的 n-gram，而訓練語料中的零頻率並不代表零概率。因此，需要使用平滑技術（Smoothing）來解決這一問題，對所有可能出現的字符串都分配一個非零的概率值，從而避免零概率問題。平滑是指為了產生更合理的概率，對最大似然估計進行調整的一類方法，也稱為數據平滑（Data Smoothing）。平滑處理的基本思想是提高低概率，降低高概率，使整體的概率分佈趨於均勻。這類方法通常稱為統計語言模型（Statistical Language models，SLM）。n 語法模型整體上來看與訓練語料規模和模型的階數有較大的關係，不同的平滑算法在不同情況下的表現有較大的差距。平滑算法雖然較好的解決了零概率問題，但是基於稀疏表示的 n 元語言模型仍然有三個較為明顯的缺點：（1）無法建模長度超過 n 的上下文；（2）依賴人工設計規則的平滑技術；（3）當 n 增大時，數據的稀疏性隨之增大，模型的參數量更是指數級增加，並且模型受到數據稀疏問題的影響，其參數難以被準確的學習。此外，n 語法中單詞的離散表示也忽略了詞之間的相似性。</p><p>因此，基於分佈式表示和神經網絡的語言模型逐漸成為了研究熱點。Bengio 等人在 2000 年提出了使用前饋神經網絡對 P(wi|wi−n+1...wi−1) 進行估計的語言模型。詞的獨熱編碼被映射為一個低維稠密的實數向量，稱為詞向量（Word Embedding）。此後，循環神經網絡、卷積神經網絡、端到端記憶網絡等神經網絡方法都成功應用於語言模型建模。相較於 n 元語言模型，神經網絡方法可以在一定程度上避免數據稀疏問題，有些模型還可以避免對歷史長度的限制，從而更好的建模長距離依賴關係。這類方法通常稱為神經語言模型（Neural Language Models，NLM）。深度神經網絡需要採用有監督方法，使用標註數據進行訓練，因此，語言模型的訓練過程也不可避免需要構造訓練語料。但是由於訓練目標可以通過無標註文本直接獲得，從而使得模型的訓練僅需要大規模無標註文本即可語言模型也成為了典型的自監督學習（Self-supervised Learning）任務。互聯網的發展，使得大規模文本非常容易獲取，因此訓練超大規模的基於神經網絡的語言模型也成為了可能。受到計算機視覺領域採用 ImageNet 對模型進行一次預訓練，使得模型可以通過海量圖像充分學習如何提取特徵，然後再根據任務目標進行模型精調的範式影響，自然語言處理領域基於預訓練語言模型的方法也逐漸成為主流。以 ELMo 為代表的動態詞向量模型開啓了語言模型預訓練的大門，此後以 GPT 和 BERT 為代表的基於 Transformer 模型的大規模預訓練語言模型的出現，使得自然語言處理全面進入了預訓練微調範式新時代。將預訓練模型應用於下游任務時，不需要了解太多的任務細節，不需要設計特定的神經網絡結構，只需要「微調」預訓練模型，即使用具體任務的標註數據在預訓練語言模型上進行監督訓練，就可以取得顯著的性能提升。這類方法通常稱為預訓練語言模型（Pre-trained Language Models，PLM）。2020 年 Open AI 發佈了包含 1750 億參數的生成式大規模預訓練語言模型 GPT-3（GenerativePre-trained Transformer 3）。開啓了大規模語言模型的時代。由於大規模語言模型的參數量巨大，如果在不同任務上都進行微調需要消耗大量的計算資源，因此預訓練微調範式不再適用於大規模語言模型。但是研究人員發現，通過語境學習（Incontext Learning，ICL）等方法，直接使用大規模語言模型就可以在很多任務的少樣本場景下取得了很好的效果。此後，研究人員們提出了面向大規模語言模型的提示詞（Prompt）學習方法、模型即服務範式（Model as a Service，MaaS）、指令微調（Instruction Tuning）等方法，在不同任務上都取得了很好的效果。與此同時，Google、Meta、百度、華為等公司和研究機構都紛紛發佈了包括 PaLM、LaMDA、T0 等為代表的不同大型語言模型。</p><p>2022 年底 ChatGPT 的出現，將大規模語言模型的能力進行了充分的展現，也引發了大規模語言模型研究的熱潮。Kaplan 等人在文獻中提出了縮放法則（Scaling Laws），指出模型的性能依賴於模型的規模，包括：參數數量、數據集大小和計算量，模型的效果會隨着三者的指數增加而線性提高。如圖 1.1 所示，模型的損失（Loss）值隨着模型規模的指數增大而線性降低。這意味着模型的能力是可以根據這三個變量估計的，提高模型參數量，擴大數據集規模都可以使得模型的性能可預測地提高。這為繼續提升大模型的規模給出了定量分析依據。</p><p><img src="https://bbs-img.huaweicloud.com/blogs/img/20231125/1700875112804923222.png" referrerpolicy="no-referrer"></p><p>圖 1.1 大規模語言模型的縮放法則（Scaling Laws）</p><span id="OSC_h1_2"></span><h1>二、大規模語言模型發展歷程</h1><p>大規模語言模型的發展歷程雖然只有短短不到五年的時間，但是發展速度相當驚人，截止 2023 年 6 月，國內外有超過百種大模型相繼發佈。中國人民大學趙鑫教授團隊在文獻按照時間線給出 2019 年至 2023 年 5 月比較有影響力並且模型參數量超過 100 億的大規模語言模型，如圖 2.1 所示。大規模語言模型的發展可以粗略的分為如下三個階段：基礎模型、能力探索、突破發展。</p><p><strong>基礎模型階段</strong>主要集中於 2018 年至 2021 年，2017 年 Vaswani 等人提出了 Transformer[ 架構，在機器翻譯任務上取得了突破性進展。2018 年 Google 和 Open AI 分別提出了 BERT[1] 和 GPT-1 模型，開啓了預訓練語言模型時代。BERT-Base 版本參數量為 1.1 億，BERT-Large 的參數量為 3.4 億，GPT-1 的參數量 1.17 億。這在當時，相比其它深度神經網絡的參數量已經是有數量級上提升。2019 年 Open AI 又發佈了 GPT-2，其參數量達到了 15 億。此後，Google 也發佈了參數規模為 110 億的 T5 模型。2020 年 Open AI 進一步將語言模型參數量擴展到 1750 億，發佈了 GPT-3。此後，國內也相繼推出了一系列的大規模語言模型，包括清華大學<a href="https://www.oschina.net/action/visit/ad?id=1191">ERNIE</a>(THU)、百度<a href="https://www.oschina.net/action/visit/ad?id=1191">ERNIE</a>(Baidu)、華為盤古-α 等。這個階段研究主要集中語言模型本身，包括僅編碼器（Encoder Only）、編碼器-解碼器（Encoder-Decoder）、僅解碼器（Decoder Only）等各種類型的模型結構都有相應的研究。模型大小與 BERT 相類似的算法，通常採用預訓練微調範式，針對不同下游任務進行微調。但是模型參數量在 10 億以上時，由於微調的計算量很高，這類模型的影響力在當時相較 BERT 類模型有不小的差距。</p><p><img src="https://bbs-img.huaweicloud.com/blogs/img/20231124/1700819499486261627.png" referrerpolicy="no-referrer"></p><p>圖 2.1 大規模語言模型發展時間線</p><p><strong>能力探索階段</strong>集中於 2019 年至 2022 年，由於大規模語言模型很難針對特定任務進行微調，研究人員們開始探索在不針對單一任務進行微調的情況下如何能夠發揮大規模語言模型的能力。2019 年 Radford 等人，就使用 GPT-2 模型研究了大規模語言模型在零樣本情況下的任務處理能力。在此基礎上，Brown 等人在 GPT-3 模型上研究了通過語境學習（In-Context Learning）進行少樣本學習的方法。將不同任務的少量有標註的實例拼接到待分析的樣本之前輸入語言模型，用語言模型根據實例理解任務並給出正確結果。在包括 TriviaQA、WebQS、CoQA 等評測集合都展示出了非常強的能力，在有些任務中甚至超過了此前的有監督方法。上述方法不需要修改語言模型的參數，模型在處理不同任務時無需花費的大量計算資源進行模型微調。但是僅依賴基於語言模型本身，其性能在很多任務上仍然很難達到有監督學習效果，因此研究人員們提出了指令微調（Instruction Tuning）方案，將大量各類型任務，統一為生成式自然語言理解框架，並構造訓練語料進行微調。</p><p><strong>突破發展階段</strong>以 2022 年 11 月 ChatGPT 的發佈為起點。ChatGPT 通過一個簡單的對話框，利用一個大規模語言模型就可以實現問題回答、文稿撰寫、代碼生成、數學解題等過去自然語言處理系統需要大量小模型訂製開發才能分別實現的能力。它在開放領域問答、各類自然語言生成式任務以及對話上文理解上所展現出來的能力遠超大多數人的想象。2023 年 3 月 GPT-4 發佈，相較於 ChatGPT 又有了非常明顯的進步，並具備了多模態理解能力。GPT-4 在多種基準考試測試上的得分高於 88% 的應試者，包括美國律師資格考試（Uniform Bar Exam）、法學院入學考試（Law School Admission Test）、學術能力評估（Scholastic Assessment Test，SAT）等。它展現了近乎「通用人工智能（AGI）」的能力。各大公司和研究機構也相繼發佈了此類系統，包括 Google 推出的 Bard、百度的文心一言、科大訊飛的星火大模型、智譜 ChatGLM、復旦大學 MOSS 等。表 1.1 給出了截止 2023 年 6 月典型開源和未開源大規模語言模型的基本情況。可以看到從 2022 年開始大模型呈現爆發式的增長，各大公司和研究機構都在發佈各種不同類型的大模型。</p><span id="OSC_h1_3"></span><h1>三、 大規模語言模型構建流程</h1><p>根據 OpenAI 聯合創始人 Andrej Karpathy 在微軟 Build 2023 大會上所公開的信息，OpenAI 所使用的大規模語言模型構建流程如圖 2.2 所示。主要包含四個階段：預訓練、有監督微調、獎勵建模、強化學習。這四個階段都需要不同規模數據集合、不同類型的算法，產出不同類型的模型，所需要的資源也有非常大的差別。</p><p><img src="https://bbs-img.huaweicloud.com/blogs/img/20231124/1700819526965391967.png" referrerpolicy="no-referrer"></p><p>圖 2.2 OpenAI 使用的大規模語言模型構建流程</p><p><strong>預訓練</strong><strong>（</strong><strong>Pretraining</strong><strong>）階段</strong>需要利用海量的訓練數據，包括互聯網網頁、維基百科、書籍、GitHub、論文、問答網站等，構建包含數千億甚至數萬億單詞的具有多樣性的內容。利用由數千塊高性能 GPU 和高速網絡組成超級計算機，花費數十天完成深度神經網絡參數訓練，構建基礎語言模型（Base Model）。基礎大模型構建了長文本的建模能力，使得模型具有語言生成能力，根據輸入的提示詞（Prompt），模型可以生成文本補全句子。也有部分研究人員認為，語言模型建模過程中也隱含的構建了包括事實性知識（Factual Knowledge）和常識知識（Commonsense）在內的世界知識（World Knowledge）。根據他們的文獻介紹，GPT-3 完成一次訓練的總計算量是 3640PFlops，按照 NVIDIA A100 80G 和平均利用率達到 50% 計算，需要花費近一個月時間使用 1000 塊 GPU 完成。</p><p><img src="https://bbs-img.huaweicloud.com/blogs/img/20231124/1700819546103132882.png" referrerpolicy="no-referrer"></p><p>表 1.1 典型開源大規模語言模型彙總</p><p><img src="https://bbs-img.huaweicloud.com/blogs/img/20231124/1700819565269758033.png" referrerpolicy="no-referrer"></p><p>表 1.2 典型閉源大規模語言模型彙總</p><p><strong>有監督微調</strong>（Supervised Finetuning），也稱為指令微調（Instruction Tuning），利用少量高質量數據集合，包含用戶輸入的提示詞（Prompt）和對應的理想輸出結果。用戶輸入包括問題、閒聊對話、任務指令等多種形式和任務。</p><p><strong>例如</strong>：提示詞（Prompt）：復旦大學有幾個校區？</p><p>理想輸出：復旦大學現有 4 個校區，分別是邯鄲校區、新江灣校區、楓林校區和張江校區。其中邯鄲校區是復旦大學的主校區，邯鄲校區與新江灣校區都位於楊浦區，楓林校區位於徐彙區，張江校區位於浦東新區。</p><p>利用這些有監督數據，使用與預訓練階段相同的語言模型訓練算法，在基礎語言模型基礎上再進行訓練，從而得到有監督微調模型（SFT 模型）。經過訓練的 SFT 模型具備了初步的指令理解能力和上下文理解能力，能夠完成開放領域問題、閲讀理解、翻譯、生成代碼等能力，也具備了一定的對未知任務的泛化能力。由於有監督微調階段的所需的訓練語料數量較少，SFT 模型的訓練過程並不需要消耗非常大量的計算。根據模型的大小和訓練數據量，通常需要數十塊 GPU，花費數天時間完成訓練。SFT 模型具備了初步的任務完成能力，可以開放給用戶使用，很多類 ChatGPT 的模型都屬於該類型，包括：Alpaca、Vicuna、MOSS、ChatGLM-6B 等。很多這類模型效果也非常好，甚至在一些評測中達到了 ChatGPT 的 90% 的效果。當前的一些研究表明有監督微調階段數據選擇對 SFT 模型效果有非常大的影響，因此如何構造少量並且高質量的訓練數據是本階段有監督微調階段的研究重點。</p><p>目標是構建一個文本質量對比模型，對於同一個提示詞，SFT 模型給出的多個不同輸出結果的質量進行排序。獎勵模型（RM 模型）可以通過二分類模型，對輸入的兩個結果之間的優劣進行判斷。RM 模型與基礎語言模型和 SFT 模型不同，RM 模型本身並不能單獨提供給用戶使用。獎勵模型的訓練通常和 SFT 模型一樣，使用數十塊 GPU，通過幾天時間完成訓練。由於 RM 模型的準確率對於強化學習階段的效果有着至關重要的影響，因此對於該模型的訓練通常需要大規模的訓練數據。Andrej Karpathy 在報告中指出，該部分需要百萬量級的對比數據標註，而且其中很多標註需要花費非常長的時間才能完成。圖 2.3 給出了 InstructGPT 系統中獎勵模型訓練樣本標註示例。可以看到，示例中文本表達都較為流暢，標註其質量排序需要制定非常詳細的規範，標註人員也需要非常認真的對標規範內容進行標註，需要消耗大量的人力，同時如何保持眾包標註人員之間的一致性，也是獎勵建模階段需要解決的難點問題之一。此外獎勵模型的泛化能力邊界也在本階段需要重點研究的另一個問題。如果 RM 模型的目標是針對所有提示詞系統所生成輸出都能夠高質量的進行判斷，該問題所面臨的難度在某種程度上與文本生成等價，因此如何限定 RM 模型應用的泛化邊界也是本階段難點問題。</p><p><img src="https://bbs-img.huaweicloud.com/blogs/img/20231124/1700819609846149973.png" referrerpolicy="no-referrer"></p><p>圖 2.3 InstructGPT 系統中獎勵模型訓練樣本標註示例</p><p><strong>強化學習</strong><strong>（</strong><strong>Reinforcement Learning</strong><strong>）階段</strong>根據數十萬用戶給出的提示詞，利用在前一階段訓練的 RM 模型，給出 SFT 模型對用戶提示詞補全結果的質量評估，並與語言模型建模目標綜合得到更好的效果。該階段所使用的提示詞數量與有監督微調階段類似，數量在十萬量級，並且不需要人工提前給出該提示詞所對應的理想回復。使用強化學習，在 SFT 模型基礎上調整參數，使得最終生成的文本可以獲得更高的獎勵（Reward）。該階段所需要的計算量相較預訓練階段也少很多，通常也僅需要數十塊 GPU，經過數天時間的即可完成訓練。文獻[給出了強化學習和有監督微調的對比，在模型參數量相同的情況下，強化學習可以得到相較於有監督微調好得多的效果。關於為什麼強化學習相比有監督微調可以得到更好結果的問題，截止到 2023 年 9 月也還沒有完整和得到普遍共識的解釋。此外，Andrej Karpathy 也指出強化學習也並不是沒有問題的，它會使得基礎模型的熵降低，從而減少了模型輸出的多樣性。在經過強化學習方法訓練完成後的 RL 模型，就是最終提供給用戶使用具有理解用戶指令和上下文的類 ChatGPT 系統。由於強化學習方法穩定性不高，並且超參數眾多，使得模型收斂難度大，再疊加 RM 模型的準確率問題，使得在大規模語言模型如何能夠有效應用強化學習非常困難。</p><p>大語言模型研究進展之快，讓在自然語言處理領域開展了近三十年工作的我們也難以適從。其研究之火爆程度令人咋舌，自然語言處理領域重要國際會議 EMNLP，2022 年語言模型相關論文投稿佔比只有不到 5%。然而，2023 年語言模型相關投稿則超過了 EMNLP 整體投稿的 20%。如何能夠兼顧大語言模型的基礎理論，又能夠在快速發展的各種研究中選擇最具有代表性的工作介紹給大家，是寫作中面臨的最大挑戰之一，受限於我們的認知水平和所從事的研究工作的侷限，對其中一些任務和工作的細節理解可能存在不少錯誤，也懇請專家、讀者批評指正！</p><p>&nbsp;</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" rel="nofollow" target="_blank"><strong>點擊關注，第一時間瞭解華為雲新鮮技術~</strong></a></p><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 05:52:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4526289/blog/10278002</guid>
            <link>https://my.oschina.net/u/4526289/blog/10278002</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[滴滴昨晚系統服務故障，技術團隊連夜修復]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>11 月 28 日凌晨，「滴滴崩了」相關話題登上微博熱搜，多個用戶表示滴滴 App 無法正常使用。對此滴滴緊急迴應稱「由於系統故障，今天晚間滴滴 App 服務出現異常，經技術同學緊急修復，目前正陸續恢復中。」</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-795f1525cfa56ab2e93c3007ac4f10118a3.png" referrerpolicy="no-referrer"></p><p>從用戶反饋看，11 月 27 日晚間 10 點多起，陸續有用戶反饋無法使用滴滴旗下相關 App，滴滴搶修超過了 9 小時。</p><p>對此，在 11 月 28 日早間，<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F2838754010%2FNuBQfuzij" target="_blank">滴滴發佈微博更新了恢復情況</a></u>，滴滴稱「經技術團隊連夜修復，滴滴網約車等服務已恢復，用戶可下載滴滴 App 使用打車服務。騎車等服務還在陸續修復中，所有可開鎖或未關鎖的青桔車輛均可免費騎行，希望能為緩解早高峯壓力努力多做一點點。」</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-3e973f0017d2a44b92e63ec57b2224d9ef6.png" referrerpolicy="no-referrer"></p><p>雖然滴滴表示網約車服務已恢復，但是不少用戶早間在微博反饋仍然無法打車，只能選擇其他平台出行。</p><p>從司機反饋看，此次滴滴平台在接單、定位、計費等環節上都出現了問題。有網約車司機表示，昨晚 App 崩潰時剛好在接單，「從晚上 10 點 20 分開始什麼都做不了，客服電話也進不了線。目前恢復了少部分功能，但不能正常使用，很多錯單亂單，還出現了多位司機接同一單的現象。」</p><p>有業內人士表示，出問題的應該是滴滴自己的 IDC，這種事故也會加速滴滴全部上雲的步伐。從過往情況看，滴滴崩潰多是因為機房網絡故障等原因，不過故障當天都能修好，本次故障維修時長或是滴滴歷次故障之最。</p><p>目前滴滴由滴滴雲提供服務。滴滴雲官網顯示，滴滴出行的雲計算服務基於滴滴出行的業務技術和經驗積累，採用領先的雲計算架構、高規格服務器集羣搭建、高性能資源配置機制、精細化運營模式，致力於為開發者提供簡單快捷、高效穩定、高性價比、安全可靠的 IT 基礎設施雲服務。</p><p>在今年 2 月，滴滴雲發佈公告，由於產品線調整，滴滴雲在 2023 年 3 月 31 日起將不再對外提供公有云服務。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 04:29:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268480</guid>
            <link>https://www.oschina.net/news/268480</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[龍芯宣佈兼容 IE 的龍芯瀏覽器]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0px; margin-right:0px; text-align:start">在今日上午舉辦的 2023 龍芯產品發佈暨用戶大會上，龍芯中科介紹了龍芯平台當前的生態發展，稱其已可運行絕大多數 X86 / Linux 應用，並爭取 1-2 年後流暢運行絕大多數 X86 / Windows 應用。</p><p style="margin-left:0px; margin-right:0px; text-align:start"><img alt="" src="https://oscimg.oschina.net/oscnet/up-a41459afcde42a92f9ad416d6fca4d8f732.png" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px; text-align:start">龍芯平台已支持多個國產操作系統和基礎應用，後續將通過二進制翻譯運行 X86 應用，兼容 Windows 和安卓應用。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-86b36d9e89683e59c00caa945cf2aab9fef.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-9c91a07b40ce827b5d10883b6fe1138abc2.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-55e8d68de37d96583e2acb6ba8d53dba16b.png" referrerpolicy="no-referrer"></p><p>大會上，龍芯中科宣佈了與 IE 瀏覽器兼容的<strong>「龍芯瀏覽器」</strong>。從官方公開的 PPT 可以看到，龍芯瀏覽器之所以在 2023 年還兼容 IE，是因為我國信息系統主要基於 IE 構建。</p><p style="margin-left:0px; margin-right:0px; text-align:start"><img alt="" src="https://oscimg.oschina.net/oscnet/up-b7fb745bc3039ea3eb00357a2cc36dd5d5d.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 04:10:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268477</guid>
            <link>https://www.oschina.net/news/268477</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Reddit 再次試水 IPO]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">彭博社</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bloomberg.com%2Fnews%2Farticles%2F2023-11-27%2Freddit-leads-class-of-2024-us-ipo-candidates-testing-the-water%3Fsref%3Dgni836kR" target="_blank"><span style="color:#2980b9">報道</span></a><span style="color:#000000">稱，Reddit「正在與潛在投資者就首次公開募股進行談判。」&nbsp;</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">Reddit 總部位於舊金山，由&nbsp;Steve Huffman&nbsp;、Aaron Swartz 和 Alexis Ohanian 於 2005 年聯合創立。消息人士透露，該公司正在考慮最早在明年第一季度上市。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><img height="331" src="https://oscimg.oschina.net/oscnet/up-2b1b4904c5ce1731bc1a4743a3619d6d07d.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">2021 年 12 月，Reddit 祕密向美國證券交易委員會提交了一份上市註冊聲明草案，但相關計劃並未成功實現。此舉發生在 Reddit 獲得由富達（Fidelity）領投的 4.1 億美元鉅額融資、估值達到 100 億美元的幾個月之後。當時，Reddit 計劃以 7 億美元完成 F 輪融資。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">然後，在 2022 年 1 月，Reddit 甚至邀請摩根士丹利和高盛參與上市工作。當時，該公司考慮的估值高達 150 億美元。&nbsp;</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">目前尚不清楚如果該公司真的上市，明年的估值將會達到多少。Reddit 發言人向外媒 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftechcrunch.com%2F2023%2F11%2F27%2Freddit-might-once-again-be-flirting-with-an-ipo%2F" target="_blank">TechCrunch</a> 表示，該公司正處於靜默期，無法發表評論。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 03:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268471/reddit-might-once-again-flirting-ipo</guid>
            <link>https://www.oschina.net/news/268471/reddit-might-once-again-flirting-ipo</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[周熱點 | 微軟開源 Terminal Chat；Fish Shell 採用 Rust 重寫會導致性能下降；程序員篡改 ETC 餘額......]]>
            </title>
            <description>
                <![CDATA[回顧一週熱門資訊。2023.11.20-2023.11.27]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 03:18:00 GMT</pubDate>
            <guid isPermaLink="false">https://mp.weixin.qq.com/s?__biz=MzA4OTI5NjUwOA==&#38;mid=2649094007&#38;idx=1&#38;sn=c31a714cf204a2b39bc6c24fc06671d9&#38;chksm=880c4c64bf7bc57274d01421a2877a746fb9f7fbeaaada17eb65b684a5f45c287aa67387684a&#38;token=958250931&#38;lang=zh_CN#rd</guid>
            <link>https://mp.weixin.qq.com/s?__biz=MzA4OTI5NjUwOA==&#38;mid=2649094007&#38;idx=1&#38;sn=c31a714cf204a2b39bc6c24fc06671d9&#38;chksm=880c4c64bf7bc57274d01421a2877a746fb9f7fbeaaada17eb65b684a5f45c287aa67387684a&#38;token=958250931&#38;lang=zh_CN#rd</link>
        </item>
        <item>
            <title>
                <![CDATA[龍芯 3A6000 桌面處理器正式發佈，國產之光！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>在今日上午舉辦的&nbsp;2023 龍芯產品發佈暨用戶大會上，龍芯 3A6000 國產桌面通用處理器正式發佈。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-3e6662d2058f428348499738edb731d2f88.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-2bf0856cd3fa1f2a6bae9ce059cc87ace7f.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-064f9db667224d22c42556b43acac5bafe7.png" referrerpolicy="no-referrer"></p><blockquote><p>此處引用一下<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FWgrMt3RO7w0a1kNyydptog" target="_blank">央視新聞的報道原文</a></u></em>：<br><br><strong>龍芯 3A6000 採用我國自主設計的指令系統和架構，無需依賴任何國外授權技術，是我國自主研發、自主可控的新一代通用處理器，可運行多種類的跨平台應用，滿足各類大型複雜桌面應用場景。</strong></p><p><strong>它的推出，標誌着我國自主研發的 CPU 在自主可控程度和產品性能方面達到新高度，性能達到國際主流產品水平。</strong></p></blockquote><p>據介紹，<strong>龍芯 3A6000 </strong>擁有四個物理核 / 八個邏輯核，主頻 2.0-2.5GHz，<strong>採用第四代 64 位微架構 LA664，實現 SMT2 技術</strong>，支持雙通道 DDR4-3200 內存，片內集成安全可信模塊，支持安全啓動和國密算法（SM2、SM3、SM4）等。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-f13f4b4df7a318d97e95b08500fbdf966c5.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-b28daeabb9b929cefa3541d62533899f8cd.png" referrerpolicy="no-referrer"></p><p>龍芯 3A6000 突破了同時多線程 (SMT, Simultaneous Multi-Threading) 技術，支持 CPU 核心在同一時刻運行多個線程，<strong>相比上一代龍芯 3A5000 的單線程性能提升 60%，多線程性能提升 100%</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-59bdeef2ea7f1bf45930f2862938198ffc6.png" referrerpolicy="no-referrer"></p><p>根據龍芯官方實測，<strong>2.5GHz 龍芯 3A6000 性能可達英特爾 10 代酷睿 3.6GHz&nbsp;i3-10100 的水平</strong>，下一步爭取使用成熟工藝達到英特爾、AMD 先進工藝 CPU 的性能。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-f0c409ce43a2e7c78d093de804acbc7ce2f.png" referrerpolicy="no-referrer"></p><p>此外，<strong>龍芯後續將推 3B6000、3B7000 等桌面端產品</strong>，而在服務端已完成龍芯 3C6000 設計，筆記本端已完成 2K3000 前端設計。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-202643b33452a1f49b4f60821a77e9010eb.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-e19da8aac185fc7beffd93031306d623c92.png" referrerpolicy="no-referrer"></p><hr><p>華碩電腦開放平台中國區總經理俞元麟昨晚在其 B 站賬號（@普普通通 Tony 大叔）更新的視頻介紹了龍芯 3A6000 CPU 的性能表現：：<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV15u4y1A7aK%2F">《國產最強！龍芯中科 3A6000 台式機 CPU 性能測試》</a></em></u>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-2f786c32b8e5bec71a427021176790a2fdb.png" referrerpolicy="no-referrer"></p><hr><p><strong><span style="background-color:#e67e22">延伸閲讀</span></strong></p><ul><li><strong><a href="https://www.oschina.net/news/268453" target="news">華碩發佈龍芯 3A6000 消費級主板</a></strong></li><li><strong><a href="https://www.oschina.net/news/268477" target="news">龍芯宣佈兼容 IE 的龍芯瀏覽器</a></strong></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 03:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268459/loongson-3a6000</guid>
            <link>https://www.oschina.net/news/268459/loongson-3a6000</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
    </channel>
</rss>
