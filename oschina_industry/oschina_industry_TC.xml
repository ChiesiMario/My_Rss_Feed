<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-綜合資訊]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="https://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-綜合資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 25 Sep 2023 15:49:25 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[Tiny RDM — 現代化輕量級跨平台 Redis 桌面客戶端]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Tiny RDM 是一個現代化輕量級的跨平台 Redis 桌面客戶端，支持 Mac、Windows 和 Linux。</p><p><strong>功能特性</strong></p><ul><li>基於 Webview，無內嵌瀏覽器</li><li>更精美的界面和直觀的結構佈局</li><li>多國語言支持（點我貢獻和完善多國語言支持）</li><li>便捷的數據查看和編輯修改</li><li>更多功能持續開發中…</li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-36601911cb73477055ae902c2211d0c08ec.png" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 11:02:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/tiny-rdm</guid>
            <link>https://www.oschina.net/p/tiny-rdm</link>
        </item>
        <item>
            <title>
                <![CDATA[阿里雲通義千問 14B 模型開源]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#222222">阿里雲宣佈開源通義千問 140 億參數模型 Qwen-14B 及其對話模型 Qwen-14B-Chat，</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">免費可商用。</span><span style="background-color:#ffffff; color:#222222">據阿里雲 CTO 周靖人介紹，Qwen-14B 在多個權威評測中超越同等規模模型，部分指標甚至接近 Llama2-70B。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left"><span><strong>Qwen-14B</strong>是一款支持多種語言的高性能開源模型，相比同類模型使用了更多的</span><span>高質量數據，整體訓練數據超過 3 萬億 Token，使得模型具備更強大的推理、認</span><span>知、規劃和記憶能力。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left"><strong><span>Qwen-14B-Chat&nbsp;</span></strong><span>是在基座模型上經過精細 SFT 得到的對話模型。</span><span>藉助基座模型強</span><span>大性能，Qwen-14B-Chat 生成內容的準確度大幅提升，也更符合人類偏好，內容</span><span>創作上的想象力和豐富度也有顯著擴展。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left"><span>用戶可從魔搭社區直接下載模型，也可通過阿里雲靈積平台訪問和調用</span><span>Qwen-14B 和 Qwen-14B-Chat。</span></p><p style="margin-left:0; margin-right:0; text-align:left"><strong><span>效果展示：</span></strong></p><ul><li><p style="margin-left:0; margin-right:0; text-align:left">國際慣例自我認知</p></li></ul><p style="margin-left:0; margin-right:0; text-align:left"><img height="114" src="https://oscimg.oschina.net/oscnet/up-ba41084baf4e54574082f67689daa5ee7ad.png" width="500" referrerpolicy="no-referrer"></p><ul><li><p style="margin-left:0; margin-right:0; text-align:left">寫作創作</p></li></ul><p style="margin-left:0; margin-right:0; text-align:left"><img height="165" src="https://oscimg.oschina.net/oscnet/up-38bcc16d1d1f9d97efd019efa0766dd0427.png" width="500" referrerpolicy="no-referrer"></p><ul><li><p style="margin-left:0; margin-right:0; text-align:left">知識常識</p></li></ul><p style="margin-left:0; margin-right:0; text-align:left"><img height="135" src="https://oscimg.oschina.net/oscnet/up-07c15e6bbd711044edc21ef483bc70b8b15.png" width="500" referrerpolicy="no-referrer"></p><ul><li><p style="margin-left:0; margin-right:0; text-align:left">數學</p></li></ul><p style="margin-left:0; margin-right:0; text-align:left"><img height="137" src="https://oscimg.oschina.net/oscnet/up-29dde8414bcd875eea156ad12aa2b9a5716.png" width="500" referrerpolicy="no-referrer"></p><ul><li><p style="margin-left:0; margin-right:0; text-align:left">代碼</p></li></ul><p style="margin-left:0; margin-right:0; text-align:left"><img height="135" src="https://oscimg.oschina.net/oscnet/up-9efe859813065d5b02adf51a95674796dce.png" width="500" referrerpolicy="no-referrer"></p><ul><li><p style="margin-left:0; margin-right:0; text-align:left">安全</p></li></ul><p><img height="95" src="https://oscimg.oschina.net/oscnet/up-9e4c4580c590e97f8926d482a9d66168a3b.png" width="500" referrerpolicy="no-referrer">&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 08:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259447</guid>
            <link>https://www.oschina.net/news/259447</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[單一數據庫拆分成幾十個數據庫的意義]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote><p style="color:#000000; margin-left:0; margin-right:0; text-align:start">文章來源：微信公眾號「四海內皆兄弟」</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start">作者：薛曉剛，Oracle ACE/PG ACE partner/ TiDB MVA、佈道師/OCP 講師/ITPUB 核心專家/墨天輪 MVP/Oracle 認證/MySQL 認證/PG 認證/Oceanbase 認證/達夢數據庫認證/TiDB 認證</p></blockquote><p style="color:#000000; margin-left:0; margin-right:0; text-align:start">我經歷過很多項目，從前就一個數據庫支持上萬併發，存儲上百億行數據的級別是非常容易得。現如今的玩法不是這樣了，而是將一台數據庫能解決的事情，拆分成幾十個數據庫。有一次我的羣裏有人説有個項目將一個 Oracle 拆了 100 個 MySQL，每個 MySQL 一主兩從。也就是 2 比 300 的這樣的比例。（因為 Oracle 也是主從，算兩個吧）。這技術難度和成本上都陡增。這和最近幾年流行的微服務和中台有一定的關係。以下之言代表我個人的愚見。如有冒犯請見諒。</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start"><span>我和多個業內頂級大師的認同一樣：<strong>架構師&nbsp; 喜歡&nbsp; &nbsp;重複&nbsp; 造輪子</strong>。</span></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start">我特意分開寫，這樣突出一下&nbsp; 喜歡&nbsp; 和&nbsp; 重複，造輪子也就算了，有的時候為了生活被迫。但是如果是主觀就不對了。而且還是重複。為此有些經驗豐富的人不僅感慨「一台一體機能搞定的事，有些人強行拆成幾百台 x86，不知道圖的啥，收益是啥，投入產出比高不高？」答案是一定是比原來成本高的。不僅僅是硬件，還有人工。本來可能開發人員 30 人，現在每個 300 人根本搞不下來。接下來運維也要加人。由於數據庫一堆，沒法出報表了，來 Hadoop 做大數據吧。別人都有，我們也要有。有了 Hadoop 數據要加工，做主題，再來 30-50 人。從促進就業的角度是積極的。不過如今全國都是降薪裁員不知道還有多少企業還是能這樣搞下去？那回答剛才的提問，這是在圖什麼？</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start">餘竊以為：想想天龍八部中<span>慕容博為什麼要鼓動宋遼開戰，就明白了。這是一個意思。原文如下：</span>慕容博道：「不錯，其時我慕容氏建一支義旗，兵發山東，為大遼呼應，同時吐蕃、西夏、大理三國一時並起，咱五國瓜分了大宋，亦非難事。你看不亂我怎麼有機會？&nbsp; 如果一個系統一個數據庫再加幾十個 tomcat。10 個人搞定了。那麼我還怎麼凸顯我的能力？根本沒機會。迴歸到工作中來，我經歷過三個典型的縮容架構。給大家説説。</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start"><strong>案例 1：</strong>某公司要做一個登錄系統，用到了 Oracle、MongoDB、Redis、Memcache、Cassandra。我開始不明白這是為什麼？答：説要承載每秒 1000 個的用戶登錄需求，怕扛不住。我一聽就笑了。如果懂數據庫的就知道任何一個關係型數據庫，如果用戶登錄這種信息採用關係型數據做的話，就是一個點查的場景，建立好索引。每秒幾萬都不是問題。為什麼 1000 都擔心？其實質就是全表查呀。我問到如果你擔心登錄？那麼登錄以後得瀏覽和下單等動作任何一個都比登錄驗證用戶密碼的動作要複雜，你不擔心嗎？而且據我瞭解，這個方案的架構是把以上 5 個串行的，不知道那個架構師是不是培訓機構出來的。估計是想一層層減緩衝擊，但是不懂數據庫就這樣設計了。結果任何一個環節的問題都導致整個不能用。在我的建議下，去掉了 MongoDB、Memcache、Cassandra。其實 Redis 也可以不用。但是領導説留下吧。再去掉實在是太丟臉了。一個 Oracle 能每秒 1000 次嗎？&nbsp; 我搭建了模型給他演示了一下，每秒 3 萬。領導尷尬的説，嗯，夠用就行。Redis 還是留着吧。我知道如果這個再去掉，就實在太打臉了。為此係統穩定性急劇上升。該公司還省了一筆錢。</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start"><strong>案例 2：</strong>某公司有幾十個業務系統，希望用戶系統打通。結果各個系統之間要對用戶的註冊、註銷、變更做同步。接下來就是開發人員喜歡的接口了。大量的接口。結果是不是丟了，就是慢了。同步慢導致這裏能登錄那裏不能立即生效。丟了導致過了一天，都登錄不上去。為此運營和運維壓力都大。我瞭解了以後説你們幾十個系統都是一個數據庫實例，就是不同的 schema，甚至有的還是一個 schema。為什麼要做接口？最後一個開發組長受不了了。搞毛線啊，直接訪問吧。不做接口了。最後就直接走表與表之前的訪問，所有系統都訪問一個用戶會員表。效果是，系統穩定性急劇上升。數據永遠一致，而且訪問效率提升 1000 倍以上。其實接口這個是針對外部是不得不做的，為了是保護數據。比如支付寶對銀行，這是不同的企業。但是一個企業內部，其實沒有必要。</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start"><strong>案例 3：</strong>某公司有三個業務系統。分了 3 個開發團隊，分別用了 Oracle、MySQL 和 SQLServer 數據。結果流程是緊耦合的。一個公司業務的必然是耦合啊。結果是一個需求下來，三個開發團隊都要做，之間還有接口，每個團隊都説人力不足。結果最後該公司領導受不了了。三個數據庫合併。結果是穩定性急劇上升。原來説人力不夠的，現在夠了。因為同樣事情只做一次了，接口統統沒有了。</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start">但是如果都是這樣做，天下太平了，那慕容博沒機會了。你身邊有這樣的嗎？</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 03:44:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/oscpyaqxylk/blog/10114049</guid>
            <link>https://my.oschina.net/oscpyaqxylk/blog/10114049</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 十行代碼讓日誌存儲降低 80%]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h3_1"></span><h3>前言</h3><p style="text-align:justify">履約管理是一個面向物流商家的 OMS 工作台，自從初代目把架子搭起來之後，就沒有繼續投入了，後來一直是合作伙伴同學在負責日常維護和需求支撐。經過幾年的野蠻生長，系統已經雜草叢生，亂象百出。再後來，甚至一度成為一塊無主之地，走行業共建的方式來支持。對於一個不支持行業隔離的系統，行業共建意味這個系統將快速腐化。兩年前我開始接管履約管理，來到這片廣闊的蠻荒之地，正如所有那些渴望造物樂趣並且手裏剛好有錘子鐮刀的人，我就像一匹脫繮的野馬，腦子裏經常會產生很多大膽且新奇的想法，希望藉此把履約管理打造成一個完美的系統。只可惜真正能夠付諸實踐的少之又少，本篇就是為數不多得以落地，並且有相當實用價值 idea 中的一個，整理出來分享給有需要的同學做參考。</p><span id="OSC_h3_2"></span><h3>日誌亂象</h3><p style="text-align:justify">日誌是日常開發中最有可能被忽視，最容易被濫用的一個模塊。被忽視是因為打日誌實在是一個再簡單不過的事，前人設計好了一個 logback.xml，後面只需要依樣畫葫蘆定義一個 logger，隨手一個 info 調用就搞定，他甚至不確定這條日誌能不能打出來，也不知道會打在哪個文件，反正先跑一次試試，不行就換 error。被濫用是因為不同場景日誌的格式內容千差萬別，或者説日誌打法太靈活，太隨意了，風格太多樣化了，以至於幾乎每個人一言不合就要自己寫一個 LogUtil，我見過最誇張的，一個系統中用於打日誌的工具類，有二三十個之多，後人糾結該用哪個工具可能就要做半個小時的思想鬥爭，完美詮釋了什麼叫破窗效應。最好的學習方式就是通過反面教材吸取教訓，下面我們列舉一些最常見的日誌設計開發過程中的問題。</p><span id="OSC_h4_3"></span><h4><strong>分類之亂</strong></h4><p style="text-align:justify">一般來説，一個系統必然需要設計多個日誌文件以區分不同業務或場景，不可能所有的日誌都打到一個文件裏。但是怎麼進行分類，沒人告訴我們，於是就有了各種各樣的分類。按系統模塊分。這種分類應該是最基礎的一種分類，也是最有層次感的分類。比如履約服務中樞的系統分層。基本上每一層對應一個日誌文件。</p><p style="text-align:center"><img src="https://pic1.zhimg.com/80/v2-b868a86724884a413f29b7f34466c7ec_720w.webp" referrerpolicy="no-referrer"></p><p><strong>按租戶身份分。</strong>一般中台系統都會支持多個租戶 (行業)，每一個租戶單獨對應一個日誌文件。這種分類一般不會單獨使用，除非你要做完全意義上的租戶隔離。<strong>意識流分類法。</strong>不符合 MECE 法則，沒有清晰統一的分類邏輯，按業務分，按系統模塊分，按接口能力分，按新老鏈路分，各種分法的影子都能看到，結果就是分出來幾十個文件，打日誌的人根本就不知道這一行的日誌會打進哪個文件。以上説的各種分類方式，都不是絕對純粹的，因為無論哪一種，無論一開始設計的多麼邊界清晰，隨着時間的推進，最後都會演變為一個大雜燴。</p><ul><li>某人希望單獨監控某個類產生的日誌，新增日誌文件；</li><li>新增了一個業務，比如一盤貨，想單獨監控，新增日誌文件；</li><li>發起了一場服務化戰役，針對服務化鏈路單獨監控，新增日誌文件；</li><li>某個業務想採集用戶行為，又不想全接日誌消息，新增日誌文件；</li><li>資損敞口的場景，需要特別關注，新增日誌文件；</li><li>特殊時期內產生的日誌，比如大促，新增日誌文件；</li></ul><p style="text-align:justify">凡此種種，不一而足。發現沒有，總有那麼一瞬間能讓人產生新增日誌文件的神經衝動，他們的訴求和場景也不可謂不合理，儘管這些日誌的維度完全不相關，然而沒有什麼能阻止這種衝動。最開始的那一套日誌設計，就像一個瀕臨死亡的大象，不斷地被不同的利益方從身上扯下一塊分去。</p><span id="OSC_h4_4"></span><h4><strong>格式之亂</strong></h4><p style="text-align:justify">對於日誌需要有一定的格式這點相信沒有人會有異議，格式的亂象主要體現在兩個方面，一個是格式的設計上，有些系統設計了非常複雜的格式，用多種分隔符組合，支持日誌內容的分組，用關鍵詞定位的方式代替固定位置的格式，同時支持格式擴展，這對人腦和計算機去解析都是一種負擔。第二個是同一個日誌文件，還能出現不同格式的內容，堆棧和正常業務日誌混雜。來看一個例子，我不給任何提示，你能在大腦裏很快分析出這個日誌的結構嗎？</p><pre><code>requestParam$&amp;trace@2150435916867358634668899ebccf&amp;scene@test&amp;logTime@2023-06-14 17:44:23&amp;+skuPromiseInfo$&amp;itemId@1234567:1&amp;skuId@8888:1&amp;buyerId@777:1&amp;itemTags@,123:1,2049:1,249:1,&amp;sellerId@6294:1&amp;toCode@371621:1&amp;toTownCode@371621003:1&amp;skuBizCode@TMALL_TAOBAO:1&amp;skuSubBizCode@TMALL_DEFAULT:1&amp;fromCode@DZ_001:1+orderCommonInfo$&amp;orderId@4a04c79734652f6bd7a8876379399777&amp;orderBizCode@TMALL_TAOBAO&amp;orderSubBizCode@TMALL_DEFAULT&amp;toCode@371621&amp;toTownCode@371621003&amp;+</code></pre><span id="OSC_h4_5"></span><h4><strong>工具之亂</strong></h4><p style="text-align:justify">有時候甚至會出現，同一個類，同一個方法中，兩行不同的日誌埋點，打出來的日誌格式不一樣，落的日誌文件也不一樣。為什麼會出現這種情況？就是因為用了不同的日誌工具。要究其根源，我們需要分析一下不同的工具究竟是在做什麼。可以發現，很多工具之間的差別就是支持的參數類型不一樣，有些是打印訂單對象的，有些是打印消息的，有些是打印調度日誌的。還有一些差別是面向不同業務場景的，比如一盤貨專用工具，負賣專用工具。還有一些差異是面向不同的異常封裝的，有些是打印 ExceptionA，有些是打印 ExceptionB 的。人間離奇事，莫過於此，或許只能用存在即合理去解釋了。</p><span id="OSC_h3_6"></span><h3>日誌分層</h3><p style="text-align:justify">我一直信奉極簡的設計原則，簡單意味着牢不可破。上面提到，一套日誌系統最終的結局一定是走向混亂，既然這種趨勢無法避免，那麼我們在最初設計的時候就只能確保一件事，保證原始的分類儘量簡單，且不重疊。其實通用的分類方式無非就兩種，一種按職能水平拆分，一種按業務垂直拆分。一般來説，一級分類，應該採用水平拆分。因為業務的邊界一般是很難劃清的，邊界相對模糊，職能的邊界就相對清晰穩定很多，職能其實反映的是工作流，工作流一經形成，基本不會產生太大的結構性變化。基於這種思路，我設計瞭如下的日誌分層。</p><p style="text-align:center"><img src="https://pic4.zhimg.com/80/v2-ad19d22bbcb1ee0df488c71b08ec897b_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify">從層次上來看，其實只有三層，入口，內核，出口。入口日誌只負責打印流量入口的出入參，比如 HSF，controller。出口日誌負責打印所有第三方服務調用的出入參。內核日誌，負責打印所有中間執行過程中的業務日誌。就三層足矣，足夠簡單，不重不漏。另外把堆棧日誌單獨拎出來，堆棧相比業務日誌有很大的特殊性，本文標題所指出的日誌存儲降低優化，也只是針對堆棧日誌做的優化，這個後面再講。</p><span id="OSC_h3_7"></span><h3>格式設計</h3><p style="text-align:justify">日誌的格式設計也有一些講究。首先日誌的設計是面向人可讀的，這個無需多言。另外也非常重要的一個點，要面向可監控的設計，這是容易被很多人忽視的一個點。基於這兩個原則，説一下我在格式設計上的一些思路。首先要做維度抽象。既然是面向監控，監控一般需要支持多個維護，比如行業維度，服務維度，商家維度等等，那麼我們就需要把所有的維度因子抽出來。那麼這些維度實際打印的時候怎麼傳給 logger 呢？建議是把他們存到 ThreadLocal 中，打的時候從上下文中取。這樣做還有一個好處是，日誌打印工具設計的時候就會很優雅，只需要傳很少的參數。格式儘量簡單，採用約定大於配置的原則，每一個維度佔據一個固定的位置，用逗號分割。切忌設計一個大而全的模型，然後直接整個的序列化為一個 JSON 字符串。也不要被所謂的擴展性給誘惑，給使用方輕易開出一個能夠自定義格式的口子，即便你能輕而易舉的提供這種能力。根據我的經驗，這種擴展性一定會被濫用，到最後連設計者也不知道實際的格式究竟是怎樣的。當然這個需要設計者有較高的視野和遠見，不過這不是難點，難的還是剋制自己炫技的慾望。在內容上，儘量打印可以自解釋的文本，做到見名知義。舉個例子，我們要打印退款標，退款標原本是用 1, 2, 4, 8 這種二進制位存儲的，打印的時候不要直接打印存儲值，翻譯成一個能描述它含義的英文 code。格式示例</p><pre><code>timeStamp|threadName logLevel loggerName|sourceAppName,flowId,traceId,sceneCode,identityCode,loginUserId,scpCode,rpcId,isYace,ip||businessCode,isSuccess||parameters||returnResult||</code></pre><p style="text-align:justify">內容示例</p><pre><code>2023-08-14 14:37:12.919|http-nio-7001-exec-10 INFO c.a.u.m.s.a.LogAspect|default,c04e4b7ccc2a421995308b3b33503dda,0bb6d59616183822328322237e84cc,queryOrderStatus,XIAODIAN,5000000000014,123456,0.1.1.8,null,255.255.255.255||queryOrderStatus,success||{"@type":"com.alibaba.common.model.queryorder.req.QueryOrderListReq","currentUserDTO":{"bizGroup":888,"shopIdList":[123456],"supplierIdList":[1234,100000000001,100000000002,100000000004]},"extendFields":{"@type":"java.util.HashMap"},"invokeInfoDTO":{"appName":"uop-portal","operatorId":"1110","operatorName":"account_ANXRKY8NfqFjXvQ"},"orderQueryDTO":{"extendFields":{"@type":"java.util.HashMap"},"logisTypeList":[0,1],"pageSize":20,"pageStart":1},"routeRuleParam":{"@type":"java.util.HashMap","bizGroup":199000},"rule":{"$ref":"$.routeRuleParam"}}||{"@type":"com.alibaba.common.model.ResultDTO","idempotent":false,"needRetry":false,"result":{"@type":"com.alibaba.common.model.queryorderstatus.QueryOrderStatusResp","extendFields":{"@type":"java.util.HashMap"}},"success":true}||</code></pre><span id="OSC_h3_8"></span><h3>堆棧倒打</h3><p style="text-align:justify">本文的重點來啦，這個設計就是開頭提到的奇思妙想。堆棧倒打源於我在排查另一個系統問題過程中感受到的幾個痛點，首先來看一個堆棧示例。</p><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-b85e443818a5d8815964fbbb06a5e0ee_720w.webp" referrerpolicy="no-referrer"></p><p>這麼長的堆棧，這密密麻麻的字母，即使是天天跟它打交道的開發，相信第一眼看上去也會頭皮發麻。回想一下我們看堆棧，真正想得到的是什麼信息。所以我感受到的痛點核心有兩個。第一個是，SLS(阿里雲日誌產品系統) 上搜出來的日誌，默認是摺疊的。對於堆棧，我們應該都知道，傳統異常堆棧的特徵是，最頂層的異常，是最接近流量入口的異常，這種異常我們一般情況下不太關心。最底層的異常，才是引起系列錯誤的源頭，我們日常排查問題的時候，往往最關心的是錯誤源頭。所以對於堆棧日誌，我們無法通過摘要一眼看出問題出在哪行代碼，必須點開，拉到最下面，看最後一個堆棧才能確定源頭。我寫了一個錯誤示例來説明這個問題。常規的堆棧結構其實分兩部分，我稱之為，異常原因棧，和錯誤堆棧。</p><p style="text-align:center"><img src="https://pic4.zhimg.com/80/v2-8b99db6a76ead8d6f00bae77d13fc8a7_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify">如上，一個堆棧包含有三組異常，每一個 RuntimeException 是一個異常，這三個異常連起來，我們稱為一個<strong>異常原因棧</strong>。每一個 RuntimeException 內部的堆棧，我們稱為<strong>錯誤堆棧</strong>。説明一下，這兩個名詞是我杜撰的，沒有看到有人對二者做區分，我們一般都統稱為堆棧。讀者能理解我想表達的就行，不用太糾結名詞。第二個痛點是，這種堆棧存儲成本太高，有效信息承載率很低。老實説這一點可能大多數一線開發並沒有太強烈的體感，但在這個降本增效的大環境下，我們每個人應該把這點作為自己的 OKR 去踐行，變被動為主動，否則在機器成本和人力成本之間，公司只好做選擇題了。現在目標很明確了，那我們就開始對症下藥。核心思路有兩個。針對堆棧摺疊的問題，採用堆棧倒打。倒打之後，最底層的異常放在了最上面，甚至不用點開，瞟一眼就能知道原因。</p><p style="text-align:center"><img src="https://pic2.zhimg.com/v2-89f7a5f4b16f386a7d1b94485177fcc1_r.jpg" referrerpolicy="no-referrer"></p><p style="text-align:justify">同時我們也支持異常原因棧層數配置化，以及錯誤堆棧的層數配置化。解這個問題，本質上就是這樣一個簡單的算法題：倒序打印堆棧的最後 N 個元素。核心代碼如下。</p><pre><code>/**
 * 遞歸逆向打印堆棧及 cause(即從最底層的異常開始往上打)
 * @param t 原始異常
 * @param causeDepth 需要遞歸打印的 cause 的最大深度
 * @param counter 當前打印的 cause 的深度計數器 (這裏必須用引用類型，如果用基本數據類型，你對計數器的修改只能對當前棧幀可見，但是這個計數器，又必須在所有棧幀中可見，所以只能用引用類型)
 * @param stackDepth 每一個異常棧的打印深度
 * @param sb 字符串構造器
 */
public static void recursiveReversePrintStackCause(Throwable t, int causeDepth, ForwardCounter counter, int stackDepth, StringBuilder sb){
    if(t == null){
        return;
    }
    if (t.getCause() != null){
        recursiveReversePrintStackCause(t.getCause(), causeDepth, counter, stackDepth, sb);
    }
    if(counter.i++ &lt; causeDepth){
        doPrintStack(t, stackDepth, sb);
    }
}</code></pre><p style="text-align:justify">要降低存儲成本，同時也要確保信息不失真，我們考慮對堆棧行下手，把全限定類名簡化為類名全打，包路徑只打第一個字母，行號保留。如：c.a.u.m.s.LogAspect#log:88。核心代碼如下。</p><pre><code>public static void doPrintStack(Throwable t, int stackDepth, StringBuilder sb){
    StackTraceElement[] stackTraceElements = t.getStackTrace();
    if(sb.lastIndexOf("\t") &gt; -1){
        sb.deleteCharAt(sb.length()-1);
        sb.append("Caused: ");
    }
    sb.append(t.getClass().getName()).append(": ").append(t.getMessage()).append("\n\t");
    for(int i=0; i &lt; stackDepth; ++i){
        if(i &gt;= stackTraceElements.length){
            break;
        }
        StackTraceElement element = stackTraceElements[i];
        sb.append(reduceClassName(element.getClassName()))
          .append("#")
          .append(element.getMethodName())
          .append(":")
          .append(element.getLineNumber())
          .append("\n\t");
    }
}</code></pre><p style="text-align:justify">最終的效果大概長這樣。我們隨機挑了一個堆棧做對比，統計字符數量，在同等信息量的情況下，壓縮比達到 88%。</p><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-eaa31591500cbc80c9a34ce9c88c6cae_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h3_9"></span><h3>思維拓展</h3><p style="text-align:justify">很多文章喜歡鼓吹所謂的最佳實踐，在筆者看來最佳實踐是個偽命題。當你在談最佳實踐的時候，你需要指明這個"最"是跟誰比出來的，你的適用範圍是哪些，我相信沒有任何一個人敢大言不慚自己的框架或方案是放之四海而皆準的。本文所提出的日誌設計實踐方案，是在一個典型的中台應用中落地的，三段的日誌分層方案雖然足夠簡單，足夠通用，但是最近解觸了一些富客戶端應用，這個方案要想遷移，可能就得做一些本土化的改造了。他們的特點是依賴的三方服務少，大量的採用緩存設計，這種設計的底層邏輯是，儘量使得所有邏輯能在本地客戶端執行以降低分佈式帶來的風險和成本，這意味着，可能 99% 的日誌都是內部執行邏輯打的，那我們就得考慮從另一些維度去做拆分。另外對於日誌降本，本文探討的也只是降堆棧的存儲，一個系統不可能所有日誌都是堆棧，所以實際整體的日誌存儲成本，可能降幅不會有這麼多。談這麼多，歸根結底還是一句話，不要迷信銀彈，減肥藥一類的東西，所有的技術也好，思想也好，都要量體裁衣，量力而行。</p><p style="text-align:justify">作者｜伏難</p><blockquote><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fclick.aliyun.com%2Fm%2F1000373503%2F" target="_blank"><span style="color:#ff9900">點擊立即免費試用雲產品，開啓雲上實踐之旅！</span></a></strong></blockquote><p style="text-align:justify"><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fclick.aliyun.com%2Fm%2F1000380610%2F" target="_blank">原文鏈接</a></strong></p><p style="text-align:justify"><strong>本文為阿里雲原創內容，未經允許不得轉載。</strong></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 03:06:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/yunqi/blog/10112501</guid>
            <link>https://my.oschina.net/yunqi/blog/10112501</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[罰款 200 元，沒收 100 多萬]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>微博博主稱自己「翻牆訪問國際互聯網打工被處罰百萬」。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/0924/173843_dYKe_2720166.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-4c8e2f2b485bcdbe4cc8452865dcd67e9f1.png" referrerpolicy="no-referrer"></p><p><em>來源：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcard.weibo.com%2Farticle%2Fm%2Fshow%2Fid%2F2309404949447133233199" target="_blank">https://card.weibo.com/article/m/show/id/2309404949447133233199</a></u></em></p></blockquote><p>根據這名博主提供的資料，在 2019 年 9 月份至 2022 年 11 月期間，他在家中<strong>擅自使用非法信道進行國際聯網</strong>，為境外公司提供網絡顧問服務，<strong>違法所得共計人民幣 1058000 餘元</strong>。</p><p>根據《中華人民共和國計算機信息網絡國際聯網管理暫行規定》第六條和第十四條、《中華人民共和國計算機信息網絡國際聯網管理暫行規定實施辦法》第七條和第二十二條第一款之規定，這名博主受到了行政處罰，並處罰款貳佰元整，沒收違法所得一百零五萬八千元。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-4c9d4c52a10a1b05cf39730b000daa514e2.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-326b36667644a24fce944857b5a461dd043.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 09:56:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259325</guid>
            <link>https://www.oschina.net/news/259325</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[向 PC 廠商付錢阻礙 AMD 進入市場，英特爾被歐盟罰款 4 億美元]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">歐盟因一起&nbsp;<span style="background-color:#ffffff">2002 年至 2007&nbsp;</span>期間的市場壟斷案件對英特爾處以 4 億美元（3.76 億歐元）</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fec.europa.eu%2Fcommission%2Fpresscorner%2Fdetail%2Fen%2Fqanda_23_4571" target="_blank">的罰款</a><span style="color:#000000">。<span style="background-color:#ffffff">導致此罰款的案件與英特爾在 PC 處理器市場的商業行為有關，該公司以赤裸裸的限制行為阻礙競爭對手進入市場。</span></span></p><p><img height="259" src="https://oscimg.oschina.net/oscnet/up-2b85d5cfbdb20a92efee4134f93b711f816.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">相關裁決可追溯到 2009 年，彼時歐盟委員會對英特爾處以創紀錄的 10.6 億歐元罰款，理由是英特爾濫用其在 x86 中央處理單元（「CPU」）計算機芯片市場的主導地位。該公司的一些過分行為包括：</span></p><ul><li><span style="color:#000000">向計算機製造商提供全部或部分隱性回扣，條件是他們從英特爾購買全部或幾乎全部 x86 CPU（即所謂的「conditional rebates」&nbsp;）；</span></li><li><span style="color:#000000">向計算機製造商付費，以停止或推遲推出包含競爭對手 x86 CPU 的特定產品，並限制這些產品的銷售渠道（所謂的「naked restrictions」）。</span></li></ul><p><span style="color:#000000">此後英特爾方面提起了上訴，歐洲第二高等法院「歐盟普通法院」(General Court) 於 2022 年判決認為，歐盟委員會對英特爾有條件回扣的評估不完整，並認為該決定沒有充分證明這些回扣具有限制競爭的能力。該公司的一些行為（如隱性回扣）在上訴時因缺乏相關證據而被撤銷。</span></p><p><span style="color:#000000">但委員會仍認定了英特爾付錢給 PC 製造商以推遲或限制使用 AMD 處理器的產品的事實。</span><span style="color:#000000"><span style="background-color:#ffffff">並具體舉例稱：</span></span></p><ul><li><span style="color:#000000">2002 年 11 月至 2005 年 5 月期間，英特爾向惠普付款，條件是惠普 (i) 僅向中小型企業銷售基於其競爭對手 AMD x86 CPU 的商用台式機；(ii) 僅通過直接分銷渠道（而非分銷商）；(iii) 惠普推遲 6 個月在歐洲推出首款基於 AMD 的商用台式機。</span></li><li><span style="color:#000000">英特爾向宏碁支付款項的條件是，宏碁將基於 AMD 的筆記本電腦的推出時間從 2003 年 9 月推遲到 2004 年 1 月。</span></li><li><span style="color:#000000">英特爾向聯想付款的條件是，聯想將基於 AMD 的筆記本電腦的推出時間從 2006 年 6 月推遲到 2006 年底。</span></li></ul><p>「<span style="color:#000000">由於這些限制行為，計算機製造商停止、推遲或限制基於競爭對手芯片組的產品的商業化，而這些產品是他們積極計劃的，並且有消費者需求。因此，英特爾公司赤裸裸的限制對市場競爭造成了不利影響，剝奪了消費者本來可以擁有的選擇權。&nbsp;</span>」</p><p><span style="color:#000000">歐盟委員會目前正在就 <span style="background-color:#ffffff">General Court&nbsp;</span>對英特爾回扣行為的判決提起上訴，官方已向歐盟最高法院 -- 歐盟法院提出上訴。如果上訴被受理，英特爾被要求支付的罰款可能會增加。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 08:19:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259446/eu-intel-400-million-blocking-amds-market-access</guid>
            <link>https://www.oschina.net/news/259446/eu-intel-400-million-blocking-amds-market-access</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[馬斯克硬核遷移服務器]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>馬斯克傳裏面有一個故事，去年底馬斯克接手 Twitter 後為了省錢，要將薩克拉門託的服務器搬到波特蘭，IT 經理跟馬斯克彙報説要 9 個月，馬斯克覺得這時間太長了，一個月就能搞定，但 IT 經理堅持不妥協，於是他親自跑到機房拔電源租卡車搬服務器。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/0925/152809_qJYK_2720166.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-08b1517c2a8541bf0ccb680727cc7118b0d.png" referrerpolicy="no-referrer"></p></blockquote><p>《伊隆·馬斯克親自搬運服務器，彰顯他在 X 公司（此前為 Twitter）的「狂熱緊迫感」》</p><p>*此內容改編自 Walter Isaacson 本月出版的傳記《伊隆·馬斯克》。</p><p>「這個時間表看起來像是我會認為勉強可以接受的嗎？」馬斯克問道。「顯然不是。如果計劃時間長，那就是錯的。」</p><p>那是 12 月 22 日深夜，位於 X 公司 10 樓的會議室，馬斯克正在與兩名基礎設施經理進行緊張的交談。他們之前與他的接觸並不多，尤其是在他心情不好時。</p><p>其中一人試圖解釋問題。位於薩克拉門託的一家數據服務公司允許 X 公司延長其服務器租約，以便在 2023 年有序遷出。「但今天早上」，這名顯得有些緊張的經理告訴馬斯克，「他們回來告訴我們説這個計劃不再適用，因為他們認為我們在財務上不再穩健。」</p><p>這個設施每年花費 X 公司超過 1 億美元。馬斯克想通過將服務器遷移到 X 公司在俄勒岡州波特蘭的其他設施來節省這筆費用。另一位經理表示這項工作不能立即進行。她平靜地説：「我們至少需要六到九個月的時間，因為薩克拉門託仍然需要服務流量。」</p><p>多年來，馬斯克經常面臨着他認為的必要與別人告訴他的可能之間的選擇。結果幾乎總是一樣的。他沉默了幾秒鐘，然後宣佈：「你們有 90 天時間來完成這項任務。如果你們做不到，你們可以辭職。」</p><p>這名經理開始詳細解釋遷移服務器到波特蘭的障礙。「機架密度不同，電力密度也不同」，她説。「所以機房需要進行升級。」她開始詳細介紹更多，但被馬斯克打斷。</p><p>「這讓我的大腦感到壓抑」，他説。</p><p>「對不起，我沒有這個意思」，她平穩地回答。</p><p>「你知道頭爆炸的表情符號嗎？」他問她。「我的腦袋現在就是這個感覺。真是一堆屁話。波特蘭明顯有大量的空間，從一個地方遷移到另一個地方簡直小菜一碟。」</p><p>當 X 公司的經理們再次試圖解釋時，馬斯克打斷了他們。「你們能不能去我們的服務器中心，然後給我發視頻？」他問。</p><p>那是聖誕節前的三天，經理承諾一週後提供視頻。「不，明天」，馬斯克命令。「我曾經自己建設過服務器中心，我可以判斷是否還可以放更多的服務器。這就是為什麼我問你們是否真的去過那些設施。如果你們沒有去過，那你們説的就是胡説八道。」</p><p>SpaceX 和 Tesla 的成功是因為馬斯克不懈地推動他的團隊更加敏捷、有創造力，併發起突擊衝刺以解決所有障礙。這就是他們如何在弗裏蒙特快速組裝汽車生產線，並在得克薩斯州的沙漠中建立試驗設施，以及在卡納維拉爾角使用舊零件建造發射場。</p><p>「你們需要做的就是將服務器遷移到波特蘭」，他説。「如果超過 30 天，我會很震驚。」他停頓了一下，重新計算。「找一家搬家公司，運輸電腦需要一個星期，然後再花一個星期來連接它們。兩週。就應該這樣。」</p><p>所有人都默不作聲。但馬斯克仍在發火。「如果你們租了一個 U-Haul （一家租車公司），你們可能自己就能完成。」兩位 X 公司的經理看着他，試圖判斷他是否是認真的。馬斯克的兩位親密助手 Steve Davis 和 Omead Afshar 也在場。他們多次看到過他這樣，知道他可能真的這麼認為。</p><p>「為什麼我們現在不去做？」James Musk 提議。</p><p>James 和他的弟弟 Andrew，是馬斯克的小堂弟，12 月 23 日，也就是那次令人沮喪的關於如何遷移服務器的基礎設施會議的次日，與他一同從舊金山飛往奧斯汀。他們原計劃去塔霍度過聖誕節，但那天伊隆邀請他們去奧斯汀。</p><p>James 有點猶豫，他精疲力竭，不想再加重壓力，但 Andrew 説服他們應該去。所以他們最後坐在飛機上聽伊隆抱怨服務器的事。</p><p>當飛機飛過拉斯維加斯時，James 提出了一個建議，他們現在就可以移動服務器。這是馬斯克喜歡的那種衝動、不切實際的建議。儘管已經是深夜，但他讓飛行員轉向，他們重新返回薩克拉門託。</p><p>他們着陸後能租到的唯一一輛車是豐田 Corolla。他們不確定晚上如何進入數據中心，但一個名為 Alex 的來自烏茲別克斯坦的 X 員工還在那裏。他欣然讓他們進入，並帶領他們參觀。</p><p>這個設施也為許多其他公司提供了服務器存放空間，非常安全，進入每個金庫都需要進行視網膜掃描。烏茲別克斯坦的 Alex 幫助他們進入了 X 公司的金庫，那裏有大約 5200 個冰箱大小的機架，每個機架有 30 台電腦。</p><p>「這些東西看起來並不難移動」，伊隆宣佈。這是一個扭曲現實的説法，因為每個機架重約 2500 磅，高 8 英尺。</p><p>「你們需要僱傭承包商來抬起地板面板」，Alex 説。「它們需要用吸盤來抬起。」他説，還需要另一組承包商去拆除電纜和地震杆。</p><p>馬斯克轉向他的保安，借了一把小刀。使用它，他能夠抬起地板上的一個通風口，這讓他可以撬開地板面板。然後他爬到服務器下面，用小刀撬開了一個電箱，拔掉了服務器插頭，等着看會發生什麼。沒什麼異常發生。服務器已經準備好遷移。</p><p>「這看起來並不難」，當他這麼説時，Alex 和其他人都目瞪口呆地看着他。此刻的馬斯克完全興奮起來。他大聲笑説，這就像是《碟中諜》的薩克拉門託版。</p><p>第二天——聖誕前夜，馬斯克召集了增援。Ross Nordeen，與他的朋友 James 在 Tesla 工作，從舊金山驅車而來。他在聯合廣場的 Apple Store 花了 2000 美元，買下了所有的 AirTags，這樣服務器在遷移過程中就可以被跟蹤。然後他去了家得寶，花了 2500 美元買了扳手、斷線鉗、頭燈和擰下地震螺栓所需的工具。</p><p>Steve Davis，馬斯克的忠誠副手，找人租了一輛半掛車，並安排了搬家車。其他來自 SpaceX 的援助隊員也已到達。這些服務器機架都有輪子，所以團隊能夠斷開其中四個並將它們推到待命的卡車上。這表明，這五千兩百多個服務器可能在幾天內全部移動。 「夥計們幹得好！」馬斯克興高采烈地説。</p><p>該設施的其他工作人員帶着混合的驚奇和恐懼看着。馬斯克和他的團隊在沒有用箱子包裝或用防護材料包裹的情況下，直接推動服務器，然後使用店裏買來的綁帶固定它們在卡車上。「我從未裝載過半掛車」，James 承認。Ross 稱其為「令人恐懼」。這就像清理衣櫥，「但裏面的東西都是至關重要的。」</p><p>下午 3 點，當他們把四台服務器裝到卡車上後，這一消息傳到了擁有並管理數據中心的 NTT 公司的高層。他們下令馬斯克的團隊停止行動。馬斯克的表情中混雜着歡樂和憤怒，這是他經常伴隨着他的狂熱激進時出現的情緒。他給存儲部門的 CEO 打電話，CEO 告訴他，在沒有專家的情況下，是不可能移動服務器機架的。「屁話」，馬斯克反駁。「我們已經裝了四台到半掛車上了。」</p><p>這位 CEO 隨後告訴他，一些地板承受不了超過 500 磅的壓力，所以滾動一個 2000 磅的服務器會造成損壞。馬斯克迴應説，服務器有四個輪子，所以任何一個點上的壓力只有 500 磅。「這傢伙數學真的不太行」，馬斯克告訴他的隊友。</p><p>在破壞了 NTT 管理層的聖誕前夜，並使他們在明年可能損失超過 1 億美元的收入後，馬斯克表示同情，並説他會暫停遷移服務器兩天。但他警告説，聖誕節後他們會繼續。</p><p>聖誕節後，Andrew 和 James 返回薩克拉門託，看看他們還能移動多少服務器。他們沒有帶足夠的衣服，所以去了沃爾瑪買了牛仔褲和 T 恤。</p><p>NTT 希望他們使用的搬運承包商收費是每小時 200 美元。所以 James 在 Yelp 上找到了一個名為 Extra Care Movers 的公司，他們只需要十分之一的費用。這家看起來有些亂七八糟的公司將低成本的理念發揮到極致。老闆曾在街上流浪，後來有了孩子，他正在試圖重整旗鼓。他沒有銀行賬戶，所以 James 使用 PayPal 支付給他。</p><p>第二天，工作團隊希望付現金，所以 James 去銀行從他的個人賬戶中取出了 13,000 美元。兩名團隊成員沒有身份證明，這使得他們很難進入設施。但他們用勤奮彌補了這一點。「每多移動一台服務器，你們可以得到一美元的小費」，James 在某個時刻宣佈。從那時起，每當他們將新的服務器裝到卡車上，工人們都會問他們現在裝了多少。</p><p>服務器上有用戶數據，James 最初並沒有意識到，出於隱私原因，它們在遷移前應該被徹底擦除。「當我們知道這個時候，服務器已經被拔掉並推出去，所以我們不可能再推回去，插入，然後再擦除」，他説。此外，擦除軟件也不能工作。「靠，我們怎麼辦？」他問。伊隆建議他們鎖住卡車並進行追蹤。</p><p>所以 James 派人到家得寶買了一些大的掛鎖，他們將組合代碼發送到波特蘭，以便卡車可以在那裏被打開。「我簡直不敢相信它起作用了」，James 説。「他們都安全地到達了波特蘭。」</p><p>到這周結束時，他們已經使用了薩克拉門託所有可用的卡車。儘管該地區受到了雨的襲擊，他們在三天內移動了 700 多個機架。該設施之前的記錄是一個月移動 30 台。這仍然留下了大量的服務器在設施中，但這羣人已經證明瞭它們可以被快速移動。其餘的部分在 1 月份由 X 公司的基礎設施團隊處理。</p><p>這一切聽起來都很激動人心和鼓舞人心，對吧？這是馬斯克大膽和有創意的方法的一個例子！但與所有關於馬斯克的事情一樣，這也並非那麼簡單。這也是他魯莽、對反駁的不耐煩和他恐嚇人們的一個例子。一個星期前，X 公司的基礎設施工程師在那次令人頭疼的會議中試圖解釋為什麼快速關閉薩克拉門託中心會有問題，但他打斷了他們。他在忽略否定者時有很好的記錄。但並不完美。</p><p>在接下來的兩個月裏，X 公司不穩定。服務器的缺乏導致了多次系統崩潰，包括當馬斯克為總統候選人 Ron DeSantis 主持 Twitter Spaces 時。到 2023 年 3 月，馬斯克會承認：「回頭看，整個薩克拉門託的關停是一個錯誤。有人告訴我我們的數據中心有冗餘。我不知道的是，我們有 70,000 個硬編碼的引用指向薩克拉門託。由此導致的問題至今仍然存在。」</p><p>在 Tesla 和 SpaceX，他最有價值的助手已經學會瞭如何避開他的壞主意，並給他逐漸透露不受歡迎的信息，但 X 公司的老員工不知道該怎麼處理他。也就是説，X 公司還活着。薩克拉門託的事件向 X 公司的員工展示了，當他談到需要狂熱的緊迫感時，他是認真的。</p><p>Walter Isaacson 是 CNBC 的撰稿人，他還寫過關於伊隆·馬斯克、Jennifer Doudna、Leonardo da Vinci、Steve Jobs、Albert Einstein、Benjamin Franklin 和 Henry Kissinger 的傳記。他在 Tulane 大學教授歷史，曾是 Time 雜誌的編輯和 CNN 的 CEO。</p><p>相關鏈接</p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1727858283%2FNkRTyymTQ" target="_blank">https://weibo.com/1727858283/NkRTyymTQ</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fthecat%2Fstatus%2F1705860673149059115" target="_blank">https://twitter.com/thecat/status/1705860673149059115</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cnbc.com%2F2023%2F09%2F11%2Felon-musk-moved-twitter-servers-himself-in-the-night-new-biography-details-his-maniacal-sense-of-urgency.html" target="_blank">https://www.cnbc.com/2023/09/11/elon-musk-moved-twitter-servers-himself-in-the-night-new-biography-details-his-maniacal-sense-of-urgency.html</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 07:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259436/elon-musk-moved-twitter-servers-himself</guid>
            <link>https://www.oschina.net/news/259436/elon-musk-moved-twitter-servers-himself</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[TCP 擁塞控制拯救了互聯網]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>這篇文章<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theregister.com%2F2023%2F09%2F24%2Ftcp_congestion_control_internet%2F" target="_blank">介紹</a>了 <strong>TCP 擁塞控制如何拯救互聯網</strong>。</p><blockquote><p><img alt="" src="https://static.oschina.net/uploads/space/2023/0925/120655_8mQ8_2720166.png" referrerpolicy="no-referrer"></p></blockquote><p>在今年的 SIGCOMM 會議上，儘管關於 TCP 擁塞控制的第一篇論文已經發表了 35 年，但擁塞控制仍然在會議議程中佔有一個小時的時間。</p><p>關於 TCP/IP 協議為何比同時代的協議更成功，有許多理論，但這些理論並不容易驗證。互聯網協議的成功很可能有很多因素。文章觀點認為，<strong>擁塞控制是使互聯網從中等規模發展到全球規模的關鍵因素之一</strong>。</p><p>在 David Clark 的論文「DARPA 互聯網協議的設計哲學」中，一個明確的設計目標是：「<strong>互聯網架構必須允許其資源進行分佈式管理</strong>。」這個目標有許多不同的含義，但 Jacobson 和 Karels 首次在 TCP 中實現擁塞控制就是一個很好的例子，體現了他們對這個原則的重視。</p><p>文章之所以將互聯網的成功歸功於擁塞控制算法，其中一個原因是，互聯網的失敗之路在 1986 年就已清晰可見。Jacobson&nbsp;描述了一些早期的擁塞崩潰事件，導致吞吐量下降了三倍。</p><hr><p>延伸閲讀</p><ul><li><a href="https://www.oschina.net/news/252693/google-bbr-v3-linux" target="_blank">谷歌稱 TCP 擁塞控制算法 BBRv3 表現出色，本月提交到 Linux 內核主線</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 04:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259408/tcp-congestion-control-internet</guid>
            <link>https://www.oschina.net/news/259408/tcp-congestion-control-internet</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Unity 致社區公開信，調整 runtime fee 政策]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>面對此前制定的<a href="https://www.oschina.net/news/257929/unity-runtime-fee" target="_blank">"Funtime Fee"收費政策</a>所引發的用戶爭議與不滿，<span style="color:#333333">Unity Create 負責人 Marc Whitten 正式發佈了一封致社區的道歉<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.unity.com%2Fnews%2Fopen-letter-on-runtime-fee" target="_blank">公開信</a>，並詳細解釋了其定價策略的變更。</span></p><blockquote><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span>我想以此開始：對不起。&nbsp;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span>在宣佈新的 Runtime Fee 政策之前，我們本應與大家進行更多的溝通，我們本應採納更多的反饋意見。我們制定此政策的目標是確保我們能夠在今天和明天繼續為您提供支持，並繼續深入投資我們的遊戲引擎。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span>你們讓 Unity 變得偉大，我們知道我們需要傾聽並努力贏得您的信任。我們已經聽到了您的擔憂，並且正在對我們宣佈的政策進行更改以解決這些問題。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p></blockquote><p style="margin-left:0; margin-right:0; text-align:start"><img alt="" height="167" src="https://oscimg.oschina.net/oscnet/up-03756292fbd61192f7edc3f71fc2060de26.jpg" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">根據修訂後的條款，<strong>Unity Personal </strong></span><strong>plan&nbsp;</strong><span style="color:#000000"><strong>將保持免費，</strong>並且基於 Unity Personal&nbsp;構建的遊戲將不收取 Runtime Fee；同時個人版的適用範圍也從每年收入 10 萬美元以下提高到 20 萬美元，並取消了使用 Made with Unity 啓動畫面的要求。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">對於企業版和專業版用戶，過去 12 個月收入達到或超過 100 萬美元，仍需繳納該費用。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">使用當前版本的 Unity 開發的任何遊戲都無需支付 Runtime Fee，Runtime Fee 政策將僅適用於 2024 年採用最新版本的開發者。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">而對於需要繳納 Runtime Fee 的遊戲，則可以選擇按&nbsp;<strong>2.5% 的收入分成</strong>，或者根據每月參與遊戲的新用戶數量計算付費，具體可以較低者為準。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">更多詳情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.unity.com%2Fnews%2Fopen-letter-on-runtime-fee" target="_blank">查看官方公告</a>。</span></p><p style="margin-left:0px; margin-right:0px; text-align:start"><strong><span style="color:#000000">相關閲讀：</span></strong></p><ul><li><a href="https://www.oschina.net/news/258513/unity-apologize-for-runtime-fee" target="_blank">Unity 道歉：將修改 "runtime fee" 收費政策</a></li><li><a href="https://www.oschina.net/news/257929/unity-runtime-fee">Unity 引擎明年起根據遊戲安裝量收費 (runtime fee)</a></li><li><a href="https://www.oschina.net/news/258280/unity-closes-offices-following-death-threats">遊戲引擎開發商 Unity 收到死亡威脅</a></li><li><a href="https://www.oschina.net/news/258477/wait-is-unity-allowed-to-just-change-its-fee-structure-like-that">走近 「收費門」：互相矛盾的服務條款導致 Unity 面臨被起訴的風險</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 04:15:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259300/open-letter-on-runtime-fee</guid>
            <link>https://www.oschina.net/news/259300/open-letter-on-runtime-fee</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[GitHub CEO：AI 無法取代程序員]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>GitHub 首席執行官 Thomas Dohmke 最近在公開場合分享了他對於人工智能和軟件開發之間關係的看法。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-ed3366196721b2077f4c73a8e594213ac86.png" referrerpolicy="no-referrer"></p><p>Thomas Dohmke 認為，在 Copilot 及其相關 Copilot Chat 等輔助工具的推動下，人工智能和軟件開發現在已密不可分。</p><p>與此同時，他也堅持自己的觀點——<strong>滾雪球式的人工智能革命不會給軟件開發行業敲響喪鐘</strong>。</p><p>Dohmke 説道，行業對軟件開發者的需求將繼續超過供應。事實上，Doohmke 和許多其他技術領導者一樣，長期以來一直堅持認為 Copilot 等 AI 工具只是用於提高開發者的工作效率，而不是取而代之。</p><p>至於未來，比如十年後——又會怎樣呢？</p><p>Doohmke 表示，十年內軟件的數量只會呈指數增長，我們需要管理的代碼行數越來越多，我們的想法也越來越多，坦白説，現在每家公司都是軟件公司。</p><p>Doohmke 提到行業對於軟件開發者仍有高需求的原因之一是大量「老」代碼仍然以其原始形式存在。比如銀行和金融機構仍在運行 60 年代的 COBOL 代碼，而那些 60 年代的開發者現在都退休了。而且當時的代碼沒有采用基於單元測試和 CI/CD 進行編寫，因此必須有人維護它，並希望將 COBOL 代碼轉換為 Java 或 Python。</p><p>當然，隨着公司發展其技術棧，可能並不需要長期維護遺留的老代碼。但 Doohmke 認為，生成式人工智能本身將創造更多對技術人才的需求。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 03:35:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259402</guid>
            <link>https://www.oschina.net/news/259402</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[智譜 AI 推出數學模型 MathGLM]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000"><span style="background-color:#ffffff">智譜 AI 宣佈推出數學模型 MathGLM，以提升大語言模型的數學推理能力。它可以在不使用計算器工具的情況下，執行復雜算術運算，解答中文數學應用題，部分表現超過 GPT4 和 ChatGPT，目前已在魔搭社區 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmodelscope.cn%2Fmodels%2FZhipuAI%2FMathGLM%2Fsummary" target="_blank">ModelScope</a> 全球首發上架。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">MathGLM 旨在增強大模型在數學推理上的性能，主要關注在精確計算算術運算（基礎算術運算和複雜混合運算）和提升模型的中文數學解決能力。具體表現如下：</span></span></p><p><span style="color:#000000"><strong><span style="background-color:#ffffff">算術能力</span></strong></span></p><ul><li><p style="margin-left:0; margin-right:0"><span style="color:#000000">高位數加減乘</span></p></li></ul><p style="margin-left:0; margin-right:0"><span style="color:#000000"><img height="248" src="https://oscimg.oschina.net/oscnet/up-0019452a7ef51ed43ea63d6a0ecf4139b8f.png" width="500" referrerpolicy="no-referrer"></span></p><ul><li><p style="margin-left:0; margin-right:0"><span style="color:#000000">解方程</span></p></li></ul><p style="margin-left:0; margin-right:0"><span style="color:#000000"><img height="93" src="https://oscimg.oschina.net/oscnet/up-5a8a2bb76df8fd1b267e609afee8b3da82f.png" width="500" referrerpolicy="no-referrer"></span></p><ul><li><p style="margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">算價格</span></p></li></ul><p style="margin-left:0; margin-right:0; text-align:left"><span style="color:#000000"><img height="103" src="https://oscimg.oschina.net/oscnet/up-2e2bef015e4fff480a8bde8e03bc06e1bc6.png" width="500" referrerpolicy="no-referrer"></span></p><ul><li><p style="margin-left:0; margin-right:0"><span style="color:#000000">分蘋果餘數問題</span></p></li></ul><p style="margin-left:0; margin-right:0"><span style="color:#000000"><img height="101" src="https://oscimg.oschina.net/oscnet/up-6082ffe6421c08e575d40b9f57d5752f21a.png" width="500" referrerpolicy="no-referrer"></span></p><ul><li><p style="margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">濃度計算類</span></p></li></ul><p style="margin-left:0; margin-right:0; text-align:left"><span style="color:#000000"><img height="113" src="https://oscimg.oschina.net/oscnet/up-719a234879746772de63fdf0ad83444df0b.png" width="500" referrerpolicy="no-referrer"></span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 03:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259400</guid>
            <link>https://www.oschina.net/news/259400</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Opentofu —— 開源基礎設施即代碼工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>OpenTofu 是一種 OSS 工具，用於安全高效地構建、更改和版本控制基礎設施。 OpenTofu 可以管理現有和流行的服務提供商以及定製的內部解決方案。項目目前正在積極開發中。</p><p>OpenTofu 的主要特點是：</p><ul><li>基礎設施即代碼：基礎設施是使用高級配置語法來描述的。 這允許對數據中心的藍圖進行版本控制並像處理任何其他代碼一樣進行處理。 此外，基礎設施可以共享和重複使用。</li><li>執行計劃：OpenTofu 有一個「計劃」步驟，用於生成執行計劃。 執行計劃顯示了當你調用 apply 時 OpenTofu 將執行的操作。這可以讓你避免在 OpenTofu 操作基礎設施時出現任何意外。</li><li>資源圖：OpenTofu 構建所有資源的圖，並並行化任何非依賴資源的創建和修改。 因此，OpenTofu 儘可能高效地構建基礎設施，並且運營商可以深入瞭解其基礎設施中的依賴關係。</li><li>變更自動化：複雜的變更集可以通過最少的人工交互應用於您的基礎設施。 通過前面提到的執行計劃和資源圖，你可以準確地知道 OpenTofu 將更改什麼內容以及以什麼順序更改，從而避免了許多可能的人為錯誤。</li></ul></div>
                                                                ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 03:18:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/opentofu</guid>
            <link>https://www.oschina.net/p/opentofu</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | IDEA ORM 代碼生成插件 CodeGenerateORM]]>
            </title>
            <description>
                <![CDATA[<p>倉庫簡介：該插件是從個人插件中心孵化出來的，已經可以獨立使用了，目前在 idea 的官方插件市場已經有挺多人在使用；
該插件是用於快速生成 ORM 層代碼的插件，具體的介紹可以參考同級目錄下的 「插件簡介.md」；</p><p>Warehouse introduction: This plugin was incubated from the personal plugin center and can now be used independently. Currently, there are quite a few people using it in the official plugin market of IDEA;
This plugin is used to quickly generate ORM layer code. For specific introduction, please refer to "Introduction to plugins. md" in the same level directory;</p><p>個人 idea 孵化中心項目：<a href="https://gitee.com/yysimple/idea-plugins">https://gitee.com/yysimple/idea-plugins</a></p><p>Personal Idea Incubation Center Project：<a href="https://gitee.com/yysimple/idea-plugins">https://gitee.com/yysimple/idea-plugins</a></p><h2><a id="user-content-簡單的用法" class="anchor" href="https://gitee.com/yysimple/CodeGenerateORM#%E7%AE%80%E5%8D%95%E7%9A%84%E7%94%A8%E6%B3%95"></a>簡單的用法</h2><h3><a id="user-content-直接自己連接數據源生成" class="anchor" href="https://gitee.com/yysimple/CodeGenerateORM#%E7%9B%B4%E6%8E%A5%E8%87%AA%E5%B7%B1%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E6%BA%90%E7%94%9F%E6%88%90"></a>直接自己連接數據源生成</h3><blockquote><p>無需在 idea 的 database 裏面配置，自己配置數據源連接，目前我是把入口放在不同的地方</p><ol><li>選中項目 -&gt; 右鍵,最下面 -&gt; ORMCodeGenerate，然後就會出來彈窗讓你先配置；（mac 用戶不適用快捷鍵推薦）</li><li>Tools -&gt; 最下面；（Windows 用戶不適用快捷鍵推薦）</li><li>control + 9，快捷鍵的方式是我最推薦的；</li></ol></blockquote><p><strong>下面就是幾張操作圖：參考代碼裏面的 「images/插件用法.png」;</strong><img src="https://gitee.com/yysimple/CodeGenerateORM/raw/master/images/%E6%8F%92%E4%BB%B6%E7%94%A8%E6%B3%95.png" alt="直接連接數據源" referrerpolicy="no-referrer"></p><h3><a id="user-content-直接選擇 idea 的 database 選中表生成" class="anchor" href="https://gitee.com/yysimple/CodeGenerateORM#%E7%9B%B4%E6%8E%A5%E9%80%89%E6%8B%A9idea%E7%9A%84database%E9%80%89%E4%B8%AD%E8%A1%A8%E7%94%9F%E6%88%90"></a>直接選擇 idea 的 database 選中表生成</h3><blockquote><p>這個就是大多數 ORM 生成的方式，支持的數據源就是 idea 支持多少，這裏就支持多少，但是這裏就是每個項目都需要配置數據源，
所以才有了上面那種方式，當然看個人喜好，兩種方式都支持了，我是 mysql 生成的時候比較喜歡用上面那個，我不喜歡在項目
裏面去連接數據源，我專門開個窗口連所有數據源的（有些人還喜歡用 DG，Navicat；純看個人喜好）</p></blockquote><p>操作也比較簡單，但是沒提供快捷鍵：</p><p><strong>操作圖片在：「images/table2Orm.png」;</strong><img src="https://gitee.com/yysimple/CodeGenerateORM/raw/master/images/table2Orm.png" alt="選擇數據源" referrerpolicy="no-referrer"></p><blockquote><ol><li>需要選中表，然後右鍵</li><li>中間沒有找到對應列類型，會詢問你需要關聯到 java 的什麼類型；</li><li>最後的彈窗就是上面的閹割版，功能是一樣的，就不介紹了；</li><li>這裏有個小問題，你的表中必須要有主鍵，沒有的話，mapper 文件、service 文件裏面的方法不會幫你生成，因為有個方法是 byId 的；</li></ol></blockquote><p>具體詳細的文檔參考：「插件簡介.md」 or 「plugin-intro.md」；</p><p>插件源碼詳解：</p><p>微信公眾號：<a href="https://gitee.com/link?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fm4-P2vLRn68w4y9vEHnwqQ">https://mp.weixin.qq.com/s/m4-P2vLRn68w4y9vEHnwqQ</a></p><p>csdn：<a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fweixin_44704261%2Farticle%2Fdetails%2F124071700">https://blog.csdn.net/weixin_44704261/article/details/124071700</a></p><p>公眾號：愛搞技術的吳同學</p><blockquote><p>公眾號裏經常會寫高質量文章</p></blockquote><p><img src="https://gitee.com/yysimple/CodeGenerateORM/raw/master/images/wechat.png" alt="微信公眾號" referrerpolicy="no-referrer"></p>]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 03:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/yysimple/CodeGenerateORM</guid>
            <link>https://gitee.com/yysimple/CodeGenerateORM</link>
        </item>
        <item>
            <title>
                <![CDATA[禪道創始人王春生：關於開源軟件的七大錯誤認知]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><strong>本文作者：</strong>王春生</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><strong>作者自我介紹：</strong>我是春哥，禪道軟件公司的創始人，二十年的 IT 老兵，14 年的創業者。喜歡編碼，喜歡做產品，所以我用了<span style="color:#ff2941">代碼之歌</span>做我的公眾號的名字。我會持續地更新關於企業管理、產品管理、項目管理、團隊建設、創業、學習型組織、企業文化、開源軟件等方面話題的實踐和思考，歡迎大家和我討論交流。</p></blockquote><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">開源軟件已經像水和電一樣融入到了我們日常的生活中，但我們對開源軟件還有很多錯誤的認知。我嘗試站在開源軟件作者的角度來進行總結，總共有七大錯誤認知。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0px; margin-right:0px; text-align:justify"><span style="color:#2980b9"><strong>首先來看第一個錯誤認知：只要軟件開源了，就會有人用。</strong></span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">很多剛開始從事開源軟件開發的作者，會有這樣的想法。認為我只要把軟件開源出來，就會有人來使用。但事實上一個軟件有沒有人用，首先看它有沒有價值，而不是先看它是不是開源軟件。<span style="color:#7a4442">開源軟件首先是一個軟件</span>，開源是其定語。所以從這個角度來講，開源軟件不會超越軟件本身的屬性限制，要先有用。在這個基礎上，再進行開源，可以為用戶帶來增強的附加屬性。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">這給我們的提示就是在做開源軟件之前，要認真思考軟件的定位：</p><ul><li><p style="margin-left:0; margin-right:0">這款軟件要解決的問題是什麼；</p></li><li><p style="margin-left:0; margin-right:0">它的目標用戶是誰；</p></li><li><p style="margin-left:0; margin-right:0">和市面上其他軟件相比有什麼優勢；</p></li><li><p style="margin-left:0; margin-right:0">如何進行宣傳推廣。</p></li></ul><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="color:#2980b9"><strong>第二個錯誤認知：我又沒收你錢，軟件有漏洞、問題跟我沒關係。</strong></span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">開源軟件許可協議通常會包含類似這樣的條款，表明作者不對用戶使用該軟件所造成的任何問題負責。比如 GPL V3 的第 15 條款，就是這樣的聲明：</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">15. Disclaimer of Warranty.</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left"><span>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM 「AS IS」 WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">中文版本：</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">本程序在適用法律範圍內不提供品質擔保。除非另作書面聲明，版權持有人及其他程序提供者「概」不提供任何顯式或隱式的品質擔保，品質擔保所指包括而不僅限於有經濟價值和適合特定用途的保證。全部風險，如程序的質量和性能問題，皆由你承擔。若程序出現缺陷，你將承擔所有必要的修復和更正服務的費用。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">這份協議還特意用了全大寫的方式來聲明。但是自 2017 年《中華人民共和國網絡安全法》正式實施以來，這樣的聲明就不再有效了。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">《中華人民共和國網絡安全法》第二十二條規定：</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">網絡產品、服務應當符合相關國家標準的強制性要求。網絡產品、服務的提供者不得設置惡意程序；發現其網絡產品、服務存在安全缺陷、漏洞等風險時，<strong><span style="color:#d92142">應當立即採取補救措施，按照規定及時告知用戶並向有關主管部門報告。</span></strong></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><strong><span style="color:#d92142">網絡產品、服務的提供者應當為其產品、服務持續提供安全維護；在規定或者當事人約定的期限內，不得終止提供安全維護。</span></strong></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">網絡產品、服務具有收集用戶信息功能的，其提供者應當向用戶明示並取得同意；涉及用戶個人信息的，還應當遵守本法和有關法律、行政法規關於個人信息保護的規定。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">第六十條規定：</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">違反本法第二十二條第一款、第二款和第四十八條第一款規定，有下列行為之一的，<strong><span style="color:#d92142">由有關主管部門責令改正，給予警告；拒不改正或者導致危害網絡安全等後果的，處五萬元以上五十萬元以下罰款，對直接負責的主管人員處一萬元以上十萬元以下罰款：</span></strong></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">（一）設置惡意程序的；</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">（二）<strong><span style="color:#d92142">對其產品、服務存在的安全缺陷、漏洞等風險未立即採取補救措施，或者未按照規定及時告知用戶並向有關主管部門報告的；</span></strong></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">（三）<strong><span style="color:#d92142">擅自終止為其產品、服務提供安全維護的。</span></strong></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">所以各位開源軟件的開發者們，一定要認真理解這個法律的條款。我們已經收到過五次公安部下發到青島市網警的漏洞整改通知。具體細節就不跟大家講述了。這給到開源軟件作者們兩點警示：第一個就是一定要及時處理自己產品的相關漏洞，另外一點就是認真思考開源商業化方面。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="color:#2980b9"><strong>第三個錯誤認知：我應當選擇最寬鬆的開源軟件協議。</strong></span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">許可協議是開源軟件的法律基礎，它規定了用戶可以如何使用、修改和分發軟件。有些人錯誤地認為，選擇最寬鬆的許可協議可以吸引更多的用戶和貢獻者。然而，許可協議的選擇應該根據具體情況進行權衡，並考慮到軟件作者的目標和需求。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">比較寬鬆的許可協議限制比較少，如 MIT 和 BSD 許可證。這些許可協議幾乎沒有限制，允許用戶自由地使用、修改和分發軟件。然而，這也意味着其他人可以將開源軟件用於商業目的，甚至將其更改後的版本作為專有軟件發佈，而無需向原作者貢獻任何代碼或修改。對於一些開源軟件作者來説，這可能不符合他們的意願和目標。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">相比之下，像 GNU 通用公共許可證（GPL）這樣的許可協議對代碼的再分發和修改設置了更嚴格的限制。它要求任何使用或修改 GPL 許可的軟件的派生作品必須以相同的許可證開放源代碼。這樣可以保護開源軟件的自由性和共享精神，防止將其私有化。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">因此，在選擇許可協議時，開源軟件作者應該考慮到他們的目標、期望用戶和社區的需求，並選擇合適的許可協議來平衡開放性和保護性的要求。</p><p><span style="color:#2980b9"><strong>第四個錯誤的認知：我應當努力地將軟件捐獻給基金會。</strong></span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>最近這幾年，有不少國產的開源項目陸續從 Apache 軟件基金會畢業，成為 Apache 軟件基金會旗下的項目。姜寧老師也兩度當選 Apache 軟件基金會董事。還有一些項目是加入了 CNCF 雲原生計算基金會。包括中國也成立了開放原子基金會，大廠也都有一些項目捐贈給了開放原子基金會。這對中國的開源軟件作者也是一個鼓舞，很多開源軟件作者也都在思考自己的軟件是否也可以加入這些基金會呢？我嘗試來闡述下自己的觀點：</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="color:#ab1942">首先這是好事情。説明瞭中國的開源軟件生態越來越成熟</span><span>，也湧現了一批高質量的開源項目，在國際上也能夠產生我們的影響力，一定程度上也改變了中國只是開源軟件消費大國、對開源社區回饋較少的尷尬局面。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>但是不是我們要努力地將項目捐贈給基金會，以謀求項目的健康發展呢？對此我會有完全不同的觀點。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="color:#ab1942">第一，基金會並不是你想加入就能加入</span><span>。無論是 Apache 軟件基金會，還是 CNCF 雲原生計算基金會，對項目的方向、成熟度、投入都有比較高的要求。所以目前能夠加入這些基金會的項目大部分都是大廠背景的開發團隊開發的。開放原子基金會目前的項目基本上都是會員單位捐贈的，網站上貌似也沒有公開加入開放原子基金會的具體章程。所以，對於我們這些個人或者小團隊的開源軟件開發者來講</span><span>，</span><span style="color:#ab1942">這條路就不要想了，門檻太高</span><span>。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="color:#ab1942">第二，如果你的項目真的很不錯，都達到了加入基金會的標準，我也建議你認真思考一下加入基金會的訴求是什麼</span><span>。對於大廠來講，將項目捐贈給這些基金會，可以提升自己的品牌，吸引優秀的開發者加入，建立行業標準，這些都是可以通過基金會來達成的。</span><span style="color:#ab1942">但如果你有明確的開源商業化方面的訴求，我建議還是要慎重</span><span>，因為將項目捐贈給基金會，</span><span style="color:#ab1942">需要將代碼的所有權和商標都要捐贈給基金會</span><span>。換句話講，這個項目就屬於基金會了，你只是這個項目的主要貢獻者。無論從哪些方面來講，你都阻止不了其他團隊可以利用已經不屬於你的項目去做商業化的操作。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>這一塊我要展開來説一下。整個自由軟件和開源軟件運動的基礎，還是 Copyright。正是有了 Copyright，才有了 Copyleft。開源軟件這種遊戲規則之所以能夠運轉起來，底層還是法律。</span><span style="color:#ab1942">只要是你創作的東西，你天然擁有對它的著作權</span><span>（著作權不需要額外申請，都受法律保護。通過著作權登記、時間戳存證等手段可以更好地保護自己，後續再講）。之前的軟件售賣都是有源碼的，後來比爾蓋茨説我們只能給你二進制文件，從而開啓了微軟帝國時代，所以才有了黑客們對商業軟件的反擊。</span><span style="color:#ab1942">開源軟件區別於商業軟件，就是向軟件的用戶讓渡了更多的權力：你可以對代碼進行修改、進行二次分發</span><span>。那開源軟件作者為什麼可以這麼授權呢？因為代碼的版權是我的，所以我想怎麼樣就怎麼樣。這是底層的遊戲邏輯。當然開源軟件還有一個基本遊戲規則，就是我不對你使用軟件造成的任何問題負責，因為開源軟件和用戶之間並沒有形成商業合同上的契約關係。（但是隨着《中華人民共和國網絡安全法》的實施，後面的這個遊戲規則不成立了，所以我們必須要對開源軟件的玩法做修改，參考我的前一篇文章《關於開源軟件的七大錯誤認知（上）》。）</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>所以從這個角度來講，你將開源軟件捐贈給國外的基金會，這個代碼的 Copyright 和商標從法律上就歸人家基金會了。如果我們上升到國家的角度來看這個問題，我們把我們優秀的開源軟件都捐獻給國外的基金會，</span><span style="color:#ab1942">這會不會對國家的知識產權和國家安全造成威脅呢？</span><span>2021 年鬧得沸沸揚揚的 Log4j2 組件的安全漏洞，可窺一斑。阿里雲的工程師在發現了這個漏洞之後，第一反應不是向中國工信部通報相關信息，而是先向美國的 Apache 軟件基金會披露了該漏洞。工信部得知這個漏洞之後，時間已經過去了 15 天。15 天會發生什麼呢？尤其是在現在的這種國際政治背景下面。</span><span style="color:#ab1942">這個問題往小的方面講，是國家安全意識不夠，往大里面講，是屁股坐得正不正的問題。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>有童鞋估計會問，我們不是還有國內的基金會嗎？前面也講了，現在門檻太高，不是我們想加入就加入。另外開放原子基金會有非常強的政府背景，在運作上會有比較強的監管，在各種政策措施出台上</span><span style="color:#ab1942">會比較慎重（</span><span style="color:#ab1942">慢）</span><span>。所以在國內的開源相關的基金會成熟之前，我們需要通過社區的方式來推進開源生態的發展，所以這是渠成開源社區成立的初衷（突如其來的廣告）。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><strong><span style="color:#2980b9">第五個錯誤認知：開源之後會有很多人來幫我完善項目。</span></strong></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>很多開源軟件作者開源，是希望有更多的人蔘與到項目中，這樣項目的問題能夠得到及時地發現和處理，項目也可以持續地發展。但實際的情況是什麼樣的呢？InfoQ 聯合 X-lab 開放實驗室發佈的「GitHub 2019 數字年報」，通過對 2019 年 GitHub 上 5.46 億條日誌進行分析，得出了世界範圍內開源軟件項目的一些彙總數據。這其中有這樣的信息值得我們思考：</span></p><ol><li><p style="margin-left:0; margin-right:0"><span>&nbsp;2019 年總活躍項目數為 512 萬，但活躍度超過 1000 的項目只有 1399 個，不到萬分之三。</span></p></li><li><p style="margin-left:0; margin-right:0"><span>在這 512 萬個項目中，只有 333 個項目有 1000 位開發者參與，而 2019 年 Github 上活躍的開發者數量是 360 萬。</span></p></li><li><p style="margin-left:0; margin-right:0"><span>2019 年活躍度排行前 10 的項目中，有 60% 來自大廠，其中有 2 個來自微軟，分別是 vscode 和 azure-doc。3 個來自 Google，分別是 Flutter、Tensorflow、Kubernetes。還有一個是來自紅帽的 Ansible。</span></p></li><li><p style="margin-left:0; margin-right:0"><span>2019 年活躍度前列的項目中，大廠維護的項目現在仍然非常活躍，而排名第 10 的 tweakCompatible，已經停止維護了。</span></p></li><li><p style="margin-left:0; margin-right:0"><span>2019 年中國 Top20 的項目中，主要都是大廠維護的項目。</span></p></li><li><p style="margin-left:0; margin-right:0"><span>Vue 項目 2019 年大部分的貢獻是由一個賬號 Evan You，也就是尤雨溪尤大貢獻的。</span></p></li></ol><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>2022 年 1 月份，cURL 的作者發表了一篇文章，吐槽世界 500 強企業白嫖技術支持的烏龍事件。具體新聞可以看開源中國的網址：</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>https://www.oschina.net/news/180252/fortune-500-log4j-curl。類似的事情太多了，就不一一列舉了。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>所以，結論是，開源項目的維護主要還是要靠自己。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><strong><span style="color:#2980b9">第六個錯誤認知：我開源不是為了錢。</span></strong></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>這個話題估計會有很多開源軟件的作者會不贊同。就像 Linus 做 Linux 項目，just for fun。</span><span>很多開源軟件</span><span>作者比較純粹，把軟件開源出來就是希望能夠對用戶有用，並沒有商業化的目的。但我把這個話題換一種表達方式，估計大家都會贊同。也許大家剛開始開源的時候，確實沒有想着賺錢。但隨着事情的變化，大家就會考慮，我能不能通過開源項目賺錢呢？</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>剛開始開源的時候，開源軟件的作者更多的是興奮，以及軟件得到用戶認可所帶來的成就感。但隨着用戶的增多，來自用戶的問題就會越來越多。有的是希望你幫我解決一些使用安裝的問題，有的是希望你幫他做一些功能。隨着這些問題的增多，你做開源這件事情的性質就會逐漸發生變化。從最開始的分享為主，逐漸變成維護為主。開源項目給到你的樂趣會逐漸減少，責任和義務就會逐漸增多。自己的投入會越來越多，心裏的不平衡感就會越來越強。這時候大家就會考慮，我是不是可以通過開源項目來賺點錢呢？</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>所以這是水到渠成的想法，也是非常合情合理的想法。能夠通過開源項目獲得一定的收益，然後支持自己在開源項目做更多的投入，這是一件非常好的事情。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><strong><span style="color:#2980b9">再來看最後一個錯誤認知：開源軟件靠服務和捐助可以賺錢。</span></strong></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>網上有很多的資料，在講到開源軟件的商業模式時候，都會談到軟件免費，服務收費。這個模式按道理是能夠講得通的。畢竟軟件我都給你了，你要是有問題，我通過服務來收點費用，不是很合理嗎？但這裏面有一個悖論，我來給大家分析一下。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>先來界定下這個服務的範圍。我所理解的軟件免費，服務收費的服務，是指保證軟件正常運行使用過程中所產生的支持類的服務。二次開發類的服務和諮詢培訓類的服務，超脫了這個服務的範圍。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>如果我們嘗試通過支持服務來收費，那麼什麼情況下用戶需要支持服務呢？肯定是軟件有問題用戶才會需要服務，對吧。如果我們希望通過服務來賺比較多的錢，肯定是希望用戶提出越多的問題越好。那如果一個軟件問題比較多，那就説明軟件複雜度或者質量有問題。那這樣用戶就比較少。用戶少，那怎麼通過服務來收費呢？所以這裏面就存在了這樣一個悖論。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>什麼樣的軟件可以通過支持服務收費呢？這個軟件對企業非常關鍵，他們需要一個商業主體來為這個軟件的正常運行負責，這樣的軟件通過服務收費才能行得通。什麼樣的軟件符合這樣的標準呢，基礎軟件。所以紅帽賣自己的訂閲制服務是行得通的。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>我們禪道團隊在開發項目管理軟件之初，就放棄了通過支持服務收費的想法。我們給禪道開源免費版的用戶都會提供近乎於實時的技術支持。我們的目的很簡單，吸引更多的用戶使用禪道</span><span style="color:#ab1942"><span>。</span>一個社區的陌生小夥伴，只有成為你軟件的用戶，才有可能成為你的客戶</span><span>。為了吸引更多的社區小夥伴成為禪道的用戶，我們不遺餘力的完善產品、提供各種技術支持。然後通過我們的收費的版本來實現商業化。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>很多開源軟件作者也都放出了自己的捐助賬號，但實際的情況如何呢？我們在網上也看到過很多的新聞，很多知名的開源項目，一年收到的捐助少得可憐，可能連主要維護人員的正常生活都保證不了，這還是在歐美。比如 Core-js 項目每週下載量達數千萬次，累積下載量已經超過 90 億次，但作者 Denis 並沒有從這個項目中獲得更多的回報，甚至因為全職維護 Core-js 而窮困潦倒。他想了各種辦法來籌集資金以便維護開源項目，結果每個月也只能獲得幾十美元的贊助。估計會有小夥伴會提 Vue 尤大的例子，但這個只能是個例，而且很多對 Vue 的捐贈是有品牌推廣的性質在裏面，和我們通常説的打賞類的捐贈還是不太一樣。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>我們最開始幾年也有開放捐贈的通道，也陸續收到一些捐助，不過相比較於我們的研發投入來講，只能説是杯水車薪。因為我們跑通了商業化這條路，我們把我們所收到的捐助又全部捐了出去。後來我們就關閉了捐贈的通道，是因為有的人因為捐贈之後，希望我們能夠給他做一些額外的事情，這已經超出了捐贈這件事情本身的含義。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>所以大家就不要幻想通過技術支持和捐助來實現健康的收入了。需要認真考慮開源軟件的商業化之路。這是關於開源軟件的七大錯誤認知系列的最後一篇文章。歡迎大家來討論。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 03:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/oscpyaqxylk/blog/10114031</guid>
            <link>https://my.oschina.net/oscpyaqxylk/blog/10114031</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Gmail 將停止支持基本 HTML 視圖]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>根據 Google 支持文檔的更新內容，<strong>Gmail 將從明年 1 月起停止支持基本 HTML 視圖</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-0cdd4e28b49bf3c37718b40baee96da1d75.png" referrerpolicy="no-referrer"></p><p>▲ Gmai&nbsp;基本 HTML 視圖界面</p><p>目前網頁版 Gmail 提供兩個界面：基本 HTML 視圖和標準視圖。停止支持基本 HTML 視圖後，當前打開經典模式的基本 HTML 視圖模式 URL 將自動重定向到標準視圖界面。Google 解釋稱，如果瀏覽器受支持，Gmail 將自動在標準視圖中打開。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/0925/104240_D3E0_2720166.png" referrerpolicy="no-referrer"></p></blockquote><p>基本 HTML 視圖旨在解決 Gmail 無法加載或加載太慢的問題，比如瀏覽器不被支持或網速太慢，它只包含 Gmail 基本功能，沒有新版本 Gmail 加入的與郵件無關的功能，例如：</p><ul><li>聊天</li><li>拼寫檢查工具</li><li>鍵盤快捷鍵</li><li>添加或導入聯繫人</li><li>自定義發件人地址</li><li>富文本格式</li></ul><p>在 Gmail 停止支持基本 HTML 視圖後，如果用戶遇到加載問題，Google 建議使用 Gmail 應用或郵件客戶端。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 02:45:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259383</guid>
            <link>https://www.oschina.net/news/259383</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[開源項目 WEMQ 加入 Dromara 社區，物聯網設備調試系統]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img height="300" src="https://img.nicholasld.cn/i/2023/09/22/650d382ad4e66.png" width="300" referrerpolicy="no-referrer"></p><h2>項目背景</h2><p>隨着物聯網技術的迅猛發展，越來越多的物聯網設備被應用於各個行業和領域。物聯網設備的調試和管理是確保設備正常運行和提供穩定服務的關鍵環節。然而，傳統的物聯網設備調試方案往往存在一些問題，如複雜的配置流程、安全性不足、功能不完善等。</p><p>為瞭解決這些問題，<strong>WeMQ</strong>應運而生。WeMQ 是一款面向物聯網設備運營商的開源物聯網設備調試系統，旨在提供完整的物聯網設備調試方案，並集成了設備管理、MQTT 服務器管理、客戶管理等功能。該系統採用自研的 Nmqs 通信層組件，實現了連接信息的加密，保證了數據的安全性。</p><p>WeMQ 的項目背景源於對物聯網設備調試過程中存在問題的深入研究和理解。通過提供開源的解決方案，WeMQ 希望為物聯網設備運營商提供一個高性能、安全可靠、功能強大的調試和管理平台，幫助他們簡化設備調試流程、提高調試效率，並保證設備的穩定運行。</p><p><strong>項目的主要特性：</strong></p><ol><li>提供一套完整的物聯網設備調試方案，包括設備管理、MQTT 服務器管理、客戶管理等功能，幫助設備運營商簡化調試流程。</li><li>自研 Nmqs 通信層組件，實現連接信息的加密，確保數據傳輸的安全性。</li><li>提供高性能、穩定可靠的服務，滿足大規模物聯網設備的調試和管理需求。</li><li>開源項目，吸引更多的開發者參與貢獻，推動物聯網設備調試領域的發展。</li></ol><p>通過 WeMQ，物聯網設備運營商可以更輕鬆地進行設備調試和管理，提高工作效率，降低運營成本，併為最終用戶提供更好的物聯網設備體驗。</p><p><img alt="GitHub" src="https://img.shields.io/github/license/NicholasLD/WeMQ" referrerpolicy="no-referrer"><a href="https://gitee.com/nicholasld/WeMQ/stargazers"><img alt="star" src="https://gitee.com/nicholasld/WeMQ/badge/star.svg?theme=dark" referrerpolicy="no-referrer"></a><a href="https://gitee.com/nicholasld/WeMQ/members"><img alt="fork" src="https://gitee.com/nicholasld/WeMQ/badge/fork.svg?theme=dark" referrerpolicy="no-referrer"></a></p><h2>技術選型</h2><h4>1. 系統環境</h4><ul><li>Java 8</li><li>Servlet 3.0</li><li>Apache Maven 3</li></ul><h4>2. 主框架</h4><ul><li>Spring Boot 2.7.x</li><li>Spring Framework 5.3.x</li><li>Spring MVC 5.3.x</li></ul><h4>3. 持久層</h4><ul><li>Mybatis 3.5.x</li><li>Alibaba Druid 1.2.x</li><li>Hibernate Validation 6.0.x</li><li>Java MySQL Connector 8.0.x</li></ul><h4>4. 視圖層</h4><ul><li>Thymeleaf 3.x</li><li>Bootstrap 5.x</li><li>Layui 2.x</li></ul><h4>5. 工具類</h4><ul><li>Apache Commons</li><li>Hutool 5.x</li></ul><h4>6. 通信層</h4><ul><li>Nmqs 實現連接信息加密、消息轉發，支持 WS/TCP 協議連接</li><li>Eclipse Paho</li></ul><h2>項目結構</h2><pre><code>cn.mmanager
├── mm-common            // 工具類
│       └── annotation                    // 自定義註解
│       └── constant                      // 通用常量
│       └── core                          // 核心控制
│       └── enums                         // 通用枚舉
│       └── exception                     // 通用異常
├── mm-framework         // 框架核心
│       └── aspectj                       // 註解實現
│       └── interceptor                   // 攔截器
│       └── manager                       // 異步處理
│       └── web                           // 前端控制
├── mm-web            // Web 服務
├── mm-dao           // 數據訪問層
├── mm-service     // 業務層
├── mm-model       // 模型
</code></pre><h2>通信層</h2><pre><code>  _   _ __  __  ____   _____ 
 | \\ | |  \\/  |/ __ \\ / ____|
 |  \\| | \\  / | |  | | (___  
 | . ` | |\\/| | |  | |\\___ \\ 
 | |\\  | |  | | |__| |____) |
 |_| \\_|_|  |_|\\___\\_\\_____/ 
</code></pre><p>通信層組件在物聯網設備調試系統中扮演着重要的角色，它負責設備與服務器之間的通信和數據傳輸。在 WeMQ 中，採用了自研的 Nmqs 通信層組件，它實現了連接信息的加密，確保數據傳輸的安全性。</p><p><strong>Nmqs 通信層組件具有以下特點和功能：</strong></p><ol><li>**連接信息加密：**Nmqs 採用先進的加密算法，對設備與服務器之間的連接信息進行加密處理。這樣可以確保通信過程中的數據安全，防止信息被竊取或篡改。</li><li>**安全認證：**Nmqs 提供了安全認證機制，確保只有經過授權的設備和服務器才能建立連接。通過身份驗證和密鑰交換等方式，確保通信雙方的身份合法性和通信的安全性。</li><li>**數據壓縮和優化：**Nmqs 支持數據壓縮和優化技術，可以在傳輸過程中對數據進行壓縮，減少數據傳輸的帶寬佔用和傳輸延遲，提高通信效率。</li><li>**可靠性保證：**Nmqs 具備可靠性保證機制，能夠處理通信過程中的數據丟失、重傳和錯誤處理。它採用可靠的傳輸協議，確保數據的完整性和可靠性。</li><li>**適應性和靈活性：**Nmqs 通信層組件具有良好的適應性和靈活性，可以適應不同的網絡環境和設備類型。它支持多種通信協議和網絡傳輸方式，能夠適應不同的物聯網設備調試場景。</li></ol><p>通過自研的 Nmqs 通信層組件，WeMQ 能夠提供安全可靠的設備與服務器之間的通信服務。它保護設備數據的安全性，確保通信過程的可靠性和穩定性，為物聯網設備調試和管理提供了強大的基礎支持。</p><h2>開源地址</h2><p>Gitee：<a href="https://gitee.com/dromara/WeMQ">https://gitee.com/dromara/WeMQ</a></p><p>Github：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdromara%2FWeMQ" target="_blank">https://github.com/dromara/WeMQ</a></p><h2>Issues &amp; Pull Requests</h2><p>歡迎提交 Issues 和 Pull Requests，開源大門永遠向所有人敞開。</p><h2>作者介紹</h2><ul><li>名稱：NicholasLD</li><li>全棧開發工程師，物聯網愛好者</li><li>Dromara 開源組織成員，dromara/WeMQ 作者</li></ul><p><strong>聯繫方式：</strong></p><ul><li>Email: <a href="https://www.oschina.net/action/GoToLink?url=mailto%3A878639947%40qq.com" target="_blank">878639947@qq.com</a></li><li>WeChat: NicholasLD505</li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 00:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259364</guid>
            <link>https://www.oschina.net/news/259364</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[清華系創企推出千億參數生物醫藥大模型]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">清華系創企水木分子<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fl5iE9NCA2v0fC_wg3S5DTw" target="_blank">宣佈</a>發佈新一代對話式藥物研發助手 ChatDD (Drug Design) 和全球首個千億參數多模態生物醫藥對話大模型 ChatDD-FM 100B。水木分子成立於今年 6 月，由清華大學智能產業研究院（AIR）孵化，專注於生物醫藥垂直行業大模型的研發與應用。</span></p><p><img height="235" src="https://oscimg.oschina.net/oscnet/up-9aa47749420f10ded3e2467c43ac413545b.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">根據介紹，水木分子提出的 ChatDD，基於大模型能力，能夠對多模態數據進行融合理解，與專家自然交互人機協作，將人類專家知識與大模型知識聯結，重新定義藥物研發模式。</span></p><p><span style="color:#000000">ChatDD 基於水木分子千億參數多模態生物醫藥對話大模型底座 ChatDD-FM，具備專業知識力、認知探索力和工具調用能力。作為生物醫藥研發助手 Copilot 可以服務醫藥研發全流程場景，從立項調研，早期藥物發現，臨牀前研究到臨牀試驗、藥物重定位等各環節。</span></p><p><img height="282" src="https://oscimg.oschina.net/oscnet/up-7cbd38053ca323a3d0d0aeed787e187b3c2.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">在具體應用場景方面，發佈會上展示了 ChatDD-BI 立項場景、ChatDD-Discovery 研發探索場景和 ChatDD-Trail 臨牀試驗場景應用。</span></p><p><span style="color:#000000">ChatDD 的底座為千億參數多模態生物醫藥對話大模型 ChatDD-FM 100B，在通用語言模型基礎上經過：生物醫藥專業知識增強、生物醫藥多模態對齊、專業領域指令微調和 RLHF 三層淬鍊。ChatDD-FM 100B 在 C-Eval 評測榜單中達到綜合成績 Top10，全部醫學專項 4 項評測排名第一，是唯一在該 4 項評測中平均分超過 90 分（93.1 分）的模型。</span></p><p><img height="277" src="https://oscimg.oschina.net/oscnet/up-72ba7b6e5f51510eaafae5386eb6a5902ea.png" width="500" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 23 Sep 2023 03:48:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259292</guid>
            <link>https://www.oschina.net/news/259292</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[LightDiffusionFlow —— SD 工作流保存插件]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">LightDiffusionFlow 是一個基於 AI 繪畫開源平台 StableDiffusion webUI（簡稱 SD）的開源插件，它可以幫助你一鍵保存所有工作流數據，下次使用只需拖入 Flow 文件，就能快速復現整個工作流，就像使用 Photoshop 的 PSD 樣機文件那樣方便。</span></p><p><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-761ae50dada20a421f4f5a91e5852c6d720.png" width="500" referrerpolicy="no-referrer"></p><p><strong>功能</strong></p><ul><li>使用單個文件導出/導入網頁用戶界面參數（圖像、輸入、滑塊、複選框等）。</li><li>支持解析圖片中的 png 信息，並將參數還原回網絡用戶界面。</li></ul><p><strong>支持的擴展：</strong></p><ul><li>理論上，它可以支持任何插件。(某些插件圖片除外，因為它們需要提供相應的 elem_id）。</li></ul></div>
                                                                ]]>
            </description>
            <pubDate>Sat, 23 Sep 2023 03:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/lightdiffusionflow</guid>
            <link>https://www.oschina.net/p/lightdiffusionflow</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 高性能任務調度引擎 Volcano]]>
            </title>
            <description>
                <![CDATA[<a href="https://gitee.com/link?target=https%3A%2F%2Fvolcano.sh%2F"><img src="https://raw.githubusercontent.com/volcano-sh/volcano/master/docs/images/volcano-horizontal-color.png" referrerpolicy="no-referrer"></a><hr><p><a href="https://gitee.com/link?target=https%3A%2F%2Ftravis-ci.org%2Fvolcano-sh%2Fvolcano"><img src="https://travis-ci.org/volcano-sh/volcano.svg?branch=master" alt="Build Status" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgoreportcard.com%2Freport%2Fgithub.com%2Fvolcano-sh%2Fvolcano"><img src="https://goreportcard.com/badge/github.com/volcano-sh/volcano" alt="Go Report Card" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano"><img src="https://img.shields.io/github/repo-size/volcano-sh/volcano.svg" alt="RepoSize" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano%2Freleases"><img src="https://img.shields.io/github/release/volcano-sh/volcano.svg" alt="Release" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano%2Fblob%2Fmaster%2FLICENSE"><img src="https://img.shields.io/github/license/volcano-sh/volcano.svg" alt="LICENSE" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fbestpractices.coreinfrastructure.org%2Fprojects%2F3012"><img src="https://bestpractices.coreinfrastructure.org/projects/3012/badge" alt="CII Best Practices" referrerpolicy="no-referrer"></a></p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fvolcano.sh%2F">Volcano</a> is a batch system built on Kubernetes. It provides a suite of mechanisms that are commonly required by
many classes of batch &amp; elastic workload including: machine learning/deep learning, bioinformatics/genomics and
other "big data" applications. These types of applications typically run on generalized domain frameworks like
TensorFlow, Spark, Ray, PyTorch, MPI, etc, which Volcano integrates with.</p><p>Volcano builds upon a decade and a half of experience running a wide
variety of high performance workloads at scale using several systems
and platforms, combined with best-of-breed ideas and practices from
the open source community.</p><p>Until June 2021, Volcano has been widely used around the world at a variety of industries such as Internet/Cloud/Finance/
Manufacturing/Medical. More than 20 companies or institutions are not only end users but also active contributors. Hundreds
of contributors are taking active part in the code commit/PR review/issue discussion/docs update and design provision. We
are looking forward to your participation.</p><p><strong>NOTE</strong>: the scheduler is built based on <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubernetes-sigs%2Fkube-batch">kube-batch</a>;
refer to <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano%2Fissues%2F241">#241</a> and <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano%2Fpull%2F288">#288</a> for more detail.</p><p><img src="https://gitee.com/kchstack/volcano/raw/master/docs/images/cncf-logo.png" alt="cncf_logo" referrerpolicy="no-referrer"></p><p>Volcano is an incubating project of the <a href="https://gitee.com/link?target=https%3A%2F%2Fcncf.io%2F">Cloud Native Computing Foundation</a> (CNCF). Please consider joining the CNCF if you are an organization that wants to take an active role in supporting the growth and evolution of the cloud native ecosystem.</p><h2><a id="user-content-overall-architecture" class="anchor" href="https://gitee.com/kchstack/volcano#overall-architecture"></a>Overall Architecture</h2><p><img src="https://gitee.com/kchstack/volcano/raw/master/docs/images/volcano-architecture.png" alt="volcano" referrerpolicy="no-referrer"></p><h2><a id="user-content-talks" class="anchor" href="https://gitee.com/kchstack/volcano#talks"></a>Talks</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fsched.co%2FMPi7">Intro: Kubernetes Batch Scheduling @ KubeCon 2019 EU</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Farchsummit.infoq.cn%2F2019%2Fshenzhen%2Fpresentation%2F1817">Volcano 在 Kubernetes 中運行高性能作業實踐 @ ArchSummit 2019</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fagenda.events.huawei.com%2F2019%2Fcn%2Fminisite%2Fagenda.html%23dayTab%3Dday7%26tagName%3D%257B%2522language%2522%253A%2522Cn%2522%257D%26seminarId%3D1743">Volcano：基於雲原生的高密計算解決方案 @ Huawei Connection 2019</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fsched.co%2FUaZi">Improving Performance of Deep Learning Workloads With Volcano @ KubeCon 2019 NA</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fsched.co%2FUajv">Batch Capability of Kubernetes Intro @ KubeCon 2019 NA</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fsched.co%2FMPi7">Intro: Kubernetes Batch Scheduling @ KubeCon 2019 EU</a></li></ul><h2><a id="user-content-ecosystem" class="anchor" href="https://gitee.com/kchstack/volcano#ecosystem"></a>Ecosystem</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGoogleCloudPlatform%2Fspark-on-k8s-operator%2Fblob%2Fmaster%2Fdocs%2Fvolcano-integration.md">spark-operator</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.kubeflow.org%2Fdocs%2Fuse-cases%2Fjob-scheduling%2F">kubeflow/tf-operator</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubeflow%2Farena%2Fblob%2Fmaster%2Fdocs%2Ftraining%2Fvolcanojob%2Fvolcanojob.md">kubeflow/arena</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano%2Ftree%2Fmaster%2Fexample%2Fintegrations%2Fmpi">Horovod/MPI</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano%2Ftree%2Fmaster%2Fexample%2Fintegrations%2Fpaddlepaddle">paddlepaddle</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fbroadinstitute%2Fcromwell%2Fblob%2Fdevelop%2Fdocs%2Fbackends%2FVolcano.md">cromwell</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fray-project.github.io%2Fkuberay%2Fguidance%2Fvolcano-integration">KubeRay</a></li></ul><h2><a id="user-content-quick-start-guide" class="anchor" href="https://gitee.com/kchstack/volcano#quick-start-guide"></a>Quick Start Guide</h2><h3><a id="user-content-prerequisites" class="anchor" href="https://gitee.com/kchstack/volcano#prerequisites"></a>Prerequisites</h3><ul><li>Kubernetes 1.12+ with CRD support</li></ul><p>You can try Volcano by one of the following two ways.</p><p>Note:</p><ul><li>For Kubernetes v1.17+ use CRDs under config/crd/bases (recommended)</li><li>For Kubernetes versions &lt; v1.16 use CRDs under config/crd/v1beta1 (deprecated)</li></ul><h3><a id="user-content-install-with-yaml-files" class="anchor" href="https://gitee.com/kchstack/volcano#install-with-yaml-files"></a>Install with YAML files</h3><p>Install Volcano on an existing Kubernetes cluster. This way is both available for x86_64 and arm64 architecture.</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">kubectl apply -f https://raw.githubusercontent.com/volcano-sh/volcano/master/installer/volcano-development.yaml</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>Enjoy! Volcano will create the following resources in <code>volcano-system</code> namespace.</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">NAME                                       READY   STATUS      RESTARTS   AGE</span><span id="LC2" class="line">pod/volcano-admission-5bd5756f79-dnr4l     1/1     Running     0          96s</span><span id="LC3" class="line">pod/volcano-admission-init-4hjpx           0/1     Completed   0          96s</span><span id="LC4" class="line">pod/volcano-controllers-687948d9c8-nw4b4   1/1     Running     0          96s</span><span id="LC5" class="line">pod/volcano-scheduler-94998fc64-4z8kh      1/1     Running     0          96s</span><span id="LC6" class="line"></span><span id="LC7" class="line">NAME                                TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><span id="LC8" class="line">service/volcano-admission-service   ClusterIP   10.98.152.108   &lt;none&gt;        443/TCP   96s</span><span id="LC9" class="line"></span><span id="LC10" class="line">NAME                                  READY   UP-TO-DATE   AVAILABLE   AGE</span><span id="LC11" class="line">deployment.apps/volcano-admission     1/1     1            1           96s</span><span id="LC12" class="line">deployment.apps/volcano-controllers   1/1     1            1           96s</span><span id="LC13" class="line">deployment.apps/volcano-scheduler     1/1     1            1           96s</span><span id="LC14" class="line"></span><span id="LC15" class="line">NAME                                             DESIRED   CURRENT   READY   AGE</span><span id="LC16" class="line">replicaset.apps/volcano-admission-5bd5756f79     1         1         1       96s</span><span id="LC17" class="line">replicaset.apps/volcano-controllers-687948d9c8   1         1         1       96s</span><span id="LC18" class="line">replicaset.apps/volcano-scheduler-94998fc64      1         1         1       96s</span><span id="LC19" class="line"></span><span id="LC20" class="line">NAME                               COMPLETIONS   DURATION   AGE</span><span id="LC21" class="line">job.batch/volcano-admission-init   1/1           48s        96s</span><span id="LC22" class="line"></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-install-from-code" class="anchor" href="https://gitee.com/kchstack/volcano#install-from-code"></a>Install from code</h3><p>If you don't have a kubernetes cluster, try one-click install from code base:</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">./hack/local-up-volcano.sh</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>This way is only available for x86_64 temporarily.</p><h3><a id="user-content-install-monitoring-system" class="anchor" href="https://gitee.com/kchstack/volcano#install-monitoring-system"></a>Install monitoring system</h3><p>If you want to get prometheus and grafana volcano dashboard after volcano installed, try following commands:</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">make <span class="nv">TAG</span><span class="o">=</span>latest generate-yaml</span><span id="LC2" class="line">kubectl create <span class="nt">-f</span> _output/release/volcano-monitoring-latest.yaml</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-kubernetes-compatibility" class="anchor" href="https://gitee.com/kchstack/volcano#kubernetes-compatibility"></a>Kubernetes compatibility</h2><table><thead><tr><th></th><th>Kubernetes 1.17</th><th>Kubernetes 1.18</th><th>Kubernetes 1.19</th><th>Kubernetes 1.20</th><th>Kubernetes 1.21</th><th>Kubernetes 1.22</th><th>Kubernetes 1.23</th><th>Kubernetes 1.24</th><th>Kubernetes 1.25</th></tr></thead><tbody><tr><td>Volcano v1.6</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>-</td><td>-</td></tr><tr><td>Volcano v1.7</td><td>-</td><td>-</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>Volcano HEAD (master)</td><td>-</td><td>-</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr></tbody></table><p>Key:</p><ul><li><code>✓</code> Volcano and the Kubernetes version are exactly compatible.</li><li><code>+</code> Volcano has features or API objects that may not be present in the Kubernetes version.</li><li><code>-</code> The Kubernetes version has features or API objects that Volcano can't use.</li></ul><h2><a id="user-content-meeting" class="anchor" href="https://gitee.com/kchstack/volcano#meeting"></a>Meeting</h2><p>Community weekly meeting for Asia: 15:00 - 16:00 (UTC+8) Friday. (<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.thetimezoneconverter.com%2F%3Ft%3D10%253A00%26tz%3DGMT%252B8%26">Convert to your timezone.</a>)</p><p>Community biweekly meeting for America: 08:30 - 09:30 (UTC-8) Thursday. (<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.thetimezoneconverter.com%2F%3Ft%3D10%253A00%26tz%3DGMT%252B8%26">Convert to your timezone.</a>)</p><p>Community meeting for Europe is ongoing on demand now. If you have some ideas or topics to discuss, please leave message
in the <a href="https://gitee.com/link?target=https%3A%2F%2Fcloud-native.slack.com%2Farchives%2FC011GJDQS0N">slack</a>. Maintainers will contact with you and book an open meeting for that.</p><p>Resources:</p><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fdocs.google.com%2Fdocument%2Fd%2F1YLbF8zjZBiR9PbXQPB22iuc_L0Oui5A1lddVfRnZrqs%2Fedit">Meeting notes and agenda</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fzoom.us%2Fj%2F91804791393">Meeting link</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fcalendar.google.com%2Fcalendar%2Fb%2F1%2Fembed%3Fsrc%3Dvolcano.sh.bot%40gmail.com">Meeting Calendar</a> | <a href="https://gitee.com/link?target=https%3A%2F%2Fcalendar.google.com%2Fcalendar%2Fb%2F1%3Fcid%3Ddm9sY2Fuby5zaC5ib3RAZ21haWwuY29t">Subscribe</a></li></ul><h2><a id="user-content-contact" class="anchor" href="https://gitee.com/kchstack/volcano#contact"></a>Contact</h2><p>If you have any question, feel free to reach out to us in the following ways:</p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fvolcano-sh.slack.com">Volcano Slack Channel</a></p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgroups.google.com%2Fforum%2F%23%21forum%2Fvolcano-sh">Mailing List</a></p>]]>
            </description>
            <pubDate>Sat, 23 Sep 2023 03:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/kchstack/volcano</guid>
            <link>https://gitee.com/kchstack/volcano</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 深入淺出線程池]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h1_1"></span><h1><span><span><span>一、線程</span></span></span></h1><span id="OSC_h2_2"></span><h2><span><span><span style="color:#333333">1、什麼是線程 </span></span></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>線程</span></strong></span></span><span><span><span style="color:#333333">(thread) 是操作系統能夠進行運算調度的最小單位。它被包含在進程之中，是進程中的實際，運作單位。一條線程指的是進程中一個單一順序的控制流，一個進程中可以併發多個線程，每條線，程並行執行不同的任務。 </span></span></span></p><span id="OSC_h2_3"></span><h2><span><span><span style="color:#333333">2、如何創建線程</span></span></span></h2><span id="OSC_h3_4"></span><h3><span><span><span>2.1、JAVA 中創建線程</span></span></span></h3><pre><code><span><span><span style="color:#708090">/**
 * 繼承 Thread 類，重寫 run 方法
 */</span></span><span><span></span></span><span><span style="color:#0077aa">class</span></span><span><span></span></span><span><span style="color:#dd4a68">MyThread</span></span><span><span></span></span><span><span style="color:#0077aa">extends</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span>@Override</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"myThread..."</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentThread</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getName</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#708090">/**
 * 實現 Runnable 接口，實現 run 方法 
 */</span></span><span><span></span></span><span><span style="color:#0077aa">class</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span></span></span><span><span style="color:#0077aa">implements</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span>@Override</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"MyRunnable..."</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentThread</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getName</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#708090">/**
 * 實現 Callable 接口，指定返回類型，實現 call 方法
 */</span></span><span><span></span></span><span><span style="color:#0077aa">class</span></span><span><span></span></span><span><span style="color:#dd4a68">MyCallable</span></span><span><span></span></span><span><span style="color:#0077aa">implements</span></span><span><span></span></span><span><span style="color:#dd4a68">Callable</span></span><span><span>&lt;String&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span>@Override</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#dd4a68">String</span></span><span><span></span></span><span><span style="color:#dd4a68">call</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throws</span></span><span><span></span></span><span><span style="color:#dd4a68">Exception</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#669900">"MyCallable..."</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentThread</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getName</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><span id="OSC_h3_5"></span><h3><span><span><span>2.2、測試一下</span></span></span></h3><pre><code><span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">main</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">String</span></span><span><span style="color:#999999">[</span></span><span><span style="color:#999999">]</span></span><span><span> args</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throws</span></span><span><span></span></span><span><span style="color:#dd4a68">Exception</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">MyThread</span></span><span><span> thread </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyThread</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
    thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//myThread...main</span></span><span><span>
    thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">start</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//myThread...Thread-0</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span> myRunnable </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span> thread1 </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">(</span></span><span><span>myRunnable</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
    myRunnable</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//MyRunnable...main</span></span><span><span>
    thread1</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">start</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//MyRunnable...Thread-1</span></span><span><span></span></span><span><span style="color:#dd4a68">MyCallable</span></span><span><span> myCallable </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyCallable</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">FutureTask</span></span><span><span>&lt;String&gt;</span></span><span><span> futureTask </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">FutureTask</span></span><span><span>&lt;&gt;</span></span><span><span style="color:#999999">(</span></span><span><span>myCallable</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span> thread2 </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">(</span></span><span><span>futureTask</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
    thread2</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">start</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span>myCallable</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">call</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//MyCallable...main</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span>futureTask</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//MyCallable...Thread-2</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span></span></code></pre><span id="OSC_h3_6"></span><h3><span><span><span>2.3、問題</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span style="color:#333333">既然我們創建了線程，那為何我們直接調用方法和我們調用 start() 方法的結果不同?new Thread() 是否真實創建了線程? </span></span></span></p><span id="OSC_h3_7"></span><h3><span><span><span style="color:#333333">2.4、問題分析</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span style="color:#333333">我們直接調用方法，可以看到是執行的主線程，而調用 start() 方法就是開啓了新線程，那説明 new Thread() 並沒有創建線程，而是在 start() 中創建了線程。 </span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span style="color:#333333">那我們看下 Thread 類 start() 方法: </span></span></span></p><pre><code><span><span><span style="color:#0077aa">class</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span></span></span><span><span style="color:#0077aa">implements</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//Thread 類實現了 Runnalbe 接口，實現了 run() 方法 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> target</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">synchronized</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">start</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> started </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">start0</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//可以看到，start() 方法真實的調用時 start0() 方法 </span></span><span><span>
            started </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">true</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">native</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">start0</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//start0() 是一個 native 方法，由 JVM 調用底層操作系統，開啓一個線程，由操作系統過統一調度 </span></span><span><span></span></span><span><span>@Override</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>target </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
             target</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//操作系統在執行新開啓的線程時，回調 Runnable 接口的 run() 方法，執行我們預設的線程任務</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span></span></code></pre><span id="OSC_h3_8"></span><h3><span><span><span>2.5、總結</span></span></span></h3><div><span style="color:#333333">1.</span><span><span><span><span style="color:#333333">JAVA 不能直接創建線程執行任務，而是通過創建 Thread 對象調用操作系統開啓線程，在由操作系，統回調 Runnable 接口的 run() 方法執行任務; </span></span></span></span></div><div><span style="color:#333333">2.</span><span><span><span><span style="color:#333333">實現 Runnable 的方式，將線程實際要執行的回調任務單獨提出來了，實現線程的啓動與回調任務，解耦; </span></span></span></span></div><div><span style="color:#333333">3.</span><span><span><span><span style="color:#333333">實現 Callable 的方式，通過 Future 模式不但將線程的啓動與回調任務解耦，而且可以在執行完成後，獲取到執行的結果; </span></span></span></span></div><span id="OSC_h1_9"></span><h1><span><span><span style="color:#333333">二、多線程</span></span></span></h1><span id="OSC_h2_10"></span><h2><span><span><span>1、什麼是多線程</span></span></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>多線程</span></strong></span></span><span><span><span style="color:#333333">(multithreading)，是指從軟件或者硬件上實現多個線程併發執行的技術。同一個線程只，能處理完一個任務在處理下一個任務，有時我們需要多個任務同時處理，這時，我們就需要創建多，個線程來同時處理任務。 </span></span></span></p><span id="OSC_h2_11"></span><h2><span><span><span style="color:#333333">2、多線程有什麼好處</span></span></span></h2><span id="OSC_h3_12"></span><h3><span><span><span>2.1、串行處理</span></span></span></h3><pre><code><span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">main</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">String</span></span><span><span style="color:#999999">[</span></span><span><span style="color:#999999">]</span></span><span><span> args</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throws</span></span><span><span></span></span><span><span style="color:#dd4a68">Exception</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"start..."</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> start </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentTimeMillis</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">;</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">5</span></span><span><span style="color:#999999">;</span></span><span><span> i</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">sleep</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#990055">2000</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//每個任務執行 2 秒 </span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"task done..."</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//處理執行結果</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> end </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentTimeMillis</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"end...,time = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>end </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span> start</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#708090">//執行結果</span></span><span><span>
start</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span> end</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">,</span></span><span><span>time </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">10043</span></span></span></code></pre><span id="OSC_h3_13"></span><h3><span><span><span>2.2、並行處理</span></span></span></h3><pre><code><span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">main</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">String</span></span><span><span style="color:#999999">[</span></span><span><span style="color:#999999">]</span></span><span><span> args</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throws</span></span><span><span></span></span><span><span style="color:#dd4a68">Exception</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"start..."</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> start </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentTimeMillis</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">List</span></span><span><span>&lt;Future&gt;</span></span><span><span> list </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">ArrayList</span></span><span><span>&lt;&gt;</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">;</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">5</span></span><span><span style="color:#999999">;</span></span><span><span> i</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">Callable</span></span><span><span>&lt;String&gt;</span></span><span><span> callable </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Callable</span></span><span><span>&lt;String&gt;</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span>@Override</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#dd4a68">String</span></span><span><span></span></span><span><span style="color:#dd4a68">call</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throws</span></span><span><span></span></span><span><span style="color:#dd4a68">Exception</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">sleep</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#990055">2000</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//每個任務執行 2 秒 </span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#669900">"task done..."</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">FutureTask</span></span><span><span> task </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">FutureTask</span></span><span><span style="color:#999999">(</span></span><span><span>callable</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
        list</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">add</span></span><span><span style="color:#999999">(</span></span><span><span>task</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">(</span></span><span><span>task</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">start</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
    
    list</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">forEach</span></span><span><span style="color:#999999">(</span></span><span><span>future </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span>future</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//處理執行結果 } catch (Exception e) {</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> end </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentTimeMillis</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"end...,time = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>end </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span> start</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#708090">//執行結果</span></span><span><span>
 start</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
 task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
 task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
 task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
 task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
 task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span> end</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">,</span></span><span><span>time </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">2005</span></span><span><span></span></span></span></code></pre><span id="OSC_h3_14"></span><h3><span><span><span>2.3、總結</span></span></span></h3><div><span>1.</span><span><span><span><span>多線程可以把一個任務拆分為幾個子任務，多個子任務可以併發執行，每一個子任務就是一個線程。</span></span></span></span></div><div><span>2.</span><span><span><span><span>多線程是為了同步完成多項任務，不是為了提高運行效率，而是為了提高資源使用效率來提高系統，的效率。</span></span></span></span></div><span id="OSC_h3_15"></span><h3><span><span><span>2.4、多線程的問題</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>上面示例中我們可以看到，如果每來一個任務，我們就創建一個線程，有很多任務的情況下，我們，會創建大量的線程，可能會導致系統資源的耗盡。同時，我們知道線程的執行是需要搶佔 CPU 資源，的，那如果有太多的線程，就會導致大量時間用在線程切換的開銷上。</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>再有，每來一個任務都需要創建一個線程，而創建一個線程需要調用操作系統底層方法，開銷較，大，而線程執行完成後就被回收了。在需要大量線程的時候，創建線程的時間就花費不少了。</span></span></span></p><span id="OSC_h1_16"></span><h1><span><span><span>三、線程池</span></span></span></h1><span id="OSC_h2_17"></span><h2><span><span><span>1、如何設計一個線程池</span></span></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>由於多線程的開發存在上述的一些問題，那我們是否可以設計一個東西來避免這些問題呢?當然可以! 線程池就是為瞭解決這些問題而生的。那我們該如何設計一個線程池來解決這些問題呢?或者説，一個線程池該具備什麼樣的功能?</span></span></span></p><span id="OSC_h3_18"></span><h3><span><span><span>1.1、線程池基本功能</span></span></span></h3><div><span>1.</span><span><span><span><span>多線程會創建大量的線程耗盡資源，那線程池應該對線程數量有所限制，可以保證不會耗盡系統資，源;</span></span></span></span></div><div><span>2.</span><span><span><span><span>每次創建新的線程會增加創建時的開銷，那線程池應該減少線程的創建，儘量複用已創建好的線，程;</span></span></span></span></div><span id="OSC_h3_19"></span><h3><span><span><span>1.2、線程池面臨問題</span></span></span></h3><div><span>1.</span><span><span><span><span>我們知道線程在執行完自己的任務後就會被回收，那我們如何複用線程?</span></span></span></span></div><div><span>2.</span><span><span><span><span>我們指定了線程的最大數量，當任務數超出線程數時，我們該如何處理?</span></span></span></span></div><span id="OSC_h3_20"></span><h3><span><span><span>1.3、創新源於生活</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>先假設一個場景:假設我們是一個物流公司的管理人員，要配送的貨物就是我們的任務，貨車就是，我們配送工具，我們當然不能有多少貨物就準備多少貨車。那當顧客源源不斷的將貨物交給我們配，送，我們該如何管理才能讓公司經營的最好呢?</span></span></span></p><div><span>1.</span><span><span><span><span>最開始貨物來的時候，我們還沒有貨車，每批要運輸的貨物我們都要購買一輛車來運輸;</span></span></span></span></div><div><span>2.</span><span><span><span><span>當貨車運輸完成後，暫時還沒有下一批貨物到達，那貨車就在倉庫停着，等有貨物來了立馬就可以，運輸;</span></span></span></span></div><div><span>3.</span><span><span><span><span>當我們有了一定數量的車後，我們認為已經夠用了，那後面就不再買車了，這時要是由新的貨物來，了，我們就會讓貨物先放倉庫，等有車回來在配送;</span></span></span></span></div><div><span>4.</span><span><span><span><span>當 618 大促來襲，要配送的貨物太多，車都在路上，倉庫也都放滿了，那怎麼辦呢?我們就選擇臨，時租一些車來幫忙配送，提高配送的效率;</span></span></span></span></div><div><span>5.</span><span><span><span><span>但是貨物還是太多，我們增加了臨時的貨車，依舊配送不過來，那這時我們就沒辦法了，只能讓發，貨的客戶排隊等候或者乾脆不接受了;</span></span></span></span></div><div><span>6.</span><span><span><span><span>大促圓滿完成後，累計的貨物已經配送完成了，為了降低成本，我們就將臨時租的車都還了;</span></span></span></span></div><span id="OSC_h3_21"></span><h3><span><span><span>1.4、技術源於創新</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>基於上述場景，物流公司就是我們的線程池、貨物就是我們的線程任務、貨車就是我們的線程。我，們如何設計公司的管理貨車的流程，就應該如何設計線程池管理線程的流程。</span></span></span></p><div><span>1.</span><span><span><span><span>當任務進來我們還沒有線程時，我們就該創建線程執行任務;</span></span></span></span></div><div><span>2.</span><span><span><span><span>當線程任務執行完成後，線程不釋放，等着下一個任務進來後接着執行;</span></span></span></span></div><div><span>3.</span><span><span><span><span>當創建的線程數量達到一定量後，新來的任務我們存起來等待空閒線程執行，這就要求線程池有個，存任務的容器;</span></span></span></span></div><div><span>4.</span><span><span><span><span>當容器存滿後，我們需要增加一些臨時的線程來提高處理效率;</span></span></span></span></div><div><span>5.</span><span><span><span><span>當增加臨時線程後依舊處理不了的任務，那就應該將此任務拒絕;</span></span></span></span></div><div><span>6.</span><span><span><span><span>當所有任務執行完成後，就應該將臨時的線程釋放掉，以免增加不必要的開銷;</span></span></span></span></div><span id="OSC_h2_22"></span><h2><span><span><span>2、線程池具體分析</span></span></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>上文中，我們講了該如何設計一個線程池，下面我們看看大神是如何設計的；</span></span></span></p><span id="OSC_h3_23"></span><h3><span><span><span>2.1、 JAVA 中的線程池是如何設計的</span></span></span></h3><span id="OSC_h4_24"></span><h4><span><span><span>2.1.1、 線程池設計</span></span></span></h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>看下線程池中的屬性，瞭解線程池的設計。</span></span></span></p><pre><code><span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">class</span></span><span><span></span></span><span><span style="color:#dd4a68">ThreadPoolExecutor</span></span><span><span></span></span><span><span style="color:#0077aa">extends</span></span><span><span></span></span><span><span style="color:#dd4a68">AbstractExecutorService</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//線程池的打包控制狀態,用高 3 位來表示線程池的運行狀態,低 29 位來表示線程池中工作線程的數量 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">AtomicInteger</span></span><span><span> ctl </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">AtomicInteger</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">ctlOf</span></span><span><span style="color:#999999">(</span></span><span><span>RUNNING</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//值為 29,用來表示偏移量</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> COUNT_BITS </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">Integer</span></span><span><span style="color:#999999">.</span></span><span><span>SIZE </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span></span></span><span><span style="color:#990055">3</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//線程池的最大容量</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> CAPACITY </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#990055">1</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;&lt;</span></span><span><span> COUNT_BITS</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span></span></span><span><span style="color:#990055">1</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//線程池的運行狀態，總共有 5 個狀態，用高 3 位來表示 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> RUNNING </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span style="color:#990055">1</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;&lt;</span></span><span><span> COUNT_BITS</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//接受新任務並處理阻塞隊列中的任務 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;&lt;</span></span><span><span> COUNT_BITS</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//不接受新任務但會處理阻塞隊列中的任務  </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> STOP </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">1</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;&lt;</span></span><span><span> COUNT_BITS</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//不會接受新任務，也不會處理阻塞隊列中的任務，並且中斷正在運行的任務</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> TIDYING </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">2</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;&lt;</span></span><span><span> COUNT_BITS</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//所有任務都已終止， 工作線程數量為 0，即將要執行 terminated() 鈎子方法 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> TERMINATED </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">3</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;&lt;</span></span><span><span> COUNT_BITS</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// terminated() 方法已經執行結束</span></span><span><span></span></span><span><span style="color:#708090">//任務緩存隊列，用來存放等待執行的任務</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">BlockingQueue</span></span><span><span>&lt;Runnable&gt;</span></span><span><span> workQueue</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//全局鎖，對線程池狀態等屬性修改時需要使用這個鎖</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">ReentrantLock</span></span><span><span> mainLock </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">ReentrantLock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//線程池中工作線程的集合，訪問和修改需要持有全局鎖</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">HashSet</span></span><span><span>&lt;Worker&gt;</span></span><span><span> workers </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">HashSet</span></span><span><span>&lt;Worker&gt;</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 終止條件</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">Condition</span></span><span><span> termination </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">newCondition</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//線程池中曾經出現過的最大線程數 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> largestPoolSize</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//已完成任務的數量</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> completedTaskCount</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//線程工廠</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#dd4a68">ThreadFactory</span></span><span><span> threadFactory</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//任務拒絕策略</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#dd4a68">RejectedExecutionHandler</span></span><span><span> handler</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//線程存活時間</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> keepAliveTime</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//是否允許核心線程超時</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> allowCoreThreadTimeOut</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//核心池大小，若 allowCoreThreadTimeOut 被設置，核心線程全部空閒超時被回收的情況下會為 0 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> corePoolSize</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//最大池大小，不得超過 CAPACITY</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> maximumPoolSize</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//默認的任務拒絕策略</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">RejectedExecutionHandler</span></span><span><span> defaultHandler </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">AbortPolicy</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//運行權限相關</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">RuntimePermission</span></span><span><span> shutdownPerm </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">RuntimePermission</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"modifyThread"</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>小結一下：以上線程池的設計可以看出，線程池的功能還是很完善的。</span></span></span></p><div><span>1.</span><span><span><span><span>提供了線程創建、數量及存活時間等的管理;</span></span></span></span></div><div><span>2.</span><span><span><span><span>提供了線程池狀態流轉的管理;</span></span></span></span></div><div><span>3.</span><span><span><span><span>提供了任務緩存的各種容器;</span></span></span></span></div><div><span>4.</span><span><span><span><span>提供了多餘任務的處理機制;</span></span></span></span></div><div><span>5.</span><span><span><span><span>提供了簡單的統計功能;</span></span></span></span></div><span id="OSC_h4_25"></span><h4><span><span><span>2.1.2、線程池構造函數</span></span></span></h4><pre><code><span><span><span style="color:#708090">//構造函數</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#dd4a68">ThreadPoolExecutor</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> corePoolSize</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#708090">//核心線程數 </span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> maximumPoolSize</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#708090">//最大允許線程數 </span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> keepAliveTime</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#708090">//線程存活時間 </span></span><span><span></span></span><span><span style="color:#dd4a68">TimeUnit</span></span><span><span> unit</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#708090">//存活時間單位 </span></span><span><span></span></span><span><span style="color:#dd4a68">BlockingQueue</span></span><span><span>&lt;Runnable&gt;</span></span><span><span> workQueue</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#708090">//任務緩存隊列</span></span><span><span></span></span><span><span style="color:#dd4a68">ThreadFactory</span></span><span><span> threadFactory</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#708090">//線程工廠 </span></span><span><span></span></span><span><span style="color:#dd4a68">RejectedExecutionHandler</span></span><span><span> handler</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//拒絕策略 </span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>corePoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span>
        maximumPoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span>
        maximumPoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span> corePoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span>
        keepAliveTime </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">IllegalArgumentException</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>workQueue </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span> threadFactory </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span> handler </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">NullPointerException</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>corePoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> corePoolSize</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>maximumPoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> maximumPoolSize</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>workQueue </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> workQueue</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>keepAliveTime </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> unit</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">toNanos</span></span><span><span style="color:#999999">(</span></span><span><span>keepAliveTime</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>threadFactory </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> threadFactory</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>handler </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> handler</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>小結一下：</span></span></span></p><div><span>1.</span><span><span><span><span>構造函數告訴了我們可以怎樣去適用線程池，線程池的哪些特性是我們可以控制的;</span></span></span></span></div><span id="OSC_h4_26"></span><h4><span><span><span>2.1.3、線程池執行</span></span></span></h4><p><span><span><span>2.1.3.1、提交任務方法</span></span></span></p><div><span>•</span><span><span><span><span>public void execute(Runnable command);</span></span></span></span></div><div><span>•</span><span><span><span><span>Future&lt;?&gt; submit(Runnable task);</span></span></span></span></div><div><span>•</span><span><span><span><span>Future submit(Runnable task, T result);</span></span></span></span></div><div><span>•</span><span><span><span><span>Future submit(Callable task);</span></span></span></span></div><pre><code><span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#dd4a68">Future</span></span><span><span>&lt;?&gt;</span></span><span><span></span></span><span><span style="color:#dd4a68">submit</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> task</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>task </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">NullPointerException</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">RunnableFuture</span></span><span><span>&lt;Void&gt;</span></span><span><span> ftask </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">newTaskFor</span></span><span><span style="color:#999999">(</span></span><span><span>task</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">execute</span></span><span><span style="color:#999999">(</span></span><span><span>ftask</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> ftask</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>可以看到 submit 方法的底層調用的也是 execute 方法，所以我們這裏只分析 execute 方法；</span></span></span></p><pre><code><span><span><span>    public void execute(Runnable command) {
        if (command == null)
            throw new NullPointerException();
        
        int c = ctl.get();
        //第一步：創建核心線程
        if (workerCountOf(c) &lt; corePoolSize) {  //worker 數量小於 corePoolSize
            if (addWorker(command, true))       //創建 worker
                return;
            c = ctl.get();
        }
        //第二步：加入緩存隊列
        if (isRunning(c) &amp;&amp; workQueue.offer(command)) { //線程池處於 RUNNING 狀態，將任務加入 workQueue 任務緩存隊列
            int recheck = ctl.get();    
            if (! isRunning(recheck) &amp;&amp; remove(command))    //雙重檢查，若線程池狀態關閉了，移除任務
                reject(command);
            else if (workerCountOf(recheck) == 0)       //線程池狀態正常，但是沒有線程了，創建 worker
                addWorker(null, false);
        }
        //第三步：創建臨時線程
        else if (!addWorker(command, false))
            reject(command);
    }</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>小結一下：execute() 方法主要功能：</span></span></span></p><div><span>1.</span><span><span><span><span>核心線程數量不足就創建核心線程；</span></span></span></span></div><div><span>2.</span><span><span><span><span>核心線程滿了就加入緩存隊列；</span></span></span></span></div><div><span>3.</span><span><span><span><span>緩存隊列滿了就增加非核心線程；</span></span></span></span></div><div><span>4.</span><span><span><span><span>非核心線程也滿了就拒絕任務；</span></span></span></span></div><p><span><span><span>2.1.3.2、創建線程</span></span></span></p><pre><code><span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span></span></span><span><span style="color:#dd4a68">addWorker</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> firstTask</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> core</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
        retry</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> c </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">runStateOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
​
            </span></span><span><span style="color:#708090">//等價於：rs&gt;=SHUTDOWN &amp;&amp; (rs != SHUTDOWN || firstTask != null || workQueue.isEmpty())</span></span><span><span></span></span><span><span style="color:#708090">//線程池已關閉，並且無需執行緩存隊列中的任務，則不創建</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;=</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span>
                   firstTask </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span> workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isEmpty</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span>
​
            </span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">workerCountOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;=</span></span><span><span> CAPACITY </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span>
                    wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;=</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>core </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">?</span></span><span><span> corePoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span> maximumPoolSize</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">compareAndIncrementWorkerCount</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#708090">//CAS 增加線程數</span></span><span><span></span></span><span><span style="color:#0077aa">break</span></span><span><span> retry</span></span><span><span style="color:#999999">;</span></span><span><span>
                c </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// Re-read ctl</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">runStateOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span> rs</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">continue</span></span><span><span> retry</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// else CAS failed due to workerCount change; retry inner loop</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
​
        </span></span><span><span style="color:#708090">//上面的流程走完，就可以真實開始創建線程了</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> workerStarted </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> workerAdded </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">Worker</span></span><span><span> w </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            w </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Worker</span></span><span><span style="color:#999999">(</span></span><span><span>firstTask</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//這裏創建了線程</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span> t </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> w</span></span><span><span style="color:#999999">.</span></span><span><span>thread</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>t </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">ReentrantLock</span></span><span><span> mainLock </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>mainLock</span></span><span><span style="color:#999999">;</span></span><span><span>
                mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">lock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">// Recheck while holding lock.</span></span><span><span></span></span><span><span style="color:#708090">// Back out on ThreadFactory failure or if</span></span><span><span></span></span><span><span style="color:#708090">// shut down before lock acquired.</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">runStateOf</span></span><span><span style="color:#999999">(</span></span><span><span>ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
​
                    </span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span> firstTask </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>t</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isAlive</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#708090">// precheck that t is startable</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">IllegalThreadStateException</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
                        workers</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">add</span></span><span><span style="color:#999999">(</span></span><span><span>w</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//這裏將線程加入到線程池中</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> s </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> workers</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">size</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>s </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;</span></span><span><span> largestPoolSize</span></span><span><span style="color:#999999">)</span></span><span><span>
                            largestPoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> s</span></span><span><span style="color:#999999">;</span></span><span><span>
                        workerAdded </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">true</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                    mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">unlock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>workerAdded</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                    t</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">start</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//添加成功，啓動線程</span></span><span><span>
                    workerStarted </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">true</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span> workerStarted</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#dd4a68">addWorkerFailed</span></span><span><span style="color:#999999">(</span></span><span><span>w</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//添加線程失敗操作</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> workerStarted</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>小結：addWorker() 方法主要功能；</span></span></span></p><div><span>1.</span><span><span><span><span>增加線程數；</span></span></span></span></div><div><span>2.</span><span><span><span><span>創建線程 Worker 實例加入線程池；</span></span></span></span></div><div><span>3.</span><span><span><span><span>加入完成開啓線程；</span></span></span></span></div><div><span>4.</span><span><span><span><span>啓動失敗則回滾增加流程；</span></span></span></span></div><p><span><span><span>2.1.3.3、工作線程的實現</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">class</span></span><span><span></span></span><span><span style="color:#dd4a68">Worker</span></span><span><span></span></span><span><span style="color:#708090">//Worker 類是 ThreadPoolExecutor 的內部類</span></span><span><span></span></span><span><span style="color:#0077aa">extends</span></span><span><span></span></span><span><span style="color:#dd4a68">AbstractQueuedSynchronizer</span></span><span><span></span></span><span><span style="color:#0077aa">implements</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span> thread</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//持有實際線程</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> firstTask</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//worker 所對應的第一個任務，可能為空</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> completedTasks</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//記錄執行任務數</span></span><span><span>
​
        </span></span><span><span style="color:#dd4a68">Worker</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> firstTask</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">setState</span></span><span><span style="color:#999999">(</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span style="color:#990055">1</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// inhibit interrupts until runWorker</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>firstTask </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> firstTask</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>thread </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">getThreadFactory</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">newThread</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">runWorker</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//當前線程調用 ThreadPoolExecutor 中的 runWorker 方法，在這裏實現的線程複用</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
​
        </span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>繼承 AQS，實現了不可重入鎖</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>小結：工作線程 Worker 類主要功能；</span></span></span></p><div><span>1.</span><span><span><span><span>此類持有一個工作線程，不斷處理拿到的新任務，持有的線程即為可複用的線程；</span></span></span></span></div><div><span>2.</span><span><span><span><span>此類可看作一個適配類，在 run() 方法中真實調用 runWorker() 方法不斷獲取新任務，完成線程複用；</span></span></span></span></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>2.1.3.4、線程的複用</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">runWorker</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Worker</span></span><span><span> w</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//ThreadPoolExecutor 中的 runWorker 方法，在這裏實現的線程複用</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span> wt </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentThread</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> task </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> w</span></span><span><span style="color:#999999">.</span></span><span><span>firstTask</span></span><span><span style="color:#999999">;</span></span><span><span>
        w</span></span><span><span style="color:#999999">.</span></span><span><span>firstTask </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">;</span></span><span><span>
        w</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">unlock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// allow interrupts</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> completedAbruptly </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">true</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//標識線程是否異常終止</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">while</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>task </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>task </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">getTask</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//這裏會不斷從任務隊列獲取任務並執行</span></span><span><span>
                w</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">lock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//線程是否需要中斷</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">runStateAtLeast</span></span><span><span style="color:#999999">(</span></span><span><span>ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">,</span></span><span><span> STOP</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">interrupted</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="color:#dd4a68">runStateAtLeast</span></span><span><span style="color:#999999">(</span></span><span><span>ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">,</span></span><span><span> STOP</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span>wt</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isInterrupted</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span>
                    wt</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">interrupt</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">beforeExecute</span></span><span><span style="color:#999999">(</span></span><span><span>wt</span></span><span><span style="color:#999999">,</span></span><span><span> task</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//執行任務前的 Hook 方法，可自定義</span></span><span><span></span></span><span><span style="color:#dd4a68">Throwable</span></span><span><span> thrown </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                        task</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//執行實際的任務</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">catch</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">RuntimeException</span></span><span><span> x</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                        thrown </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> x</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span> x</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">catch</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Error</span></span><span><span> x</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                        thrown </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> x</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span> x</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">catch</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Throwable</span></span><span><span> x</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                        thrown </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> x</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Error</span></span><span><span style="color:#999999">(</span></span><span><span>x</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">afterExecute</span></span><span><span style="color:#999999">(</span></span><span><span>task</span></span><span><span style="color:#999999">,</span></span><span><span> thrown</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//執行任務後的 Hook 方法，可自定義</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                    task </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//執行完成後，將當前線程中的任務制空，準備執行下一個任務</span></span><span><span>
                    w</span></span><span><span style="color:#999999">.</span></span><span><span>completedTasks</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">;</span></span><span><span>
                    w</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">unlock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
            completedAbruptly </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">processWorkerExit</span></span><span><span style="color:#999999">(</span></span><span><span>w</span></span><span><span style="color:#999999">,</span></span><span><span> completedAbruptly</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//線程執行完成後的清理工作</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span><span><span>小結：runWorker() 方法主要功能；</span></span></span></p><div><span>1.</span><span><span><span><span>循環從緩存隊列中獲取新的任務，直到沒有任務為止；</span></span></span></span></div><div><span>2.</span><span><span><span><span>使用 worker 持有的線程真實執行任務；</span></span></span></span></div><div><span>3.</span><span><span><span><span>任務都執行完成後的清理工作；</span></span></span></span></div><p><span><span><span>2.1.3.5、隊列中獲取待執行任務</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span></span></span><span><span style="color:#dd4a68">getTask</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> timedOut </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//標識當前線程是否超時未能獲取到 task 對象</span></span><span><span>
​
        </span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> c </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">runStateOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
​
            </span></span><span><span style="color:#708090">// Check if queue empty only if necessary.</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;=</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;=</span></span><span><span> STOP </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span> workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isEmpty</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">decrementWorkerCount</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
​
            </span></span><span><span style="color:#0077aa">int</span></span><span><span> wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">workerCountOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
​
            </span></span><span><span style="color:#708090">// Are workers subject to culling?</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> timed </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> allowCoreThreadTimeOut </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span> wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;</span></span><span><span> corePoolSize</span></span><span><span style="color:#999999">;</span></span><span><span>
​
            </span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">(</span></span><span><span>wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;</span></span><span><span> maximumPoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>timed </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span> timedOut</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;</span></span><span><span></span></span><span><span style="color:#990055">1</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span> workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isEmpty</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">compareAndDecrementWorkerCount</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#708090">//若線程存活時間超時，則 CAS 減去線程數量</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">continue</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
​
            </span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> r </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> timed </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">?</span></span><span><span>
                    workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">poll</span></span><span><span style="color:#999999">(</span></span><span><span>keepAliveTime</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#dd4a68">TimeUnit</span></span><span><span style="color:#999999">.</span></span><span><span>NANOSECONDS</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span></span></span><span><span style="color:#708090">//允許超時回收則阻塞等待</span></span><span><span>
                    workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">take</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//不允許則直接獲取，沒有就返回 null</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>r </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> r</span></span><span><span style="color:#999999">;</span></span><span><span>
                timedOut </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">true</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">catch</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">InterruptedException</span></span><span><span> retry</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                timedOut </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>小結：getTask() 方法主要功能；</span></span></span></p><div><span>1.</span><span><span><span><span>實際在緩存隊列中獲取待執行的任務；</span></span></span></span></div><div><span>2.</span><span><span><span><span>在這裏管理線程是否要阻塞等待，控制線程的數量；</span></span></span></span></div><p><span><span><span>2.1.3.6、清理工作</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">processWorkerExit</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Worker</span></span><span><span> w</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> completedAbruptly</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>completedAbruptly</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#708090">// If abrupt, then workerCount wasn't adjusted</span></span><span><span></span></span><span><span style="color:#dd4a68">decrementWorkerCount</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
​
        </span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">ReentrantLock</span></span><span><span> mainLock </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>mainLock</span></span><span><span style="color:#999999">;</span></span><span><span>
        mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">lock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            completedTaskCount </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+=</span></span><span><span> w</span></span><span><span style="color:#999999">.</span></span><span><span>completedTasks</span></span><span><span style="color:#999999">;</span></span><span><span>
            workers</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">remove</span></span><span><span style="color:#999999">(</span></span><span><span>w</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//移除執行完成的線程</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">unlock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
​
        </span></span><span><span style="color:#dd4a68">tryTerminate</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//每次回收完一個線程後都嘗試終止線程池</span></span><span><span>
​
        </span></span><span><span style="color:#0077aa">int</span></span><span><span> c </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">runStateLessThan</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">,</span></span><span><span> STOP</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//到這裏説明線程池沒有終止</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span>completedAbruptly</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> min </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> allowCoreThreadTimeOut </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">?</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span> corePoolSize</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>min </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span> workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isEmpty</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span>
                    min </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">1</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">workerCountOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;=</span></span><span><span> min</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// replacement not needed</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#dd4a68">addWorker</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//異常終止線程的話，需要在常見一個線程</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span><span><span>小結：processWorkerExit() 方法主要功能；</span></span></span></p><div><span>1.</span><span><span><span><span>真實完成線程池線程的回收；</span></span></span></span></div><div><span>2.</span><span><span><span><span>調用嘗試終止線程池；</span></span></span></span></div><div><span>3.</span><span><span><span><span>保證線程池正常運行；</span></span></span></span></div><p><span><span><span>2.1.3.7、嘗試終止線程池</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">tryTerminate</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> c </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//若線程池正在執行、線程池已終止、線程池還需要執行緩存隊列中的任務時，返回</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">isRunning</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#dd4a68">runStateAtLeast</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">,</span></span><span><span> TIDYING</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">runStateOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span> workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isEmpty</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//執行到這裏，線程池為 SHUTDOWN 且無待執行任務，或 STOP 狀態</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">workerCountOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">interruptIdleWorkers</span></span><span><span style="color:#999999">(</span></span><span><span>ONLY_ONE</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//只中斷一個線程</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
​
            </span></span><span><span style="color:#708090">//執行到這裏，線程池已經沒有可用線程了，可以終止了</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">ReentrantLock</span></span><span><span> mainLock </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>mainLock</span></span><span><span style="color:#999999">;</span></span><span><span>
            mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">lock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">compareAndSet</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#dd4a68">ctlOf</span></span><span><span style="color:#999999">(</span></span><span><span>TIDYING</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//CAS 設置線程池終止</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">terminated</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//執行鈎子方法</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                        ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">set</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">ctlOf</span></span><span><span style="color:#999999">(</span></span><span><span>TERMINATED</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//這裏將線程池設為終態</span></span><span><span>
                        termination</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">signalAll</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">unlock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#708090">// else retry on failed CAS</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span><span><span>小結：tryTerminate() 方法主要功能；</span></span></span></p><div><span>1.</span><span><span><span><span>實際嘗試終止線程池；</span></span></span></span></div><div><span>2.</span><span><span><span><span>終止成功則調用鈎子方法，並且將線程池置為終態。</span></span></span></span></div><span id="OSC_h3_27"></span><h3><span><span><span>2.2、JAVA 線程池總結</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>以上通過對 JAVA 線程池的具體分析我們可以看出，雖然流程看似複雜，但其實有很多內容都是狀態重複校驗、線程安全的保證等內容，其主要的功能與我們前面所提出的設計功能一致，只是額外增加了一些擴展，下面我們簡單整理下線程池的功能；</span></span></span></p><p><span><span><span>2.2.1、主要功能</span></span></span></p><div><span>1.</span><span><span><span><span>線程數量及存活時間的管理；</span></span></span></span></div><div><span>2.</span><span><span><span><span>待處理任務的存儲功能；</span></span></span></span></div><div><span>3.</span><span><span><span><span>線程複用機制功能；</span></span></span></span></div><div><span>4.</span><span><span><span><span>任務超量的拒絕功能；</span></span></span></span></div><div>
  &nbsp; 
</div><p><span><span><span>2.2.2、擴展功能</span></span></span></p><div><span>1.</span><span><span><span><span>簡單的執行結果統計功能；</span></span></span></span></div><div><span>2.</span><span><span><span><span>提供線程執行異常處理機制；</span></span></span></span></div><div><span>3.</span><span><span><span><span>執行前後處理流程自定義；</span></span></span></span></div><div><span>4.</span><span><span><span><span>提供線程創建方式的自定義；</span></span></span></span></div><p><span><span><span>2.2.3、流程總結</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>以上通過對 JAVA 線程池任務提交流程的分析我們可以看出，線程池執行的簡單流程如下圖所示；</span></span></span></p><div><img alt="" height="229" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-18-06DlWGyY11FjcoyluS.png" width="949" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span></p><span id="OSC_h3_28"></span><h3><span><span><span>2.3、JAVA 線程池使用</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>線程池基本使用驗證上述流程：</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">main</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">String</span></span><span><span style="color:#999999">[</span></span><span><span style="color:#999999">]</span></span><span><span> args</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throws</span></span><span><span></span></span><span><span style="color:#dd4a68">Exception</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//創建線程池</span></span><span><span></span></span><span><span style="color:#dd4a68">ThreadPoolExecutor</span></span><span><span> threadPoolExecutor </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">ThreadPoolExecutor</span></span><span><span style="color:#999999">(</span></span><span><span></span></span><span><span style="color:#990055">5</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">10</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">100</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#dd4a68">TimeUnit</span></span><span><span style="color:#999999">.</span></span><span><span>SECONDS</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">ArrayBlockingQueue</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#990055">5</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//加入 4 個任務，小於核心線程，應該只有 4 個核心線程，隊列為 0</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">;</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">4</span></span><span><span style="color:#999999">;</span></span><span><span> i</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">submit</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"worker count = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getPoolSize</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//worker count = 4</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"queue size = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getQueue</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">size</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//queue size = 0</span></span><span><span></span></span><span><span style="color:#708090">//再加 4 個任務，超過核心線程，但是沒有超過核心線程 + 緩存隊列容量，應該 5 個核心線程，隊列為 3</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">;</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">4</span></span><span><span style="color:#999999">;</span></span><span><span> i</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">submit</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"worker count = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getPoolSize</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//worker count = 5</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"queue size = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getQueue</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">size</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//queue size = 3</span></span><span><span></span></span><span><span style="color:#708090">//再加 4 個任務，隊列滿了，應該 5 個熱核心線程，隊列 5 個，非核心線程 2 個</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">;</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">4</span></span><span><span style="color:#999999">;</span></span><span><span> i</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">submit</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"worker count = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getPoolSize</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//worker count = 7</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"queue size = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getQueue</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">size</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//queue size = 5</span></span><span><span></span></span><span><span style="color:#708090">//再加 4 個任務，核心線程滿了，應該 5 個熱核心線程，隊列 5 個，非核心線程 5 個，最後一個拒絕</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">;</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">4</span></span><span><span style="color:#999999">;</span></span><span><span> i</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">submit</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">catch</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Exception</span></span><span><span> e</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                e</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">printStackTrace</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//java.util.concurrent.RejectedExecutionException</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"worker count = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getPoolSize</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//worker count = 10</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"queue size = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getQueue</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">size</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//queue size = 5</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span>threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getTaskCount</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//共執行 15 個任務</span></span><span><span></span></span><span><span style="color:#708090">//執行完成，休眠 15 秒，非核心線程釋放，應該 5 個核心線程，隊列為 0</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">sleep</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#990055">1500</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"worker count = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getPoolSize</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//worker count = 5</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"queue size = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getQueue</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">size</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//queue size = 0</span></span><span><span></span></span><span><span style="color:#708090">//關閉線程池</span></span><span><span>
        threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">shutdown</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><blockquote><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>﻿作者：京東零售，秦浩然&nbsp;</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>來源：京東雲開發者社區，轉載請註明來源</span></span></span></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sat, 23 Sep 2023 03:07:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/10112678</guid>
            <link>https://my.oschina.net/u/4090830/blog/10112678</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
    </channel>
</rss>
