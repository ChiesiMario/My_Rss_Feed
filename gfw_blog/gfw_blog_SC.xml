<?xml version='1.0' encoding='UTF-8'?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:openSearch="http://a9.com/-/spec/opensearchrss/1.0/"
    xmlns:blogger="http://schemas.google.com/blogger/2008"
    xmlns:georss="http://www.georss.org/georss"
    xmlns:gd="http://schemas.google.com/g/2005"
    xmlns:thr="http://purl.org/syndication/thread/1.0" version="2.0">
    <channel>
        <atom:id>tag:blogger.com,1999:blog-5500297126185736776</atom:id>
        <lastBuildDate>Thu, 28 Sep 2023 11:22:36 +0000</lastBuildDate>
        <category>anti-censorship</category>
        <category>翻墙动态</category>
        <category>Internet control</category>
        <category>anti-censorship campaign</category>
        <category>Internet censorship</category>
        <category>GFW</category>
        <category>notices</category>
        <category>翻墙</category>
        <category>VPN</category>
        <category>blog</category>
        <category>Tor</category>
        <category>foreign countries</category>
        <category>self-censorship</category>
        <category>BBS</category>
        <category>Social Critic</category>
        <category>close</category>
        <category>lawsuits</category>
        <category>Internet censorship research</category>
        <category>翻墙资源</category>
        <category>China Internet Research</category>
        <category>Proxies</category>
        <category>翻墙观察</category>
        <category>Civil Society Communication</category>
        <category>Internet dissent</category>
        <category>harmful information</category>
        <category>online public opinion</category>
        <category>website registration</category>
        <category>internet police</category>
        <category>Participatory Media Handbook</category>
        <category>Citizen Media Law</category>
        <category>SSH</category>
        <category>anti-censorship research</category>
        <category>online porn</category>
        <category>IDC</category>
        <category>real name registration</category>
        <category>censorware</category>
        <category>Guangdong</category>
        <category>government officials</category>
        <category>online activism</category>
        <category>ShadowSocks</category>
        <category>delete</category>
        <category>网络安全</category>
        <category>digital security</category>
        <category>google</category>
        <category>publishing</category>
        <category>rumors</category>
        <category>Psiphon</category>
        <category>block</category>
        <category>propaganda</category>
        <category>技术剖析</category>
        <category>UltraSurf</category>
        <category>科学上网</category>
        <category>netizens&#39; voices</category>
        <category>Internet commentator</category>
        <category>Hotspot Shield</category>
        <category>cell phone</category>
        <category>detention</category>
        <category>universities</category>
        <category>Freegate</category>
        <category>Internet politics</category>
        <category>key words</category>
        <category>School</category>
        <category>YouTube</category>
        <category>Twitter</category>
        <category>online video</category>
        <category>审查</category>
        <category>bloggers</category>
        <category>internet cafes</category>
        <category>GFW 资源</category>
        <category>online culture</category>
        <category>wordpress</category>
        <category>Blogger</category>
        <category>GPass</category>
        <category>Guizhou</category>
        <category>大事记</category>
        <category>Du Dongjin</category>
        <category>news site</category>
        <category>教程</category>
        <category>censored</category>
        <category>Beijing</category>
        <category>新闻审查</category>
        <category>citizen journalism</category>
        <category>from Renren</category>
        <category>unblock</category>
        <category>防火墙</category>
        <category>netizens</category>
        <category>email</category>
        <category>sina</category>
        <category>GFW 新闻</category>
        <category>SMS</category>
        <category>Shandong</category>
        <category>安全</category>
        <category>Afghanistan</category>
        <category>Sichuan</category>
        <category>chinatelecom</category>
        <category>lawyers</category>
        <category>wiki</category>
        <category>xiamen</category>
        <category>隐私</category>
        <category>Henan</category>
        <category>MII</category>
        <category>lawsuits research</category>
        <category>Burma</category>
        <category>GAPP</category>
        <category>academics</category>
        <category>defamation</category>
        <category>foreign IT companies</category>
        <category>Chinese government</category>
        <category>Chongqing</category>
        <category>IPV6</category>
        <category>Shan Zhidong</category>
        <category>baidu</category>
        <category>filtering</category>
        <category>ss</category>
        <category>AlwaysVPN</category>
        <category>Internet human rights declaration</category>
        <category>Jap</category>
        <category>Shanxi</category>
        <category>Zan Aizong</category>
        <category>Zhejiang</category>
        <category>Zuola</category>
        <category>media controls</category>
        <category>Chinese leaders</category>
        <category>Du Daobin</category>
        <category>GTunnel</category>
        <category>Iran</category>
        <category>Jiang Huanwen</category>
        <category>Linkideo</category>
        <category>Liu Xiaoyuan</category>
        <category>Putty</category>
        <category>V2Ray</category>
        <category>Your Freedom</category>
        <category>cctv</category>
        <category>flickr</category>
        <category>gladder</category>
        <category>photo</category>
        <category>reports</category>
        <category>sohu</category>
        <category>视频</category>
        <category>Drupal</category>
        <category>Fujian</category>
        <category>IM</category>
        <category>Internet growth</category>
        <category>Jiangsu</category>
        <category>Yahoo</category>
        <category>Yemen</category>
        <category>Yunnan</category>
        <category>libel</category>
        <category>youth</category>
        <category>技术</category>
        <category>Epoch Times</category>
        <category>FirePhoenix</category>
        <category>Freenet</category>
        <category>GFW 汇总</category>
        <category>Hunan</category>
        <category>QQ</category>
        <category>SARFT</category>
        <category>Shanghai</category>
        <category>Skype</category>
        <category>Tibet</category>
        <category>Xinjiang</category>
        <category>Zhang Yuanxin</category>
        <category>屏蔽</category>
        <category>工具</category>
        <category>浏览器</category>
        <category>China Mobile</category>
        <category>IPv9</category>
        <category>Inner Mongolia</category>
        <category>Online Organizing</category>
        <category>Saudi Arabia</category>
        <category>Search Engines</category>
        <category>Shaanxi</category>
        <category>Shadowrocket</category>
        <category>Shi Tao</category>
        <category>privacy</category>
        <category>中国数字时代</category>
        <category>加密</category>
        <category>匿名</category>
        <category>汇总</category>
        <category>翻墙工具与技术大事记</category>
        <category>自由</category>
        <category>2018</category>
        <category>Anhui</category>
        <category>Audio</category>
        <category>Cisco</category>
        <category>DNS</category>
        <category>Hainan</category>
        <category>He Depu</category>
        <category>Internet Society</category>
        <category>Lian Yue</category>
        <category>Liang hui</category>
        <category>Lu Gengsong</category>
        <category>MPS</category>
        <category>Microsoft</category>
        <category>Tianwang</category>
        <category>Turkey</category>
        <category>Zhang Jianping</category>
        <category>book</category>
        <category>books</category>
        <category>democracy</category>
        <category>free speech</category>
        <category>internet language</category>
        <category>mapping</category>
        <category>ubuntu</category>
        <category>历史纪录</category>
        <category>微信</category>
        <category>方滨兴</category>
        <category>浏览器插件</category>
        <category>Australia</category>
        <category>Cai Mingzhao</category>
        <category>Chen Shuqing</category>
        <category>Culture Revolution</category>
        <category>Egypt</category>
        <category>GFW 评论</category>
        <category>Gansu</category>
        <category>Gaotang</category>
        <category>Guo Qizhen</category>
        <category>Harbin Institute of Technology</category>
        <category>Hebei</category>
        <category>Hu Jintao</category>
        <category>Hubei</category>
        <category>IPFS</category>
        <category>Internet law</category>
        <category>Jiangxi</category>
        <category>KeePass</category>
        <category>Li Jian</category>
        <category>Liaoning</category>
        <category>Pakistan</category>
        <category>Participatory Media Research</category>
        <category>Shi Zhao</category>
        <category>Taiwan</category>
        <category>Wang Haiyang</category>
        <category>Yang Jinzhu</category>
        <category>Yao Jian</category>
        <category>Yilishen</category>
        <category>ZeroNet</category>
        <category>book banning</category>
        <category>ecomomy</category>
        <category>from Xiaonei</category>
        <category>gaming</category>
        <category>hosts</category>
        <category>poisoned milk</category>
        <category>安装教程</category>
        <category>微博</category>
        <category>微软</category>
        <category>操作系统</category>
        <category>翻墙问答</category>
        <category>路由器</category>
        <category>50 Cents Party</category>
        <category>BandwagonHost</category>
        <category>CNNIC</category>
        <category>CentOS</category>
        <category>DigitalOcean</category>
        <category>GFW 教程</category>
        <category>Github</category>
        <category>Green Internet</category>
        <category>Han Han</category>
        <category>Hao Wu</category>
        <category>IPR</category>
        <category>India</category>
        <category>Isaac Mao</category>
        <category>Jilin</category>
        <category>Lantern</category>
        <category>Li Jianping</category>
        <category>Li Yuanlong</category>
        <category>Linux</category>
        <category>Liu Binjie</category>
        <category>MOE</category>
        <category>Mac</category>
        <category>MediaWiki</category>
        <category>Morocco</category>
        <category>Nart Villeneuve</category>
        <category>Openwrt</category>
        <category>P2P</category>
        <category>Potatso</category>
        <category>Qin Zhongfei</category>
        <category>Surge</category>
        <category>United States</category>
        <category>Web-at-Risk</category>
        <category>Wen Jiabao</category>
        <category>Xi Guohua</category>
        <category>Yang Tongyan</category>
        <category>Yang Zaixin</category>
        <category>Yitahutu</category>
        <category>Zhang Lin</category>
        <category>Zhao Lianhai</category>
        <category>corruption</category>
        <category>iPhone 翻墙</category>
        <category>ios</category>
        <category>law</category>
        <category>socksv5</category>
        <category>videos</category>
        <category>互联网管理</category>
        <category>信息安全</category>
        <category>删除</category>
        <category>搜索</category>
        <category>敏感词</category>
        <category>树莓派</category>
        <category>百度云盘</category>
        <category>监控</category>
        <category>网上义务监督员</category>
        <category>网信办</category>
        <category>美国</category>
        <category>翻墙事件大事记</category>
        <category>谷歌浏览器</category>
        <category>Ai Weiwei</category>
        <category>Android</category>
        <category>BTsync</category>
        <category>Cai Lujun</category>
        <category>China Netcom</category>
        <category>China Tietong</category>
        <category>China Unicom</category>
        <category>Chrome</category>
        <category>Ciphire</category>
        <category>Docker</category>
        <category>Eraser</category>
        <category>Finland</category>
        <category>Firefox</category>
        <category>GFW 分析</category>
        <category>GFW 问答</category>
        <category>GIMP</category>
        <category>Global Voices Advocacy</category>
        <category>Guangxi</category>
        <category>Guo Qinghai</category>
        <category>Guo Quan</category>
        <category>Hu Jia</category>
        <category>Huang Qi</category>
        <category>Huang Wanli</category>
        <category>HyperApp</category>
        <category>ISP</category>
        <category>Internet TV</category>
        <category>Ireland</category>
        <category>Israel</category>
        <category>JanusVM</category>
        <category>Li Xinde</category>
        <category>Li Yuan</category>
        <category>Li Zhi</category>
        <category>Liu Yunshan</category>
        <category>Lu Xinhua</category>
        <category>Luo Yongzhong</category>
        <category>MSN</category>
        <category>Mao Zedong</category>
        <category>Ministry of Culture</category>
        <category>NGO-in-a-box</category>
        <category>Ningxia</category>
        <category>OpenNet Initiative</category>
        <category>Paper Bus</category>
        <category>Proxifier</category>
        <category>RSS</category>
        <category>RSS 订阅</category>
        <category>Ran Yunfei</category>
        <category>SSR</category>
        <category>ShadowsocksR</category>
        <category>Shenzhen</category>
        <category>Singapore</category>
        <category>Thailand</category>
        <category>TrueCrypt</category>
        <category>Tudou</category>
        <category>UK</category>
        <category>WYWZ</category>
        <category>WeChat</category>
        <category>Wifi</category>
        <category>Windows10</category>
        <category>WireGuard</category>
        <category>ZeroNet，教程</category>
        <category>Zhang Jianhong</category>
        <category>Zhang Yihe</category>
        <category>Zheng Yichun</category>
        <category>app</category>
        <category>blogbus</category>
        <category>bullog</category>
        <category>censorship</category>
        <category>facebook</category>
        <category>free trade</category>
        <category>from qzone</category>
        <category>goagent</category>
        <category>iOS 翻墙</category>
        <category>information revolution</category>
        <category>international relationship</category>
        <category>ipsec</category>
        <category>kcptun</category>
        <category>l2tp</category>
        <category>movie censorship</category>
        <category>news censorship</category>
        <category>online TV</category>
        <category>online forum</category>
        <category>overseas Chinese</category>
        <category>pptp</category>
        <category>sanxia</category>
        <category>tools</category>
        <category>unnatural death in China</category>
        <category>vps</category>
        <category>websites</category>
        <category>下载</category>
        <category>中国</category>
        <category>中文</category>
        <category>中文版</category>
        <category>互联网</category>
        <category>亚马逊</category>
        <category>俄罗斯</category>
        <category>免费</category>
        <category>劫持</category>
        <category>历史</category>
        <category>原理</category>
        <category>可信计算</category>
        <category>台湾</category>
        <category>大事件</category>
        <category>存储</category>
        <category>密码</category>
        <category>开源</category>
        <category>搭建</category>
        <category>政府</category>
        <category>敏感词库</category>
        <category>新闻</category>
        <category>新闻出版署</category>
        <category>月报</category>
        <category>服务器</category>
        <category>树莓</category>
        <category>泄密</category>
        <category>泄露</category>
        <category>火狐</category>
        <category>环球时报</category>
        <category>白名单</category>
        <category>百度</category>
        <category>监管</category>
        <category>硬件</category>
        <category>编程随想</category>
        <category>网站</category>
        <category>网络</category>
        <category>网络隐私</category>
        <category>翻墙技术</category>
        <category>蓝灯</category>
        <category>证书</category>
        <category>谷歌</category>
        <category>贸易</category>
        <category>鲁炜</category>
        <category>黑客</category>
        <category>A.GIG.T</category>
        <category>ASUS</category>
        <category>Apple</category>
        <category>Azure</category>
        <category>Bahrain</category>
        <category>Banana Pi R1</category>
        <category>Bob Dylan</category>
        <category>CA</category>
        <category>CCP</category>
        <category>Canada</category>
        <category>Chat Rooms</category>
        <category>China Satcom</category>
        <category>Chinese pens</category>
        <category>ChnRoute</category>
        <category>DNSCrypt</category>
        <category>DNSProxy</category>
        <category>EasyPi</category>
        <category>EasytimeTV</category>
        <category>EdgeRouterX</category>
        <category>ExpressVPN</category>
        <category>Feng Zhenghu</category>
        <category>Freedur</category>
        <category>GFW 内容征集</category>
        <category>GPG</category>
        <category>Germany</category>
        <category>Gogo</category>
        <category>Google Cloud</category>
        <category>Google Drive</category>
        <category>GreatFire.org</category>
        <category>HTTPS</category>
        <category>He weifang</category>
        <category>Hexo</category>
        <category>Hexun</category>
        <category>Hong Kong</category>
        <category>Hu Qiheng</category>
        <category>Huang Jinqiu</category>
        <category>Hyper</category>
        <category>I2P</category>
        <category>I2Pd</category>
        <category>Infranet</category>
        <category>Internet addiction</category>
        <category>Internet voting</category>
        <category>Japan</category>
        <category>Jiang Yaoping</category>
        <category>Jinan</category>
        <category>June 4th</category>
        <category>Kenya</category>
        <category>Keso</category>
        <category>Kindle</category>
        <category>Kino</category>
        <category>Kodachi</category>
        <category>Lanten</category>
        <category>Li Baozhong</category>
        <category>Li Dawei</category>
        <category>Li Qinhua</category>
        <category>Linode</category>
        <category>Martus</category>
        <category>OTA</category>
        <category>Onion Routing</category>
        <category>Opera</category>
        <category>PAC</category>
        <category>Paas</category>
        <category>Password Safe</category>
        <category>Pokemon Go</category>
        <category>Poland</category>
        <category>Proxy</category>
        <category>Publius</category>
        <category>Relakks</category>
        <category>Ren Ziyuan</category>
        <category>SCIO</category>
        <category>SNI</category>
        <category>SSL</category>
        <category>SetupVPN</category>
        <category>ShadowRay</category>
        <category>Shanxi brick kiln</category>
        <category>SocksCap64</category>
        <category>Speedplus</category>
        <category>Squid</category>
        <category>Streisand</category>
        <category>Stunnel</category>
        <category>Surge for Mac</category>
        <category>TLS</category>
        <category>Tails</category>
        <category>Telegram</category>
        <category>The Untraceable Surfer</category>
        <category>TheCthulhu</category>
        <category>Tian&#39;an Men</category>
        <category>Tianjin</category>
        <category>Tianya</category>
        <category>Tox</category>
        <category>Tunisia</category>
        <category>Tunnello</category>
        <category>USSR</category>
        <category>Ubuntu Unleashed</category>
        <category>VPN-WS</category>
        <category>VpnGate</category>
        <category>Wang Xiaofeng</category>
        <category>Wang Xiaoning</category>
        <category>Websocket</category>
        <category>Whonix</category>
        <category>WinEvsys</category>
        <category>Windows</category>
        <category>WoSign</category>
        <category>XeroBank Browser</category>
        <category>Xici</category>
        <category>Xu Wanping</category>
        <category>Yan Jun</category>
        <category>Yan Zhengxue</category>
        <category>Yang ZhiZhu</category>
        <category>Yi Xiaobing</category>
        <category>Zhou Yuanzhi</category>
        <category>art censorship</category>
        <category>banned websites</category>
        <category>blogcn</category>
        <category>china</category>
        <category>dante</category>
        <category>economic reform</category>
        <category>from tianya</category>
        <category>google plus 帐号</category>
        <category>google plus 账户</category>
        <category>google reader</category>
        <category>goproxy</category>
        <category>iPad 翻墙</category>
        <category>internet</category>
        <category>lightsword</category>
        <category>minganci</category>
        <category>mistress</category>
        <category>msocks</category>
        <category>nationalism</category>
        <category>netcom</category>
        <category>one- child policy</category>
        <category>online comments</category>
        <category>online games</category>
        <category>political prisoners</category>
        <category>political reform</category>
        <category>pollution</category>
        <category>press censorship</category>
        <category>public participation</category>
        <category>squidproxy</category>
        <category>state secrets</category>
        <category>technorati</category>
        <category>virtual property</category>
        <category>wireshark</category>
        <category>xSocks</category>
        <category>zhenli bu</category>
        <category>zmirror</category>
        <category>一月</category>
        <category>中国政府，Windows10</category>
        <category>中国浏览器</category>
        <category>中国网安协会</category>
        <category>中科院</category>
        <category>中韩</category>
        <category>云梯</category>
        <category>互联网自由</category>
        <category>付费</category>
        <category>代理</category>
        <category>代理服务器</category>
        <category>优劣</category>
        <category>保护</category>
        <category>免费墙</category>
        <category>全局代理</category>
        <category>公众号</category>
        <category>分答</category>
        <category>北京</category>
        <category>十一月</category>
        <category>十二月</category>
        <category>十月</category>
        <category>千里马</category>
        <category>华尔街日报</category>
        <category>协议</category>
        <category>印刷</category>
        <category>去中心化</category>
        <category>反向代理</category>
        <category>反审查</category>
        <category>反投毒</category>
        <category>叫停</category>
        <category>可能吧</category>
        <category>合法性</category>
        <category>同步</category>
        <category>哈尔滨工业大学</category>
        <category>回归</category>
        <category>国产</category>
        <category>土豆丝</category>
        <category>圣战</category>
        <category>地穴寓言</category>
        <category>域名</category>
        <category>外企</category>
        <category>太子党</category>
        <category>媒体</category>
        <category>安装</category>
        <category>审议</category>
        <category>客户数据</category>
        <category>密钥交换</category>
        <category>封锁</category>
        <category>小米</category>
        <category>小粉红</category>
        <category>局域网</category>
        <category>工信部，</category>
        <category>工商总局</category>
        <category>巴基斯坦</category>
        <category>开发</category>
        <category>影梭</category>
        <category>徐麟</category>
        <category>手机</category>
        <category>扩展程序</category>
        <category>技巧</category>
        <category>推特</category>
        <category>插件</category>
        <category>搬瓦工</category>
        <category>搭建服务器</category>
        <category>摄像头</category>
        <category>数字世界</category>
        <category>数字生活</category>
        <category>数据泄露</category>
        <category>新浪微博搜索</category>
        <category>无界</category>
        <category>晒客</category>
        <category>智能路由器</category>
        <category>暗网</category>
        <category>朋友圈</category>
        <category>朝鲜</category>
        <category>木马</category>
        <category>极路由</category>
        <category>梯子</category>
        <category>模块化</category>
        <category>污染</category>
        <category>沃通</category>
        <category>测试</category>
        <category>深网</category>
        <category>游戏</category>
        <category>源码</category>
        <category>炎黄春秋</category>
        <category>特殊管理股</category>
        <category>电子产品</category>
        <category>病毒</category>
        <category>研究项目</category>
        <category>禁言</category>
        <category>科学上网用</category>
        <category>秘密搜查</category>
        <category>突破内网</category>
        <category>算法</category>
        <category>纽约时报</category>
        <category>维基百科</category>
        <category>网关</category>
        <category>网络加速</category>
        <category>网络空间安全</category>
        <category>网络自由</category>
        <category>翻墙</category>
        <category>自媒体</category>
        <category>自我审查</category>
        <category>自由之家</category>
        <category>舆论导向</category>
        <category>艾未未</category>
        <category>萤火虫</category>
        <category>被封</category>
        <category>订阅</category>
        <category>记录</category>
        <category>评测</category>
        <category>财务自由</category>
        <category>越南</category>
        <category>越狱</category>
        <category>软件</category>
        <category>输入法</category>
        <category>辩护</category>
        <category>过滤</category>
        <category>透明度</category>
        <category>邮件</category>
        <category>重庆</category>
        <category>链接</category>
        <category>间谍软件</category>
        <category>隐私</category>
        <category>香港</category>
        <category>麦克风</category>
        <title>GFW BLOG（功夫网与翻墙）</title>
        <description>翻越防火长城，你可以到达世界上的每一个角落。&lt;br&gt;&#xa;Across the Great Firewall, you can reach every corner in the world.</description>
        <link>https://www.chinagfw.org/</link>
        <managingEditor>noreply@blogger.com (GFW BLOG 功夫网与翻墙)</managingEditor>
        <generator>Blogger</generator>
        <openSearch:totalResults>13351</openSearch:totalResults>
        <openSearch:startIndex>1</openSearch:startIndex>
        <openSearch:itemsPerPage>25</openSearch:itemsPerPage>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-469016020215219010</guid>
            <pubDate>Fri, 22 Sep 2023 03:56:00 +0000</pubDate>
            <atom:updated>2023-09-23T20:24:35.367+08:00</atom:updated>
            <title>使用 Yggdrasil 进行远程访问</title>
            <description>&lt;p&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

来源： &lt;a href=&quot;https://here.news/post/53977940-e2da-4d26-99a7-24e65eae588a/使用 Yggdrasil 进行远程访问&quot;&gt;HERE&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;div class=&quot;flex flex-col gap-4 px-1 my-4&quot;&gt;&lt;h1 class=&quot;text-5xl lg:text-6xl xl:text-7xl leading-[1.2em] !text-base sm:!text-2xl !leading-[1.6rem] sm:!leading-[2.4rem] font-medium text-header&quot;&gt;&lt;/h1&gt;&lt;div class=&quot;SinglePost_SinglePost__3in7m&quot;&gt;&lt;p&gt;&lt;strong&gt;作者：Neil Alexander&lt;/strong&gt;&lt;/p&gt;&lt;h2 style=&quot;text-align: left;&quot;&gt;&lt;b&gt;关于 Yggdrasil 网络&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://yggdrasil-network.github.io/installation.html&quot; target=&quot;_blank&quot;&gt;Yggdrasil&lt;/a&gt; 是一种新的实验性紧凑路由方案，设计用于网状或类似互联网的网络。它主要是一种最短路径方案，网络将尝试找到最直接的路径到目的地。&lt;/p&gt;&lt;p&gt;与今天许多网络上使用的结构化和通常层次化的路由方案相比，Yggdrasil 是强烈的分散式和自动排列的。网络上的每个节点都由一个加密公钥标识，在实现中，&lt;strong&gt;IPv6 地址是从该密钥生成的&lt;/strong&gt;。网络拓扑是自适应的，旨在利用可用的任何链接，以提供所有网络参与者之间的完全路由能力。这是因为所有 Yggdrasil 节点都是路由器，共享路由知识并代表其他网络参与者转发流量。&lt;/p&gt;&lt;p&gt;下表说明了传统网络（如互联网）和 Yggdrasil 网络之间的差异：&lt;/p&gt;&lt;p&gt;                                                              传统网络               Yggdrasil&lt;/p&gt;&lt;p&gt;网络上所有流量的端到端加密                  否                         是&lt;/p&gt;&lt;p&gt;使用 DHT 共享分散式路由信息                 否                         是&lt;/p&gt;&lt;p&gt;具有密码绑定的寻址，没有中央机构       否                         是&lt;/p&gt;&lt;p&gt;节点知道其与其他节点的相对位置           否                         是&lt;/p&gt;&lt;p&gt;移动寻址随设备移动而保持不变               否                         是&lt;/p&gt;&lt;p&gt;拓扑图在不同媒介上优雅扩展，如网状，否 是&lt;/p&gt;&lt;h2&gt;今天存在哪些问题？&lt;/h2&gt;&lt;p&gt;我们今天所知的互联网并不符合明确定义的拓扑结构。这在很大程度上是随着互联网的发展而发生的，越来越多的网络通过服务提供商之间的互联安排「拼凑」在一起。缺乏明确定义的拓扑给我们带来了一些不可避免的问题：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;存储「互联网地图」的路由表非常庞大且低效，因为每个提供商都必须传递有关所有其他提供商的 IP 前缀的信息&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;计算机实际上没有办法知道它在互联网上相对于其他任何东西的位置 - 大多数计算机只知道一个「默认网关」&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;很难在不实际发送数据包的情况下检查它从源到目的地的路径&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这些问题已经在一定程度上得到缓解（但并没有真正解决）
 - 
与其在家中的计算机上保存全局路由表的副本相比，您的服务提供商代表您这样做。您的计算机和网络设备只需配置为「将流量发送到上游」，并让您的提供商决定流量的去向。这使您完全受制于您的 ISP，他们可以将您的流量重定向到任何地方，并对其进行检查、操作或拦截。&lt;/p&gt;&lt;p&gt;ISP 网络通常具有结构化的设计，并且通常是层次化的，因此许多现有的路由协议都是根据此设计的。一些优化，如前缀聚合，用于尝试减少提供商必须发送到世界各地的路由条目数量。这些协议通常不适用于拓扑不明确或经常变化的网络
 - 例如无线网状网络，因此过去很难让社区根据需要构建自己的无线网状基础设施。&lt;/p&gt;&lt;h2&gt;Yggdrasil 有什么不同之处？&lt;/h2&gt;&lt;p&gt;Yggdrasil 在共享路由知识方面采取了非常不同的方法。与通过集中分配自治系统的路径来分发地址范围不同，Yggdrasil 以分布式方式建立一个单一的全局网络拓扑。&lt;/p&gt;&lt;p&gt;使用生成树提供同步，并允许节点分配一组树座标，这些座标用于交换和建立引导和路径设置消息。然后，节点通过网络设置到其键空间邻居的路径，有效地将网络排列成一个由公钥排序的虚拟线。然后，中间节点使用这些路径填充其路由表，使节点能够将数据包转发到更接近其目标公钥的位置。&lt;/p&gt;&lt;p&gt;此外，节点可以使用生成树路由进行路径查找，以建立比通过键空间的路径更短的路径，然后切换流量会话到源路由。只要源路由路径可用，通常更直接的源路由将继续使用，并在源路由路径中断时回退到键空间路由。&lt;/p&gt;&lt;p&gt;使用加密签名来保护树公告、引导和路径消息，防止篡改或伪造。&lt;/p&gt;&lt;p&gt;有什么好处？&lt;/p&gt;&lt;p&gt;这种路由方案有许多好处：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;设备只需要维护相对较少的状态以便正常工作和转发数据包 - 没有任何 Yggdrasil 节点需要像 BGP 那样维护「完整的路由表」，大多数节点总共只有少数几个路由表条目&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;路径会自动发现和建立，因此不需要手动配置路由条目 - 唯一需要配置的是节点之间的对等连接&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;网络可以快速建立和拆除路径，而无需丢弃所有路由状态，这在处理节点移动事件时有助于显着减少丢包&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;我们可以轻松地将可靠/静态网络与动态/非静态网络桥接，而无需洪泛大量状态&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;当任何两个或更多个 Yggdrasil 节点相互连接时，网络会自动形成，即使这些连接完全是临时的&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;稀疏的路由知识和仅有少量的协议流量应该意味着 Yggdrasil 能够高效地扩展到非常大的网络&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;取代传统的 VPN&lt;/h2&gt;&lt;p&gt;到目前为止，我最喜欢也是最常使用 Yggdrasil 的一个用例是从远程位置（比如工作地点或我随身携带的笔记本电脑所在的任何地方）访问我的机器。最近，我主要关注的是通过 VNC 使用 Yggdrasil 连接到我家里的 iMac，而 VNC 恰好内置在 macOS 中。我发现 Yggdrasil 是一款出色的工具，它有效地取代了我对传统 VPN 的需求。&lt;/p&gt;&lt;p&gt;使用 Yggdrasil 进行远程访问的一些优点包括：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;端到端加密，为通常在开箱即用的情况下并不安全的协议（如 VNC 或 FTP）提供传输安全性&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;TCP-over-TCP 性能优越 - 显著优于 OpenVPN 或 SSH 转发！&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;源可验证性，可以根据源 IPv6 地址进行白名单验证，并阻止其他所有人&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;可在网络的任何地方进行路由&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;端到端加密&lt;/h2&gt;&lt;p&gt;所有通过 Yggdrasil 的隧道流量都在加密的「会话」中进行。当你试图向该节点发送流量时，会在你和远程节点之间建立一个会话。作为会话握手的一部分，你的公钥加密密钥被交换，这些密钥用于对所有封装的网络流量进行完全的端到端加密。&lt;/p&gt;&lt;p&gt;即使是纯文本协议，在跨 Yggdrasil 网络传输时也会被加密，确保没有中间路由器或对手可以窥探你的流量，使得像 VNC 这样的协议更安全，因为它们本身可能并不安全。&lt;/p&gt;&lt;p&gt;这也意味着，你可以在 Yggdrasil 上发送和接收流量，而不必过于担心在给定位置的网络的安全性。公共场所的开放 Wi-Fi 网络对于任何类型的连接安全性来说都是一场噩梦，因为它们通常没有受到无线加密的保护，但是对于 Yggdrasil 来说，这并不是一个问题。&lt;/p&gt;&lt;h2&gt;TCP-over-TCP 性能&lt;/h2&gt;&lt;p&gt;过去，我曾尝试使用 OpenVPN 和 SSH 隧道作为一种回家的方法，通过在我的 EdgeRouter
 
X 上终止 VPN 连接。我的工作地点的网络允许在少数端口上进行出站 TCP 连接，并且在互联网边界完全丢弃 UDP，因此我被限制在 TCP 模式下使用 OpenVPN，而不是 UDP 模式。&lt;/p&gt;&lt;p&gt;对于传输少量信息，这种方法是可行的，但肯定不是特别好。OpenVPN 并未对 TCP 流量进行任何优化，因此，对于任何对延迟敏感的内容，性能都很糟糕 - 回到我的 iMac 上的 VNC 根本无法使用。SSH 转发也没有好多少。&lt;/p&gt;&lt;p&gt;相反，我在我的 EdgeRouter
 
X 上安装了 Yggdrasil，并将其作为网关来直接路由到我的家庭机器（这是未来博客文章的一个主题）。每个 Yggdrasil 节点都有一个路由的/64 子网，这在我的情况下，使用 iptables 将 NETMAP&#39;d 映射到我的家庭 IPv6
 
ULA 范围。这实际上使我的整个家庭网络在 Yggdrasil 网络上可路由（即使是那些不知道 Yggdrasil 的设备或没有安装它的设备），只需遵守一些防火墙限制，我将在后面讨论。&lt;/p&gt;&lt;p&gt;主要的好处在于，Yggdrasil 使用 LIFO 队列进行会话流量，并利用巨大的 MTUs（如我之前的博客文章中所讨论的）来减少 TCP 控制消息放大的影响，并改善拥塞处理。这使得在 TCP
 Yggdrasil 对等连接上隧道 TCP 时，连接的可用性和稳定性得到了大大的改善 - 
VNC 的稳定性和响应性在这种设置下比在 OpenVPN 或 SSH 上得到了大大的改善。&lt;/p&gt;&lt;h2&gt;防火墙和源可验证性&lt;/h2&gt;&lt;p&gt;当然，Yggdrasil 网络上还有其他人，你不能确定他们是谁，或者他们可能是恶意的。因此，就像在互联网上一样，使用防火墙是明智的。源可验证性在这里特别有用，因为它使得只允许特定的机器通过你的防火墙发送流量，并将所有其他人排除在外变得相当容易。&lt;/p&gt;&lt;p&gt;在 Yggdrasil 中，你的 IPv6 地址与你的加密密钥对直接关联，因此，对你的密钥对的任何更改都会导致你的 IPv6 地址随之更改。当你生成一个配置（使用 yggdrasil
 
-genconf）时，你实际上是在生成一个新的 IPv6 地址。只要你继续在给定的机器上使用相同的 Yggdrasil 配置和相同的加密密钥对，那么该机器将永远保持相同的 Yggdrasil
 IPv6 地址。&lt;/p&gt;&lt;p&gt;这意味着我可以在我的 EdgeRouter 防火墙上创建一个白名单，除非它来自我已知的特定 Yggdrasil 
IPv6 地址列表，比如我的工作电脑和我的笔记本电脑，否则我会丢弃指向我的网络的连接。任何来自这个白名单之外的地址的意外连接都会被丢弃，从网络上隐藏我的机器。&lt;/p&gt;&lt;p&gt;以下是我在我的 EdgeRouter X 上实现这个的一个例子：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;set firewall group ipv6-address-group YGG_TRUSTED ipv6-address &#39;xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx&#39;&lt;/p&gt;&lt;p&gt;set firewall group ipv6-network-group YGG_TRUSTEDNETS ipv6-network &#39;xxx:xxx:xxx::/48&#39;&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_IN default-action drop&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_IN rule 10 action accept&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_IN rule 10 state established enable&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_IN rule 10 state related enable&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_IN rule 20 action drop&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_IN rule 20 state invalid enable&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_IN rule 30 action accept&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_IN rule 30 source group ipv6-address-group YGG_TRUSTED&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_IN rule 40 action accept&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_IN rule 40 source group ipv6-network-group YGG_TRUSTEDNETS&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_LOCAL default-action drop&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_LOCAL rule 10 action accept&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_LOCAL rule 10 state established enable&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_LOCAL rule 10 state related enable&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_LOCAL rule 20 action drop&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_LOCAL rule 20 state invalid enable&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_LOCAL rule 30 action accept&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_LOCAL rule 30 source group ipv6-address-group YGG_TRUSTED&lt;/p&gt;&lt;p&gt;set interfaces yggdrasil tun0 firewall in ipv6-name YGG_IN&lt;/p&gt;&lt;p&gt;set interfaces yggdrasil tun0 firewall local ipv6-name YGG_LOCAL&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;从整个网络路由&lt;/h2&gt;&lt;p&gt;你不需要直接与一个节点进行对等连接就能远程访问它
 - 
你可以从 Yggdrasil 网络的任何地方路由流量。最好总是与地理位置接近你自己的节点进行对等连接，因为这有助于减少网络延迟。然而，你可以在一个新的位置（例如，使用笔记本电脑）设置，并连接到你最近的 Yggdrasil 节点，仍然能够像以前一样访问你的机器。&lt;/p&gt;&lt;h2&gt;结论&lt;/h2&gt;&lt;p&gt;Yggdrasil 已经证明是一种非常有能力的方法，可以远程访问我的家庭网络，并且非常正常化了所有网络流量都应该被加密并被视为私有的观念，即使在连接安全性不能保证的地方也是如此。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://yggdrasil-network.github.io/2018/07/15/remote-access.html&quot; target=&quot;_blank&quot;&gt;https://yggdrasil-network.github.io/2018/07/15/remote-access.html&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;&amp;nbsp;&lt;/span&gt; &lt;/p&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;翻墙技术博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;订阅地址及社交帐号&lt;/a&gt;&lt;/div&gt;</description>
            <link>https://www.chinagfw.org/2023/09/yggdrasil.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-5600230735872138700</guid>
            <pubDate>Wed, 20 Sep 2023 03:17:00 +0000</pubDate>
            <atom:updated>2023-09-20T11:23:40.485+08:00</atom:updated>
            <title>谷歌将 Outline 开源项目的代码作为 SDK 提供给开发者</title>
            <description>&lt;p&gt;via &lt;a href=&quot;https://here.news/post/ef9f331f-843b-4dfb-b698-90598f568a8a/%E8%B0%B7%E6%AD%8C%E5%B0%86outline%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%BB%A3%E7%A0%81%E4%BD%9C%E4%B8%BAsdk%E6%8F%90%E4%BE%9B%E7%BB%99%E5%BC%80%E5%8F%91%E8%80%85&quot;&gt;HERE.news&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;br /&gt;谷歌开始将其&lt;a href=&quot;https://github.com/Jigsaw-Code/outline-sdk&quot;&gt;Outline 代理客户端-服务器代码拆分为软件开发工具包（SDK）&lt;/a&gt;，以便开发人员最终可以将绕过审查的技术嵌入到他们的应用程序中。&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;首先，对于那些不知道的人来说：谷歌的 Jigsaw 互联网自由单位提供了一个名为 Outline 的开源项目，包括一个客户端和一个管理器。&lt;br /&gt;&lt;br /&gt;您可以使用管理器启动个人 Outline 代理服务器，该服务器可以位于您自己的硬件上或云中的虚拟机中，并生成由客户端用于连接到此服务器节点的访问密钥。您可以为自己设置一个 Outline 服务器，也可以与朋友、家人和同事共享访问权限。成功连接到它的客户端将通过 Outline 代理服务器安全地路由其设备的互联网流量。&lt;br /&gt;&lt;br /&gt;因此，如果您无法从您所在的位置访问某些在线服务，您可以通过您的服务器连接，该服务器可以放置在具有更多自由的国家或网络中。Outline 有时被描述为 VPN，但它实际上是一个与 Shadowsocks 兼容的代理，并使用标准的加密和身份验证算法：AES 和 ChaCha20-Poly1305。&lt;br /&gt;&lt;br /&gt;Outline 的主要特点之一是您不使用公共 VPN 提供商：您使用自己的私有基础设施。另一个主要特点是它被认为相对容易设置和使用，可在 Android、iOS、Windows、macOS、Chrome 和 Linux 上随时使用。&lt;br /&gt;&lt;br /&gt;现在，谷歌已经开始将该客户端代码作为软件开发工具包（SDK）提供，以便将其嵌入到第三方应用程序中，使这些应用程序能够为用户提供内置的绕过审查、地理锁定内容和其他限制的功能。&lt;br /&gt;&lt;br /&gt;「在危机时刻，互联网连接是生命线，但威权主义政权擅长封锁访问。这就是为什么 VPN 在人们最需要时保持在线的关键所在」，Jigsaw 团队在周三表示。&lt;br /&gt;&lt;br /&gt;「介绍 Outline SDK：我们的团队为开发人员创建了这个工具包。它使他们能够直接将绕过技术嵌入到他们的应用程序中。Outline SDK 简化了这个过程，使应用程序即使面临审查也能继续提供关键内容，而无需使用 VPN。」&lt;br /&gt;&lt;br /&gt;目前，该项目的这一部分处于 Alpha 阶段，具有各种库可供集成到应用程序中。Jigsaw 警告说，用 Go 编写的软件「处于早期阶段，不能保证稳定」。&lt;br /&gt;&lt;br /&gt;还有一些其他限制。其中之一是目前它只关注客户端，因此如果您想在应用程序中使用 Outline，您需要帮助用户设置代理服务器并导入访问密钥。服务器端库以及文档和其他资源尚未推出。&lt;br /&gt;&lt;br /&gt;此外，Outline 并不孤单。还有一些类似的努力，从这个记者的角度来看，Cult of the Dead Cow 的类似 Tor 的 Veilid 也是一个用于应用程序集成的开源 SDK。不过，与 Outline 不同，Veilid 并不真正针对代理或 VPN 服务，而是针对客户端之间的私密、安全网络连接。&lt;br /&gt;&lt;br /&gt;如果您想设置自己的 VPN，可以查看 Trail of Bits 的 Algo，它使配置 WireGuard 服务器（另一个很酷的项目）变得简单。&lt;br /&gt;&lt;br /&gt;无论如何，通过 Outline，开发人员似乎有另一个可能的选择，如果他们想要将绕过审查或地理锁定功能添加到他们的应用程序中。® &lt;/p&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;翻墙技术博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;订阅地址及社交帐号&lt;/a&gt;&lt;/div&gt;</description>
            <link>https://www.chinagfw.org/2023/09/outlinesdk.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-5752169151928460430</guid>
            <pubDate>Sun, 17 Sep 2023 16:14:00 +0000</pubDate>
            <atom:updated>2023-09-19T09:07:22.305+08:00</atom:updated>
            <title>家庭网络改造记录：旁路由</title>
            <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;div class=&quot;p-name&quot; itemprop=&quot;headline&quot; style=&quot;text-align: left;&quot;&gt;via &lt;a href=&quot;http://whyes.org/2023/home-network-2023&quot;&gt;http://whyes.org/2023/home-network-2023&lt;br /&gt;&lt;/a&gt;&lt;/div&gt;
        
              &lt;h2&gt;缘由&lt;/h2&gt;
&lt;p&gt;今年夏天的高温天气都快结束了，但家里的网络却越发卡顿。终于在一个工作日的晚上，我把光猫和 J1900 
软路由都拔电重启了一下。重启后发现，软路由再也不肯工作，家里就上不了网了。一番操作之后，确认了是软路由罢工。好在几年前淘汰下来的华硕 AC66U
 还没有扔掉，于是接上去替代了软路由顶过了一天。&lt;/p&gt;
&lt;h2&gt;改造过程&lt;/h2&gt;
&lt;p&gt;我家里的网络布局是光猫拨号，接 J1900 软路由作为主路由，下面连接了 4 个组建了 Mesh 网络的 Linksys 
路由器（开启桥接模式）作为无线 AP。软路由作为主路由的设置是最方便的，毕竟智能音箱的联网和 Apple TV 
看油管都需要走外网。但软路由作为主路由也有不合理的地方，因为大多数设备都不需要联外网。30 
多个设备都通过软路由走一遍，看起来不是经济的选择。J1900 这样的 x86 
软路由发热量比较大，在夏天稳定性下降也是个麻烦事。最近拔电重启的频率明显增加，想不到这次拔电之后就再也起不来了。&lt;/p&gt;
&lt;p&gt;于是趁着这个机会，干脆还是试试旁路由。原本的 Linksys 
路由器设置的是桥接模式，现在就改成了路由模式，作为主路由。把原来的软路由刷机之后做成旁路由。目前 J1900 
软路由至少是固件有损坏，重启数次，都不能正确运行。给这货刷固件需要找 HDMI 线连接显示器、找个 USB 键盘、找个 U 
盘来协助写固件，虽然这些东西家里都有，但是折腾起来还是比较痛苦的，于是想干脆还是买个友善 R4S 软路由。我目前办公室里在用一个 R2S 
的软路由，非常稳定，看了一下已经连续开机四百多天了，因此对这样的 ARM 
设备增加了信心（当然办公室的气温和使用环境比家里电视柜要强多了）。另外，这友善的固件可以写到 TF 卡里，而往 TF 
卡写固件比较方便，放在读卡器里插到电脑里就行了。这期间也有朋友提到了给 Apple TV 刷 TVOS17 的测试版固件，然后装某些 App 
作为软路由，但考虑到稳定性，还是买个 R4S 的专职软路由可能更合适。于是有了这些操作：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;将 Linksys 改成路由模式。这个比较简单，Web 方式登录路由器后台一键修改；&lt;/li&gt;&lt;li&gt;给 R4S 找个合适的 OpenWRT 固件。目前固件很多，也比较成熟了。&lt;/li&gt;&lt;li&gt;把 R4S 设置成旁路由模式。这个在油管上也有不少教程，我参考的是 &lt;a href=&quot;https://youtu.be/w7rwNF2Q3lM&quot;&gt;洋葱的教程&lt;/a&gt; 。&lt;/li&gt;&lt;li&gt;更改一些需要连接外网的设备的网络设置，包括电脑、Apple TV、Google Home、Amazon Echo Dot 
等等，把他们的网关和 DNS 都指向 R4S。但修改过程中发现智能音箱不支持修改网络设置，而 Linksys 也不能修改 DHCP 
参数。研究了一番，只有关闭了 Linksys 主路由的 DHCP 功能，打开了 R4S 的 DHCP 
功能。这样一来，就算是入侵式的旁路由模式了。局域网内的流量都需要通过旁路由走一遍，看起来跟软路由作为主路由没有差别，但在稳定性上还是有一些好处，如果旁路由出问题了，打开主路由的
 DHCP 功能就可以了。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;于是形成了这样的网络模式：&lt;/p&gt;
&lt;div class=&quot;photo&quot;&gt;&lt;figure&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot;&gt;&lt;/source&gt;&lt;img alt=&quot;家庭网络.png&quot; height=&quot;738&quot; src=&quot;https://i.typlog.com/whyes/8305737146_549616.png&quot; width=&quot;912&quot; /&gt;&lt;/picture&gt;&lt;/figure&gt;&lt;/div&gt;&lt;h2&gt;有待观察的地方&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Linksys 在路由模式下其实是一个节点管理所有设备，目前对它的稳定性还没有足够的信心，只能先观察一阵子。&lt;/li&gt;&lt;li&gt;目前 R4S 拖这么多设备的信心也不是很足，稳定性也有待观察，希望目前这个固件能够重复出 R2S 的稳定性，动辄能连续开机一年以上。
如果稳定性解决不了，可能得升级无线 AP 或者把 R4S 改成主路由，到时又是一番折腾。&lt;/li&gt;&lt;/ul&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻墙技术博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;订阅地址及社交帐号&lt;/a&gt;&lt;/div&gt;</description>
            <link>https://www.chinagfw.org/2023/09/blog-post_18.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-5206015822767196397</guid>
            <pubDate>Mon, 11 Sep 2023 04:39:00 +0000</pubDate>
            <atom:updated>2023-09-14T21:46:31.144+08:00</atom:updated>
            <title>信息茧房自救指南</title>
            <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;div class=&quot;SinglePost_SinglePost__3in7m&quot;&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/ad9b861c-564c-4f68-9210-7aa56056a8ff_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/ad9b861c-564c-4f68-9210-7aa56056a8ff_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Michael Simmons&lt;br /&gt;&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;「我们消费的信息和我们摄入的食物一样重要。它影响着我们的思想，我们的行为，我们如何理解自己在世界上的位置，以及我们如何理解他人「 ——Evan Williams，Twitter 和 Medium 的联合创始人&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;现在，在世界的某个角落，有一段文字、一章内容或者一整本书籍，只要你读过，就有可能永久改变你的人生轨迹。我把这种内容称之为「突破性知识」。&lt;/p&gt;&lt;p&gt;在这个信息爆炸的时代，寻找并掌握突破性知识的能力，是我们需要学习的最重要的技能之一。我们每个人都曾有过类似的突破性体验。可能是父母、导师或老师说过的一句话，深深地改变了我们的思维和行为。或者是一本书，深深地震撼了我们的内心世界。（下文将这种书籍简称为「触动书」）。&lt;/p&gt;&lt;p&gt;比如，&lt;a href=&quot;https://www.cnbc.com/2017/02/02/billionaire-warren-buffett-discusses-the-book-that-changed-his-life.html&quot; target=&quot;_blank&quot;&gt;沃伦·巴菲特的「触动书」&lt;/a&gt;是&lt;a href=&quot;http://amzn.to/2FfcsIJ&quot; target=&quot;_blank&quot;&gt;《聪明的投资者》&lt;/a&gt;，他在 19 岁时就阅读了这本书。这本书为他的投资哲学奠定了基础。&lt;/p&gt;&lt;p&gt;而&lt;a href=&quot;https://www.cnbc.com/2017/06/06/elon-musk-says-this-science-fiction-classic-changed-his-life.html&quot; target=&quot;_blank&quot;&gt;埃隆·马斯克的「触动书」&lt;/a&gt;是&lt;a href=&quot;http://amzn.to/2F6h0lx&quot; target=&quot;_blank&quot;&gt;《银河系漫游指南》&lt;/a&gt;，他表示这本书帮助他思考更大的问题，从而解决世界上更大的问题。&lt;/p&gt;&lt;p&gt;我最近的「触动书」是&lt;a href=&quot;http://amzn.to/2oylsPM&quot; target=&quot;_blank&quot;&gt;《穷查理宝典》&lt;/a&gt;，作者是白手起家的亿万富翁查理·芒格。这是我首次接触到心理模型的书籍。通过学习和&lt;a href=&quot;https://www.mentalmodelclub.com/mental-model-club-v2.html?utm_source=Medium&amp;amp;utm_medium=article&amp;amp;utm_campaign=18&amp;amp;utm_content=CTA1&quot; target=&quot;_blank&quot;&gt;应用心理模型&lt;/a&gt;，我成功开启了新的事业。&lt;/p&gt;&lt;p&gt;一次突破性的知识体验可能只持续几分钟，但它的影响却可能伴随我们一生。这就是学习的极致杠杆效应。&lt;/p&gt;&lt;p&gt;现在，试想一下，如果每年都能有一次突破性的知识体验，而不是十年才有一次，或者一个月有两次，而不是一年仅有一次，那么这将会带来翻天覆地的改变！这并非遥不可及的梦想。&lt;/p&gt;&lt;p&gt;考虑到突破性知识的强大影响力和寻找它的难度，我们都需要面对一个基本问题：我们如何在有限的时间中，在纷繁复杂的信息中，找到那份能够改变我们的突破性知识？&lt;/p&gt;&lt;p&gt;这个问题引起了我的浓厚兴趣。作为一个阅读过数千本跨学科书籍的人，我多年来一直在反复思索这个问题。&lt;/p&gt;&lt;p&gt;我的书架、亚马逊购物车、Kindle 电子书库和 Audible 愿望清单中堆积着数百本我渴望阅读，但却没时间去读的书。因此，我形成了一个真正的「&lt;a href=&quot;https://www.newyorker.com/magazine/2009/08/10/infinite-playlist&quot; target=&quot;_blank&quot;&gt;无尽的阅读列表&lt;/a&gt;」。&lt;/p&gt;&lt;p&gt;随着时间的推移，我开发出了一种独特的方法来应对信息过载，这是基于我自身的经验，并借鉴了世界上许多&lt;a href=&quot;https://medium.com/@michaeldsimmons/how-elon-musk-learns-faster-and-better-than-everyone-else-a010a4f586ef&quot; target=&quot;_blank&quot;&gt;顶尖企业家和领导者（包括埃隆·马斯克）的学习方式&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;然而，在我们开始采纳这种方法之前，我们首先需要理解这个问题。正如发明家查尔斯·凯特琳（&lt;a href=&quot;https://en.wikipedia.org/wiki/Charles_F._Kettering&quot; target=&quot;_blank&quot;&gt;Charles Kettering&lt;/a&gt;）曾经说过的，「一个好问题的提出，就等于问题解决的一半。 」&lt;/p&gt;&lt;h2&gt;一、引发信息末日的四大问题&lt;/h2&gt;&lt;p&gt;尽管信息过载是一个重大问题，但实际上，它是由四个各自以指数级加速恶化的问题构成的，它们汇集在一起，就可能引发一场巨大的危机。&lt;/p&gt;&lt;p&gt;这场危机有可能让我们集体变得更加愚昧，而非更加聪明，让我们分崩离析，而非团结一致。这场危机有许多种称呼，但我认为最为恰当的是信息末日（&lt;a href=&quot;https://www.buzzfeed.com/charliewarzel/the-terrifying-future-of-fake-news?utm_term=.sxdj8a2vY#.lubjnZlo7&quot; target=&quot;_blank&quot;&gt;Info-Apocalypse&lt;/a&gt;）。&lt;/p&gt;&lt;p&gt;引发信息末日的四大问题包括：内容冲击、信息茧房、持续性分心以及错过恐惧症（FOMO）。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1.信息末日问题一：内容冲击（Content Shock）&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;「信息的大量涌入导致了注意力的极度匮乏……」——赫伯特·西蒙（Herbert A. Simon）&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;随着在线出版和社交媒体的蓬勃发展，我们可以接触到的知识量正在飞速增长，而我们人类的信息处理能力却无法跟上这种速度。同时，每一天，每一秒钟都有更多的内容涌入眼帘。&lt;/p&gt;&lt;p&gt;问题在于：我们如何从中挖掘出大量新信息，学习新技能？这些信息深藏得太深，我们甚至无法察觉到它们的存在。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.信息末日问题二：信息茧房（Echo Chambers）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;随着群体规模的扩大，它们往往会变得&lt;a href=&quot;http://www.lifewithalacrity.com/2004/03/the_dunbar_numb.html&quot; target=&quot;_blank&quot;&gt;不稳定，多元化&lt;/a&gt;，最终分化为各种子群体。这种现象在宗教中表现得尤为明显。&lt;/p&gt;&lt;p&gt;犹太教一直在发展，直到它分裂成多个不同的教派，其中一个分支发展成为基督教。基督教发展后，又分裂成天主教和新教。新教发展后，进一步分裂为浸信会，衞理公会，路德会等等。这种分裂现象在每个发展中的领域都有所体现。&lt;/p&gt;&lt;p&gt;每个新的群体都会发展出自己的语言和文化。尽管这提高了群体内部的沟通效率，但知识的输入和输出却变得更加困难，因为它必须先经过语言和文化的转译。&lt;/p&gt;&lt;p&gt;每个群体都会根据与其他群体的差异或优势发展出一种身份认同。这些群体之间的观念壁垒，会导致极端化和偏见的产生。&lt;/p&gt;&lt;p&gt;在宗教和政治领域，这种现象尤为明显，但实际上，它在所有领域都存在：过于商业化的艺术家被视为「背叛者」。企业家高管常常认为学者过于理论化，脱离实际。许多从事自然科学的人，甚至不认为社会科学是真正的科学。写畅销书的学者，常常被视为不够严谨的研究人员。&lt;/p&gt;&lt;p&gt;问题在于：每个群体都生活在自己的信息茧房中，他们认为这就是「真实」的世界，他们通过妖魔化其他群体来维持这种信念。&lt;/p&gt;&lt;p&gt;在这个社交媒体和算法推荐内容盛行的时代，这些信息茧房变得更加孤立，因为我们接触到的信息越来越少，尤其是那些来自于我们所选择的群体之外的信息。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.信息末日问题三：注意力持续性涣散（Constant Distraction）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;大约五年前，我有幸采访了 Meetup 的创始人，我们不经意间聊起了社交媒体的信息流推荐功能。他当时说了一句令我困惑不解的话：「如果你现在就觉得这东西容易让人上瘾，那么等到五年后再来评价吧。」&lt;/p&gt;&lt;p&gt;如今，五年的时光已然流转，我的与移动设备、互联网以及社交媒体的关系经历了惊人的转变。&lt;/p&gt;&lt;p&gt;随着时间的推移，我变得日益警觉。我甚至从手机上卸载了所有社交媒体应用，并设定了一个只有我妻子知道的 App Store 密码，以阻止我再次下载新应用。尽管如此，我仍觉得自己在这场战斗中节节败退。&lt;/p&gt;&lt;p&gt;尽管我可以随心所欲地摆脱 Facebook、Twitter 或 YouTube，但它们每一个都是我业务发展的重要平台。我在 Facebook 上管理着一个拥有近五万名成员的群组，通过 Facebook 和谷歌来购买广告，并在 Facebook 上推广我的最新文章。&lt;/p&gt;&lt;p&gt;我曾尝试屏蔽 YouTube，但考虑到它上面有大量有价值的教育视频，我最终决定还是解除屏蔽。即便我大部分时间在家工作，一旦打开电脑，我总感觉自己仿佛是在一个喧嚣的集市中设立了一间店铺。&lt;/p&gt;&lt;p&gt;市场营销专家、软件开发者和增长黑客正获得比以往任何时候都要多的用户行为数据。他们借助这些信息，来吸引并牢牢抓住人们的注意力，以达到让他们沉迷于产品的目的。&lt;/p&gt;&lt;p&gt;为了达到这个目标，他们每年都有数十亿美元的投入。他们甚至开发了基于广告收益的商业模型，或者通过传播虚假信息，以最少的努力获得最多的点击量。&lt;/p&gt;&lt;p&gt;更为复杂的是，不久的将来，越来越多的人可能会通过先进的 VR 眼镜来体验生活，这无疑会使问题进一步恶化。&lt;/p&gt;&lt;p&gt;关键问题在于，我们的现实和虚拟世界正被越来越多、越来越精心制作的内容所包围，无论是经过策略性筛选的内容、广告，还是假新闻。这些都是根据我们个人的喜好来定制的，形成了一股不可忽视的干扰力量，不仅分散了我们的注意力，还阻碍了我们获取更有价值的信息或实现个人目标。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4.信息末日问题四：害怕错过（FOMO - Fear of Missing Out)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;如今，相较于十年前，吸引人的「值得一读或一看」的内容比以往任何时候都要丰富。然而，更多的选择并非总是好事，事实上，这种选择的多样性很快会让人感到不堪重负。&lt;/p&gt;&lt;p&gt;让人感到不堪重负的并非选项的多样性，而是高质量选项的丰富性。对人们来说，放弃这些优质选择是一件非常痛苦的事，这种现象在心理学上被称为「损失厌恶」。&lt;/p&gt;&lt;p&gt;此外，由于优质选择如此之多，我们经常面临一些难以明确判断哪个是最佳选择的决策。&lt;/p&gt;&lt;p&gt;例如，为了未来的职业规划，我们应该阅读有关数据科学或人工智能的书籍吗？或者，我们是否应该提升自己的沟通技巧以成为更优秀的领导者？又或者，我们是否应该探究最新的健身方式、饮食习惯或育儿指导，以提升个人生活的品质？&lt;/p&gt;&lt;p&gt;这些选择每一个都是重要的，而在这些选择之间进行权衡，就像是在苹果、橘子和杏仁之间做选择一样复杂。这类决策在心理层面上极其具有挑战性。&lt;/p&gt;&lt;p&gt;问题的关键在于：由于优质选择过多，加之对最佳选择的预知不足，我们总是在不断地质疑自己是否做出了正确的决策。&lt;/p&gt;&lt;h2&gt;结果: 媒体垃圾食品成了我们的日常饮食。&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;这四个挑战（内容冲击、信息茧房、注意力持续性涣散和 FOMO 情绪）使得未经深思熟虑的普通人更容易沉迷于「媒体垃圾食品」。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;他们会随意浏览眼前推荐的内容，轻易点击那些分心的信息，而当面对好的选择时，却往往感到无法确切判断哪一个是最好的。&lt;/p&gt;&lt;p&gt;在公共衞生领域，「食物沙漠」是指那些因为地理位置偏远，难以以合理价格获取到新鲜食物的区域。&lt;/p&gt;&lt;p&gt;对于那些未经深思熟虑的人来说，互联网越来越像一个「信息沙漠」，充斥着大量的低质量或误导性的信息。&lt;/p&gt;&lt;p&gt;更为让人担忧的是，很多人在这样的环境下误以为自己变得更加聪明了，实则恰恰相反。&lt;/p&gt;&lt;h2&gt;这就是问题所在，解决办法是什么？&lt;/h2&gt;&lt;p&gt;虽然信息末日为我们描绘了一幅黯淡的未来图景，但从另一角度看，突破性知识和信息比以往任何时候都更加丰富和触手可及。&lt;/p&gt;&lt;p&gt;现在，来自世界顶级专家的更多样化的知识，越来越容易获得，其中大部分都是免费的或负担得起的。据预测，&lt;a href=&quot;http://blogs.nature.com/news/2014/05/global-scientific-output-doubles-every-nine-years.html&quot; target=&quot;_blank&quot;&gt;未来九年内，人类所创造的科学知识将达到目前水平的两倍&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;比如说，如果我想学习摄影，20 年前，我只能寻找本地的专业培训课或者阅读相关书籍。而在今天，我可以轻松地在 YouTube 上找到 27.7 万个相关视频，并从中选取一个来学习。&lt;/p&gt;&lt;p&gt;更进一步，我还可以以 180 美元的价格购买 Masterclass 的全程通行证，从罗恩·霍华德（Ron
 Howard）那里学习导演艺术，从阿伦·索尔金（Aaron Sorkin）那里研究编剧，或者从马丁·斯科塞斯（Martin 
Scorsese）那里深入了解电影制作。&lt;/p&gt;&lt;p&gt;在这种情况下，只要我们谨慎地挑选我们所消费的信息，我们实际上就是生活在一个充满了无限可能的信息乌托邦之中。&lt;/p&gt;&lt;p&gt;正如查尔斯·狄更斯（Charles Dickens）在&lt;a href=&quot;https://en.wikipedia.org/wiki/A_Tale_of_Two_Cities&quot; target=&quot;_blank&quot;&gt;《双城记》&lt;/a&gt;中写道的：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;这是最好的时代，这是最坏的时代； 这是智慧的时代，这是愚蠢的时代； 这是信仰的时代，这是怀疑的时代； 这是光明的季节，这是黑暗的季节； 这是希望的春天，这是绝望的冬天； 人们眼前拥有一切，人们眼前一切荒芜； 人们正踏上天堂之路，人们正走向地狱之门；&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如何快速获取突破性知识，如何在信息噪音中快速找到信号，这些技能将在未来转化具有巨大的优势。这些人仿佛生活在一个充满「美味水果」的信息富饶之地。这正是一项被普遍低估的技能。&lt;/p&gt;&lt;p&gt;要将这个充满潜在危机的信息世界转变为一个乌托邦，关键在于我们需要从被动接收信息转向主动筛选和获取信息。&lt;/p&gt;&lt;p&gt;我们不能盲目依赖新闻摘要、默认通知、算法推荐来为我们在信息世界中指引航向。控制这些内容的公司并没有把我们的最佳利益放在心上，他们已经失去了公众的信任。&lt;/p&gt;&lt;p&gt;这些信息流的设计目的只有一个：在短期和长期内尽可能地吸引并抓住你的注意力。这种商业模式从根本上与我们的人生目标是相冲突的。&lt;/p&gt;&lt;p&gt;那么，我们应如何在这海量的信息噪声中寻找到那极少数有价值的信号呢？在一个充满「害怕错过（FOMO）」和各种干扰的环境中，如何找到那些能带来突破的知识和信息？我们应该如何在这个信息爆炸的时代中，建立起自己的信息乌托邦，而非沉沦在信息末日的漩涡里？&lt;/p&gt;&lt;p&gt;在接下来的部分，我提出三个解决方法：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;1.问自己一个简单的问题，可以帮助你从增强性知识中筛选出突破性知识；&lt;/p&gt;&lt;p&gt;2.使用具有更高信噪比的新知识格式；&lt;/p&gt;&lt;p&gt;3.学习一项技能，这将系统性的帮助你找到突破性知识；&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;解决方法一：提出问题，从增强性知识中筛选出突破性知识&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在掌握学习技巧时，最核心的一步就是明确区分&lt;a href=&quot;https://medium.com/@michaeldsimmons/5-hour-rule-if-youre-not-spending-5-hours-per-week-learning-you-re-being-irresponsible-309a76eabae7?inf_contact_key=cc10aaca105fceca1da79c32996f4dcfd766532b1ddaef2f2fece5553dd0e7a6&quot; target=&quot;_blank&quot;&gt;增强性知识和突破性知识&lt;/a&gt;。一旦你明确了自己的目标，找到它便会变得无比容易。&lt;/p&gt;&lt;p&gt;增强性知识进一步加强了我们对已知事物的认知。这就像我们已经读过二十本营销相关的书，然后又读了一本讲同样内容的书。这样的知识通常只是一时激起你的兴趣，很快就会被遗忘。&lt;/p&gt;&lt;p&gt;相反，突破性知识会挑战我们关于世界如何运作的基础信念，或者为我们提供一种全新的观察视角。这样的知识会深刻地影响我们。&lt;/p&gt;&lt;p&gt;要识别有潜力的突破性知识其实并不难。在我接触任何媒体内容之前，我都会自问一个直截了当但极具启发性的问题：&lt;/p&gt;&lt;p&gt;这是否有潜力从根本上改变我的生活？&lt;/p&gt;&lt;p&gt;这个关键问题让我避免了因为标题吸睛或者推荐在我的信息流而盲目地消费内容。&lt;/p&gt;&lt;p&gt;我第一次深入理解这两种知识之间的差异是在观看埃隆·马斯克的一次访谈时。当记者询问他对未来的创业者有何建议时，马斯克给出了一个出人意料的回答。&lt;a href=&quot;https://www.youtube.com/watch?v=L-s_3b5fRd8&amp;amp;feature=youtu.be&amp;amp;t=20m41&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;积极地寻求并认真听取负面反馈至关重要，这是人们倾向于避免的，因为这很痛苦。我认为这是一个很常见的错误。&lt;/p&gt;&lt;p&gt;当我第一次听到这个回答时感到十分惊讶。因为，这似乎过于简单了。但随后我发现，马斯克的这种方法比我初次理解的要更深刻和底层，它凸显了科学方法的威力。&lt;/p&gt;&lt;p&gt;让我给你举一个大家都会知道的例子。几百年前，人们普遍接受的观点是太阳围绕地球转动。尽管这个概念早在公元前 3 世纪就被提出过，但从未得到广泛的关注。&lt;/p&gt;&lt;p&gt;在整个历史长河中，每一天人们都可以看到太阳从地球的一侧升起，然后在另一侧落下。这样的个人经验看似都支持了这一普遍观点。&lt;/p&gt;&lt;p&gt;然而，哥白尼仅凭几年的研究和一种新颖的工具——望远镜，就成功推翻了这个长达数千年的普遍认知。他收集的新数据显示，实际上是地球绕着太阳转动。&lt;/p&gt;&lt;p&gt;这个众所周知的案例突出了一个至关重要的观点：能够证伪你当前观点的证据，其价值远超过能够证实你观点的证据。历代科学家都有着这样的认识：科学是通过被证伪而非被证实来不断发展的。&lt;/p&gt;&lt;p&gt;一条能推翻你现有观点的证据，其价值可能远胜于一百万条能证实你观点的证据，就如同一本能带来突破性知识的书籍比一百本只能提供增强性知识的书籍更有价值一样。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;解决方法二：意识到信息过载是一个古老的问题，有古老的解决方法值得一提的是，信息过载其实是一个由来已久的问题。信息过载的速度可能在增加，但这个问题本身并不是新出现的。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;人类的集体知识以一种超过我们处理能力的指数速度持续增长。&lt;/p&gt;&lt;p&gt;自古以来，哲学家、思想家和知识分子就一直对信息过载发出评论。罗马哲学家塞涅卡（Seneca）曾说：&lt;/p&gt;&lt;p&gt;拥有数不尽的书籍和图书馆有什么意义？其所有者一生可能都难以阅读完这些书名。&lt;/p&gt;&lt;p&gt;学习者并没有从中受到指导，反而被它们的数量所压垮。&lt;/p&gt;&lt;p&gt;塞涅卡的观点强调了，仅仅拥有大量的信息和资源，并不意味着能够从中受益。相反，过多的信息可能反而成为一种负担。&lt;/p&gt;&lt;p&gt;1962 年，詹姆斯·米勒的研究更是强调了处理信息输入的重要性，表明人们必须对信息的处理和应用进行调整，而不是无节制地吸收。&lt;/p&gt;&lt;p&gt;而在 2007 年，&lt;a href=&quot;http://neugierig.org/content/dfw/bestamerican.pdf&quot; target=&quot;_blank&quot;&gt;大衞·福斯特·华莱士更进一步&lt;/a&gt;，他提醒我们，在处理海量和多变的信息时，维持开放和灵活的心态是至关重要的。&lt;/p&gt;&lt;p&gt;与所有古老但重要的问题一样，人们代代相传地试图解决信息过载的问题。虽然大多数尝试都失败了，但确实有一些解决方案一直存在，并且它们非常有价值。&lt;/p&gt;&lt;p&gt;其中一个解决方案就是寻求具有高价值密度的知识格式&lt;/p&gt;&lt;p&gt;社交媒体上发表的帖子，通常是一个作者一天中最好的想法。在某些情况下，如果他们发表了一篇长文章，这可能是他们这个月最好的想法。&lt;/p&gt;&lt;p&gt;一本书更有价值，因为它包含了作者好多年中最好的想法。它还经过了仔细的审查、批准和编辑。&lt;/p&gt;&lt;p&gt;书籍摘要更有价值。在过去的五年里，这类摘要的制作已经形成了一个小型产业。如果你在亚马逊搜索任何一本畅销书，极有可能会发现有数个相关的摘要版本可供购买。&lt;/p&gt;&lt;p&gt;在谷歌上一搜索，你甚至能找到免费的版本。像 Blinkist 和 Get Abstract 这样的平台已经汇编了数以万计的书籍摘要，并以音频和文本的形式提供给大众。&lt;/p&gt;&lt;p&gt;书籍摘要具有其独特的价值，原因在于它们将书中的核心观点、引人入胜的故事、实用的练习和主要的结论进行了高效压缩。&lt;/p&gt;&lt;p&gt;此外，在这一类别中，我还会包括那些由作者自己进行的关于书的演讲（如 TEDx 或 Google Talks）以及与作者的专访（如播客节目）。这些都是对原书内容的精华概览。&lt;/p&gt;&lt;p&gt;领域摘要则是对整个领域的精炼。最好的例子是《傻瓜指南 For Dummies guides》系列。自从它们近 30 年前首次推出以来，该系列已经销售了超过两亿册，并且拥有 2500 多个不同的标题，使其成为史上最畅销的书籍系列之一。&lt;/p&gt;&lt;p&gt;但还有一种比领域摘要更简洁的格式，这就是所谓的&lt;a href=&quot;https://medium.com/the-mission/the-founders-of-the-worlds-five-largest-companies-all-follow-the-5-hour-rule-and-they-re-9ca82e93f3fc&quot; target=&quot;_blank&quot;&gt;心智模型&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;2013 年，当我看到内容冲击的曲线变化时，我有了一个「哇，天哪！」的时刻，并开始思考：「作为一个社会，我们该如何应对这一现象？我个人应该怎么办？」&lt;/p&gt;&lt;p&gt;这个问题引发了我一段历时多年、充满曲折的探寻之旅，最终让我意识到，世界上很多最聪明的企业家们与我们大多数人在知识结构上有很大的不同。他们不是将知识按照不同的学科或领域进行分类，而是使用心智模型。&lt;/p&gt;&lt;p&gt;这最终推动我深入研究了心智模型。&lt;/p&gt;&lt;p&gt;心智模型是跨时间、跨研究领域、跨生活领域观察到的现象的表征。在我看来，它们提供的知识价值最大，因为：&lt;/p&gt;&lt;p&gt;它们传递的知识比书本摘要，甚至是领域摘要都要浓缩得多。&lt;/p&gt;&lt;p&gt;随着时间的推移，它们的价值不会减少 (甚至会增加)。&lt;/p&gt;&lt;p&gt;它们广泛适用于各个领域。&lt;/p&gt;&lt;p&gt;例如，我最喜欢的心智模型就是二八法则：20% 的努力或投入会导致 80% 的结果或产出。这个规则适用于商业、创意、人际关系、健康以及其他许多领域。&lt;/p&gt;&lt;p&gt;另一个心智模型的例子是机会成本：即在面临多方案择一决策时,被舍弃的选项中的最高价值。&lt;/p&gt;&lt;p&gt;这个模型在你一生中做决定的时候是很有价值的，因为它鼓励你思考一个决定可能的替代方案。它会阻止你做出头脑中的第一选择。&lt;/p&gt;&lt;p&gt;当你学习心智模型时，你会开始看到生活中各个领域的潜在模型，在噪音中发现信号，就变得容易得多。你可以在《This Is Exactly How You Should Train Yourself To BeSmarter》中读到一些有价值的模型。&lt;/p&gt;&lt;p&gt;一旦我理解了心智模型的力量，我就开始在我的生活中使用它们。我回顾了以前的许多错误，心想:「天啊！我不敢相信我做了那个决定。如果我只知道 XXX 心智模型，我肯定会避免这种情况发生。」&lt;/p&gt;&lt;p&gt;突然，我能够在生活中遇到的问题上取得突破性的进展，而这些问题是我多年来一直停滞不前的……尤其是与金钱有关的问题。&lt;/p&gt;&lt;p&gt;我开始有许多更大的、违反直觉的想法，而以前我的很多想法都是很传统的。我开始用不同的方式说话和写作。我把我所有的知识都与心智模型联系起来。每一个新的情况都是一个更大原则的例子。&lt;/p&gt;&lt;p&gt;我能够看到更多学科之间的联系。&lt;/p&gt;&lt;p&gt;我现在几乎每天都会接触到「a-ha」知识。我看到或读到的东西，要么打破了我的世界观，要么将我几个月或几年来一直在探索的许多不同的东西联系了起来。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;解决方法三：学习如何学习&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;学习如何学习是一系列的技能，将最终帮助我们找到突破性的知识，并将其应用到我们的生活中，以便在最短的时间内取得成果。&lt;/p&gt;&lt;p&gt;很少有人意识到，学习如何学习是自己独特的技能。 结果，它们并没有改善。&lt;/p&gt;&lt;p&gt;由于它涉及信息过载，它包括：&lt;/p&gt;&lt;p&gt;了解科学的方法，来&lt;a href=&quot;https://amzn.to/2HNqAau&quot; target=&quot;_blank&quot;&gt;识别高质量的信息&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;了解&lt;a href=&quot;https://medium.com/the-mission/modern-polymath-81f882ce52db&quot; target=&quot;_blank&quot;&gt;各种知识的价值&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;理解那些认知偏差 (如&lt;a href=&quot;https://en.wikipedia.org/wiki/Confirmation_bias&quot; target=&quot;_blank&quot;&gt;确认偏差&lt;/a&gt;、&lt;a href=&quot;https://rationalwiki.org/wiki/Backfire_effect&quot; target=&quot;_blank&quot;&gt;逆火效应&lt;/a&gt;、&lt;a href=&quot;https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect&quot; target=&quot;_blank&quot;&gt;邓宁-克鲁格效应&lt;/a&gt;、&lt;a href=&quot;https://en.wikipedia.org/wiki/Halo_effect&quot; target=&quot;_blank&quot;&gt;光环效应&lt;/a&gt;、&lt;a href=&quot;https://en.wikipedia.org/wiki/In-group_favoritism&quot; target=&quot;_blank&quot;&gt;群体内偏见&lt;/a&gt;)。&lt;/p&gt;&lt;p&gt;学习如何学习是一个宏大的话题，这些要点提供了一个起点。&lt;/p&gt;&lt;h2&gt;结语: 从信息末日到信息乌托邦&lt;/h2&gt;&lt;p&gt;我依然清晰地记得，在我还是纽约大学的学生时，有一次我与城市中心 20 所高中的学生进行了关于创业精神的对话。那次经历让我深切地感受到了这个世界存在着多么巨大的不平等。&lt;/p&gt;&lt;p&gt;我尤其难忘的是哈莱姆区的一所高中，那里更像一座监狱，而非一个教育机构。所有的窗户都被木板牢牢封住，建筑物外部布满了涂鸦。为了进入学校，我还需要经过金属探测器的检测。学校四周是围墙和废弃的建筑，几乎像是一座孤岛。&lt;/p&gt;&lt;p&gt;与此形成鲜明对比的是，我的高中环境美丽，周围是鲜花、运动场和繁茂的树木。在我那一届毕业生中，几乎每个人都有机会进入大学深造。&lt;/p&gt;&lt;p&gt;当我踏入哈莱姆的那所学校，我感到一阵深沉的悲哀。谁能说这里的机会是平等的呢？学生们能上哪所学校，归根结底只取决于他们碰巧出生的地方。&lt;/p&gt;&lt;p&gt;这种社会差距不仅令人心痛，而且更让我担忧的是，网络世界可能孕育出比现实世界更大的不平等。尽管互联网理论上为每个人提供了平等的机会，但并非每个人都平等地理解如何充分利用这些机会。&lt;/p&gt;&lt;p&gt;这种情况导致了一部分人生活在信息过剩的混乱世界里，而另一部分人则享受着信息丰富的乌托邦。如果我们不积极地学习网络环境管理的技能，并将这些知识广泛传播，我担心我们的社会将进一步两极分化。&lt;/p&gt;&lt;p&gt;via &lt;a href=&quot;https://www.linkedin.com/pulse/while-everyone-distracted-social-media-successful-people-simmons-1e/&quot; target=&quot;_blank&quot;&gt;https://www.linkedin.com/pulse/while-everyone-distracted-social-media-successful-people-simmons-1e/&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://here.news/post/51490631-fddf-4699-af26-42d721ddc3bc/%E4%BF%A1%E6%81%AF%E8%8C%A7%E6%88%BF%E8%87%AA%E6%95%91%E6%8C%87%E5%8D%97&quot;&gt;https://here.news/post/51490631-fddf-4699-af26-42d721ddc3bc/%E4%BF%A1%E6%81%AF%E8%8C%A7%E6%88%BF%E8%87%AA%E6%95%91%E6%8C%87%E5%8D%97&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻墙技术博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;订阅地址及社交帐号&lt;/a&gt;&lt;/div&gt;</description>
            <link>https://www.chinagfw.org/2023/09/blog-post_11.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-8514286720013979191</guid>
            <pubDate>Sat, 09 Sep 2023 03:15:00 +0000</pubDate>
            <atom:updated>2023-09-13T09:40:57.649+08:00</atom:updated>
            <title>中国如何将软件漏洞武器化</title>
            <description>&lt;p&gt;via &lt;a href=&quot;https://here.news/post/6a190ad3-cf18-4e0c-a6ca-875b7cf41551/miit%E7%9A%84%E6%96%B0%E6%BC%8F%E6%B4%9E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E4%B8%AD%E5%9B%BD%E5%9B%BD%E5%AE%B6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E6%8A%80%E6%9C%AF%E5%8D%8F%E8%B0%83%E4%B8%AD%E5%BF%83%EF%BC%88cncert-c&quot;&gt;HERE&lt;/a&gt;&lt;br /&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Atlantic Council 于 2023 年 9 月 6 日&lt;a href=&quot;https://www.atlanticcouncil.org/in-depth-research-reports/report/sleight-of-hand-how-china-weaponizes-software-vulnerability/&quot;&gt;发布一份报告&lt;/a&gt;，由 Dakota Cary 和 Kristin Del Rosso 撰写，探讨了中国如何利用新的漏洞管理系统武器化软件漏洞。&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;报告揭示，中国 2021 年《软件漏洞管理办法》要求研究人员和公司在 48 小时内向国家漏洞数据库（NVDB）报告漏洞。报告确定了一些表现出色的公司遵守了法律，并暗示可能有更多外国公司参与其中。报告指出，向 NVDB 报告的漏洞很可能被中国的攻击团队利用。&lt;br /&gt;&lt;br /&gt;报告还强调，与工业和信息化部（MIIT）共享的漏洞信息被传递给具有攻击任务或与过去黑客攻击有关的实体，如国家安全部第 13 局（CNITSEC）的北京局、上海交通大学和北京天融信。报告认为，这些实体有可能将接收到的漏洞报告用于攻击目的。&lt;br /&gt;&lt;br /&gt;报告还指出，在 2021 年规定之前，公司向国家安全部的中国国家漏洞数据库（CNNVD）报告漏洞，并且在向 MIIT 提交漏洞报告的公司中存在重叠。报告得出结论，中国的新漏洞管理系统存在重大风险，并引发了对漏洞报告被用于攻击性网络行动的担忧。&lt;br /&gt;&lt;br /&gt;报告要点：&lt;br /&gt;&lt;br /&gt;- 《网络产品安全漏洞管理规定》（RSMV）于 2021 年 9 月在中国实施，要求在发现漏洞后的 48 小时内向工业和信息化部（MIIT）报告软件漏洞。&lt;br /&gt;&lt;br /&gt;- 这些规定还禁止在补丁发布之前公开漏洞信息，发布概念验证代码以及夸大漏洞的严重性。&lt;br /&gt;&lt;br /&gt;- MIIT 的新漏洞数据库与中国国家计算机网络应急响应技术协调中心（CNCERT/CC）和公安部（MPS）共享数据，使它们能够访问漏洞报告并有可能将其用于攻击行动。&lt;br /&gt;&lt;br /&gt;- 在实施这些规定时出现了官僚主义问题，导致漏洞披露减少到其他政府管理的数据库。目前尚不清楚 CNCERT/CC 是否能够通过与其他国家的事件响应合同收集漏洞信息。&lt;br /&gt;&lt;br /&gt;- MIIT 正在资助研究项目以改进产品安全标准，并从网络安全公司那里接收软件漏洞。这些漏洞很可能会被国家安全部门用于攻击行动的评估。&lt;br /&gt;&lt;br /&gt;- 中国的规定与美国的分散、自愿报告系统存在显著差异。&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;img src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/7715bd95-c702-4b89-b57a-662da3cd1097_image_image.png&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;完整报告： &lt;a href=&quot;https://www.atlanticcouncil.org/in-depth-research-reports/report/sleight-of-hand-how-china-weaponizes-software-vulnerability/&quot;&gt;https://www.atlanticcouncil.org/in-depth-research-reports/report/sleight-of-hand-how-china-weaponizes-software-vulnerability/&lt;/a&gt;&lt;/p&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;翻墙技术博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;订阅地址及社交帐号&lt;/a&gt;&lt;/div&gt;</description>
            <link>https://www.chinagfw.org/2023/09/blog-post_9.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-8095938613059099858</guid>
            <pubDate>Thu, 07 Sep 2023 01:57:00 +0000</pubDate>
            <atom:updated>2023-09-11T11:51:26.046+08:00</atom:updated>
            <title>Storm-0558 密钥获取的过程</title>
            <description>&lt;p&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;&amp;nbsp;via &lt;a href=&quot;https://msrc.microsoft.com/blog/2023/09/results-of-major-technical-investigations-for-storm-0558-key-acquisition/&quot;&gt;https://msrc.microsoft.com/blog/2023/09/results-of-major-technical-investigations-for-storm-0558-key-acquisition/&lt;br /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;2023 年 9 月 6 日，微软发布了一篇博客文章，详细介绍了中国威胁行动者 Storm-0558 如何使用获得的 Microsoft 账户（MSA）消费者密钥伪造令牌以访问 OWA 和 Outlook.com。在确定威胁行动者获得了消费者密钥后，微软进行了一项全面的技术调查，调查了 Microsoft 账户消费者签名密钥的获取方式，以及它如何被用来访问企业电子邮件。我们的技术调查已经结束。作为我们对透明度和信任的承诺的一部分，我们将发布我们的调查结果。&lt;br /&gt;&lt;br /&gt;密钥获取&lt;br /&gt;&lt;br /&gt;微软维护着一个高度隔离和限制的生产环境。微软员工访问生产基础设施的控制措施包括背景调查、专用账户、安全访问工作站以及使用硬件令牌设备的多因素身份验证。该环境中的控制措施还防止使用电子邮件、会议、网络研究和其他合作工具，这些工具可能导致常见的账户被入侵矢量，如恶意软件感染或钓鱼，同时使用及时和有限访问策略限制对系统和数据的访问。&lt;br /&gt;&lt;br /&gt;我们的企业环境也需要安全身份验证和安全设备，并允许使用电子邮件、会议、网络研究和其他合作工具。虽然这些工具很重要，但它们也使用户容易受到针对性网络钓鱼、令牌窃取恶意软件和其他账户被入侵矢量的攻击。因此，根据政策和作为我们零信任和「假定受损」思维方式的一部分，密钥材料不应离开我们的生产环境。&lt;br /&gt;&lt;br /&gt;我们的调查发现，2021 年 4 月发生的消费者签名系统崩溃导致了一个崩溃进程的快照（「崩溃转储」）。这些崩溃转储应该不包含签名密钥。但在这种情况下，一个竞争条件导致密钥出现在崩溃转储中（这个问题已经得到修复）。我们的系统没有检测到崩溃转储中的密钥材料（这个问题已经得到修复）。&lt;br /&gt;&lt;br /&gt;我们发现，这个崩溃转储在当时被移动到了隔离的生产网络之外，进入了我们连接到互联网的企业网络的调试环境。这与我们的标准调试流程一致。我们的凭证扫描方法没有检测到其存在（这个问题已经得到修复）。&lt;br /&gt;&lt;br /&gt;在 2021 年 4 月之后，当密钥通过崩溃转储泄露到企业环境时，Storm-0558 行动者成功入侵了一名微软工程师的企业账户。该账户具有访问包含错误包含密钥的崩溃转储的调试环境的权限。由于日志保留政策的原因，我们没有具体证据证明这个行动者的数据外泄，但这是最可能的行动者获取密钥的机制。&lt;br /&gt;&lt;br /&gt;消费者密钥为什么能够访问企业邮件&lt;br /&gt;&lt;br /&gt;为了满足日益增长的客户需求，支持同时使用消费者和企业应用程序的应用程序，微软在 2018 年 9 月引入了一个公共密钥元数据发布端点。作为这个统一提供的一部分，微软更新了文档，澄清了密钥范围验证的要求-用于企业账户的密钥以及用于消费者账户的密钥。&lt;br /&gt;&lt;br /&gt;作为预先存在的文档和辅助 API 库的一部分，微软提供了一个 API 来帮助进行加密签名的验证，但没有更新这些库以自动执行这个范围验证（这个问题已经得到修复）。邮件系统在 2022 年更新，使用了公共元数据端点。邮件系统中的开发人员错误地认为库已经执行了完整的验证，并没有添加所需的发行者/范围验证。因此，邮件系统会接受使用消费者密钥签名的安全令牌的企业邮件请求（这个问题已经使用更新的库得到修复）。&lt;br /&gt;&lt;br /&gt;事后回顾&lt;br /&gt;&lt;br /&gt;微软作为我们的深度防御策略的一部分，不断加强系统的安全性。与 MSA 密钥管理相关的投资在 https://aka.ms/storm-0558 博客中有详细介绍。本博客中详细介绍的内容只是这些整体投资的一部分。为了明确起见，我们在这里总结了与这些发现相关的改进措施：&lt;br /&gt;&lt;br /&gt;- 确定并解决了允许签名密钥出现在崩溃转储中的竞争条件问题&lt;br /&gt;- 加强了对错误包含在崩溃转储中的密钥材料的预防、检测和响应能力&lt;br /&gt;- 加强了凭证扫描以更好地检测调试环境中签名密钥的存在&lt;br /&gt;- 发布了增强的库，以自动进行身份验证库中的密钥范围验证，并澄清了相关文档&lt;br /&gt;&lt;/span&gt; &lt;/p&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;翻墙技术博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;订阅地址及社交帐号&lt;/a&gt;&lt;/div&gt;</description>
            <link>https://www.chinagfw.org/2023/09/storm-0558.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-1524784321191020643</guid>
            <pubDate>Wed, 06 Sep 2023 11:15:00 +0000</pubDate>
            <atom:updated>2023-09-09T11:15:23.249+08:00</atom:updated>
            <title>中国 GFW 封锁了 Cloudflare 的 1.1.1.1 和 WARP 官网的 HTTPS 访问</title>
            <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;div class=&quot;SinglePost_SinglePost__3in7m&quot;&gt;&lt;p&gt;via &lt;a href=&quot;https://here.news/post/1b17e6fe-b45c-465f-a416-c8fac066bf37/%E4%B8%AD%E5%9B%BDgfw%E5%B0%81%E9%94%81%E4%BA%86cloudflare%E7%9A%841-1-1-1-%E5%92%8Cwarp%E5%AE%98%E7%BD%91%E7%9A%84https&quot;&gt;HERE &lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;中国的网络审查系统（GFW）封锁了由 Cloudflare 运营的 1.1.1.1
 WARP 官网的 HTTPS 访问。这个封锁行为是在 2023 年 9 月 5 日下午开始的。虽然很多 DoH（DNS over 
HTTPS）早就被封了，但 1.1.1.1 这个网站一直未被封锁，直到现在才被封锁。这可能是因为 GFW 不得不补上这个「漏洞」，防止类似操作在推广的 Early-Data
 with Client Hints（ECH）中被大规模复制。&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/e1718762-fbcb-473b-921c-dbae1031acf9_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/e1718762-fbcb-473b-921c-dbae1031acf9_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;目前还没有关于 ECH 被封锁的报道。2020 年，ESNI（Encrypted
 Server Name 
Indication）在中国被封锁，但 ESNI 封锁是针对特定的传输层安全性（TLS）扩展号码进行的。而 ECH 使用不同的扩展号码。目前没有任何审查测量平台正在测试 ECH。&lt;/p&gt;&lt;p&gt;中国的网络审查系统（GFW）采用了一种介于放行和封锁之间的模糊干扰机制。一些大型网站在中国访问时可能会不稳定，但并非完全无法打开，比如 github.com。几天前的测试中，1.1.1.1 可以正常访问（实际上很多人都知道它以前没有被封锁），但是需要重新启动几次 Chrome 才能成功测试 Cloudflare 的 ECH。根据昨天的新闻和很多人的测试结果，1.1.1.1 的 TCP/443 端口无法使用，但其他端口的服务可以正常访问。这表明底层路由没有问题，GFW 专门封锁了 1.1.1.1 的 TCP/443 端口，这与之前的行为不同。&lt;/p&gt;&lt;p&gt;根据路由追踪结果，TTL（Time to Live）在传输中过期的问题似乎是由省级移动运营商的干扰导致的。最后一跳的 IP 地址指向了省级移动运营商的服务器。&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/9a7cdc57-c9d5-4dea-a2c8-1df3456c7e84_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/9a7cdc57-c9d5-4dea-a2c8-1df3456c7e84_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;总的来说，中国的网络审查系统（GFW）封锁了由 Cloudflare 运营的 1.1.1.1
 
WARP 官网的 HTTPS 访问。这可能是为了防止类似操作在推广的 ECH 中被大规模复制。目前还没有 ECH 被封锁的报道，而之前的 ESNI 封锁是针对特定的 TLS 扩展号码进行的。GFW 采用了一种模糊干扰机制，一些大型网站在中国访问时可能会不稳定。1.1.1.1 的 TCP/443 端口被封锁，但其他端口的服务可以正常访问。TTL 过期的问题可能是由省级移动运营商的干扰导致的。&lt;/p&gt;&lt;p&gt;via &lt;a href=&quot;https://github.com/net4people/bbs/issues/280#issuecomment-1706267069&quot; target=&quot;_blank&quot;&gt;https://github.com/net4people/bbs/issues/280#issuecomment-1706267069&lt;/a&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻墙技术博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;订阅地址及社交帐号&lt;/a&gt;&lt;/div&gt;</description>
            <link>https://www.chinagfw.org/2023/09/gfwcloudflare1111-warphttps.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <thr:total>2</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-8476996904763629080</guid>
            <pubDate>Tue, 05 Sep 2023 03:20:00 +0000</pubDate>
            <atom:updated>2023-09-07T09:57:19.915+08:00</atom:updated>
            <title>个人信息获取与知识管理系统（Heptabase + Logseq + Readwise）</title>
            <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;div id=&quot;前言&quot; style=&quot;text-align: left;&quot;&gt;via: &lt;a href=&quot;https://www.pseudoyu.com/zh/2023/09/05/my_personal_pkm_input_output_system/&quot;&gt;https://www.pseudoyu.com/zh/2023/09/05/my_personal_pkm_input_output_system/&lt;/a&gt; &lt;br /&gt;&lt;/div&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;img alt=&quot;yu_blog_my_pkm_system&quot; src=&quot;https://image.pseudoyu.com/images/yu_blog_my_pkm_system.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;我似乎一直有一种把自己作为一个机器来看待的倾向，常常会以置身事外的视角来观察自己，集成各个模组，并不断折腾和优化。当自己搭建的某种行为模式或是习惯在某个时刻突然发挥了作用就会有一种欣喜感，而当受到外界或是自身状态影响而停止运转时则会有一种秩序感被打破的重度不适。&lt;/p&gt;&lt;p&gt;作为一个效率工具控，我的个人知识管理与信息管理则可以说是自己最重要的一部分。其实本没有想要写这篇文章，有太多的先例实践在前，而自己也只是一种前人基础上的微调优化，常常没有什么信心去分享，而这周重新搭建和优化了一下自己的知识管理系统，很开心，有一种想要记录下来的冲动，本来只是想在周报里稍稍提及，却发现越写越收不住，于是就有了这篇文章。&lt;/p&gt;&lt;p&gt;其实之前对于信息输出在周报中时常有提及，所以本文也会覆盖一些之前的内容，并且终于补上了信息获取和知识管理的部分，就作为一个总集篇了。其中，理论的部分，如「费曼学习法」、「卢曼卡片盒笔记法」已经有很多很好的介绍文章，不再花篇幅介绍了，而更多的是阐述我使用的软件工具实践，希望能够对大家有所帮助。&lt;/p&gt;&lt;h2 id=&quot;信息获取与管理&quot;&gt;信息获取与管理&lt;/h2&gt;&lt;p&gt;不知道从什么时候起，其实能很明显感受到自己对网络世界信息的依赖。可能有别于游戏瘾或是经常被诟病的短视频算法鸦片，我的这种依赖并不是机械性地刷刷刷，或是面对焦虑时的逃避，而是一种对于信息获取的渴求，甚至内化为了一种生活方式。因为我对自己的信息筛选和消化能力颇有信心，所以其实一直以来没有在输入源和整理上花太多的心思。&lt;/p&gt;&lt;p&gt;而随着自己接触和感兴趣的领域越来越多，信息不断积累，有时候仅仅是浏览和通读都已经有些超过了记忆负荷，并且这些信息常常也零散地留在我的笔记或是脑海的某个角落中，并没有成为内化的一部分，以后也很难记起或是检索，于是重新对自己的信息获取方式进行了梳理。&lt;/p&gt;&lt;h3 id=&quot;信息源分类&quot;&gt;信息源分类&lt;/h3&gt;&lt;p&gt;我的信息来源按照大类可以分为以下几类：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;随机想法&lt;/li&gt;&lt;li&gt;信息流&lt;/li&gt;&lt;li&gt;聚焦阅读&lt;/li&gt;&lt;/ol&gt;&lt;h4 id=&quot;随机想法&quot;&gt;随机想法&lt;/h4&gt;&lt;p&gt;&lt;img alt=&quot;logseq_random_thoughts&quot; src=&quot;https://image.pseudoyu.com/images/logseq_random_thoughts.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;在日常生活、工作、学习或是什么任意的时刻，我有时候会萌生一些随机的想法，这些想法和当前所做的事并不相关或是天马行空，但也许会在未来的某个时刻被用到。因为我大部分时间都不会离开电脑太远，我通常会记录
 Logseq 的 Journal 中，有时可能会临时发在一个只有自己一个人的微信群中或是 Telegram 的 Saved Message 
中，后续再补充上去。&lt;/p&gt;&lt;h4 id=&quot;信息流&quot;&gt;信息流&lt;/h4&gt;&lt;p&gt;我每天从起床开始就会被来自各个平台的信息流所裹挟，依赖于网络世界其实最难免的是与社交媒体与算法的抗争，一方面是要避免自己被过载的贩卖焦虑的信息或是熟人社交圈的「Peer
 
Pressure」所困扰，另一方面也需要警惕算法所构造的信息茧房。实话说这一点挺难做到，即使自己多少算是具备一些克制和过滤信息的能力并有意识在这样做，但依然难以避免被其所扰乱思绪或是引导。&lt;/p&gt;&lt;p&gt;我最后采取了一种简单却也行之有效的方式
 —— 关闭微信朋友圈入口与大部分软件通知提醒，并且把大部分不带社交属性而仅仅是用于信息获取的平台（如 B 站、微博等）的关注数量控制在 100
 以内，如果新增则筛选优化之前的关注，减少无关内容的干扰。在完成上述行为的基础上，我使用 RSS 订阅这一似乎有些古早的方式，但是仅订阅了不到 
50 个网站，其中大部分是博客或是个人网站，且会定期筛选，减少自己每天的 feeds，但几乎在这一 feeds list 
中的文章都会扫一下标题或初步浏览一下。&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;readwise_reader_feeds&quot; src=&quot;https://image.pseudoyu.com/images/readwise_reader_feeds.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;这一点我最开始是自己搭建了 Miniflux 服务来抓取，并且用一个 &lt;a href=&quot;https://github.com/Rongronggg9/RSS-to-Telegram-Bot&quot;&gt;RSS-to-Telegram-Bot&lt;/a&gt; 来推送提醒的，而最近开始使用 &lt;a href=&quot;https://read.readwise.io/&quot;&gt;Readwise Reader&lt;/a&gt; 后，由于体验很好，便把这一部分迁移过来了。我使用的是 Readwise Reader 内置的一种管理模式，分为三类：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Later&lt;/li&gt;&lt;li&gt;Shortlist&lt;/li&gt;&lt;li&gt;Archive&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;我会每天扫描一下
 Feeds 面板，扫到感兴趣的文章会加入到 Later 
中，作为一个稍后读，当然，就以前的经验来说，稍后读放久了常常会变成「稍后也不读」，所以我在筛选时非常克制，仅将很感兴趣且有时间后马上会读的文章加入，并要求自己在晚上的时候清理
 Later 列表。&lt;/p&gt;&lt;p&gt;而我们也会在社交媒体互联网的各个角落被推送到一些信息，其中我尤其在意的是这几类：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;感兴趣的一些观点/推文 threads&lt;/li&gt;&lt;li&gt;感兴趣的文章&lt;/li&gt;&lt;li&gt;有用的资源&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;如果是一些比较有意思的观点或是评论，我通常并不会加入软件的对应
 List、收藏夹等，而是会复制其内容到 Logseq 的 Journal 中并打上对应 tag，其实这一步很多软件（包括 Readwise 
Reader）提供了推特 threads 
保留或是其他的一些更方便保存推文的方式，但我倾向于自己复制和整理，以几句话的方式记录下来而不是仅仅存一个链接，这样似乎刻意增加的步骤会让我多一步审视这些观点，避免被强引导性或是情绪化的观点所影响，也更有益于自己消化信息并内化为自己的想法。&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;readwise_chrome_extension&quot; src=&quot;https://image.pseudoyu.com/images/readwise_chrome_extension.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;如果是自己感兴趣的一些文章，则会通过 Readwise 的 Chrome 插件进行阅读或保存。这部分我给自己的要求是每篇文章都要打上标签和 notes，notes 中主要描述为什么要读这篇文章。&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;readwise_chrome_extension_highlight&quot; src=&quot;https://image.pseudoyu.com/images/readwise_chrome_extension_highlight.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;其中如果仅仅是需要泛读或是获取信息的一些文章，我会加入
 Later 列表，而精读的我则是会加入 Shortlist，并且必须要对其中一些有意义的话加 highlights，也尽量对 
highlights 加上自己的一些评价和想法，这些都可以在插件中直接操作，很方便。&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;pinboard_bookmark&quot; src=&quot;https://image.pseudoyu.com/images/pinboard_bookmark.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;而如果是一些有用的网站、文档、代码、软件或是其他资源类的信息，我会使用 &lt;a href=&quot;https://pinboard.in/&quot;&gt;Pinboard&lt;/a&gt;，一个很古早但是很好用的书签管理工具来保存，同样是用浏览器插件进行保存，也会打上标签和简单的描述，大概一年左右了我积累了 455 个书签，其中大部分我都能够通过 tag 和名称在需要用的时候快速检索到。&lt;/p&gt;&lt;p&gt;而像是视频网站等我更多还是使用点赞或是收藏的方式，一方面对创作者表示支持，另一方面也通过一些自动化工具同步到我的 Telegram 个人频道「&lt;a href=&quot;https://t.me/pseudoyulife&quot;&gt;Yu’s Life&lt;/a&gt;」，并标记上对应 tag，但大多视频的信息效率并不高，所以更多是一些有趣的或是探索向的。&lt;/p&gt;&lt;h4 id=&quot;聚焦阅读&quot;&gt;聚焦阅读&lt;/h4&gt;&lt;p&gt;除了上述这些被动推送的一些信息流外，其实我们也还会有很多特定主题或是与自己的领域强相关的一些信息需求，这需要我们去主动阅读一些书籍、报告等。&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;wechat_reader_sync_readwise&quot; src=&quot;https://image.pseudoyu.com/images/wechat_reader_sync_readwise.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;这一部分我原本更多是使用 kindle 或阅读纸质书，并手动在 Logseq 进行一些记录。但是在 &lt;a href=&quot;https://lutaonan.com/&quot;&gt;Randy&lt;/a&gt; 推出 &lt;a href=&quot;https://notepal.randynamic.org/&quot;&gt;Notepal&lt;/a&gt; 工具后，我开始使用微信读书，它本身有很多可阅读的书籍资源，并且我也用它导入 mobi 或是 epub 格式的一些书籍，阅读体验感还不错。&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;wechat_reader_to_readwise&quot; src=&quot;https://image.pseudoyu.com/images/wechat_reader_to_readwise.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;并且也很方便做一些笔记和标注，由于全平台同步，可以很方便地定期通过 Notepal 浏览器插件同步到 Readwise 中，效果也很好（上图就是同步过来的），这样也更有动力在碎片的一些时间里阅读一些书籍。&lt;/p&gt;&lt;h3 id=&quot;信息管理&quot;&gt;信息管理&lt;/h3&gt;&lt;p&gt;上一节我对信息获取的渠道和系统进行了一些梳理，但这些依然还是零散的信息，如果要让它们成为自己知识和思考的一部分，依然需要更多整理、消化与沉淀的过程。但涉及那么多平台，搜索和整理并不方便，也比较难建立起信息之间的关联，受正在读的这本「Building
 a Second Brain」 启发，我主要做了如下两点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;借鉴和改造了 P.A.R.A 作为自己的全局 Tag 分类系统&lt;/li&gt;&lt;li&gt;使用 Logseq 和 Heptabase 构建 Second Brain&lt;/li&gt;&lt;/ol&gt;&lt;h4 id=&quot;全局-tag-系统&quot;&gt;全局 Tag 系统&lt;/h4&gt;&lt;p&gt;&lt;img alt=&quot;pama_framework&quot; src=&quot;https://image.pseudoyu.com/images/pama_framework.jpg&quot; /&gt;&lt;/p&gt;&lt;p&gt;其中 P.A.R.A 是作者所提出的一个框架，分别是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Projects，正在做的项目相关&lt;/li&gt;&lt;li&gt;Areas，特定领域&lt;/li&gt;&lt;li&gt;Resources，未来可能会用到的资源&lt;/li&gt;&lt;li&gt;Archives，已完成的项目&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我在这四个的类型的基础上增加了一个「Thoughts」，用于归类我的一些随机的想法。&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;logseq_tag_system&quot; src=&quot;https://image.pseudoyu.com/images/logseq_tag_system.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;我的实现思路是把这五个类型作为我的全局一级 Tag，而更具体的一些项目、领域、行业可作为二级、三级 Tag，例如 &lt;code&gt;Projects/writing/pkm&lt;/code&gt;，&lt;code&gt;Areas/blockchain&lt;/code&gt;，&lt;code&gt;Thoughts/weekly-review&lt;/code&gt; 等，Logseq 提供了很强大的多层 Tag 系统，会自动根据 &lt;code&gt;/&lt;/code&gt; 进行分层，便于检索，分类也一目了然，我把之前现有的一些 Tag 修改后效果如下：&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;para_logseq_graph&quot; src=&quot;https://image.pseudoyu.com/images/para_logseq_graph.png&quot; /&gt;&lt;/p&gt;&lt;h4 id=&quot;基于-heptabase--logseq-的-second-brain&quot;&gt;基于 Heptabase + Logseq 的 Second Brain&lt;/h4&gt;&lt;p&gt;我之前一直都是使用 Logseq 作为自己的知识管理系统的，最近看到了 &lt;a href=&quot;https://twitter.com/WuPingJu&quot;&gt;P.J. Wu 吴秉儒&lt;/a&gt; 入职 Heptabase，对这一平台有了更多了解，于是将其纳入自己的知识管理系统，和 Logseq 双刀流共同构建自己的第二大脑。只要因循上文所说的 Tag 系统，两个平台之间并不需要额外的关联便可以各司其职地进行信息管理。&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;logseq_sync_readwise_sample_page&quot; src=&quot;https://image.pseudoyu.com/images/logseq_sync_readwise_sample_page.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;其中，Logseq
 作为兼具简单任务管理和双向链接的笔记系统，非常适合沉淀我上述的这些信息流和一些自己阅读后产出的初步想法，如高亮、评论 notes 等，由于 
Logseq 有 Readwise 官方插件，可以很方便地将我在微信读书和网络文章中的高亮和笔记自动同步为 Logseq 的 
pages，并通过时间与 Journal 关联，这样我在每天/每周写一些回顾时能很直观地看到我过去的阅读和想法，如上文就是我在阅读 &lt;a href=&quot;https://twitter.com/MapleShadow&quot;&gt;枫影 Justin Yan&lt;/a&gt; 的这篇「&lt;a href=&quot;https://justinyan.me/post/5790&quot;&gt;每个人每天都只有 24 小时，希望我的选择真的是我的选择&lt;/a&gt;」时在他的网站上使用 Readwise Chrome 插件做的一些高亮和笔记，自动同步到了 Logseq 中，并根据我的配置打上了一些 tag 与属性。&lt;/p&gt;&lt;p&gt;Logseq
 很适合做一些信息整理和回顾，但当我要对某个领域/概念进行调研、阅读书籍整理脉络或是输出一篇博客文章时就显得稍稍有些单薄，它的信息以 block
 为单位散落在每一天的 Journal 中，通过双向链接或是 tag 
进行关联跳转，不方便进行一些直接的可视化关联，也需要自己对在前期就对关键词和 tag 做到足够清晰，依然有一些心智负担，所以这一部分我使用 
Heptabase 来进行管理。&lt;/p&gt;&lt;p&gt;Heptabase 可以看作是一个功能完善的白板笔记工具， &lt;a href=&quot;https://twitter.com/WuPingJu&quot;&gt;P.J. Wu 吴秉儒&lt;/a&gt; 有很多关于 Heptabase 的&lt;a href=&quot;https://pinchlime.com/tags/heptabase/&quot;&gt;高质量介绍文章&lt;/a&gt;，可以阅读了解一下。简单来说，它主要分为以下三个层级：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Map&lt;/li&gt;&lt;li&gt;Whiteboard&lt;/li&gt;&lt;li&gt;Card&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img alt=&quot;heptabase_map_overview&quot; src=&quot;https://image.pseudoyu.com/images/heptabase_map_overview.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;其中 Map 可以看作是我们 Second Brain 的整个空间，里面可以装各种白板，我建立了五个白板来作为第一层级 Tag。&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;heptabase_whiteboard_overview&quot; src=&quot;https://image.pseudoyu.com/images/heptabase_whiteboard_overview.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;卡片代表的是我们脑中的一个个想法或是一些独立的信息点，我们可以通过卡片与卡片的关联，白板与卡片之间的层级来组织我们知识。&lt;/p&gt;&lt;p&gt;当我在写 Foundry 智能合约开发框架的教程时，我首先把一些零散的知识点或是实践中遇到的一些经验、教训以一个个白板平铺在 Foundy 的白板上（其为 &lt;code&gt;Projects&lt;/code&gt; - &lt;code&gt;Blockchain&lt;/code&gt; - &lt;code&gt;Smart Contract&lt;/code&gt; 下的第四级子白板），当某个知识点已经足够多时，我会把白板之间再作一些 Section 分组、画线关联等。&lt;/p&gt;&lt;p&gt;其中它还提供了原生与
 Readwise 的集成，可以在右侧边栏直接选择 Readwise 中我们对某些文章、书籍的一些 highlights 与 notes 
作为卡片直接引入到白板中，为它们建立一些关联，很像我们人脑整理零散信息或是头脑风暴的过程，完美符合了我的需求。&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;heptabase_chiangmai_trip&quot; src=&quot;https://image.pseudoyu.com/images/heptabase_chiangmai_trip.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;我目前还会用它做一些旅行攻略，把从小红书和其他人的攻略帖中的信息点作为一个个 card 放在旅行规划的白板中，然后再通过关联和分组进行整理，很规整。&lt;/p&gt;&lt;h2 id=&quot;信息输出&quot;&gt;信息输出&lt;/h2&gt;&lt;p&gt;而我的输出则主要包含以下几个部分：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;笔记/观点/日常&lt;/li&gt;&lt;li&gt;长文&lt;/li&gt;&lt;li&gt;主题研究&lt;/li&gt;&lt;li&gt;信息流&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&quot;笔记观点日常&quot;&gt;笔记/观点/日常&lt;/h3&gt;&lt;p&gt;&lt;img alt=&quot;yu_twitter_profile&quot; src=&quot;https://image.pseudoyu.com/images/yu_twitter_profile.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;其中 Twitter 「&lt;a href=&quot;https://twitter.com/pseudo_yu&quot;&gt;pseudo_yu&lt;/a&gt;」是我最主要的无结构化的信息输出渠道，有时候是一些关于新技术的想法、关于工作的感受、与朋友相见的心情或是一张可爱的猫猫图，都构成了我输出，也对应着我输入中那些随机想法的快速产出。&lt;/p&gt;&lt;p&gt;其中，Twitter 上认识的朋友也给我带来了很多温暖。&lt;/p&gt;&lt;h3 id=&quot;长文&quot;&gt;长文&lt;/h3&gt;&lt;p&gt;&lt;img alt=&quot;yu_blog_homepage&quot; src=&quot;https://image.pseudoyu.com/images/yu_blog_homepage.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;而我最重要的输出平台是个人博客「&lt;a href=&quot;https://www.pseudoyu.com/&quot;&gt;Pseudoyu&lt;/a&gt;」，目前周报是我的主要出口，偶尔也会有一些主题或专题性的关于技术或是效率工具的博文。&lt;/p&gt;&lt;h3 id=&quot;主题研究&quot;&gt;主题研究&lt;/h3&gt;&lt;p&gt;输出一篇博文由于要考虑到受众、言辞表述与完整性等，其实有一定的心智负担，且周期较长，而我在进行特定领域的主题研究过程中大多把学习资料和一些
 Demo 放在 GitHub 仓库中或是 Logseq 的某个笔记角落，有时候时间久了就得要重新学习了。而我现在更多放在 Heptabase 
的一个白板里，能够存放很多小的知识点并且在后续的创作中再进一步归纳和精炼，所以其实可以在初具框架后把这个白板共享出来，可以与更多人进行交流，也能对同样在学习的朋友有所帮助。&lt;/p&gt;&lt;h3 id=&quot;信息流输出&quot;&gt;信息流输出&lt;/h3&gt;&lt;p&gt;&lt;img alt=&quot;yu_telegram_channel_screenshot&quot; src=&quot;https://image.pseudoyu.com/images/yu_telegram_channel_screenshot.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;我搭建了一个自己的 n8n 同步服务，采集我零散在各个平台的信息输入输出，并且还会将我对电影、书籍的观后感以及自己其他一些所思所想发在自己的 Telegram 频道「&lt;a href=&quot;https://t.me/pseudoyulife&quot;&gt;Yu’s Life&lt;/a&gt;」里。也关注了一些频道和群组获取一些资讯或是认识一些志同道合的人，偶尔会手动转发，主要同步以下几个平台：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Blog，现在更像是一种生活日志。&lt;/li&gt;&lt;li&gt;YouTube，也是重度用户了，看技术相关教程和数码资讯比较多，偶尔也有很多好玩的内容。&lt;/li&gt;&lt;li&gt;Bilibili，主要保留了自己这么多年一直在关注的一些博主，看旅拍比较多，只看动态不看首页和热门。&lt;/li&gt;&lt;li&gt;Pinboard，书签和网站保存管理工具，重度依赖了。&lt;/li&gt;&lt;li&gt;Instapaper，管理稍后读，主要是一些精品或是长文的保存。&lt;/li&gt;&lt;li&gt;GitHub，也是日常刷了，看一些好的项目，也用列表在管理 Star。&lt;/li&gt;&lt;li&gt;Spotify，好听的歌会标注一下。&lt;/li&gt;&lt;li&gt;豆瓣，记录自己的书籍、剧集、电影、动漫和游戏，也是重度使用了，也在尝试每一个看过/玩过的作品都写一下自己的评价。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;数据备份&quot;&gt;数据备份&lt;/h2&gt;&lt;p&gt;虽然像是
 Twitter、Telegram 已经是比较大的平台，但毕竟是中心化的产物，再加上最近的各种风波，对于自己这些信息源的归集总是不放心 
Telegram 作为最终站，尤其是我常常在删消息时差点误点删除全部（奇怪的交互体验），所以信息的同步导出部分也是很重要一环，我使用 
Crossbell 生态下的 &lt;a href=&quot;https://xlog.app/&quot;&gt;xLog&lt;/a&gt; 与 &lt;a href=&quot;https://xsync.app/&quot;&gt;xSync&lt;/a&gt; 服务进行我的博客与各平台信息的链上备份。&lt;/p&gt;&lt;h3 id=&quot;xlog&quot;&gt;xLog&lt;/h3&gt;&lt;p&gt;&lt;img alt=&quot;yu_xlog_profile&quot; src=&quot;https://image.pseudoyu.com/images/yu_xlog_profilea6f9af1d5482abc7.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;视觉效果和体验感都不错，且基于 Crossbell 地址能够很方便地进行 follow 和评论，包含了 NFT 展示柜、个人作品集等功能，这是我的 &lt;a href=&quot;https://xlog.pseudoyu.com/&quot;&gt;xLog 访问地址&lt;/a&gt;，有兴趣的朋友们也可以关注一下，不过目前出于定制化程度、各种历史文章迁移路由问题、自己各项数据统计服务变动等考虑，还是更多作为一个同步分发渠道。&lt;/p&gt;&lt;h3 id=&quot;xsync&quot;&gt;xSync&lt;/h3&gt;&lt;p&gt;&lt;img alt=&quot;yu_sync_profile&quot; src=&quot;https://image.pseudoyu.com/images/yu_sync_profile.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;xSync 能够同步 Twitter、Telegram Channel 等平台，不需要做任何侵入式改造就能把我的聚合频道作再一次备份与存档，后续可以通过 xChar 来查看自己的各项消息了，很完美的解决方案，这是我的 xChar 个人主页: &lt;a href=&quot;https://xchar.app/pseudoyu&quot;&gt;xChar&lt;/a&gt;，也可以通过 &lt;a href=&quot;https://xfeed.app/u/pseudoyu&quot;&gt;xFeed&lt;/a&gt; 查看我的信息流。&lt;/p&gt;&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;it is probably a mistake, in the end, to ask software to improve our thinking.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://www.theverge.com/authors/casey-newton&quot;&gt;Casey Newton&lt;/a&gt; 在最近的一篇「&lt;a href=&quot;https://www.theverge.com/2023/8/25/23845590/note-taking-apps-ai-chat-distractions-notion-roam-mem-obsidian&quot;&gt;Why note-taking apps don’t make us smarter&lt;/a&gt;」中如是说。确实，这些系统或是工具软件其实终究只能辅助我们进行信息管理和输出，并不能代替我们思考，但构建知识管理系统在取悦自己的同时，也能够让思考变得更加高效，悦己才能达人，从而产出更有价值的输出。&lt;/p&gt;&lt;p&gt;希望这篇文章能够对大家有所帮助。&lt;/p&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻墙技术博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;订阅地址及社交帐号&lt;/a&gt;&lt;/div&gt;</description>
            <link>https://www.chinagfw.org/2023/09/heptabase-logseq-readwise.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-9076859839982080284</guid>
            <pubDate>Mon, 04 Sep 2023 07:59:00 +0000</pubDate>
            <atom:updated>2023-09-06T10:55:00.946+08:00</atom:updated>
            <title>沙特男子因推特言论被判死刑，这是对网络批评者的最严厉判决</title>
            <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/83d19bb3-f1a0-40f8-96be-3448a99d12c8_image_image.png&quot;&gt;&lt;/div&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/83d19bb3-f1a0-40f8-96be-3448a99d12c8_image_image.png&quot;&gt;&lt;/div&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/83d19bb3-f1a0-40f8-96be-3448a99d12c8_image_image.png&quot;&gt;&lt;/div&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/83d19bb3-f1a0-40f8-96be-3448a99d12c8_image_image.png&quot;&gt;&lt;/div&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/83d19bb3-f1a0-40f8-96be-3448a99d12c8_image_image.png&quot;&gt;&lt;/div&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/83d19bb3-f1a0-40f8-96be-3448a99d12c8_image_image.png&quot;&gt;&lt;/div&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/83d19bb3-f1a0-40f8-96be-3448a99d12c8_image_image.png&quot;&gt;&lt;/div&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/83d19bb3-f1a0-40f8-96be-3448a99d12c8_image_image.png&quot;&gt;via:&lt;a href=&quot;https://here.news/post/64f539b120d455ec73d57d93&quot;&gt; https://here.news/post/64f539b120d455ec73d57d93&lt;/a&gt;&lt;br /&gt;&lt;/div&gt;&lt;p&gt;根据人权倡导者和他的家人的说法，沙特阿拉伯一名退休教师最近因推特上批评该国领导层的言论而被判死刑。&lt;/p&gt;&lt;p&gt;现年 50 多岁的穆罕默德·阿尔加姆迪（Mohammad
 
Alghamdi）的判决是沙特阿拉伯对社交媒体用户日益加强的打击行动中的最新一例。虽然其他人因推特和在线批评政府而被判服刑 20 至 45 年，但阿尔加姆迪似乎是第一个仅凭其在推特（前身为 Twitter）和 YouTube 上的帖子而被判死刑的人。&lt;/p&gt;&lt;p&gt;对批评者的广泛打击行动发生在沙特阿拉伯王储穆罕默德·本·萨勒曼（Mohammed
 bin 
Salman）推动敏感改革的同时，这些改革已经彻底改变了该国的生活，并放宽了许多限制。这些全面的改革，如允许妇女开车，结束公共场所的严格性别隔离规定，以及向娱乐和旅游开放国家，与同样全面的异议浪潮同时发生。&lt;/p&gt;&lt;p&gt;居住在麦加的七个孩子的父亲阿尔加姆迪在推特上的两个匿名账户之间只有 10 个关注者。根据人权观察组织的说法，他在这个社交媒体网站上抨击所谓的政府腐败，但主要是转发更受欢迎的政府批评者的帖子。&lt;/p&gt;&lt;h2&gt;推特账户受到打击&lt;/h2&gt;&lt;p&gt;X 平台是沙特阿拉伯最受欢迎的社交媒体网站之一。沙特人经常在这里发泄他们对政府政策的不满。&lt;/p&gt;&lt;p&gt;ALQST 人权组织的监测和倡导主任丽娜·阿尔哈特卢尔（Lina Alhathloul）表示，尽管用户因推文而受到打击和拘留，但该平台仍然是沙特人可以表达观点的最后一片空地，即使是匿名的。&lt;/p&gt;&lt;p&gt;她说：「这是人们实际上讨论社会问题的最后一个空间。」 「在现实生活中，每个人都自我审查。他们知道自己处于危险之中，但人们认为在推特上，尤其是在匿名账户上，他们可能是安全的。」&lt;/p&gt;&lt;p&gt;但是，即使是匿名账户也无法保护用户免受沙特起诉。目前尚不清楚沙特当局如何能够在 X 上验证阿尔加姆迪的身份。&lt;/p&gt;&lt;p&gt;在其他案件中，沙特用户的身份似乎已经泄露，使他们面临逮捕和长期监禁的风险。美国的一份联邦调查和联邦调查局的投诉导致去年一名前推特员工被判犯有未注册为沙特阿拉伯代理人的罪名。他还因收受贿赂以交出沙特政府批评者的机密用户数据而被判有罪。&lt;/p&gt;&lt;p&gt;阿尔哈特卢尔表示，所有这些案件传递出的信息是明确的。&lt;/p&gt;&lt;p&gt;她说：「无论你做什么，无论你是谁，你都不安全。你只需要让自己闭嘴。」&lt;/p&gt;&lt;h2&gt;领导层遭到批评引发反恐法&lt;/h2&gt;&lt;p&gt;阿尔加姆迪的案件之所以引人注目，是因为他在 X 上的账户显然影响范围很小，与他所受到的严厉判决形成鲜明对比。他可以对判决提出上诉。&lt;/p&gt;&lt;p&gt;人权倡导者和人权观察组织审查的法庭文件显示，阿尔加姆迪于 7 月 10 日根据该国措辞含糊的反恐法被判死刑，原因是他利用自己的社交媒体账户犯下了侮辱沙特国王或王储以及支持恐怖主义意识形态等罪行。&lt;/p&gt;&lt;p&gt;他被利雅得的专门刑事法院判有罪。该法院成立于 15 年前，用于审理恐怖主义案件，但也被用于起诉政府批评者。&lt;/p&gt;&lt;p&gt;检方在这些案件中经常辩称，侮辱或批评沙特阿拉伯领导层对国家安全构成威胁，可能破坏社会稳定。许多这些审判都是在闭门会议上进行的。&lt;/p&gt;&lt;p&gt;沙特政府尚未回应 NPR 关于阿尔加姆迪案的请求。然而，当官员在公共论坛上被问及沙特阿拉伯的法律和司法体系时，他们经常表示法院是独立的，或者认为整体改革需要时间。&lt;/p&gt;&lt;h2&gt;一个被通缉的兄弟&lt;/h2&gt;&lt;p&gt;阿尔加姆迪的兄弟赛义德·阿尔加姆迪（Saeed
 
Alghamdi）认为，对他的年轻兄弟的起诉实际上是为了针对他。赛义德·阿尔加姆迪是一位著名的伊斯兰学者，与该国最著名的被监禁批评者有联系。他于 2013 年离开沙特阿拉伯，并创办了沙纳德（SANAD）沙特人权组织。他现在在英国流亡。&lt;/p&gt;&lt;p&gt;他说，沙特当局试图说服他回到王国，承诺如果他回去并停止在国外进行活动，他将获得金钱和美好的生活。&lt;/p&gt;&lt;p&gt;他说：「他们想要针对我个人，因为他们曾多次试图说服我回国。」 「当我拒绝时，他们就采取了这种方式。这是我对这种情况的看法。」&lt;/p&gt;&lt;p&gt;尽管无法独立验证他的说法，但已知有对海外异见人士家属的报复行动。&lt;/p&gt;&lt;p&gt;赛义德·阿尔加姆迪说：「只要情况保持这样，我绝对不打算返回（沙特阿拉伯）。」&lt;/p&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻墙技术博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;订阅地址及社交帐号&lt;/a&gt;&lt;/div&gt;</description>
            <link>https://www.chinagfw.org/2023/09/blog-post_4.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-5887901843693319375</guid>
            <pubDate>Mon, 04 Sep 2023 03:28:00 +0000</pubDate>
            <atom:updated>2023-09-04T11:29:49.548+08:00</atom:updated>
            <title>苹果终止 CSAM 照片扫描，引发 HeatInitiative 运动儿童安全争议</title>
            <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;p&gt;via: &lt;a href=&quot;https://here.news/post/64f4001020d455ec73d542a6&quot;&gt;https://here.news/post/64f4001020d455ec73d542a6&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;&lt;p&gt;儿童安全组织 Heat Initiative 计划发起一项运动，敦促苹果在儿童性虐待材料扫描和用户举报方面采取行动。该公司在周四发表了一份罕见而详细的回应。&lt;/p&gt;&lt;p&gt;12 月份，苹果表示将终止设计一个保护隐私的 iCloud 照片扫描工具，用于检测平台上的儿童性虐待材料（CSAM）。该项目最初于 2021 年 8 月宣布，自从开始就备受争议。苹果最初在 2021 年 9 月暂停该项目，以回应数字权利组织和研究人员的担忧，他们认为这样的工具不可避免地会被滥用和利用，从而危及所有 iCloud 用户的隐私和安全。本周，一个名为 Heat
 
Initiative 的新的儿童安全组织告诉苹果，他们正在组织一场运动，要求苹果「检测、举报和删除」iCloud 中的儿童性虐待材料，并为用户提供更多举报 CSAM 的工具。&lt;/p&gt;&lt;p&gt;今天，苹果罕见地回应了 Heat
 Initiative，概述了放弃开发 iCloud 
CSAM 扫描功能的原因，并转而专注于一套称为通信安全功能的设备上工具和资源。苹果与 WIRED 分享了公司对 Heat 
Initiative 的回应，这不仅提供了苹果转向通信安全的理由，还展示了苹果对创建绕过用户隐私保护（如加密）的机制的更广泛观点。这一立场与加密辩论更广泛相关，特别是在英国等国家考虑通过法律要求科技公司能够访问用户数据以配合执法请求的情况下。&lt;/p&gt;&lt;p&gt;苹果的用户隐私和儿童安全总监 Erik
 Neuenschwander 在公司对 Heat 
Initiative 的回应中写道：「儿童性虐待材料是令人憎恶的，我们致力于打破使儿童易受其害的胁迫和影响链条。」他补充道，尽管与一系列隐私和安全研究人员、数字权利组织和儿童安全倡导者进行了合作，但公司得出结论，无法继续开发 CSAM 扫描机制，即使是专门为了保护隐私而构建的机制。&lt;/p&gt;&lt;p&gt;Neuenschwander 写道：「扫描每个用户的私人存储的 iCloud 数据将为数据窃贼寻找和利用提供新的威胁向量。这也会引发潜在的滑坡效应。例如，扫描某一类型的内容会为大规模监视打开大门，并可能导致希望搜索其他加密消息系统的内容类型。」&lt;/p&gt;&lt;p&gt;Heat
 Initiative 由 Sarah 
Gardner 领导，她曾是非营利组织 Thorn 的外部事务副总裁，该组织致力于利用新技术打击在线儿童剥削和性贩卖。2021 年，Thorn 称赞苹果开发 iCloud
 CSAM 扫描功能的计划。Gardner 在 8 月 30 日星期三给首席执行官 Tim Cook 的一封电子邮件中写道，Heat 
Initiative 对苹果终止该功能的决定感到「失望」，这封电子邮件也与 WIRED 分享了。&lt;/p&gt;&lt;p&gt;Gardner 在给 Cook 的邮件中写道，苹果的照片扫描工具「不仅将苹果定位为全球用户隐私的领导者，还承诺从 iCloud 中清除数百万张儿童性虐待图像和视频。……儿童性虐待是一个难以讨论的问题，这就是为什么它会被沉默和被遗忘。我们在这里确保这种情况不会发生。」&lt;/p&gt;&lt;p&gt;苹果坚持认为，即使是自己出于善意的设计，在实践中也无法得到充分的保护，而对于消息、FaceTime、AirDrop 和照片选择器等功能的设备上的裸体检测是更安全的替代方案。苹果还开始为其通信安全功能提供应用程序编程接口（API），以便第三方开发人员可以将其整合到其应用程序中。苹果表示，通信平台 Discord 正在整合这些功能，并且应用程序开发者普遍热衷于采用这些功能。&lt;/p&gt;&lt;p&gt;Neuenschwander 在给 Heat Initiative 的回应中写道：「我们决定不继续推进几年前关于 iCloud 照片的混合客户端-服务器方法的 CSAM 检测提案。我们得出结论，从实际上来说，这是不可行的，因为它最终会危及我们用户的安全和隐私。」&lt;/p&gt;&lt;p&gt;对于 Heat
 
Initiative 要求苹果为用户创建 CSAM 举报机制，该公司告诉 WIRED，它的重点是将其脆弱或受害用户直接与当地资源和执法机构联系，以协助他们，而不是将苹果定位为处理报告的中间人。该公司表示，为交互式平台（如社交网络）提供这种中间服务可能是有意义的。&lt;/p&gt;&lt;p&gt;保护儿童免受在线性虐待的需求是紧迫的，然而，随着这些关切与更广泛的加密辩论交织在一起，苹果拒绝实施数据扫描的决心将继续受到考验。&lt;/p&gt;&lt;p&gt;阅读 Heat Initiative 和苹果之间的完整交流，请参见下文。为了保护发件人和收件人的隐私，WIRED 已经删除了敏感个人信息：&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/jpeg&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/72971025-d217-4396-9b51-d19ada1362bf_image_apple-letter-to-heat-initiative_page-0003.jpg&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/72971025-d217-4396-9b51-d19ada1362bf_image_apple-letter-to-heat-initiative_page-0003.jpg&quot; /&gt;&lt;/div&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/jpeg&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/9428dc07-dc4b-4bb4-b72f-7109c0aeccda_image_apple-letter-to-heat-initiative_page-0002.jpg&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/9428dc07-dc4b-4bb4-b72f-7109c0aeccda_image_apple-letter-to-heat-initiative_page-0002.jpg&quot; /&gt;&lt;/div&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/jpeg&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/b930eba2-3835-4450-ad35-d51ea4836b7c_image_apple-letter-to-heat-initiative_page-0001.jpg&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/b930eba2-3835-4450-ad35-d51ea4836b7c_image_apple-letter-to-heat-initiative_page-0001.jpg&quot; /&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;https://www.wired.com/story/apple-csam-scanning-heat-initiative-letter/&quot; target=&quot;_blank&quot;&gt;https://www.wired.com/story/apple-csam-scanning-heat-initiative-letter/&lt;/a&gt;&lt;/p&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻墙技术博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;订阅地址及社交帐号&lt;/a&gt;&lt;/div&gt;</description>
            <link>https://www.chinagfw.org/2023/09/csamheatinitiative.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-8685891923325635596</guid>
            <pubDate>Fri, 01 Sep 2023 12:28:00 +0000</pubDate>
            <atom:updated>2023-09-01T20:28:36.795+08:00</atom:updated>
            <title>&quot;请别公开&quot;: 加拿大公民实验室公开搜狗输入法安全漏洞和隐私侵犯的完整报告</title>
            <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;p&gt;&lt;i&gt;via &lt;a href=&quot;https://here.news/post/3507b25e-b8cb-4b34-b58a-ee6cd9ce791d/%E8%AF%B7%E5%88%A5%E5%85%AC%E5%BC%80-%E5%8A%A0%E6%8B%BF%E5%A4%A7%E5%85%AC%E6%B0%91%E5%AF%A6%E9%A9%97%E5%AE%A4%E5%85%AC%E5%B8%83%E6%90%9C%E7%8B%97%E8%BC%B8%E5%85%A5%E6%B3%95%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%92%8C%E9%9A%B1%E7%A7%81%E4%BE%B5%E7%8A%AF%E7%9A%84%E5%AE%8C%E6%95%B4%E5%A0%B1%E5%91%8A&quot;&gt;here.news&lt;/a&gt; &lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;搜狗输入法加密中的漏洞使按键暴露于网络窃听&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;作者：Jeffrey Knockel, Zoë Reichert, and Mona Wang&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;日期：2023 年 8 月 9 日&lt;/b&gt;&lt;/p&gt;&lt;p&gt;我们敦促搜狗输入法用户立即更新到最新版本的应用程序（至少是 Windows 版本 13.7，Android 版本 11.26 或 iOS 版本 11.25）。&lt;/p&gt;&lt;p&gt;&lt;b&gt;主要发现：&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;我们分析了腾讯的搜狗输入法，该输入法是中国最受欢迎的输入法，拥有超过 4.5 亿的月活跃用户。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过分析软件的 Windows、Android 和 iOS 版本，我们发现了搜狗输入法自定义的「EncryptWall」加密系统以及它对敏感数据进行加密的漏洞。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;我们发现，包含用户按键等敏感数据的网络传输可以被网络窃听者解密，揭示用户的实时输入内容。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;我们已将这些漏洞披露给搜狗开发人员，并且他们已经发布了修复的软件版本（截至 2023 年 7 月 20 日，Windows 版本 13.7，Android 版本 11.26 和 iOS 版本 11.25）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;这些发现强调了中国软件开发人员使用得到良好支持的加密实现（如 TLS）的重要性，而不是试图自行设计加密系统。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;简介：&lt;/h2&gt;&lt;p&gt;与输入少量字母的字母语言相比，输入象形文字语言（如中文）更加困难。中文有数以万计的字符，使用频率各不相同，无法全部放在一个键盘上。没有标准的中文输入方法，但随着现代技术的发展，出现了许多互补的方法。最流行的是拼音输入法，基于汉字的拼音罗马化。注音是另一种常用的音标输入法，而形状或笔画输入法（如仓颉或五笔）也常被使用。现代输入法还支持通过手写、语音识别、照片或 OCR 输入字符。&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/e43f0ba9-b7e0-4802-a428-8b51428e3713_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/e43f0ba9-b7e0-4802-a428-8b51428e3713_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;在本报告中，我们分析了腾讯的搜狗输入法，这是中国最受欢迎的输入法，拥有超过 4.55 亿的月活跃用户，并且有适用于 Windows、Android 和 iOS 等多个平台的应用程序版本。搜狗输入法占据了中国输入法用户的 70%，其次是讯飞和百度的产品。麦咖啡在 2015 年的分析中曾观察到该应用程序的 Windows 版本在不加密的情况下传输设备标识符，但没有分析该应用程序的加密系统传输的数据的安全性。&lt;/p&gt;&lt;p&gt;我们分析了搜狗输入法的 Windows、Android 和 iOS 版本，发现该应用程序的自定义加密系统存在严重的漏洞，使得诸如用户按键等敏感数据可以被网络窃听者解密。我们发现的这些漏洞不仅限于中国的中文作者，根据市场研究估计，访问该应用程序网站的美国用户占比超过 3.3%，台湾占近 1.8%，日本占超过 1.5%。&lt;/p&gt;&lt;p&gt;本报告的其余部分结构如下。在「方法论」部分，我们概述了我们用于分析搜狗输入法的逆向工程工具和技术。在「发现」部分，我们描述了搜狗输入法的自定义加密系统的工作原理，我们发现的漏洞以及受影响的数据传输示例。在「缓解措施」和「协调披露」部分，我们讨论了搜狗如何修复我们报告的漏洞以及我们如何向他们报告漏洞。最后，在「讨论」部分，我们反思了这些漏洞对中国应用程序生态系统中的系统性问题的影响。&lt;/p&gt;&lt;h2&gt;方法论：&lt;/h2&gt;&lt;p&gt;我们分析了搜狗输入法的 Windows、Android 和 iOS 版本。为了获取我们分析的版本，我们在 2023 年 5 月从产品网站下载了 Windows 和 Android 版本的最新版本（尽管 Android 版本截至 2021 年 6 月 3 日仍然可用，但目前在 Google
 Play 商店中不可用）。我们从 Apple 的 App Store 获取了 iOS 版本（有关分析版本的详细信息，请参见表 1）。&lt;/p&gt;&lt;p&gt;平台，搜狗输入法版本，设备&lt;/p&gt;&lt;p&gt;Windows 7 SP1 13.4 虚拟机&lt;/p&gt;&lt;p&gt;Android 9 11.20 Google Pixel 2&lt;/p&gt;&lt;p&gt;iOS 14.8 11.21 iPhone SE 2 代&lt;/p&gt;&lt;p&gt;表 1：分析的搜狗输入法版本的详细信息。&lt;/p&gt;&lt;p&gt;我们使用静态和动态分析方法分析了这些版本的搜狗输入法。我们使用 jadx 对 Dalvik 字节码进行静态分析和反编译，使用 IDA
 Pro 对本机机器代码进行静态分析和反编译。我们使用 frida 对 Android 和 iOS 版本进行动态分析，使用 IDA 
Pro 对 Windows 版本进行动态分析。最后，我们使用 Wireshark 和 mitmproxy 进行网络流量捕获和分析。&lt;/p&gt;&lt;h2&gt;发现：&lt;/h2&gt;&lt;p&gt;我们发现搜狗输入法的每个版本都使用一个名为「EncryptWall」的加密系统对敏感数据进行加密。我们发现 Windows 和 Android 版本的搜狗输入法在这个加密系统中存在漏洞，包括对 CBC 填充预言攻击的漏洞，这使得网络窃听者可以恢复加密的网络传输的明文，揭示包括用户输入的内容在内的敏感信息（请参见表 2 以了解受影响的版本的详细信息）。在 Android 版本的情况下，我们还能够恢复用于加密流量的对称加密密钥的第二半部分。我们还发现了影响 iOS 版本的加密的漏洞，但我们目前不知道如何利用我们分析的版本中的这些漏洞。&lt;/p&gt;&lt;p&gt;平台，是否可利用？&lt;/p&gt;&lt;p&gt;Windows 是&lt;/p&gt;&lt;p&gt;Android 是&lt;/p&gt;&lt;p&gt;iOS 没有已知的利用方法&lt;/p&gt;&lt;p&gt;表 2：搜狗输入法受影响的版本摘要。&lt;/p&gt;&lt;p&gt;在本节的其余部分，我们详细介绍了对搜狗的 EncryptWall 加密系统的攻击。我们首先介绍加密系统的背景，然后详细说明我们对其进行的攻击，最后分析我们的攻击如何适用于我们分析的三个平台，以适应 EncryptWall 系统在不同平台上的实现差异。&lt;/p&gt;&lt;h2&gt;搜狗的 EncryptWall&lt;/h2&gt;&lt;p&gt;我们在本报告中讨论的攻击涉及我们在搜狗的「EncryptWall」加密系统中发现的漏洞，该系统似乎旨在通过明文 HTTP
 POST 请求中的加密字段，将敏感流量安全地隧道传输到未加密的搜狗 HTTP 
API 端点。在本报告中，我们将外部的明文 HTTP 请求称为 EncryptWall 请求，而每个 EncryptWall 请求封装了隧道请求的单个加密请求。尽管在我们分析的三个平台上的实现存在差异，但我们发现该系统的工作原理通常如下：&lt;/p&gt;&lt;p&gt;EncryptWall 请求作为 HTTP
 POST 请求发送到搜狗 EncryptWall 
API 端点，其中包含至少五个 HTTP 表单字段，指定用于加密隧道请求以及加密隧道数据的加密参数。两个表单字段与指定用于加密 EncryptWall 请求中的其他字段的密钥和初始化向量（IV）有关：&lt;/p&gt;&lt;p&gt;「K」 - 使用 PKCS#v1.5 填充，使用硬编码的 1024 位公共 RSA 密钥对 256 位 AES 密钥 k 进行加密的 base64 编码；每个请求随机生成 k&lt;/p&gt;&lt;p&gt;「V」 - 使用硬编码的 128 位初始化向量 v 进行加密的 base64 编码；每个请求随机生成 v&lt;/p&gt;&lt;p&gt;这些字段中的三个字段分别进行 zlib 压缩、使用 k 和 v 进行加密，并根据以下伪代码进行 base64 编码：&lt;/p&gt;&lt;p&gt;ᴇɴᴄʀʏᴘᴛ(data) = base64_encode(AES_cbc_encrypt(zlib_compress(data, wbits=-15), k, v))&lt;/p&gt;&lt;p&gt;我们一直观察到以这种方式加密的三个字段如下：&lt;/p&gt;&lt;p&gt;「U」 - ᴇɴᴄʀʏᴘᴛ(隧道 HTTP 请求的 URL)&lt;/p&gt;&lt;p&gt;「G」 - ᴇɴᴄʀʏᴘᴛ(隧道 HTTP 请求的 GET 参数，以查询字符串的形式)&lt;/p&gt;&lt;p&gt;「P」 - ᴇɴᴄʀʏᴘᴛ(隧道 HTTP 请求的原始 POST 数据，如果有的话)&lt;/p&gt;&lt;p&gt;根据分析的平台和正在进行的请求类型，EncryptWall 请求可能通过加密的 HTTPS 或明文 HTTP 发送。在使用 HTTPS 发送 EncryptWall 请求的情况下，我们认为这些请求在网络窃听方面是安全的，尽管 EncryptWall 请求的底层加密可能存在缺陷，HTTPS 的 TLS 加密还可以提供额外的保护。因此，我们在本节其余部分的发现仅涉及我们观察到的通过不受 HTTPS 额外保护的明文 HTTP 发送的 EncryptWall 请求。&lt;/p&gt;&lt;h2&gt;攻击&lt;/h2&gt;&lt;p&gt;我们发现 EncryptWall 系统容易受到 CBC 填充预言攻击的漏洞，这是一种最初于 2002 年发表的攻击类型，影响使用密码块链接（CBC）块密码模式和 PKCS#7 填充的块密码。在这种攻击中，可以逐字节地恢复消息的明文，每个字节最多使用 256 个消息。我们不打算在此完全重述此攻击的工作原理，该攻击依赖于一种称为填充预言的特定类型的边信道，该边信道明确地显示解密后的接收到的密文是否正确填充。我们在 EncryptWall 系统中识别到了这样的预言，我们发现在「U」表单字段中发送的密文在包含错误填充时返回 HTTP
 
400 状态码，而在正确填充时，根据解密后的 URL 是否是有效 URL，返回 200 状态码或 500 状态码。通过进行 CBC 填充预言攻击，这个填充预言允许我们不仅揭示「U」的整个明文，还可以揭示「G」和「P」的明文，因为它们使用相同的密钥和初始化向量。因此，通过使用这个填充预言，我们可以解密整个 EncryptWall 请求的内容。&lt;/p&gt;&lt;p&gt;在本节的其余部分，我们将这个攻击适应到 Windows 和 Android 平台上 EncryptWall 系统实现的所有偏差。尽管我们目前无法利用我们在 iOS 版本中发现的问题，但我们还是详细说明了 EncryptWall 系统中的问题。&lt;/p&gt;&lt;h2&gt;Windows 版本 13.4&lt;/h2&gt;&lt;p&gt;我们分析的 Windows 版本中实现的 EncryptWall 系统在一个细节上与上述基本实现有所偏差，即 IV
 
v 不是公开的，而是以与 AES 密钥 k 相同的方式进行加密。由于这种差异，v 不是立即可知的，这可能会带来两个潜在的问题：首先，在 CBC 填充预言攻击中，必须知道 IV 才能解密第一个明文块。其次，由于在加密之前，EncryptWall 请求中的隧道数据被压缩，第一个明文块对于解压缩其余块来说非常重要。&lt;/p&gt;&lt;p&gt;然而，我们开发了一种方法来恢复 v，该方法利用 v 被重用以加密多个明文的事实。具体而言，由于「U」的 URL 很容易预测，并且始终只有少数可能的端点之一，我们可以通过在第一个密文块「U」上执行 CBC 填充预言攻击来恢复 v，假设初始 IV 为全零。这种攻击的结果将是 URL 的第一个明文块与 v 异或的结果。然后，我们将此结果与我们对 URL 的第一个明文块的预测进行异或，得到 v。一旦我们恢复了 v，我们就可以像往常一样对「G」和「P」进行 CBC 填充预言攻击。&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/b6a2e2c5-3cec-4e75-acb0-95562777cc6b_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/b6a2e2c5-3cec-4e75-acb0-95562777cc6b_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;作为此攻击易受攻击的数据的一个示例，我们发现对于发送到 「&lt;a href=&quot;http://get.sogou.com/q」的 EncryptWall 请求，当「U」为「http://master-proxy.shouji.sogou.com/swc.php」&quot; target=&quot;_blank&quot;&gt;http://get.sogou.com/q」的 EncryptWall 请求，当「U」为「http://master-proxy.shouji.sogou.com/swc.php」&lt;/a&gt;
 
时，「G」包含与搜狗软件版本相关的版本信息，「P」是一个包含最近输入的按键的 protobuf 缓冲区（请参见图 2 的示例）。我们认为这些传输与基于云的自动完成服务有关。由于这些传输容易受到我们的攻击，搜狗输入法用户的按键可以被网络窃听者解密，从而告知窃听者用户实时输入的内容。&lt;/p&gt;&lt;h2&gt;Android 版本 11.20&lt;/h2&gt;&lt;p&gt;我们分析的 Android 版本采用了 EncryptWall 的基本实现，但增加了四个额外的表单字段：「R」、「S」、「E」和「F」。字段「R」传输另一个 32 字节的密钥 r。值得注意的是，r 的每个字节都是从 ASCII 大写字母和数字的 36 个字符集中随机选择的。因此，与 25632
 = 2256 位熵相比，该密钥只有 3632 &amp;lt; 
2166 位熵。此外，与 k 不同，r 不是每个请求随机生成的，而是仅在应用程序生命周期内生成一次，并且缓存在 C 静态内存中。字段「R」然后作为 k ⊕ 
r 的 base64 编码进行传输。请注意，由于这种传输，k 的熵也降低到 3632 &amp;lt; 
2166 位熵。参数 k、r 和 v 用于根据以下伪代码对「S」、「E」和「F」进行编码和加密：&lt;/p&gt;&lt;p&gt;ᴇɴᴄʀʏᴘᴛSEF(data) = base64Encode(k ⊕ AES_cbc_encrypt(data, r, 「EscowDorisCarlos」))&lt;/p&gt;&lt;p&gt;请注意，与典型的ᴇɴᴄʀʏᴘᴛ() 函数不同，ᴇɴᴄʀʏᴘᴛSEF() 函数具有硬编码的 IV「EscowDorisCarlos」且不进行 zlib 压缩。此外，尽管ᴇɴᴄʀʏᴘᴛSEF() 使用 r 而不是 k 作为 AES 密钥，但 k 还与 AES 加密结果进行异或。每个字段「S」、「E」和「F」都根据ᴇɴᴄʀʏᴘᴛSEF() 函数进行单独加密和编码。&lt;/p&gt;&lt;p&gt;尽管使用了这种修改后的加密算法，我们仍然能够成功攻击这些字段的加密。我们能够应用 CBC 填充预言攻击，使用搜狗对「E」表单字段的处理来替代我们通常使用的「U」表单字段，但有以下两个适应：&lt;/p&gt;&lt;p&gt;首先，由于密钥 k 是 32 字节，而 AES 块是 16 字节，当 AES 块密码的输出与 k 进行异或时，我们可以将输出视为与两个密钥 k1 和 k2 进行异或的结果，其中 k1 与奇数块（1、3、…）进行异或，k2 与偶数块（2、4、…）进行异或（请参见图 3 的示例）。因此，在进行 CBC 填充预言攻击时，我们必须确保我们攻击的块在原始块为偶数时处于偶数位置，原始块为奇数时处于奇数位置。换句话说，我们必须保持块位置的奇偶性。&lt;/p&gt;&lt;p&gt;其次，由于 IV 是硬编码的，我们无法修改它，因此，类似于 Windows 版本，CBC 填充预言攻击无法在没有适应的情况下恢复第一个明文块 p1。换句话说，我们发现 p1 对于「S」、「E」和「F」字段仍然是可恢复的，通过以下步骤：&lt;/p&gt;&lt;p&gt;我们将固定的 IV「EscowDorisCarlos」视为第一个密文块 c1 之前的一个密文块 c0，并将其发送给预言。由于 c1 必须位于奇数位置，我们确保 c0 位于偶数位置。因此，在攻击过程中，预言在解密第一个密文块 c1 时首先将 c0 与 k2 进行异或。&lt;/p&gt;&lt;p&gt;结果，解密 c1 会产生 p1&#39;，它等于 p1 ⊕ 「EscowDorisCarlos」 ⊕ c0 ⊕ k2。&lt;/p&gt;&lt;p&gt;由于（根据步骤 1）c0 = 「EscowDorisCarlos」，p1&#39;仅仅是 p1 ⊕ k2。因此，通过应用步骤 1-3，我们恢复了「S」、「E」和「F」字段的 p1 ⊕ k2。&lt;/p&gt;&lt;p&gt;此外，我们还发现「S」字段的第一个明文块的内容非常可预测。具体而言，它们包含正在使用的搜狗版本，这已经作为 EncryptWall 请求的 HTTP 头明文传输，因此任何网络窃听者都可以获得这些信息。因此，在「S」字段的情况下，我们知道 p1。在步骤 3 中，我们恢复了「S」字段的 p1
 ⊕ k2。由于我们知道 p1 和 p1 ⊕ k2，因此我们已经恢复了 k2。&lt;/p&gt;&lt;p&gt;一旦我们知道了 k2，它对于「E」和「F」字段也是相同的值，因为（根据步骤 3）我们知道了「E」和「F」字段的 p1 ⊕ k2，我们也可以恢复「E」和「F」的 p1。&lt;/p&gt;&lt;p&gt;此外，我们现在还可以恢复 r 的第二半部分 r2，这对于攻击者很有帮助，因为我们对 r2 的了解可以在随后的请求中更容易地恢复 k2。请记住，「R」字段对 k
 ⊕ 
r 进行编码。因此，在恢复 k2 后，我们可以通过将「R」字段的编码内容的第二半部分与 k2 进行异或来恢复 r2。一旦恢复了 r2，由于 r 与 k 不同，每个应用程序生命周期只生成一次，我们可以更容易地通过将「R」的第二半部分与 r2 进行异或来在将来的请求中恢复 k2，从而使攻击更容易进行。此外，这也降低了 r 的熵，因此也降低了 k 的熵，使其为 3616
 &amp;lt; 283 位。&lt;/p&gt;&lt;p&gt;作为此攻击易受攻击的数据的另一个示例，我们观察到对于发送到「&lt;a href=&quot;http://v2.get.sogou.com/q」的 EncryptWall 请求，当「U」为「http://swc.pinyin.sogou.com/swc.php」&quot; target=&quot;_blank&quot;&gt;http://v2.get.sogou.com/q」的 EncryptWall 请求，当「U」为「http://swc.pinyin.sogou.com/swc.php」&lt;/a&gt;
 
时，「P」是一个包含当前输入字段中的所有文本以及文本所在应用程序的包名的 protobuf 缓冲区（请参见图 4 的示例）。这些传输发生在按下放大镜图标时，我们认为这些传输与一种图像搜索功能有关，其中输入的文本将与动画和表情包的数据库进行搜索，并可以插入到输入的消息中。由于这些传输易受我们的攻击，搜狗输入法用户的按键是网络窃听者可以解密的内容，从而告知窃听者这些用户在输入时正在输入什么。&lt;/p&gt;&lt;p&gt;作为此攻击易受攻击的数据的另一个示例，我们观察到对于发送到「&lt;a href=&quot;http://v2.get.sogou.com/q」的 EncryptWall 请求，当「U」为「http://update.ping.android.shouji.sogou.com/update.gif」&quot; target=&quot;_blank&quot;&gt;http://v2.get.sogou.com/q」的 EncryptWall 请求，当「U」为「http://update.ping.android.shouji.sogou.com/update.gif」&lt;/a&gt;
 
时，「P」是一个查询字符串，其中包含 Android 设备上安装的每个应用程序的列表。我们不知道这个数据传输实现的具体功能是什么。虽然可以想象知道用户当前正在使用的应用程序可能有助于在该应用程序中提供更好的输入建议，但很难想象知道用户安装了每个应用程序，甚至是用户不打算与搜狗输入法一起使用的应用程序，如何提供更好的输入建议。&lt;/p&gt;&lt;p&gt;iOS 版本 11.21&lt;/p&gt;&lt;p&gt;我们分析的 iOS 版本与基本的 EncryptWall 实现没有明显的偏差。然而，与我们在某些平台上观察到的一些 EncryptWall 请求通过加密的 HTTPS 发送，其他通过明文 HTTP 发送不同，我们观察到的所有由我们分析的 iOS 版本发送的 EncryptWall 请求都通过 HTTPS 发送，因此我们认为它们在网络窃听方面是安全的。然而，我们注意到，如果没有 HTTPS 的额外保护，iOS 版本将是最容易受到攻击的，因为在 EncryptWall 的实现中存在另一个缺陷。具体而言，我们发现 iOS 版本根据以下代码随机选择密钥 k 和 IV
 v：&lt;/p&gt;&lt;p&gt;请注意，在随机生成密钥之前，随机数生成器以从 Unix 纪元以来的秒数为种子，向下取整。这种行为有两个后果：首先，推导 AES 密钥 k 所需的唯一信息是请求发送的时间，任何网络窃听者都可以轻松记录。其次，由于随机数生成器在生成 IV
 
v 之前使用几乎总是相同的时间进行重新种子化，v 几乎总是 k 的前 128 位。由于 v 是公开的，所有的 EncryptWall 消息都会在 v 中公开 k 的前半部分，尽管 k 使用公共 RSA 密钥进行了加密。&lt;/p&gt;&lt;p&gt;然而，我们再次注意到，由于 EncryptWall 请求在 iOS 上似乎总是额外包装在 HTTPS 中，因此目前无法利用这个缺陷。然而，由于这个缺陷的严重性，我们仍然不得不提及它，因为先前的 iOS 版本可能会受到影响，并且这段代码可能会在其他可能存在漏洞的应用程序中被重用。&lt;/p&gt;&lt;h2&gt;缓解措施&lt;/h2&gt;&lt;p&gt;为了解决报告的问题，搜狗输入法应该使用流行的、最新的 HTTPS 或 TLS 实现来保护所有传输，而不是依赖自定义的加密来保护敏感用户数据的传输。此外，搜狗输入法不应传输对程序功能无关的数据。&lt;/p&gt;&lt;h2&gt;协调披露&lt;/h2&gt;&lt;p&gt;2023 年 5 月 31 日，我们在附上的信函中向腾讯披露了我们的发现，遵循我们的安全披露漏洞政策。下表 3 是我们的披露时间表：&lt;/p&gt;&lt;p&gt;日期，联系方式&lt;/p&gt;&lt;p&gt;2023 年 5 月 31 日，漏洞披露给 IMETS@tencent.com。&lt;/p&gt;&lt;p&gt;2023 年 6 月 16 日，通过腾讯安全响应中心（TSRC）网门披露漏洞。&lt;/p&gt;&lt;p&gt;2023 年 6 月 25 日，我们通过 TSRC 门户收到以下回复：&lt;/p&gt;&lt;p&gt;「感谢您对腾讯安全的关注。对于此问题，没有低或低安全风险。期待您的下一个更令人兴奋的报告。」&lt;/p&gt;&lt;p&gt;2023 年 6 月 25 日 18 小时后，我们通过 TSRC 门户收到以下回复：&lt;/p&gt;&lt;p&gt;「很抱歉，我之前的回复是错误的，我们正在处理这个漏洞，请不要公开，非常感谢您的报告。」&lt;/p&gt;&lt;p&gt;&lt;b&gt;腾讯对我们的披露的最初拒绝和随后的改变成为本报告标题的灵感。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;2023 年 6 月 26 日，我们通过 TSRC 门户发送以下消息：&lt;/p&gt;&lt;p&gt;「感谢您的更新。我们将在 2023 年 7 月 31 日之后公开披露此漏洞。」&lt;/p&gt;&lt;p&gt;2023 年 6 月 28 日，我们通过 TSRC 门户收到以下回复：&lt;/p&gt;&lt;p&gt;「非常感谢您的报告，修复计划和修复时间已通过电子邮件回复给 disclosure@citizenlab.ca。」&lt;/p&gt;&lt;p&gt;2023 年 6 月 28 日，我们通过 TSRC 门户发送以下消息：&lt;/p&gt;&lt;p&gt;「我们没有在该地址收到此类电子邮件。然而，我们注意到我们的域名（citizenlab.ca）可能无法从中国访问，因此来自中国的电子邮件可能无法传递到该地址。您能否将您发送到 disclosure@citizenlab.ca 的电子邮件的副本发送到我的另一个电子邮件地址[已删除]@utoronto.ca？我相信从中国发送电子邮件到这个 utoronto.ca 地址不会有问题。谢谢。」&lt;/p&gt;&lt;p&gt;2023 年 6 月 29 日，我们通过 TSRC 门户收到以下回复：&lt;/p&gt;&lt;p&gt;「我们发送的电子邮件是 security@tencent.com，主题是：回复搜狗拼音法漏洞，可能被归类为垃圾邮件？」&lt;/p&gt;&lt;p&gt;2023 年 6 月 29 日，我们通过 TSRC 门户发送以下消息：&lt;/p&gt;&lt;p&gt;「不幸的是，我们没有在该地址收到此类电子邮件，甚至没有在垃圾邮件文件夹中收到。您能否尝试将电子邮件的副本发送到我的另一个电子邮件地址[已删除]@utoronto.ca？谢谢。」&lt;/p&gt;&lt;p&gt;2023 年 7 月 4 日，我们通过 TSRC 门户收到以下回复：&lt;/p&gt;&lt;p&gt;「您能使用 disclosure@citizenlab.ca 给 security@tencent.com 发送一封未经请求的电子邮件吗？然后我将把修复细节发送到[已删除]@utoronto.ca。」&lt;/p&gt;&lt;p&gt;2023 年 7 月 4 日，我们通过 TSRC 门户发送以下消息：&lt;/p&gt;&lt;p&gt;「是的，我们现在已经发送了这样一封电子邮件，正在等待您的回复。」&lt;/p&gt;&lt;p&gt;2023 年 7 月 4 日，我们在[已删除]@utoronto.ca 电子邮件地址收到以下回复。在电子邮件回复中，搜狗输入法开发人员概述了他们已经在电子邮件日期之前部署的部分缓解措施，以及将在 2023 年 7 月 31 日之前将所有平台迁移到使用 TLS 加密的时间表。&lt;/p&gt;&lt;p&gt;2023 年 7 月 18 日，我们发现搜狗输入法开发人员已经发布了每个平台的应用程序版本，这些版本被确定为修复我们发现的问题的版本。我们发现 Windows 和 iOS 版本解决了我们报告的问题，但 Android 版本没有。因此，我们通过 TSRC 门户发送以下消息：&lt;/p&gt;&lt;p&gt;「你好。在您发送给我们的电子邮件中，您指出 Android 应用程序的 11.25 版本将升级为使用 HTTPS 发送 EncryptWall 请求。我们分析了 11.25 版本（SogouInput_11.25_android_sweb.apk），发现它仍然没有使用 HTTPS 来传输我们在披露中发现的所有 EncryptWall 请求，包括我们报告的请求。11.25 版本仍然是应该包含这些修复的 Android 应用程序版本吗，还是将在未来版本中修复？」&lt;/p&gt;&lt;p&gt;2023 年 7 月 20 日，我们发现搜狗输入法开发人员已经发布了 Android 应用程序的 11.26 版本。我们发现这个版本解决了我们报告的所有问题。&lt;/p&gt;&lt;p&gt;2023 年 7 月 21 日 TSRC 门户提示以下消息：&lt;/p&gt;&lt;p&gt;「漏洞已修复，请查看并检查是否仍存在。如果已修复，请点击「已修复」；如果未修复，请点击「未修复」。」&lt;/p&gt;&lt;p&gt;我们点击了「已修复」。&lt;/p&gt;&lt;p&gt;2023 年 7 月 22 日，我们通过 TSRC 门户收到以下回复：&lt;/p&gt;&lt;p&gt;「感谢您的反馈。我们将在内部进行调查。」&lt;/p&gt;&lt;p&gt;2023 年 7 月 24 日，我们通过 TSRC 门户收到以下回复：&lt;/p&gt;&lt;p&gt;「非常感谢您的反馈，我们的最新修复版本是 11.26（SogouInput_11.26_android_sweb.apk），您可以从我们的官方网站 https:&lt;a href=&quot;https:////shurufa.sogou.com/下载。如果您有其他问题，请告诉我们。谢谢。」&quot; target=&quot;_blank&quot;&gt;//shurufa.sogou.com/下载。如果您有其他问题，请告诉我们。谢谢。」&lt;/a&gt;&lt;/p&gt;&lt;p&gt;2023 年 7 月 27 日，我们在[已删除]@utoronto.ca 电子邮件地址收到以下电子邮件。在电子邮件中，搜狗输入法开发人员向我们提供了包含修复的版本，并询问我们公开披露的「确切时间、网站和具体内容」。&lt;/p&gt;&lt;p&gt;2023 年 7 月 27 日，我们通过[已删除]@utoronto.ca 发送以下回复：&lt;/p&gt;&lt;p&gt;「我们可以确认您已经修复了我们报告的漏洞。我们将在 2023 年 7 月 31 日之后公开披露这些漏洞。我们将在我们的网站&lt;a href=&quot;https://citizenlab.ca/上发布有关安全漏洞的详细报告。」&quot; target=&quot;_blank&quot;&gt;https://citizenlab.ca/上发布有关安全漏洞的详细报告。」&lt;/a&gt;&lt;/p&gt;&lt;p&gt;2023 年 7 月 29 日，我们在[已删除]@utoronto.ca 电子邮件地址收到以下电子邮件。在电子邮件中，搜狗输入法表示他们致力于隐私和安全，并解释了他们实施 EncryptWall 系统的最初动机，并提醒我们他们对报告的漏洞的快速解决。&lt;/p&gt;&lt;p&gt;表 3：漏洞披露时间表。&lt;/p&gt;&lt;p&gt;2023 年 7 月 4 日，我们评估了搜狗输入法开发人员在 2023 年 6 月 30 日应用的部分缓解措施，其中，如果出现错误，搜狗服务器始终返回相同的 HTTP 状态码-400-而不是根据是否存在填充错误或某个更高级别的应用层返回 400 或 500。虽然这减轻了我们对 Windows 版本搜狗输入法的攻击以及对 Android 版本的「U」、「G」和「P」字段的攻击，但我们对 Android 的「S」、「E」和「F」字段的攻击仍然有效，因为它依赖于区分 HTTP 状态码 400 和 200，其中 200 是成功代码而不是错误代码，而且这种缓解只是修改服务器，在发生错误的情况下无条件返回状态码 400。&lt;/p&gt;&lt;p&gt;平台，修复版本&lt;/p&gt;&lt;p&gt;Windows 13.7&lt;/p&gt;&lt;p&gt;Android 11.26&lt;/p&gt;&lt;p&gt;iOS 11.25&lt;/p&gt;&lt;p&gt;表 4：搜狗输入法的修复版本。&lt;/p&gt;&lt;p&gt;在搜狗输入法开发人员的 2023 年 7 月 4 日的通信中，他们表示 Windows 版本的应用程序的 13.7 版本和 Android 和 iOS 版本的应用程序的 11.25 版本将解决我们报告的问题。2023 年 7 月 18 日，我们发现这些版本的应用程序已经发布。请注意，这些更新是在我们强制执行的 7 月 31 日截止日期之前发布的。分析更新的 Windows 版本，我们发现所有 EncryptWall 流量都使用操作系统的 WinHTTP 服务提供的 TLS 实现进行加密，令人满意地修复了我们在 Windows 版本中报告的漏洞。请记住，我们不知道如何利用我们在 iOS 版本中发现的问题。尽管最初将 11.25 版本确定为解决我们报告的漏洞，但我们发现 2023 年 7 月 20 日，搜狗输入法开发人员发布了 Android 应用程序的 11.26 版本，并且该版本使用 TLS 加密所有 EncryptWall 流量，令人满意地修复了我们在 Android 版本中报告的漏洞。因此，到 2023 年 7 月 20 日，我们报告的所有问题都已修复（请参见表 4 以获取修复版本的摘要）。&lt;/p&gt;&lt;p&gt;我们在收到腾讯对我们披露的电子邮件回复方面遇到的困难突显了在向某些司法管辖区的公司披露漏洞时面临的意外挑战。在向腾讯披露漏洞后，我们发现我们的电子邮件域名（citizenlab.ca）在中国被屏蔽。具体而言，我们发现中国的国家防火墙对查询此域名（包括 MX 记录查询）的 DNS 回复注入了异常的 DNS 回复。注入的 DNS 回复包含一个看似任意的 IP 地址的 A 记录，即使查询是针对 MX 记录而不是 A 记录。当执行 A 记录查询的客户端收到其中一个注入的回复时，它将错误地使用注入回复中的虚假 IP 地址。然而，对于 MX 记录，这些注入的回复可能会被 DNS 客户端解释为错误，因为在 MX 查询中收到 A 记录，而 DNS 客户端对注入域名的 MX 查询可能只是失败，而不是像 A 查询中那样错误地使用虚假记录。尽管这种注入行为可能旨在阻止中国用户访问我们的网站，但它也妨碍了中国用户发送电子邮件给我们的能力，即使这样的电子邮件是经过征求的。&lt;/p&gt;&lt;p&gt;我们无法确定中国屏蔽我们域名的原因是腾讯的电子邮件未能传递到我们域名的电子邮件服务器，但我们收到了一些后来的证据，进一步加强了这个假设。我们在[已删除]@utoronto.ca 上收到的 7 月 27 日的电子邮件也发送到了 disclosure@citizenlab.ca。最终，disclosure@citizenlab.ca 地址在 24 小时后收到了电子邮件。通过检查电子邮件的标头，我们&lt;a href=&quot;https://发现电子邮件在腾讯的邮件服务器和 Google 的 MX 服务器之间停滞不前。由于 Google 是我们的电子邮件提供商在 citizenlab.ca&quot; target=&quot;_blank&quot;&gt;发现电子邮件在腾讯的邮件服务器和 Google 的 MX 服务器之间停滞不前。由于 Google 是我们的电子邮件提供商在 citizenlab.ca&lt;/a&gt;
 
MX 记录中，这一发现加强了腾讯的邮件服务器在查找我们域名的 MX 记录时遇到困难的假设。电子邮件可能最终在 24 小时后被传递，这是由于中国防火墙的间歇性故障或数据包丢失导致防火墙注入的 DNS 回复丢失，从而使我们域名的 MX 查询最终成功。因此，我们选择使用另一个我们最了解的在任何国家都没有被屏蔽的域名进行所有未来的披露，以确保我们不会在协调披露期间未能收到关键的沟通。同时，我们要求防火墙操作员考虑阻止域名可能会产生意想不到的后果，例如对那些可能在参与重要对话期间受到防火墙背后的软件漏洞影响的人的持续漏洞的贡献。&lt;/p&gt;&lt;h2&gt;限制&lt;/h2&gt;&lt;p&gt;在本报告中，我们详细介绍了搜狗 EncryptWall 加密系统在搜狗输入法中的使用的漏洞。然而，在这项工作中，我们没有对搜狗输入法进行全面审计，也没有尝试全面发现软件中的每个安全漏洞。我们的报告涉及我们发现的一组相关漏洞，我们未报告其他漏洞并不意味着这些漏洞不存在的证据。&lt;/p&gt;&lt;p&gt;讨论&lt;/p&gt;&lt;p&gt;在过去的八年中，我们致力于分析、记录和负责任地披露中国开发的应用程序中涉及敏感数据不安全传输的漏洞。尽管我们在与开发人员协调解决这些问题方面取得了一些成功，但该生态系统仍存在问题，因为我们在这里再次报告一个难以想象的受欢迎的中国开发的应用程序未能采用甚至简单的最佳实践来保护其传输的敏感数据。在这种情况下，搜狗输入法是一个拥有超过 4.5 亿用户的应用程序，未能正确保护敏感数据的传输，包括用户输入的按键，使得任何网络窃听者都可以恢复这些数据。通过采用常见且成熟的加密协议 TLS，而不是使用「自制」加密方法，可以轻松避免这种漏洞。虽然没有完美的加密协议，但 TLS 实现在 2003 年已经改善了对 CBC 填充错误攻击的脆弱性，这已经是本文撰写时的二十年前了。我们已经认识到，协调的安全披露远远不足以保护中国应用程序传输的用户数据。我们认为，需要对软件开发生态系统进行全面的变革，以解决这些系统性问题。&lt;/p&gt;&lt;p&gt;即使已经解决了报告的漏洞，搜狗应用程序仍依赖将键入的内容传输到搜狗的服务器作为其普通功能的一部分。来自世界各地的用户的按键输入被传输到中国大陆的服务器，这些服务器在中国政府的法律管辖下运营。使用搜狗的高风险用户应该谨慎，因为键入的内容可能包含敏感或个人信息。本报告中概述的攻击演示了网络窃听者如何解密这些数据。然而，即使漏洞得到解决，这些数据仍然可以被搜狗的运营商和与他们共享数据的任何人访问。&lt;/p&gt;&lt;h2&gt;致谢&lt;/h2&gt;&lt;p&gt;我们要感谢 Jakub Dalek、Pellaeon Lin、Adam Senft 和 Mari Zhou 对编辑和同行评审的宝贵贡献。该项目的研究由 Ron Deibert 监督。&lt;/p&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻墙技术博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;订阅地址及社交帐号&lt;/a&gt;&lt;/div&gt;</description>
            <link>https://www.chinagfw.org/2023/09/blog-post.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-8332894985938445495</guid>
            <pubDate>Mon, 07 Aug 2023 05:55:00 +0000</pubDate>
            <atom:updated>2023-08-22T23:39:17.889+08:00</atom:updated>
            <title>NAT 穿透是如何工作的：技术原理及企业级实践</title>
            <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;p&gt;via: &lt;a href=&quot;https://arthurchiao.art/blog/how-nat-traversal-works-zh/&quot; target=&quot;_blank&quot;&gt;https://arthurchiao.art/blog/how-nat-traversal-works-zh/&lt;/a&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;i&gt;本文翻译自 2020 年的一篇英文博客： &lt;a href=&quot;https://tailscale.com/blog/how-nat-traversal-works/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;How NAT traversal works&lt;/a&gt;。&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;设想这样一个问题：在北京和上海各有一台&lt;strong&gt;局域网的机器&lt;/strong&gt;（例如一台是家里的台式机，一，台是连接到星巴克 WiFi 的笔记本），二者都是私网 IP 地址，但可以访问公网， &lt;strong&gt;如何让这两台机器通信呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;既然二者都能访问公网，那最简单的方式当然是在公网上架设一个中继服务器： 两台机器分别连接到中继服务，后者完成双向转发。这种方式显然有很大的性能开销，而，且中继服务器很容易成为瓶颈。&lt;/p&gt;
&lt;p&gt;有没有办法不用中继，让&lt;strong&gt;两台机器直接通信&lt;/strong&gt;呢？&lt;/p&gt;
&lt;p&gt;如果有一定的网络和协议基础，就会明白这事儿是可能的。Tailscale 的这篇&lt;strong&gt;史诗级长文&lt;/strong&gt;由浅入深地展示了这种「可能」，如果完全实现本文所，介绍的技术，你将得到一个企业级的 NAT/​防火墙穿透工具。 此外，如作者所说，&lt;strong&gt;去中心化软件&lt;/strong&gt;领域中的许多有趣想法，简化之后其实都变成了 &lt;strong&gt;跨过公网（互联网）实现端到端直连&lt;/strong&gt; 这一问题，因此本文的意义并不仅限于 NAT 穿透本身。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;由于译者水平有限，本文不免存在遗漏或错误之处。如有疑问，请查阅原文。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下是译文。&lt;/p&gt;
&lt;p&gt;在前一篇文章 &lt;a href=&quot;https://tailscale.com/blog/how-tailscale-works/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;How Tailscale Works&lt;/a&gt; 中， 我们已经用较长篇幅介绍了 Tailscale 是如何工作的。但其中并没有详细描述我们是 &lt;strong&gt;如何穿透 NAT 设备，从而实现终端设备直连的&lt;/strong&gt; —— 不管这些终端之间，有什么设备（防火墙、NAT 等），以及有多少设备。本文试图补足这一内容。&lt;/p&gt;
&lt;h2&gt;1.1 背景：IPv4 地址短缺，引入 NAT&lt;/h2&gt;
&lt;p&gt;全球 IPv4 地址早已不够用，因此人们发明了 NAT（网络地址转换）来缓解这个问题。&lt;/p&gt;
&lt;p&gt;简单来说，大部分机器都使用&lt;strong&gt;私有 IP 地址&lt;/strong&gt;，如果它们需要访问公网服务，那么，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;出向流量：需要经过一台 NAT 设备，它会对流量进行 SNAT，将私有 srcIP+Port 转，换成 NAT 设备的公网 IP+Port（这样应答包才能回来），然后再将包发出去；&lt;/li&gt;&lt;li&gt;应答流量（入向）：到达 NAT 设备后进行相反的转换，然后再转发给客户端。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;整个过程对双方透明。&lt;/p&gt;

&lt;blockquote&gt;更多关于 NAT 的内容，可参考 &lt;a href=&quot;https://arthurchiao.art/blog/nat-zh/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;(译) NAT — 网络地址转换（2016）&lt;/a&gt;。 译注。&lt;/blockquote&gt;

&lt;p&gt;以上是本文所讨论问题的&lt;strong&gt;基本背景&lt;/strong&gt;。&lt;/p&gt;
&lt;h2&gt;1.2 需求：两台经过 NAT 的机器建立点对点连接&lt;/h2&gt;
&lt;p&gt;在以上所描述的 NAT 背景下，我们从最简单的问题开始：如何在两台经过 NAT 的机器之间建立 &lt;strong&gt;点对点连接&lt;/strong&gt;（直连）。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-intro.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-intro.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;直接用机器的 IP 互连显然是不行的，因为它们都是私有 IP（例如 &lt;code&gt;192.168.1.x&lt;/code&gt;）。 在 Tailscale 中，我们会建立一个 &lt;strong&gt;WireGuard® 隧道&lt;/strong&gt; 来解决这个问题 —— 但这并不是太重要，因为我们将&lt;strong&gt;过去几代人努力&lt;/strong&gt;都整合到了一个工具集， &lt;strong&gt;这些技术广泛适用于各种场景&lt;/strong&gt;。例如，&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://webrtc.org/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WebRTC&lt;/a&gt; 使用这些技术在浏览器之间完成 peer-​to-​peer 语音、视频和数据传输，&lt;/li&gt;&lt;li&gt;&lt;strong&gt;VoIP 电话和一些视频游戏&lt;/strong&gt;也使用类似机制，虽然不是所有情况下都很成功。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;接下来，本文将&lt;strong&gt;在一般意义上讨论这些技术&lt;/strong&gt;，并在合适的地方拿 Tailscale 和其他一些东西作为例子。&lt;/p&gt;
&lt;h2&gt;1.3 方案：NAT 穿透&lt;/h2&gt;
&lt;h3&gt;1.3.1 两个必备前提：UDP + 能直接控制 socket&lt;/h3&gt;
&lt;p&gt;如果想&lt;strong&gt;设计自己的协议来实现 NAT 穿透&lt;/strong&gt;，那必须满足以下两个条件：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;&lt;strong&gt;协议应该基于 UDP&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;理论上用 TCP 也能实现，但它会给本已相当复杂的问题再增加一层复杂性， 甚至还需要定制化内核 —— 取决于你想实现到什么程度。本文接下来都将关注在 UDP 上。&lt;/p&gt;
&lt;p&gt;如果考虑 TCP 是想在 NAT 穿透时获得&lt;strong&gt;面向流的连接&lt;/strong&gt;（ stream-​oriented connection），可以考虑用 &lt;strong&gt;QUIC&lt;/strong&gt; 来替代，它构，建在 UDP 之上，因此我们能将关注点放在 UDP NAT 穿透，而仍然能获得一个，很好的流协议（stream protocol）。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;对收发包的 &lt;strong&gt;socket 有直接控制权&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;例如，从经验上来说，无法基于某个现有的网络库实现 NAT 穿透，因为我们 &lt;strong&gt;必须在使用的「主要」协议之外，发送和接收额外的数据包&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;某些协议（例如 WebRTC）将 NAT 穿透与其他部分紧密集成。但如果你在构建自己的协议， &lt;strong&gt;建议将 NAT 穿透作为一个独立实体，与主协议并行运行&lt;/strong&gt;，二者仅，仅是共享 socket 的关系，如下图所示，这将带来很大帮助：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-deep-integration.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-deep-integration.png&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;h3&gt;1.3.2 保底方式：中继&lt;/h3&gt;
&lt;p&gt;在某些场景中，直接访问 socket 这一条件可能很难满足。&lt;/p&gt;
&lt;p&gt;退而求其次的一个方式是设置一个 local proxy（本地代理），主协议与这个 proxy 通信 ，后者来完成 NAT 穿透，将包中继（relay）给对端。这种方式增加了一个额外的间接层 ，但好处是：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;仍然能获得 NAT 穿透，&lt;/li&gt;&lt;li&gt;&lt;strong&gt;不需要对已有的应用程序做任何改动&lt;/strong&gt;。&lt;/li&gt;&lt;/ol&gt;
&lt;h2&gt;1.4 挑战：有状态防火墙和 NAT 设备&lt;/h2&gt;
&lt;p&gt;有了以上铺垫，下面就从最基本的原则开始，一步步看如何实现一个企业级的 NAT 穿透方案。&lt;/p&gt;
&lt;p&gt;我们的&lt;strong&gt;目标&lt;/strong&gt;是：&lt;strong&gt;在两个设备之间通过 UDP 实现双向通信&lt;/strong&gt;， 有了这个基础，上层的其他协议（WireGuard, QUIC, WebRTC 等）就能做一些更酷的事情。&lt;/p&gt;
&lt;p&gt;但即便这个看似最基本的功能，在实现上也要解决&lt;strong&gt;两个障碍&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;有状态防火墙&lt;/li&gt;&lt;li&gt;NAT 设备&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;有状态防火墙是以上两个问题中相对比较容易解决的。实际上，&lt;strong&gt;大部分 NAT 设备都自带了一个有状态防火墙&lt;/strong&gt;， 因此要解决第二个问题，必须先解决有第一个问题。&lt;/p&gt;
&lt;p&gt;有状态防火墙具体有很多种类型，有些你可能见过：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Windows Defender firewall&lt;/li&gt;&lt;li&gt;Ubuntu’s ufw (using iptables/​nftables)&lt;/li&gt;&lt;li&gt;BSD/​macOS &lt;code&gt;pf&lt;/code&gt;&lt;/li&gt;&lt;li&gt;AWS Security Groups（&lt;strong&gt;安全组&lt;/strong&gt;）&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;2.1 有状态防火墙&lt;/h2&gt;
&lt;h3&gt;2.1.1 默认行为（策略）&lt;/h3&gt;
&lt;p&gt;以上防火墙的配置都是很灵活的，但大部分配置默认都是如下行为：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;允许所有出向连接&lt;/strong&gt;（allows all 「outbound」 connections）&lt;/li&gt;&lt;li&gt;&lt;strong&gt;禁止所有入向连接&lt;/strong&gt;（blocks all 「inbound」 connections）&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;可能有少量例外规则，例如 allowing inbound SSH。&lt;/p&gt;
&lt;h3&gt;2.1.2 如何区分入向和出向包&lt;/h3&gt;
&lt;p&gt;连接（connection）和方向（direction）都是协议设计者头脑中的概念，到了 &lt;strong&gt;物理传输层，每个连接都是双向的&lt;/strong&gt;；允许所有的包双向传输。 那&lt;strong&gt;防火墙是如何区分哪些是入向包、哪些是出向包的呢&lt;/strong&gt;？ 这就要回到&lt;strong&gt;「有状态」（stateful）&lt;/strong&gt;这三个字了：有状态防火墙会记录它，看到的每个包，当收到下一个包时，会利用这些信息（状态）来判断应该做什么。&lt;/p&gt;
&lt;p&gt;对 UDP 来说，规则很简单：如果防火墙之前看到过一个出向包（outbound），就会允许，相应的入向包（inbound）通过，以下图为例：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-firewalls-1a.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-firewalls-1a.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;笔记本电脑中自带了一个防火墙，当该防火墙看到从这台机器出去的 &lt;code&gt;2.2.2.2:1234 -&amp;gt; 5.5.5.5:5678&lt;/code&gt; 包时，就会记录一下：&lt;code&gt;5.5.5.5:5678 -&amp;gt; 2.2.2.2:1234&lt;/code&gt; 入向包应该放行。 &lt;strong&gt;这里的逻辑&lt;/strong&gt;是：我们信任的世界（即笔记本）想主动与 &lt;code&gt;5.5.5.5:5678&lt;/code&gt; 通信，因此应该放行（allow）其回包路径。&lt;/p&gt;

&lt;blockquote&gt;某些&lt;strong&gt;非常&lt;/strong&gt;宽松的防火墙只要看到有从 &lt;code&gt;2.2.2.2:1234&lt;/code&gt; 出去的包，就，会允许所有从外部进入 &lt;code&gt;2.2.2.2:1234&lt;/code&gt; 的流量。这种防火墙对我们的 NAT 穿透来说非，常友好，但已经越来越少见了。&lt;/blockquote&gt;

&lt;h2&gt;2.2 防火墙朝向（face-off）与穿透方案&lt;/h2&gt;
&lt;h3&gt;2.2.1 防火墙朝向相同&lt;/h3&gt;
&lt;h4&gt;场景特点：服务端 IP 可直接访问&lt;/h4&gt;
&lt;p&gt;在 NAT 穿透场景中，以上默认规则对 UDP 流量的影响不大 —— 只要&lt;strong&gt;路径上所有防火墙的「朝向」是一样的&lt;/strong&gt;。 一般来说，从内网访问公网上的某个服务器都属于这种情况。&lt;/p&gt;
&lt;p&gt;我们唯一的要求是：&lt;strong&gt;连接必须是由防火墙后面的机器发起的&lt;/strong&gt;。这是因为，在它主动和别人通信之前，没人能主动和它通信，如下图所示：&lt;/p&gt;
&lt;h4&gt;穿透方案：客户端直连服务端，或 hub-​and-​spoke 拓扑&lt;/h4&gt;
&lt;p&gt;&lt;img alt=&quot;nat-firewalls-2.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-firewalls-2.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;但上图是&lt;strong&gt;假设了&lt;/strong&gt;通信双方中，其中一端&lt;strong&gt;（服务端）是能直接访问到的&lt;/strong&gt;。 在 VPN 场景中，这就形成了所谓的 &lt;strong&gt;hub-​and-​spoke 拓扑&lt;/strong&gt;：中心的 hub 没有任何防火墙策略，谁都能访问到； 防火墙后面的 spokes 连接到 hub。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-firewalls-3.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-firewalls-3.png&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;2.2.2 防火墙朝向不同&lt;/h3&gt;
&lt;h4&gt;场景特点：服务端 IP 不可直接访问&lt;/h4&gt;
&lt;p&gt;但如果两个「客户端」想直连，以上方式就不行了，此时两边的防火墙相向而立，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-firewalls-4.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-firewalls-4.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;根据前面的讨论，这种情况意味着：&lt;strong&gt;两边要同时发起连接请求&lt;/strong&gt;，但也意味着，两边都无法发起有效请求，因为对方先发起请求才能在它的防火墙上打开一条缝让我们进去！ 如何破解这个问题呢？一种方式是&lt;strong&gt;让用户重新配置一边或两边的防火墙，打开一个端口&lt;/strong&gt;， 允许对方的流量进来。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;这显然对用户不友好，在像 Tailscale 这样的 mesh 网络中的扩展性也不好，在 mesh 网络中，我们假设对端会以一定的粒度在公网上移动。&lt;/li&gt;&lt;li&gt;此外，在很多情况下用户也没有防火墙的控制权限：例如在咖啡馆或机场中，连接的路，由器是不受你控制的（否则你可能就有麻烦了）。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;因此，我们需要寻找一种不用重新配置防火墙的方式。&lt;/p&gt;
&lt;h4&gt;穿透方案：两边同时主动建连，在本地防火墙为对方打开一个洞&lt;/h4&gt;
&lt;p&gt;解决的思路还是先重新审视前面提到的有状态防火墙规则：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;对于 UDP，其规则（逻辑）是：&lt;strong&gt;包必须先出去才能进来&lt;/strong&gt;（packets must flow out before packets can flow back in）。&lt;/li&gt;&lt;li&gt;注意，这里除了要满足包的 IP 和端口要匹配这一条件之外，&lt;strong&gt;并没有要求包必须是相关的&lt;/strong&gt;（related）。 换句话说，只要某些包带着正确的源和目的地址出去了，&lt;strong&gt;任何看起来像是响应的包都会被防火墙放进来&lt;/strong&gt; —— 即使对端根本没收到你发出去的包。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;因此，要穿透这些有状态防火墙，我们只需要&lt;strong&gt;共享一些信息：让两端提前知道对方使用的 ip:port&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;手动静态配置是一种方式，但显然扩展性不好；&lt;/li&gt;&lt;li&gt;我们开发了一个 &lt;a href=&quot;https://tailscale.com/blog/how-tailscale-works/#the-control-plane-key-exchange-and-coordination&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;coordination server&lt;/a&gt;， 以灵活、安全的方式来同步 &lt;code&gt;ip:port&lt;/code&gt; 信息。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;有了对方的 &lt;code&gt;ip:port&lt;/code&gt; 信息之后，两端开始给对方发送 UDP 包。在这个过程中，我们预，料到某些包将会被丢弃。因此，双方&lt;strong&gt;必须要接受某些包会丢失的事实&lt;/strong&gt;， 因此如果是重要信息，你必须自己准备好重传。对 UDP 来说丢包是可接受的，但这里尤其需要接受。&lt;/p&gt;
&lt;p&gt;来看一下具体建连（穿透）过程：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;如图所示，笔记本出去的第一包，&lt;code&gt;2.2.2.2:1234 -&amp;gt; 7.7.7.7:5678&lt;/code&gt;，穿过 Windows Defender 防火墙进入到公网。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-firewalls-5a.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-firewalls-5a.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;对方的防火墙会将这个包拦截掉，因为它没有 &lt;code&gt;7.7.7.7:5678 -&amp;gt; 2.2.2.2:1234&lt;/code&gt; 的流量记录。 但另一方面，Windows Defender 此时已经记录了出向连接，因此会允许 &lt;code&gt;7.7.7.7:5678 -&amp;gt; 2.2.2.2:1234&lt;/code&gt; 的应答包进来。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;接着，第一个 &lt;code&gt;7.7.7.7:5678 -&amp;gt; 2.2.2.2:1234&lt;/code&gt; 穿过它自己的防火墙到达公网。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-firewalls-5b.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-firewalls-5b.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;到达客户端侧时，Windows Defender &lt;strong&gt;认为这是刚才出向包的应答包，因此就放行它进入了！&lt;/strong&gt; 此外，右侧的防火墙此时也记录了：&lt;code&gt;2.2.2.2:1234 -&amp;gt; 7.7.7.7:5678&lt;/code&gt; 的包应该放行。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;笔记本收到服务器发来的包之后，发送一个包作为应答。这个包穿过 Windows Defender 防火墙，和服务端防火墙（因为这是对服务端发送的包的应答包），达到服务端。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-firewalls-5c.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-firewalls-5c.png&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;成功！这样我们就建立了一个&lt;strong&gt;穿透两个相向防火墙&lt;/strong&gt;的双向通信连接。 而初看之下，这项任务似乎是不可能完成的。&lt;/p&gt;
&lt;h2&gt;2.3 关于穿透防火墙的一些思考&lt;/h2&gt;
&lt;p&gt;穿透防火墙并非永远这么轻松，有时会受一些第三方系统的间接影响，需要仔细处理。 那穿透防火墙需要注意什么呢？重要的一点是：&lt;strong&gt;通信双方必须几乎同时发起通信&lt;/strong&gt;， 这样才能在路径上的防火墙打开一条缝，而且两端还都是活着的。&lt;/p&gt;
&lt;h3&gt;2.3.1 双向主动建连：旁路信道&lt;/h3&gt;
&lt;p&gt;如何实现「同时」呢？一种方式是两端不断重试，但显然这种方式很浪费资源。假如双方都，知道何时开始建连就好了。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;这听上去是&lt;strong&gt;鸡生蛋蛋生鸡的问题&lt;/strong&gt;了：&lt;strong&gt;双方想要通信，必须先提前通个信&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;
&lt;p&gt;但实际上，我们可以通过&lt;strong&gt;旁路信道&lt;/strong&gt;（side channel）来达到这个目的 ，并且这个旁路信道并不需要很 fancy：它可以有几秒钟的延迟、只需要传送几 KB 的，信息，因此即使是一个配置非常低的虚拟机，也能为几千台机器提供这样的旁路通信服务。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在遥远的过去，我曾用 XMPP 聊天消息作为旁路，效果非常不错。&lt;/li&gt;&lt;li&gt;另一个例子是 WebRTC，它需要你提供一个自己的「信令信道」（signalling channel， 这个词也暗示了 WebRTC 的 IP telephony ancestry），并将其配置到 WebRTC API。&lt;/li&gt;&lt;li&gt;在 Tailscale，我们的协调服务器（coordination server）和 DERP (Detour Encrypted Routing Protocol) 服务器集群是我们的旁路信道。&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;h3&gt;2.3.2 非活跃连接被防火墙清理&lt;/h3&gt;
&lt;p&gt;有状态防火墙内存通常比较有限，因此会定期清理不活跃的连接（UDP 常见的是 30s）， 因此要保持连接 alive 的话需要定期通信，否则就会被防火墙关闭，为避免这个问题， 我们，&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;要么定期向对方发包来 keepalive，&lt;/li&gt;&lt;li&gt;要么有某种带外方式来按需重建连接。&lt;/li&gt;&lt;/ol&gt;
&lt;h3&gt;2.3.3 问题都解决了？不，挑战刚刚开始&lt;/h3&gt;
&lt;p&gt;对于防火墙穿透来说， 我们&lt;strong&gt;并不需要关心路径上有几堵墙&lt;/strong&gt; —— 只要它们是有状态防火墙且允许出，向连接，这种同时发包（simultaneous transmission）机制就能穿透任意多层防火墙。 这一点对我们来说非常友好，因为只需要实现一个逻辑，然后能适用于任何地方了。&lt;/p&gt;
&lt;p&gt;…对吗？&lt;/p&gt;
&lt;p&gt;其实，&lt;strong&gt;不完全对&lt;/strong&gt;。这个机制有效的前提是：我们能&lt;strong&gt;提前知道对方的 ip:port&lt;/strong&gt;。 而这就涉及到了我们今天的主题：NAT，它会使前面我们刚获得的一点满足感顿时消失。&lt;/p&gt;
&lt;p&gt;下面，&lt;strong&gt;进入本文正题&lt;/strong&gt;。&lt;/p&gt;
&lt;h2&gt;3.1 NAT 设备与有状态防火墙&lt;/h2&gt;
&lt;p&gt;可以认为 NAT 设备是一个&lt;strong&gt;增强版的有状态防火墙&lt;/strong&gt;，虽然它的增强功能，对于本文场景来说并不受欢迎：除了前面提到的有状态拦截/放行功能之外，它们还会在数据包经过时修改这些包。&lt;/p&gt;
&lt;h2&gt;3.2 NAT 穿透与 SNAT/​DNAT&lt;/h2&gt;
&lt;p&gt;具体来说，NAT 设备能完成某种类型的网络地址转换，例如，替换源或目的 IP 地址或端口。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;讨论连接问题和 NAT 穿透问题时&lt;/strong&gt;，我们&lt;strong&gt;只会受 source NAT —— SNAT 的影响&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;DNAT 不会影响 NAT 穿透。&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;3.3 SNAT 的意义：解决 IPv4 地址短缺问题&lt;/h2&gt;
&lt;p&gt;SNAT 最常见的使用场景是&lt;strong&gt;将很多设备连接到公网，而只使用少数几个公网 IP&lt;/strong&gt;。 例如对于消费级路由器，会将所有设备的（私有） IP 地址映射为&lt;strong&gt;单个&lt;/strong&gt;连接到公网的 IP 地址。&lt;/p&gt;
&lt;p&gt;这种方式存在的意义是：我们有远多于可用公网 IP 数量的设备需要连接到公网，（至少，对 IPv4 来说如此，IPv6 的情况后面会讨论）。NAT 使多个设备能共享同一 IP 地址，因，此即使面临 IPv4 地址短缺的问题，我们仍然能不断扩张互联网的规模。&lt;/p&gt;
&lt;h2&gt;3.4 SNAT 过程：以家用路由器为例&lt;/h2&gt;
&lt;p&gt;假设你的笔记本连接到家里的 WiFi，下面看一下它连接到公网某个服务器时的情形：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;笔记本发送 UDP packet &lt;code&gt;192.168.0.20:1234 -&amp;gt; 7.7.7.7:5678&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-overview-1.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-overview-1.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这一步就好像笔记本有一个公网 IP 一样，但源地址 &lt;code&gt;192.168.0.20&lt;/code&gt; 是私有地址， 只能出现在私有网络，公网不认，收到这样的包时它不知道如何应答。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;家用路由器出场，执行 SNAT。&lt;/p&gt;
&lt;p&gt;包经过路由器时，路由器发现这是一个它没有见过的新会话（session）。 它知道 &lt;code&gt;192.168.0.20&lt;/code&gt; 是私有 IP，公网无法给这样的地址回包，但它有办法解决：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;在它&lt;strong&gt;自己的公网 IP 上挑一个可用的 UDP 端口&lt;/strong&gt;，例如 &lt;code&gt;2.2.2.2:4242&lt;/code&gt;，&lt;/li&gt;&lt;li&gt;然后创建一个 &lt;em&gt;NAT mapping&lt;/em&gt;：&lt;code&gt;192.168.0.20:1234&lt;/code&gt; &lt;code&gt;&amp;lt;--&amp;gt;&lt;/code&gt; &lt;code&gt;2.2.2.2:4242&lt;/code&gt;，&lt;/li&gt;&lt;li&gt;然后将包发到公网，此时源地址变成了 &lt;code&gt;2.2.2.2:4242&lt;/code&gt; 而不是原来的 &lt;code&gt;192.168.0.20:1234&lt;/code&gt;。因此服务端看到的是转换之后地址，&lt;/li&gt;&lt;li&gt;接下来，每个能匹配到这条映射规则的包，都会被路由器改写 IP 和，端口。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;&lt;img alt=&quot;nat-overview-2.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-overview-2.png&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;反向路径是类似的，路由器会执行相反的地址转换，将 &lt;code&gt;2.2.2.2:4242&lt;/code&gt; 变回 &lt;code&gt;192.168.0.20:1234&lt;/code&gt;。对于笔记本来说，它根本感知不知道这正反两次变换过程。&lt;/p&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;这里是拿家用路由器作为例子，但&lt;strong&gt;办公网的原理是一样的&lt;/strong&gt;。不同之处在，于，办公网的 NAT 可能有多台设备组成（高可用、容量等目的），而且它们有不止一个公，网 IP 地址可用，因此在选择可用的公网 &lt;code&gt;ip:port&lt;/code&gt; 来做映射时，选择空间更大，能支持，更多客户端。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-overview-3.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-overview-3.png&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;3.5 SNAT 给穿透带来的挑战&lt;/h2&gt;
&lt;p&gt;现在我们遇到了与前面有状态防火墙类似的情况，但这次是 NAT 设备：&lt;strong&gt;通信双方，不知道对方的 ip:port 是什么&lt;/strong&gt;，因此&lt;strong&gt;无法主动建连&lt;/strong&gt;，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-stun-1.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-stun-1.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;但这次比有状态防火墙更糟糕，严格来说，&lt;strong&gt;在双方发包之前，根本无法确定（自己及对方的）ip:port 信息&lt;/strong&gt;，因为 &lt;strong&gt;只有出向包经过路由器之后才会产生 NAT mapping&lt;/strong&gt;（即，可以被对方连接的 &lt;code&gt;ip:port&lt;/code&gt; 信息）。&lt;/p&gt;
&lt;p&gt;因此我们又回到了与防火墙遇到的问题，并且情况更糟糕：&lt;strong&gt;双方都需要主动和对，方建连，但又不知道对方的公网地址是多少&lt;/strong&gt;，只有当对方先说话之后，我们才能拿到它的地址信息。&lt;/p&gt;
&lt;p&gt;如何破解以上死锁呢？这就轮到 &lt;a href=&quot;https://en.wikipedia.org/wiki/STUN&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;STUN&lt;/a&gt; 登场了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/STUN&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;STUN&lt;/a&gt; 既是一些对 NAT 设备行为的详细研究，也是一种协助 NAT 穿透的协议。本文主要关注 STUN 协议。&lt;/p&gt;
&lt;h2&gt;4.1 STUN 原理&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;STUN 基于一个简单的观察&lt;/strong&gt;：从一个会被 NAT 的客户端访问公网服务器时， 服务器看到的是 &lt;strong&gt;NAT 设备的公网 ip:port 地址&lt;/strong&gt;，而非该 &lt;strong&gt;客户端的局域网 ip:port 地址&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;也就是说，服务器能告诉客户端&lt;strong&gt;它看到的客户端的 ip:port 是什么&lt;/strong&gt;。 因此，只要将这个信息以某种方式告诉通信对端（peer），后者就知道该和哪个地址建连了！ 这样就又&lt;strong&gt;简化为前面的防火墙穿透问题了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本质上这就是 &lt;strong&gt;STUN 协议的工作原理&lt;/strong&gt;，如下图所示：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;笔记本向 STUN 服务器发送一个请求：「从你的角度看，我的地址什么？」&lt;/li&gt;&lt;li&gt;STUN 服务器返回一个响应：「我看到你的 UDP 包是从这个地址来的：&lt;code&gt;ip:port&lt;/code&gt;」。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;nat-stun-2.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-stun-2.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;The STUN protocol has a bunch more stuff in it — there’s a way of obfuscating the &lt;code&gt;ip:port&lt;/code&gt;
 in the response to stop really broken NATs from mangling the packet’s 
payload, and a whole authentication mechanism that only really gets used
 by TURN and ICE, sibling protocols to STUN that we’ll talk about in a 
bit. We can ignore all of that stuff for address discovery.&lt;/blockquote&gt;

&lt;h2&gt;4.2 为什么 NAT 穿透逻辑和主协议要共享同一个 socket&lt;/h2&gt;
&lt;p&gt;理解了 STUN 原理，也就能理解为什么我们在文章开头说，如果 &lt;strong&gt;要实现自己的 NAT 穿透逻辑和主协议，就必须让二者共享同一个 socket&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;每个 socket 在 NAT 设备上都对应一个映射关系（私网地址 -&amp;gt; 公网地址），&lt;/li&gt;&lt;li&gt;STUN 服务器只是&lt;strong&gt;辅助&lt;/strong&gt;穿透的基础设施，&lt;/li&gt;&lt;li&gt;与 STUN 服务器通信之后，在 NAT 及防火墙设备上打开了一个连接，允许入向包进来（回忆前面内容， &lt;strong&gt;只要目的地址对，UDP 包就能进来&lt;/strong&gt;，不管这些包是不是从 STUN 服务器来的），&lt;/li&gt;&lt;li&gt;因此，接下来只要将这个地址告诉我们的通信对端（peer），让它往这个地址发包，就能实现穿透了。&lt;/li&gt;&lt;/ol&gt;
&lt;h2&gt;4.3 STUN 的问题：不能穿透所有 NAT 设备（例如企业级 NAT 网关）&lt;/h2&gt;
&lt;p&gt;有了 STUN，我们的&lt;strong&gt;穿透目的似乎已经实现了&lt;/strong&gt;：每台机器都通过 STUN 来获取自己的私网 socket 对应的公网 &lt;code&gt;ip:port&lt;/code&gt;，然后把这个信息告诉对端，然后两端，同时发起穿透防火墙的尝试，后面的过程就和上一节介绍的防火墙穿透一样了，&lt;strong&gt;对吗&lt;/strong&gt;？&lt;/p&gt;
&lt;p&gt;答案是：&lt;strong&gt;看情况&lt;/strong&gt;。某些情况下确实如此，但有些情况下却不行。通常来说，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;对于大部分&lt;strong&gt;家用路由器场景&lt;/strong&gt;，这种方式是没问题的；&lt;/li&gt;&lt;li&gt;但对于一些&lt;strong&gt;企业级 NAT 网关&lt;/strong&gt;来说，这种方式无法奏效。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;NAT 设备的说明书上越强调它的安全性，STUN 方式失败的可能性就越高。（但注意，从实际意义上来说， &lt;strong&gt;NAT 设备在任何方面都并不会增强网络的安全性&lt;/strong&gt;，但这不是本文重点，因此不展开。）&lt;/p&gt;
&lt;h2&gt;4.4 重新审视 STUN 的前提&lt;/h2&gt;
&lt;p&gt;再次审视前面&lt;strong&gt;关于 STUN 的假设&lt;/strong&gt;：当 STUN 服务器告诉客户端在公网看来它的地址是 &lt;code&gt;2.2.2.2:4242&lt;/code&gt; 时，那所有目的地址是 &lt;code&gt;2.2.2.2:4242&lt;/code&gt; 的包就都能穿透防火墙到达该客户端。&lt;/p&gt;
&lt;p&gt;这也正是问题所在：&lt;strong&gt;这一点并不总是成立&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;某些 NAT 设备的行为与我们假设的一致，它们的有状态防火墙组件只要看到有客户端自己，发起的出向包，就会允许相应的入向包进入；因此只要利用 STUN 功能，再加上两端同时，发起防火墙穿透，就能把连接打通；&lt;/p&gt;

&lt;blockquote&gt;in theory, there are also NAT devices that are super 
relaxed, and don’t ship with stateful firewall stuff at all. In those, 
you don’t even need simultaneous transmission, the STUN request gives 
you an internet &lt;code&gt;ip:port&lt;/code&gt; that anyone can connect to with no further ceremony. If such devices do still exist, they’re increasingly rare.&lt;/blockquote&gt;

&lt;/li&gt;&lt;li&gt;
&lt;p&gt;另外一些 NAT 设备就要困难很多了，它会&lt;strong&gt;针对每个目的地址来生成一条相应的映射关系&lt;/strong&gt;。 在这样的设备上，如果我们用相同的 socket 来分别发送数据包到 &lt;code&gt;5.5.5.5:1234&lt;/code&gt; and &lt;code&gt;7.7.7.7:2345&lt;/code&gt;，我们就会得到 &lt;code&gt;2.2.2.2&lt;/code&gt; 上的两个不同的端口，每个目的地址对应一个。 如果反向包的端口用的不对，包就无法通过防火墙。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-stun-3.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-stun-3.png&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;知道 NAT 设备的行为并不是完全一样之后，我们来引入一些正式术语。&lt;/p&gt;
&lt;h2&gt;5.1 早期术语&lt;/h2&gt;
&lt;p&gt;如果之前接触过 NAT 穿透，可能会听说过下面这些名词：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;「Full Cone」&lt;/li&gt;&lt;li&gt;「Restricted Cone」&lt;/li&gt;&lt;li&gt;「Port-​Restricted Cone」&lt;/li&gt;&lt;li&gt;「Symmetric」 NATs&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;这些都是 NAT 穿透领域的早期术语。&lt;/p&gt;
&lt;p&gt;但其实这些术语&lt;strong&gt;相当让人困惑&lt;/strong&gt;。我每次都要，查一下 Restricted Cone NAT 
是什么意思。从实际经验来看，我并不是唯一对此感到困惑的人。 例如，如今互联网上将 「easy」 NAT 归类为 Full 
Cone，而实际上它们更应该归类为 Port-​Restricted Cone。&lt;/p&gt;
&lt;h2&gt;5.2 近期研究与新术语&lt;/h2&gt;
&lt;p&gt;最近的一些研究和 RFC 已经提出了一些更准确的术语。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;首先，它们明确了如下事实：&lt;strong&gt;NAT 设备的行为差异表现在多个维度&lt;/strong&gt;， 而并非只有早期研究中所说的 「cone」 这一个维度，因此&lt;strong&gt;基于 「cone」 来划分类别并不是很有帮助&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;其次，新研究和新术语能&lt;strong&gt;更准确地描述 NAT 在做什么&lt;/strong&gt;。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;前面提到的所谓 &lt;strong&gt;「easy」 和 「hard」 NAT，只在一个维度有不同&lt;/strong&gt;：NAT 映射是否考虑到目的地址信息。 &lt;a href=&quot;https://tools.ietf.org/html/rfc4787&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;RFC 4787&lt;/a&gt; 中，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;将 &lt;strong&gt;easy NAT 及其变种&lt;/strong&gt;称为 「Endpoint-​Independent Mapping」 (&lt;strong&gt;EIM，终点无关的映射&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;但是，从&lt;strong&gt;「命名很难」&lt;/strong&gt;这一程序员界的伟大传统来说，EIM 这个词其实，也并不是 100% 准确，因为这种 NAT 仍然依赖 endpoint，只不过依赖的是源 endpoint：每个 source &lt;code&gt;ip:port&lt;/code&gt; 对应一个映射 —— 否则你的包就会和别人的包混在一起，导致混乱。&lt;/p&gt;
&lt;p&gt;严格来说，EIM 应该称为 「Destination Endpoint Independent Mapping」 (DEIM?)， 但这个名字太拗口了，而且按照惯例，Endpoint 永远指的是 Destination Endpoint。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;将 &lt;strong&gt;hard NAT 以及变种&lt;/strong&gt;称为 「Endpoint-​Dependent Mapping」（&lt;strong&gt;EDM，终点相关的映射&lt;/strong&gt;） 。&lt;/p&gt;
&lt;p&gt;EDM 中还有一个子类型，依据是只根据 dst_​ip 做映射，还是根据 dst_​ip + dst_​port 做映射。 对于 NAT 穿透来说，这种区分对来说是一样的：它们&lt;strong&gt;都会导致 STUN 方式不可用&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;5.3 老的 cone 类型划分&lt;/h2&gt;
&lt;p&gt;你可能会有疑问：根据是否依赖 endpoint 这一条件，只能组合出两种可能，那为什么传，统分类中会有四种 cone 类型呢？答案是 &lt;strong&gt;cone 包含了两个正交维度的 NAT 行为&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;NAT 映射行为&lt;/strong&gt;：前面已经介绍过了，&lt;/li&gt;&lt;li&gt;&lt;strong&gt;有状态防火墙行为&lt;/strong&gt;：与前者类似，也是分为与 endpoint 相关还是无关两种类型。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;因此最终组合如下：&lt;/p&gt;
&lt;p&gt;NAT Cone Types&lt;/p&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;th&gt;&lt;br /&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Endpoint 无关 NAT mapping&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Endpoint 相关 NAT mapping (all types)&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Endpoint 无关防火墙&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Full Cone NAT&lt;/td&gt;
&lt;td&gt;N/​A*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Endpoint 相关防火墙 (dst. IP only)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Restricted Cone NAT&lt;/td&gt;
&lt;td&gt;N/​A*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Endpoint 相关防火墙 (dst. IP+port)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Port-​Restricted Cone NAT&lt;/td&gt;
&lt;td&gt;Symmetric NAT&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;分解到这种程度之后就可以看出，&lt;strong&gt;cone 类型对 NAT 穿透场景来说并没有什么意义&lt;/strong&gt;。 我们关心的只有一点：是否是 Symmetric —— 换句话说，一个 NAT 设备是 EIM 还是 EDM 类型的。&lt;/p&gt;
&lt;h2&gt;5.4 针对 NAT 穿透场景：简化 NAT 分类&lt;/h2&gt;
&lt;p&gt;以上讨论可知，虽然理解防火墙的具体行为很重要，但对于编写 NAT 穿透代码来说，这一点并不重要。 我们的&lt;strong&gt;两端同时发包&lt;/strong&gt;方式（simultaneous transmission trick）能 &lt;strong&gt;有效穿透以上三种类型的防火墙&lt;/strong&gt;。在真实场景中， 我们主要在处理的是 IP-​and-​port endpoint-​dependent 防火墙。&lt;/p&gt;
&lt;p&gt;因此，对于实际 NAT 穿透实现，我们可以将以上分类简化成：&lt;/p&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;th&gt;&lt;br /&gt;&lt;/th&gt;
&lt;th&gt;Endpoint-​Independent NAT mapping&lt;/th&gt;
&lt;th&gt;Endpoint-​Dependent NAT mapping (dst. IP only)&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Firewall is yes&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Easy NAT&lt;/td&gt;
&lt;td&gt;Hard NAT&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;5.5 更多 NAT 规范（RFC）&lt;/h2&gt;
&lt;p&gt;想了解更多新的 NAT 术语，可参考&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;RFC &lt;a href=&quot;https://tools.ietf.org/html/rfc4787&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;4787&lt;/a&gt; (NAT Behavioral Requirements for UDP)&lt;/li&gt;&lt;li&gt;RFC &lt;a href=&quot;https://tools.ietf.org/html/rfc5382&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;5382&lt;/a&gt; (for TCP)&lt;/li&gt;&lt;li&gt;RFC &lt;a href=&quot;https://tools.ietf.org/html/rfc5508&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;5508&lt;/a&gt; (for ICMP)&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;如果自己实现 NAT，那应该（should）遵循这些 RFC 的规范，这样才能使你的 NAT 行为符合业界惯例，与其他厂商的设备或软件良好兼容。&lt;/p&gt;
&lt;h2&gt;6.1 问题回顾与保底方式（中继）&lt;/h2&gt;
&lt;p&gt;补完基础知识（尤其是定义了什么是 hard NAT）之后，回到我们的 NAT 穿透主题。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第 1~4 节已经解决了 STUN 和防火墙穿透的问题，&lt;/li&gt;&lt;li&gt;但 &lt;strong&gt;hard NAT 对我们来说是个大问题&lt;/strong&gt;，只要路径上出现一个这种设备，前面的方案就行不通了。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;准备放弃了吗？ 这才&lt;strong&gt;进入 NAT 真正有挑战的部分&lt;/strong&gt;：如果已经试过了前面介绍的所有方式，仍然不能穿透，我们该怎么办呢？&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;实际上，确实有很多 NAT 实现在这种情况下都会选择放弃，向用户报一个&lt;strong&gt;「无法连接」&lt;/strong&gt;之类的错误。&lt;/li&gt;&lt;li&gt;但对我们来说，这么快就放弃显然是不可接受的 —— 解决不了连通性问题，Tailscale 就没有存在的意义。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;我们的保底解决方式是：创建一个&lt;strong&gt;中继连接&lt;/strong&gt;（relay）实现双方的无障碍地通信。 但是，中继方式性能不是很差吗？这要看具体情况：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果能直连，那显然没必要用中继方式；&lt;/li&gt;&lt;li&gt;但如果无法直连，而中继路径又非常接近双方直连的真实路径，并且带宽足够大，那中，继方式并不会明显降低通信质量。延迟肯定会增加一点，带宽会占用一些，但 &lt;strong&gt;相比完全连接不上，还是更能让用户接受的&lt;/strong&gt;。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;不过要注意：我们只有在无法直连时才会选择中继方式。实际场景中，&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;对于大部分网络，我们都能通过前面介绍的方式实现直连，&lt;/li&gt;&lt;li&gt;剩下的长尾用中继方式来解决，并不算一个很糟的方式。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;此外，某些网络会阻止 NAT 穿透，其影响比这种 hard NAT 大多了。例如，我们观察到 UC Berkeley guest WiFi
 禁止除 DNS 流量之外的所有 outbound UDP 流量。 不管用什么 NAT 
黑科技，都无法绕过这个拦截。因此我们终归还是需要一些可靠的 fallback 机制。&lt;/p&gt;
&lt;h2&gt;6.2 中继协议：TURN、DERP&lt;/h2&gt;
&lt;p&gt;有多种中继实现方式。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TURN&lt;/strong&gt; (Traversal Using Relays around NAT)：经典方式，核心理念是&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;用户&lt;/strong&gt;（人）先去公网上的 TURN 服务器认证，成功后后者会告诉你：「我已经为你分配了 ip:port，接下来将为你中继流量」，&lt;/li&gt;&lt;li&gt;然后将这个 ip:port 地址告诉对方，让它去连接这个地址，接下去就是非常简单的客户端/服务器通信模型了。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;Tailscale 并不使用 TURN。这种协议&lt;strong&gt;用起来并不是很好&lt;/strong&gt;，而且与 STUN 不同， 它没有真正的交互性，因为互联网上并没有公开的 TURN 服务器。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;DERP (Detoured Encrypted Routing Protocol)&lt;/p&gt;
&lt;p&gt;这是我们创建的一个协议，&lt;a href=&quot;https://tailscale.com/blog/how-tailscale-works/#encrypted-tcp-relays-derp&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;DERP&lt;/a&gt;，&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;它是一个&lt;strong&gt;通用目的包中继协议，运行在 HTTP 之上&lt;/strong&gt;，而大部分网络都是允许 HTTP 通信的。&lt;/li&gt;&lt;li&gt;它根据目的公钥（destination’s public key）来中继加密的流量（encrypted payloads）。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;前面也简单提到过，DERP 既是我们在 NAT 穿透失败时的保底通信方式（此时的角色，与 TURN 
类似），也是在其他一些场景下帮助我们完成 NAT 穿透的旁路信道。 换句话说，它既是我们的保底方式，也是有更好的穿透链路时，帮助我们进行连接升 
级（upgrade to a peer-​to-​peer connection）的基础设施。&lt;/p&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;h2&gt;6.3 小结&lt;/h2&gt;
&lt;p&gt;有了「中继」这种保底方式之后，我们穿透的成功率大大增加了。 如果此时不再阅读本文接下来的内容，而是把上面介绍的穿透方式都实现了，我预计：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;90% 的情况下，你都能实现直连穿透；&lt;/li&gt;&lt;li&gt;剩下的 10% 里，用中继方式能穿透&lt;strong&gt;一些&lt;/strong&gt;（some）；&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;这已经算是一个「足够好」的穿透实现了。&lt;/p&gt;
&lt;p&gt;如果你并不满足于「足够好」，那我们可以做的事情还有很多！&lt;/p&gt;
&lt;p&gt;本节将介绍一些五花八门的 tricks，在某些特殊场景下会帮到我们。单独使用这项技术都，无法解决 NAT 穿透问题，但将它们巧妙地组合起来，我们能更加接近 100% 的穿透成功率。&lt;/p&gt;
&lt;h2&gt;7.1 穿透 hard NAT：暴力端口扫描&lt;/h2&gt;
&lt;p&gt;回忆 hard NAT 中遇到的问题，如下图所示，关键问题是：easy NAT 不知道该往 hard NAT 方的哪个 &lt;code&gt;ip:port&lt;/code&gt; 发包。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-birthday-attack-1.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-birthday-attack-1.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;但&lt;strong&gt;必须&lt;/strong&gt;要往正确的 &lt;code&gt;ip:port&lt;/code&gt; 发包，才能穿透防火墙，实现双向互通。 怎么办呢？&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;首先，我们能知道 hard NAT 的&lt;strong&gt;一些&lt;/strong&gt; &lt;code&gt;ip:port&lt;/code&gt;，因为我们有 STUN 服务器。&lt;/p&gt;
&lt;p&gt;这里先假设我们获得的这些 IP 地址都是正确的（这一点并不总是成立，但这里先这么假，设。而实际上，大部分情况下这一点都是成立的，如果对此有兴趣，可以参考 REQ-​2 in &lt;a href=&quot;https://tools.ietf.org/html/rfc4787&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;RFC 4787&lt;/a&gt;）。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;IP 地址确定了，剩下的就是端口了。总共有 65535 中可能，我们能&lt;strong&gt;遍历这个端口范围&lt;/strong&gt;吗？&lt;/p&gt;
&lt;p&gt;如果发包速度是 100 packets/s，那最坏情况下，需要 &lt;strong&gt;10 分钟&lt;/strong&gt;来找到正确的端口。 还是那句话，这虽然不是最优的，但总比连不上好。&lt;/p&gt;
&lt;p&gt;这很像是端口扫描（事实上，确实是），实际中可能会触发对方的网络入侵检测软件。&lt;/p&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;h2&gt;7.2 基于生日悖论改进暴力扫描：hard side 多开端口 + easy side 随机探测&lt;/h2&gt;
&lt;p&gt;利用 &lt;a href=&quot;https://en.wikipedia.org/wiki/Birthday_problem&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;birthday paradox&lt;/a&gt; 算法， 我们能对端口扫描进行改进。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;上一节的基本前提是：hard side 只打开一个端口，然后 easy side 暴力扫描 65535 个端口来寻找这个端口；&lt;/li&gt;&lt;li&gt;这里的改进是：在 hard size 开多个端口，例如 256 个（即同时打开 256 个 socket，目的地址都是 easy side 的 &lt;code&gt;ip:port&lt;/code&gt;）， 然后 easy side 随机探测这边的端口。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;这里省去算法的数学模型，如果你对实现干兴趣，可以看看我写的 &lt;a href=&quot;https://github.com/danderson/nat-birthday-paradox&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;python calculator&lt;/a&gt;。 计算过程是「经典」生日悖论的一个小变种。 下面是随着 easy side random probe 次数（假设 hard size 256 个端口）的变化，两边打开的端口有重合（即通信成功）的概率：&lt;/p&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;th&gt;随机探测次数&lt;/th&gt;
&lt;th&gt;成功概率&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;174&lt;/td&gt;
&lt;td&gt;50%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;256&lt;/td&gt;
&lt;td&gt;64%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1024&lt;/td&gt;
&lt;td&gt;98%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2048&lt;/td&gt;
&lt;td&gt;99.9%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;根据以上结果，如果还是假设 100 ports/​s 这样相当温和的探测速率，那 &lt;strong&gt;2 秒钟就有约 50% 的成功概率&lt;/strong&gt;。 即使非常不走运，我们仍然能在 &lt;strong&gt;20s 时几乎 100% 穿透成功&lt;/strong&gt;，而此时&lt;strong&gt;只探测了总端口空间的 4%&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;非常好！虽然这种 hard NAT 给我们带来了严重的穿透延迟，但最终结果仍然是成功的。 那么，如果是两个 hard NAT，我们还能处理吗？&lt;/p&gt;
&lt;h2&gt;7.3 双 hard NAT 场景&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&quot;nat-birthday-attack-2.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-birthday-attack-2.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这种情况下仍然可以用前面的 &lt;strong&gt;多端口+随机探测&lt;/strong&gt; 方式，但成功概率要低很多了：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;每次通过一台 hard NAT 去探测对方的端口（目的端口）时，我们&lt;strong&gt;自己同时也生成了一个随机源端口&lt;/strong&gt;，&lt;/li&gt;&lt;li&gt;这意味着我们的搜索空间变成了二维 &lt;code&gt;{src port, dst port}&lt;/code&gt; 对，而不再是之前的一维 dst port 空间。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;这里我们也不就具体计算展开，只告诉结果：仍然&lt;strong&gt;假设目的端打开 256 个端口，从源端发起 2048 次（20 秒）&lt;/strong&gt;， 成功的概率是：&lt;strong&gt;0.01%&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果你之前学过生日悖论，就并不会对这个结果感到惊讶。理论上来说，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;要达到 &lt;strong&gt;99.9% 的成功率&lt;/strong&gt;，我们需要两边各进行&lt;strong&gt;170,000 次&lt;/strong&gt;探测 —— 如果还是以 100 packets/​sec 的速度，就需要 &lt;strong&gt;28 分钟&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;要达到 &lt;strong&gt;50% 的成功率&lt;/strong&gt;，「只」需要 54,000 packets，也就是 &lt;strong&gt;9 分钟&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;如果不使用生日悖论方式，而且&lt;strong&gt;暴力穷举，需要 1.2 年时间&lt;/strong&gt;！&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;对于某些应用来说，28 分钟可能仍然是一个可接受的时间&lt;/strong&gt;。用半个小时暴力穿透 NAT 之后， 这个连接就可以一直用着 —— 除非 NAT 设备重启，那样就需要再次花半个小时穿透建个新连接。但对于，交互式应用来说，这样显然是不可接受的。&lt;/p&gt;
&lt;p&gt;更糟糕的是，如果去看常见的办公网路由器，你会震惊于它的 active session low limit 有多么低。 例如，一台 Juniper SRX 300 &lt;strong&gt;最多支持 64,000 active sessions&lt;/strong&gt;。 也就是说，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果我们想创建&lt;strong&gt;一个&lt;/strong&gt;成功的穿透连接，&lt;strong&gt;就会把它的整张 session 表打爆&lt;/strong&gt; （因为我们要暴力探测 65535 个端口，每次探测都是一条新连接记录）！ 这显然要求这台路由器能&lt;strong&gt;从容优雅地处理过载的情况&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;这只是创建一条连接带来的影响！如果 20 台机器同时对这台路由器发起穿透呢？&lt;strong&gt;绝对的灾难！&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;至此，我们通过这种方式穿透了比之前更难一些的网络拓扑。这是一个很大的成就，因为 &lt;strong&gt;家用路由器一般都是 easy NAT，hard NAT 一般都是办公网路由器或云 NAT 网关&lt;/strong&gt;。 这意味着这种方式能帮我们解决&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;home-to-office（家-&amp;gt;办公室）&lt;/li&gt;&lt;li&gt;home-​to-​cloud （家-&amp;gt;云）&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;的场景，以及一部分&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;office-​to-​cloud （办公室-&amp;gt;云）&lt;/li&gt;&lt;li&gt;cloud-​to-​cloud （云-&amp;gt;办公室）&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;场景。&lt;/p&gt;
&lt;h2&gt;7.4 控制端口映射（port mapping）过程：UPnP/NAT-PMP/PCP 协议&lt;/h2&gt;
&lt;p&gt;如果我们能&lt;strong&gt;让 NAT 设备的行为简单点&lt;/strong&gt;，不要把事情搞这么复杂，那建，立连接（穿透）就会简单很多。真有这样的好事吗？还真有，有专门的一种协议叫 &lt;strong&gt;端口映射协议&lt;/strong&gt;（port mapping protocols）。通过这种协议禁用掉前面，遇到的那些乱七八糟的东西之后，我们将得到一个非常简单的「请求-响应」。&lt;/p&gt;
&lt;p&gt;下面是三个具体的端口映射协议：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://openconnectivity.org/developer/specifications/upnp-resources/upnp/internet-gateway-device-igd-v-2-0/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;UPnP IGD&lt;/a&gt; (Universal Plug’n’Play Internet Gateway Device)&lt;/p&gt;
&lt;p&gt;最老的端口控制协议， 诞生于 1990s 晚期，因此使用了很多上世纪 90 年代的技术 （XML、SOAP、&lt;strong&gt;multicast HTTP over UDP —— 对，HTTP over UDP&lt;/strong&gt; ），而且很难准确和安全地实现这个协议。但以前很多路由器都内置了 UPnP 协议， 现在仍然很多。&lt;/p&gt;
&lt;p&gt;请求和响应：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;「你好，请将我的 &lt;code&gt;lan-ip:port&lt;/code&gt; 转发到公网（WAN）」，&lt;/li&gt;&lt;li&gt;「好的，我已经为你分配了一个公网映射 &lt;code&gt;wan-ip:port&lt;/code&gt; 」。&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;NAT-​PMP&lt;/p&gt;
&lt;p&gt;UPnP IGD 出来几年之后，Apple 推出了一个功能类似的协议，名为 &lt;a href=&quot;https://tools.ietf.org/html/rfc6886&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;NAT-​PMP&lt;/a&gt; (NAT Port Mapping Protocol)。&lt;/p&gt;
&lt;p&gt;但与 UPnP 不同，这个协议&lt;strong&gt;只&lt;/strong&gt;做端口转发，不管是在客户端还是服务端，实现起来都非常简单。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;PCP&lt;/p&gt;
&lt;p&gt;稍后一点，又出现了 NAT-​PMP v2 版，并起了个新名字&lt;a href=&quot;https://tools.ietf.org/html/rfc6887&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;PCP&lt;/a&gt; (Port Control Protocol)。&lt;/p&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;因此要更好地实现穿透，可以&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;先判断本地的默认网关上是否启用了 UPnP IGD, NAT-​PMP and PCP&lt;/strong&gt;，&lt;/li&gt;&lt;li&gt;
&lt;p&gt;如果探测发现其中任何一种协议有响应，我们就&lt;strong&gt;申请一个公网端口映射&lt;/strong&gt;，&lt;/p&gt;
&lt;p&gt;可以将这理解为一个&lt;strong&gt;加强版 STUN&lt;/strong&gt;：我们不仅能发现自己的公网 &lt;code&gt;ip:port&lt;/code&gt;，而且能指示我们的 NAT 设备对我们的通信对端友好一些 —— 但并不是为这个端口修改或添加防火墙规则。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;接下来，任何到达我们 NAT 设备的、地址是我们申请的端口的包，都会被设备转发到我们。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;但我们&lt;strong&gt;不能假设这个协议一定可用&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;本地 NAT 设备可能不支持这个协议；&lt;/li&gt;&lt;li&gt;设备支持但默认禁用了，或者没人知道还有这么个功能，因此从来没开过；&lt;/li&gt;&lt;li&gt;
&lt;p&gt;安全策略要求关闭这个特性。&lt;/p&gt;
&lt;p&gt;这一点非常常见，因为 UPnP 协议曾曝出一些高危漏洞（后面都修复了，因此如果是较新的设备，可以安全地使用 UPnP —— 
如果实现没问题）。 不幸的是，某些设备的配置中，UPnP, NAT-PMP，PCP 是放在一个开关里的（可能，统称为 「UPnP」 
功能），一开全开，一关全关。因此如果有人担心 UPnP 的安全性，他连另，外两个也用不了。&lt;/p&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;最后，终归来说，&lt;strong&gt;只要这种协议可用，就能有效地减少一次 NAT&lt;/strong&gt;，大大方便建连过程。 但接下来看一些不常见的场景。&lt;/p&gt;
&lt;h2&gt;7.5 多 NAT 协商（Negotiating numerous NATs）&lt;/h2&gt;
&lt;p&gt;目前为止，我们看到的客户端和服务端都各只有一个 NAT 设备。如果有多个 NAT 设备会，怎么样？例如下面这种拓扑：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-multiple-layers.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-multiple-layers.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这个例子比较简单，不会给穿透带来太大问题。包从客户端 A &lt;strong&gt;经过多次 NAT&lt;/strong&gt; 到达公网的过程，与前面分析的&lt;strong&gt;穿过多层有状态防火墙&lt;/strong&gt;是一样的：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;额外的这层（NAT 设备）&lt;strong&gt;对客户端和服务端来说都不可见&lt;/strong&gt;，我们的穿，透技术也不关心中间到底经过了多少层设备。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;真正有影响的其实只是最后一层设备&lt;/strong&gt;，因为对端需要在这一层设备上，找到入口让包进来。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;具体来说，真正有影响的是端口转发协议。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;客户端使用这种协议分配端口时，为我们分配端口的是最靠近客户端的这层 NAT 设备；&lt;/li&gt;&lt;li&gt;而我们期望的是让最离客户端最远的那层 NAT 来分配，否则我们得到的就是一个网络中间层分配的 &lt;code&gt;ip:port&lt;/code&gt;，对端是用不了的；&lt;/li&gt;&lt;li&gt;不幸的是，&lt;strong&gt;这几种协议都不能递归地&lt;/strong&gt;告诉我们下一层 NAT 设备是多少 —— 虽然可以用 traceroute 之类的工具来探测网络路径，再加上，猜路上的设备是不是 NAT 设备（尝试发送 NAT 请求） —— 但这个就看运气了。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;这就是为什么互联网上充斥着大量的文章说 &lt;strong&gt;double-​NAT 有多糟糕&lt;/strong&gt;，以，及警告用户为保持后向兼容不要使用 double-NAT。但实际上，double-NAT &lt;strong&gt;对于绝大部分，互联网应用来说都是不可见的（透明的）&lt;/strong&gt;，因为大部分应用并不需要主动地做这种 NAT 穿，透。&lt;/p&gt;
&lt;p&gt;但我也绝不是在建议你在自己的网络中设置 double-​NAT。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;破坏了端口映射协议之后，某些视频游戏的多人（multiplayer）模式就会无法使用，&lt;/li&gt;&lt;li&gt;也可能会使你的 IPv6 网络无法派上用场，后者是不用 NAT 就能双向直连的一个好方案。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;但如果 double-​NAT 并不是你能控制的，那除了不能用到这种端口映射协议之外，其他大部分东西都是不受影响的。&lt;/p&gt;
&lt;p&gt;double-​NAT 的故事到这里就结束了吗？—— 并没有，而且更大型的 double-​NAT 场景将展现在我们面前。&lt;/p&gt;
&lt;h2&gt;7.6 运营商级 NAT 带来的问题&lt;/h2&gt;
&lt;p&gt;即使用 NAT 来解决 IPv4 地址不够的问题，地址仍然是不够用的，ISP（互联网服务提供商） 显然，无法为每个家庭都分配一个公网 IP 地址。那怎么解决这个问题呢？ISP 的做法是&lt;strong&gt;不够了就再嵌套一层 NAT&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;家用路由器将你的客户端 SNAT 到一个 「intermediate」 IP 然后发送到运营商网络，&lt;/li&gt;&lt;li&gt;ISP’s network 中的 NAT 设备再将这些 intermediate IPs 映射到少量的公网 IP。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;后面这种 NAT 就称为「运营商级 NAT」（&lt;strong&gt;carrier-​grade NAT&lt;/strong&gt;，或称电信级 NAT），缩写 CGNAT。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-cgnat-1.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-cgnat-1.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;CGNAT 对 NAT 穿透来说是一个大麻烦。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在此之前，办公网用户要快速实现 NAT 穿透，只需在他们的路由器上手动设置端口映射就行了。&lt;/li&gt;&lt;li&gt;但有了 CGNAT 之后就不管用了，因为你无法控制运营商的 CGNAT！&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;好消息是：这其实是 double-​NAT 的一个小变种，因此前面介绍的解决方式大部分还仍然是适用的。 
某些东西可能会无法按预期工作，但只要肯给 ISP 交钱，这些也都能解决。 除了 port mapping 
protocols，其他我们已经介绍的所有东西在 CGNAT 里都是适用的。&lt;/p&gt;
&lt;h3&gt;新挑战：同一 CGNAT 侧直连，STUN 不可用&lt;/h3&gt;
&lt;p&gt;但我们确实遇到了一个新挑战：如何直连两个在同一 CGNAT 但不同家用路由器中的对端呢？如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-cgnat-2.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-cgnat-2.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在这种情况下，STUN 就无法正常工作了&lt;/strong&gt;：STUN 看到的是客户端在公网（CGNAT 后面）看到的地址， 而我们想获得的是在 「middle network」 中的 &lt;code&gt;ip:port&lt;/code&gt;，这才是对端真正需要的地址，&lt;/p&gt;
&lt;h3&gt;解决方案：如果端口映射协议能用：一端做端口映射&lt;/h3&gt;
&lt;p&gt;怎么办呢？&lt;/p&gt;
&lt;p&gt;如果你想到了端口映射协议，那恭喜，答对了！&lt;strong&gt;如果 peer 中任何一个 NAT 支持端口映射协议&lt;/strong&gt;， 对我们就能实现穿透，因为它分配的 &lt;code&gt;ip:port&lt;/code&gt; 正是对端所需要的信息。&lt;/p&gt;
&lt;p&gt;这里讽刺的是：double-NAT（指 CGNAT）破坏了端口映射协议，但在这里又救了我们！ 当然，我们假设这些协议一定可用，因为 CGNAT ISP 倾向于在它们的家用路由器侧关闭，这些功能，已避免软件得到「错误的」结果，产生混淆。&lt;/p&gt;
&lt;h3&gt;解决方案：如果端口映射协议不能用：NAT hairpin 模式&lt;/h3&gt;
&lt;p&gt;如果不走运，NAT 上没有端口映射功能怎么办？&lt;/p&gt;
&lt;p&gt;让我们回到基于 STUN 的技术，看会发生什么。两端在 CGNAT 的同一侧，假设 STUN 告诉我们 A 的地址是 &lt;code&gt;2.2.2.2:1234&lt;/code&gt;，B 的地址是 &lt;code&gt;2.2.2.2:5678&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;那么接下来的问题是：如果 A 向 &lt;code&gt;2.2.2.2:5678&lt;/code&gt; 发包会怎么样？期望的 CGNAT 行为是：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;执行 A 的 NAT 映射规则，即对 &lt;code&gt;2.2.2.2:1234 -&amp;gt; 2.2.2.2:5678&lt;/code&gt; 进行 SNAT。&lt;/li&gt;&lt;li&gt;注意到目的地址 &lt;code&gt;2.2.2.2:5678&lt;/code&gt; 匹配到的是 B 的入向 NAT 映射，因此接着对这个包执行 DNAT，将目的 IP 改成 B 的私有地址。&lt;/li&gt;&lt;li&gt;通过 CGNAT 的 internal 接口（而不是 public 接口，对应公网）将包发给 B。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;这种 NAT 行为有个专门的术语，叫 &lt;strong&gt;hairpinning&lt;/strong&gt;（直译为发卡，意思，是像发卡一样，沿着一边上去，然后从另一边绕回来），&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;hairpin-icon.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/hairpin-icon.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;大家应该猜到的一个事实是：&lt;strong&gt;不是所以 NAT 都支持 hairpin 模式&lt;/strong&gt;。 实际上，大量 well-​behaved NAT 设备都不支持 hairpin 模式，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;因为它们都有 &lt;strong&gt;「只有 src_​ip 是私有地址且 dst_​ip 是公网地址的包才会经过我」&lt;/strong&gt; 之类的假设。&lt;/li&gt;&lt;li&gt;因此对于这种目的地址不是公网、需要让路由器把包再转回内网的包，它们会&lt;strong&gt;直接丢弃&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;这些逻辑甚至是直接实现在路由芯片中的，因此除非升级硬件，否则单靠软件编程无法改变这种行为。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Hairpin 是所有 NAT 设备的特性（支持或不支持），并不是 CGNAT 独有的。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;在大部分情况下，这个特性对我们的 NAT 穿透目的来说都是无所谓的，因为我们期望中 &lt;strong&gt;两个 LAN NAT 设备会直接通信，不会再向上绕到它们的默认网关 CGNAT 来解决这个问题&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Hairpin 特性可有可无这件事有点遗憾，这可能也是为什么 hairpin 功能经常 broken 的原因。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;一旦必须涉及到 CGNAT，那 hairpinning 对连接性来说就至关重要了。&lt;/p&gt;
&lt;p&gt;Hairpinning 使内网连接的行为与公网连接的行为完成一致，因此我们无需关心目的，地址类型，也不用知晓自己是否在一台 CGNAT 后面。&lt;/p&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;如果 hairpinning 和 port mapping protocols 都不可用，那只能降级到中继模式了&lt;/strong&gt;。&lt;/p&gt;
&lt;h2&gt;7.7 全 IPv6 网络：理想之地，但并非问题全无&lt;/h2&gt;
&lt;p&gt;行文至此，一些读者可能已经对着屏幕咆哮：&lt;strong&gt;不要再用 IPv4 了！&lt;/strong&gt; 花这么多时间精力解决这些没意义的东西，还不如直接换成 IPv6！&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;的确，之所以有这些乱七八糟的东西，就是因为 IPv4 地址不够了，我们&lt;strong&gt;一直在用越来越复杂的 NAT 来给 IPv4 续命&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;如果 IP 地址够用，无需 NAT 就能让世界上的每个设备都有一个自己的公网 IP 地址，这些问题不就解决了吗？&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;简单来说，是的，这也正是 IPv6 能做的事情。但是，也只说对了一半：在理想的全 IPv6 世界中，所有这些东西会变得更加简单，但我们面临的&lt;strong&gt;问题并不会完全消失&lt;/strong&gt; —— 因为&lt;strong&gt;有状态防火墙仍然还是存在的&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;办公室中的电脑可能有一个公网 IPv6 地址，但你们公司肯定会架设一个防火墙，只允许，你的电脑主动访问公网，而不允许反向主动建连。&lt;/li&gt;&lt;li&gt;其他设备上的防火墙也仍然存在，应用类似的规则。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;因此，我们仍然会用到&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;本文最开始介绍的防火墙穿透技术，以及&lt;/li&gt;&lt;li&gt;帮助我们获取自己的公网 &lt;code&gt;ip:port&lt;/code&gt; 信息的旁路信道&lt;/li&gt;&lt;li&gt;仍然需要在某些场景下 fallback 到中继模式，例如 fallback 到最通用的 HTTP 中继，协议，以绕过某些网络禁止 outbound UDP 的问题。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;但我们现在可以抛弃 &lt;strong&gt;STUN、生日悖论、端口映射协议、hairpin&lt;/strong&gt; 等等东西了。 这是一个好消息！&lt;/p&gt;
&lt;h3&gt;全球 IPv4/​IPv6 部署现状&lt;/h3&gt;
&lt;p&gt;另一个更加严峻的现实问题是：当前并不是一个全 IPv6 世界。目前世界上&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;大部分还是 IPv4，&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.google.com/intl/en/ipv6/statistics.html&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;大约 33% 是 IPv6&lt;/a&gt;，而且分布极度不均匀，因此某些，通信对所在的可能是 100% IPv6，也可能是 0%，或二者之间。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;不幸的是，这意味着，IPv6 **还**无法作为我们的解决方案。 就目前来说，它只是我们的工具箱中的一个备选。对于某些 peer 
来说，它简直是完美工，具，但对其他 peer 来说，它是用不了的。如果目标是「任何情况下都能穿透（连接） 成功」，那我们就仍然需要 
IPv4+NAT 那些东西。&lt;/p&gt;
&lt;h3&gt;新场景：NAT64/DNS64&lt;/h3&gt;
&lt;p&gt;IPv4/​IPv6 共存也引出了一个新的场景：NAT64 设备。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-ipv6.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-ipv6.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;前面介绍的都是 NAT44 设备：它们将一个 IPv4 地址转换成另一 IPv4 地址。 NAT64 从名字可以看出，是将一个内侧 
IPv6 地址转换成一个外侧 IPv4 地址。 利用 DNS64 设备，我们能将 IPv4 DNS 应答给 IPv6 
网络，这样对终端来说，它看到的就是一个，全 IPv6 网络，而仍然能访问 IPv4 公网。&lt;/p&gt;

&lt;blockquote&gt;Incidentally, you can extend this naming scheme 
indefinitely. There have been some experiments with NAT46; you could 
deploy NAT66 if you enjoy chaos; and some RFCs use NAT444 for 
carrier-​grade NAT.&lt;/blockquote&gt;

&lt;p&gt;如果需要处理 DNS 问题，那这种方式工作良好。例如，如果连接到 google.com，将这个域名解析成 IP 地址的过程会涉及到 DNS64 设备，它又会进一步 involve NAT64 设备，但后一步对用户来说是无感知的。&lt;/p&gt;
&lt;p&gt;但&lt;strong&gt;对于 NAT 和防火墙穿透来说，我们会关心每个具体的 IP 地址和端口&lt;/strong&gt;。&lt;/p&gt;
&lt;h3&gt;解决方案：CLAT (Customer-​side transLATor)&lt;/h3&gt;
&lt;p&gt;如果设备支持 CLAT (Customer-​side translator — from Customer XLAT)，那我们就很幸运：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;CLAT 假装操作系统有直接 IPv4 连接，而背后使用的是 NAT64&lt;/strong&gt;，以对应用程序无感知。 在有 CLAT 的设备上，我们无需做任何特殊的事情。&lt;/li&gt;&lt;li&gt;CLAT &lt;strong&gt;在移动设备上非常常见&lt;/strong&gt;，但在桌面电脑、笔记本和服务器上非常少见， 因此在后者上，必须自己做 CLAT 做的事情：检测 NAT64+DNS64 的存在，然后正确地使用它们。&lt;/li&gt;&lt;/ul&gt;
&lt;h3&gt;解决方案：CLAT 不存在时，手动穿透 NAT64 设备&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;首先检测是否存在 NAT64+DNS64。&lt;/p&gt;
&lt;p&gt;方法很简单：向 &lt;code&gt;ipv4only.arpa.&lt;/code&gt; 发送一个 DNS 请求。这个域名会解析，到一个已知的、固定的 IPv4 地址，而且是&lt;strong&gt;纯 IPv4 地址&lt;/strong&gt;。如果得到的，是一个 IPv6 地址，就可以判断有 DNS64 服务器做了转换，而它必然会用到 NAT64。这样，就能判断出 NAT64 的前缀是多少。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;此后，要向 IPv4 地址发包时，发送格式为&lt;code&gt;{NAT64 prefix + IPv4 address}&lt;/code&gt; 的 IPv6 包。 类似地，收到来源格式为 &lt;code&gt;{NAT64 prefix + IPv4 address}&lt;/code&gt; 的包时，就是 IPv4 流量。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;接下来，通过 NAT64 网络与 STUN 通信来获取自己在 NAT64 上的公网 &lt;code&gt;ip:port&lt;/code&gt;，接，下来就回到经典的 NAT 穿透问题了 —— 除了需要多做一点点事情。&lt;/p&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;幸运的是，如今的大部分 v6-​only 网络都是移动运营商网络，而几乎所有手机都支持 CLAT。 运营 v6-​only 网络的 
ISPs 会在他们给你的路由器上部署 CLAT，因此最后你其实不需要做什么事情。 但如果想实现 100% 
穿透，就需要解决这种边边角角的问题，即必须显式支持从 v6-​only 网络连接 v4-​only 对端。&lt;/p&gt;
&lt;h2&gt;7.8 将所有解决方式集成到 ICE 协议&lt;/h2&gt;
&lt;h3&gt;针对具体场景，该选择哪种穿透方式？&lt;/h3&gt;
&lt;p&gt;至此，我们的 NAT 穿透之旅终于快结束了。我们已经覆盖了有状态防火墙、简单和高级 NAT、IPv4 和 IPv6。只要将以上解决方式都实现了，NAT 穿透的目的就达到了！&lt;/p&gt;
&lt;p&gt;但是，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;对于给定的 peer，如何判断改用哪种方式呢？&lt;/li&gt;&lt;li&gt;如何判断这是一个简单有状态防火墙的场景，还是该用到生日悖论算法，还是需要手动处理 NAT64 呢？&lt;/li&gt;&lt;li&gt;还是通信双方在一个 WiFi 网络下，连防火墙都没有，因此不需要任何操作呢？&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;早期 NAT 穿透&lt;/strong&gt;比较简单，能让我们&lt;strong&gt;精确判断出 peer 之间的路径特点&lt;/strong&gt;，然后针对性地采用相应的解决方式。 但后面，网络工程师和 NAT 设备开发工程师引入了一些新理念，给路径判断造成很大困难。因此，我们需要简化客户端侧的思考（判断逻辑）。&lt;/p&gt;
&lt;p&gt;这就要提到 Interactive Connectivity Establishment (ICE，交换式连接建立) 协议了。 与 STUN/​TURN 类似，ICE 来自&lt;strong&gt;电信领域&lt;/strong&gt;，因此其 RFC 充满了 SIP、SDP、信令会话、拨号等等电话术语。 但如果忽略这些领域术语，我们会看到它&lt;strong&gt;描述了一个极其优雅的判断最佳连接路径的算法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;真的？这个算法是：&lt;strong&gt;每种方法都试一遍，然后选择最佳的那个方法&lt;/strong&gt;。就是这个算法，惊喜吗？&lt;/p&gt;
&lt;p&gt;来更深入地看一下这个算法。&lt;/p&gt;
&lt;h3&gt;ICE (Interactive Connectivity Establishment) 算法&lt;/h3&gt;
&lt;p&gt;这里的讨论不会严格遵循 ICE spec，因此如果是在自己实现一个可互操作的 ICE 客户端，应该通读&lt;a href=&quot;https://tools.ietf.org/html/rfc8445&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;RFC 8445&lt;/a&gt;, 根据它的描述来实现。这里忽略所有电信术语，只关注核心的算法逻辑， 并提供几个在 ICE 规范允许范围的灵活建议。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;为实现和某个 peer 的通信，首先需要确定我们自己用的（客户端侧）这个 socket 的地址， 这是一个列表，至少应该包括：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;我们自己的 IPv6 &lt;code&gt;ip:ports&lt;/code&gt;&lt;/li&gt;&lt;li&gt;我们自己的 IPv4 LAN &lt;code&gt;ip:ports&lt;/code&gt;（局域网地址）&lt;/li&gt;&lt;li&gt;通过 STUN 服务器获取到的我们自己的 IPv4 WAN &lt;code&gt;ip:ports&lt;/code&gt;（&lt;strong&gt;公网地址&lt;/strong&gt;，可能会经过 NAT64 转换）&lt;/li&gt;&lt;li&gt;通过端口映射协议获取到的我们自己的 IPv4 WAN &lt;code&gt;ip:port&lt;/code&gt;（NAT 设备的&lt;strong&gt;端口映射协议分配的公网地址&lt;/strong&gt;）&lt;/li&gt;&lt;li&gt;运营商提供给我们的 endpoints（例如，&lt;strong&gt;静态配置的端口转发&lt;/strong&gt;）&lt;/li&gt;&lt;/ol&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;通过旁路信道与 peer 互换这个列表。两边都拿到对方的列表后，就开始互相探测对方提供的地址。 &lt;strong&gt;列表中地址没有优先级&lt;/strong&gt;，也就是说，如果对方给的了 15 个地址，那我们应该把这 15 个地址都探测一遍。&lt;/p&gt;
&lt;p&gt;这些&lt;strong&gt;探测包有两个目的&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;打开防火墙，穿透 NAT&lt;/strong&gt;，也就是本文一直在介绍的内容；&lt;/li&gt;&lt;li&gt;&lt;strong&gt;健康检测&lt;/strong&gt;。我们在不断交换（最好是已认证的）「ping/pong」 包，来检测某个特定的路径是不是端到端通的。&lt;/li&gt;&lt;/ol&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;最后，一小会儿之后，从可用的备选地址中（根据某些条件）选择「最佳」的那个，任务完成！&lt;/p&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;这个算法的优美之处在于：只要选择最佳线路（地址）的算法是正确的，那就总能获得最佳路径。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ICE 会预先对这些备选地址进行排序（通常：LAN &amp;gt; WAN &amp;gt; WAN+NAT），但用户也可以自己指定这个排序行为。&lt;/li&gt;&lt;li&gt;从 v0.100.0 开始，Tailscale 从原来的 hardcode 优先级切换成了根据 round-​trip latency 的方式，它大部分情况下排序的结果和 &lt;code&gt;LAN &amp;gt; WAN &amp;gt; WAN+NAT&lt;/code&gt; 是一致的。 但相比于静态排序，我们是动态计算每条路径应该属于哪个类别。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;ICE spec 将协议组织为两个阶段：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;探测阶段&lt;/li&gt;&lt;li&gt;通信阶段&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;但不一定要严格遵循这两个步骤的顺序。在 Tailscale，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;我们发现更优的路径之后就会自动切换过去，&lt;/li&gt;&lt;li&gt;所有的连接都是先选择 DERP 模式（中继模式）。这意味着连接立即就能建立（&lt;strong&gt;优先级最低但 100% 能成功的模式&lt;/strong&gt;），用户不用任何等待，&lt;/li&gt;&lt;li&gt;然后并行进行路径发现。通常几秒钟之后，我们就能发现一条更优路径，然后将现有连接透明升级（upgrade）过去。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;但有一点需要关心：非对称路径。ICE 花了一些精力来保证通信双方选择的是相同的网络，路径，这样才能保证这条路径上有双向流量，能保持防火墙和
 NAT 设备的连接一直处于 open 状态。 
自己实现的话，其实并不需要花同样大的精力来实现这个保证，但需要确保你所有使用的所有路径上，都有双向流量。 
这个目标就很简单了，只需要定期在所有已使用的路径上发 ping/pong 就行了。&lt;/p&gt;
&lt;h3&gt;健壮性与降级&lt;/h3&gt;
&lt;p&gt;要实现健壮性，还需要检测当前已选择的路径是否已经失败了（例如，NAT 设备维护清掉了所有状态）， 如果失败了就要&lt;strong&gt;降级（downgrade）到其他路径&lt;/strong&gt;。这里有两种方式：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;持续探测所有路径，维护一个降级时会用的备用地址列表；&lt;/li&gt;&lt;li&gt;
&lt;p&gt;&lt;strong&gt;直接降级到保底的中继模式&lt;/strong&gt;，然后再通过路径探测升级到更好的路径。&lt;/p&gt;
&lt;p&gt;考虑到发生降级的概率是非常小的，因此这种方式可能是&lt;strong&gt;更经济&lt;/strong&gt;的。&lt;/p&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;h2&gt;7.9 安全&lt;/h2&gt;
&lt;p&gt;最后需要提到安全。&lt;/p&gt;
&lt;p&gt;本文的所有内容都假设：我们使用的&lt;strong&gt;上层协议已经有了自己的安全机制&lt;/strong&gt;（ 例如 QUIC 协议有 TLS 证书，WireGuard 协议有自己的公钥）。 如果还没有安全机制，那显然是要立即补上的。一旦动态切换路径，&lt;strong&gt;基于 IP 的安全机制就是无用的了&lt;/strong&gt; （IP 协议最开始就没怎么考虑安全性），至少要有&lt;strong&gt;端到端的认证&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;严格来说，如果上层协议有安全机制，那即使收到是欺骗性的 ping/​pong 流量，问题都不大， 最坏的情况也就是&lt;strong&gt;攻击者诱导两端通过他们的系统来中继流量&lt;/strong&gt;。 而有了端到端安全机制，这并不是一个大问题（取决于你的威胁模型）。&lt;/li&gt;&lt;li&gt;但出于谨慎考虑，最好还是对路径发现的包也做认证和加密。具体如何做可以咨询你们的应用安全工程师。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;我们终于完成了 NAT 穿透的目标！&lt;/p&gt;
&lt;p&gt;如果实现了以上提到的所有技术，你将得到一个业内领先的 NAT 穿透软件，能在绝大多数场景下实现端到端直连。 如果直连不了，还可以降级到保底的中继模式（对于长尾来说只能靠中继了）。&lt;/p&gt;
&lt;p&gt;但这些工作相当复杂！其中一些问题研究起来很有意思，但很难做到完全正确，尤其是那些，非常边边角角的场景，真正出现的概率极小，但解决它们所需花费的经历又极大。 不过，这种工作只需要做一次，一旦解决了，你就具备了某种超级能力： 探索令人激动的、相对还比较崭新的&lt;strong&gt;端到端应用&lt;/strong&gt;（peer-​to-​peer applications）世界。&lt;/p&gt;
&lt;h2&gt;8.1 跨公网，端到端直连&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;去中心化软件&lt;/strong&gt;领域中的许多有趣想法，简化之后其实都变成了 &lt;strong&gt;跨过公网（互联网）实现端到端直连&lt;/strong&gt; 这一问题，开始时可能觉得很简单，但真正做才，发现比想象中难多了。现在知道如何解决这个问题了，动手开做吧！&lt;/p&gt;
&lt;h2&gt;8.2 结束语之 TL; DR&lt;/h2&gt;
&lt;p&gt;实现健壮的 NAT 穿透需要下列基础：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;一种基于 UDP 的协议；&lt;/li&gt;&lt;li&gt;能在程序内直接访问 socket；&lt;/li&gt;&lt;li&gt;有一个与 peer 通信的旁路信道；&lt;/li&gt;&lt;li&gt;若干 STUN 服务器；&lt;/li&gt;&lt;li&gt;一个保底用的中继网络（可选，但强烈推荐）&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;然后需要：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;遍历所有的 &lt;code&gt;ip:port&lt;/code&gt;；&lt;/li&gt;&lt;li&gt;查询 STUN 服务器来获取自己的公网 &lt;code&gt;ip:port&lt;/code&gt; 信息，以及判断自己这一侧的 NAT 的「难度」（difficulty）；&lt;/li&gt;&lt;li&gt;使用 port mapping 协议来获取更多的公网 &lt;code&gt;ip:ports&lt;/code&gt;；&lt;/li&gt;&lt;li&gt;检查 NAT64，通过它获取自己的公网 &lt;code&gt;ip:port&lt;/code&gt;；&lt;/li&gt;&lt;li&gt;将自己的所有公网 &lt;code&gt;ip:ports&lt;/code&gt; 信息通过旁路信道与 peer 交换，以及某些加密秘钥来保证通信安全；&lt;/li&gt;&lt;li&gt;通过保底的中继方式与对方开始通信（可选，这样连接能快速建立）&lt;/li&gt;&lt;li&gt;如果有必要/想这么做，探测对方的提供的所有 &lt;code&gt;ip:port&lt;/code&gt;，以及执行生日攻击（birthday attacks）来穿透 harder NAT；&lt;/li&gt;&lt;li&gt;发现更优路径之后，透明升级到该路径；&lt;/li&gt;&lt;li&gt;如果当前路径断了，降级到其他可用的路径；&lt;/li&gt;&lt;li&gt;确保所有东西都是加密的，并且有端到端认证。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://arthurchiao.art/blog/everything-about-pki-zh/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;« [译] 写给工程师：关于证书（certificate）和公钥基础设施（PKI）的一切（SmallStep, 2018）&lt;/a&gt; &lt;a href=&quot;https://arthurchiao.art/blog/formal-requirements-for-virtualizable-arch-zh/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;[译] [论文] 可虚拟化第三代（计算机）架构的规范化条件（ACM, 1974） »&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;&lt;p style=&quot;text-indent: 0;&quot;&gt;&lt;a href=&quot;https://arthurchiao.art/blog/how-nat-traversal-works-zh/&quot; target=&quot;_blank&quot;&gt;https://arthurchiao.art/blog/how-nat-traversal-works-zh/&lt;/a&gt;&lt;/p&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻墙技术博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;订阅地址及社交帐号&lt;/a&gt;&lt;/div&gt;</description>
            <link>https://www.chinagfw.org/2023/08/nat.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-7297187847024007686</guid>
            <pubDate>Sun, 06 Aug 2023 13:39:00 +0000</pubDate>
            <atom:updated>2023-08-18T23:55:15.990+08:00</atom:updated>
            <title>Warp: 一种安全的跨平台文件共享应用</title>
            <description>&lt;div class=&quot;flex flex-col gap-4 px-1 my-4&quot;&gt;&lt;br /&gt;via &lt;a href=&quot;https://here.news/post/11dc8243-b3a8-4fc2-8818-6be51e86b724/warp-%E4%B8%80%E7%A7%8D%E5%AE%89%E5%85%A8%E7%9A%84%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E5%BA%94%E7%94%A8&quot;&gt;here.news&lt;/a&gt;&lt;br /&gt;&lt;div class=&quot;SinglePost_SinglePost__3in7m&quot;&gt;&lt;p&gt;在 Linux 和 Windows 之间安全地共享文件的无缝方式？试试这个！&lt;/p&gt;&lt;p&gt;在我们的首次尝试系列文章中，我们发现了一种在 Linux 和 Windows 系统之间传输文件的安全高效方法。&lt;/p&gt;&lt;p&gt;一个名为「Warp」的工具，是 GNOME Circle 的一部分，包含扩展 GNOME 生态系统的应用程序。Warp 通过互联网或本地网络实现文件的无缝传输。&lt;/p&gt;&lt;p&gt;让我们来看看它。&lt;/p&gt;&lt;h2&gt;Warp：概述⭐&lt;/h2&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/56e93ef3-e574-4ed4-9fd7-010abe3abf31_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/56e93ef3-e574-4ed4-9fd7-010abe3abf31_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;Warp 主要用 Rust 编程语言编写，是一个基于 GTK 的文件传输应用，使用「Magic Wormhole」协议在互联网/本地网络上进行文件传输。&lt;/p&gt;&lt;p&gt;&lt;b&gt;所有文件传输都是加密的，接收者必须使用基於单词的代码来访问文件，以防止任何滥用。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;允许我向您展示它是如何工作的。&lt;/p&gt;&lt;p&gt;当您第一次启动应用程序时，您会看到一个欢迎屏幕和一个关于 Warp 的简短介绍。&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/db14772c-b7a0-4b8c-8af1-0fd444b01503_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/db14772c-b7a0-4b8c-8af1-0fd444b01503_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;继续后，您将进入「发送」菜单，可以选择要发送的文件或文件夹。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;📋您还可以将文件和文件夹拖放到应用程序中。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Warp 发送文件页面的屏幕截图&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/870dfce4-0a86-4def-b506-4752544f36c5_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/870dfce4-0a86-4def-b506-4752544f36c5_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;处理后，将显示一个屏幕，其中包含文本和二维码形式的传输代码。您必须将其安全发送给接收者，他们可以开始下载文件。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;📋由于 Warp 是一个跨平台应用，您可以在 Linux 和 Windows 系统之间发送文件。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Warp 传输代码页面的屏幕截图&lt;/p&gt;&lt;p&gt;那么，接收方看起来如何呢？&lt;/p&gt;&lt;p&gt;好吧，他们必须进入「接收」菜单，将传输代码粘贴到文本框中。他们还可以扫描二维码将确切文本复制到其设备上。&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/a351dbb3-664d-4735-b213-23e333fa14c8_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/a351dbb3-664d-4735-b213-23e333fa14c8_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;在粘贴代码并单击「接收文件」后，Warp 将开始连接到发送者的设备。&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/410b8d28-5db6-41b5-976e-a5b0ff362c65_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/410b8d28-5db6-41b5-976e-a5b0ff362c65_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果成功，您将看到「已连接到对等」状态。如果没有，发送者或接收者的系统/网络出现问题。&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/64f37190-832e-43d0-8700-ab6f2e391f2f_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/64f37190-832e-43d0-8700-ab6f2e391f2f_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;成功连接后，接收者可以选择「接受」将其保存到系统的「下载」文件夹中，或者选择「另存为」将其保存到自己选择的位置。&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/5c4ba2a4-079d-43a0-8811-328df20236ab_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/5c4ba2a4-079d-43a0-8811-328df20236ab_image_image.png&quot; /&gt;&lt;/div&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/84164c51-268a-42c9-834e-674c49610a9c_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/84164c51-268a-42c9-834e-674c49610a9c_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;就是这样。当文件传输完成时，接收者将看到以下屏幕：&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/bc3f05be-21f8-4ba2-a5af-2d02b72afd1b_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/bc3f05be-21f8-4ba2-a5af-2d02b72afd1b_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;用户还可以进入三条丝带图标下的「首选项」菜单，访问高级设置，如设置 Rendezvous/Transit 服务器 URL 或将代码字数设置为更长的字数以增强安全性。&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/c6e898fa-6432-4b3f-93b8-82da35bf7ce5_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/c6e898fa-6432-4b3f-93b8-82da35bf7ce5_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;关于 Warp 就是这些；它非常简单，工作得很好。&lt;/p&gt;&lt;h2&gt;📥 获取 Warp&lt;/h2&gt;&lt;p&gt;Warp 适用于 Linux 和 Windows；您可以在其 &lt;a href=&quot;https://gitlab.gnome.org/World/warp?ref=news.itsfoss.com&quot; target=&quot;_blank&quot;&gt;GitLab 页面上&lt;/a&gt;选择所需的软件包或查看源代码。&lt;/p&gt;&lt;p&gt;对于 Linux 用户，您可以从 &lt;a href=&quot;https://flathub.org/apps/app.drey.Warp?ref=news.itsfoss.com&quot; target=&quot;_blank&quot;&gt;Flathub&lt;/a&gt; 获取它。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻墙技术博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;订阅地址及社交帐号&lt;/a&gt;&lt;/div&gt;</description>
            <link>https://www.chinagfw.org/2023/08/warp.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-6950766207067496610</guid>
            <pubDate>Tue, 01 Aug 2023 05:33:00 +0000</pubDate>
            <atom:updated>2023-08-11T21:07:12.935+08:00</atom:updated>
            <title>备用翻墙方案：eSIM</title>
            <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;div class=&quot;css-901oao r-18jsvk2 r-37j5jr r-1inkyih r-16dba41 r-135wba7 r-bcqeeo r-bnwqim r-qvutc0&quot; data-testid=&quot;tweetText&quot; dir=&quot;auto&quot; id=&quot;id__j3is3nz31o&quot; lang=&quot;zh&quot;&gt;&lt;span class=&quot;css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0&quot;&gt;via &lt;a href=&quot;https://twitter.com/machan_47291/status/1685964261191995392&quot;&gt;https://twitter.com/machan_47291/status/1685964261191995392&amp;nbsp;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;css-901oao r-18jsvk2 r-37j5jr r-1inkyih r-16dba41 r-135wba7 r-bcqeeo r-bnwqim r-qvutc0&quot; data-testid=&quot;tweetText&quot; dir=&quot;auto&quot; id=&quot;id__j3is3nz31o&quot; lang=&quot;zh&quot;&gt;&lt;span class=&quot;css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0&quot;&gt;&amp;nbsp; &lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;css-901oao r-18jsvk2 r-37j5jr r-1inkyih r-16dba41 r-135wba7 r-bcqeeo r-bnwqim r-qvutc0&quot; data-testid=&quot;tweetText&quot; dir=&quot;auto&quot; id=&quot;id__j3is3nz31o&quot; lang=&quot;zh&quot;&gt;&lt;span class=&quot;css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;div class=&quot;css-901oao r-18jsvk2 r-37j5jr r-1inkyih r-16dba41 r-135wba7 r-bcqeeo r-bnwqim r-qvutc0&quot; data-testid=&quot;tweetText&quot; dir=&quot;auto&quot; id=&quot;id__j3is3nz31o&quot; lang=&quot;zh&quot;&gt;&lt;span class=&quot;css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0&quot;&gt;研究了下 esim 卡，发现用这玩意翻墙实在太简单了，去 play store 下载一个能利用 esim 相关技术提供上网服务的 app，例如 eskimo（这软件还送你 1.5G 流量），直接就相当于获得一个国外手机卡，马上就可以翻墙。难怪国产手机到目前都不支持 esim，原来是在这里卡了脖子&lt;/span&gt;&lt;span class=&quot;css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;css-901oao r-18jsvk2 r-37j5jr r-1inkyih r-16dba41 r-135wba7 r-bcqeeo r-bnwqim r-qvutc0&quot; data-testid=&quot;tweetText&quot; dir=&quot;auto&quot; id=&quot;id__j3is3nz31o&quot; lang=&quot;zh&quot;&gt;&lt;span class=&quot;css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;css-901oao r-18jsvk2 r-37j5jr r-1inkyih r-16dba41 r-135wba7 r-bcqeeo r-bnwqim r-qvutc0&quot; data-testid=&quot;tweetText&quot; dir=&quot;auto&quot; id=&quot;id__j3is3nz31o&quot; lang=&quot;zh&quot;&gt;&lt;span class=&quot;css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0&quot;&gt;&amp;nbsp;购买 pixel 手机的理由又加一！&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;p&gt;&amp;nbsp;随后有人&lt;a href=&quot;https://twitter.com/_ooT00Too_/status/1686204689988395009&quot;&gt;评论&lt;/a&gt;：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;提醒下，Pixel 系列不要用 DJB 的 eSIM，无法 share 上网。 &lt;br /&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;更有人相信&lt;a href=&quot;https://twitter.com/rsrs7777777/status/1686200061376749570&quot;&gt;GFW 不会坐视不管&lt;/a&gt;：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;sim 卡流量走运营商 network，如果看 ip 会看到分配的是运营商所在地 ip，这个洞早晚得堵上 &lt;br /&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;div class=&quot;css-901oao r-18jsvk2 r-37j5jr r-1inkyih r-16dba41 r-135wba7 r-bcqeeo r-bnwqim r-qvutc0&quot; data-testid=&quot;tweetText&quot; dir=&quot;auto&quot; id=&quot;id__j3is3nz31o&quot; lang=&quot;zh&quot;&gt;&lt;span class=&quot;css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0&quot;&gt;&lt;/span&gt;&lt;/div&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻墙技术博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;订阅地址及社交帐号&lt;/a&gt;&lt;/div&gt;</description>
            <link>https://www.chinagfw.org/2023/08/esim.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-3754559668612090464</guid>
            <pubDate>Tue, 01 Aug 2023 05:28:00 +0000</pubDate>
            <atom:updated>2023-08-11T21:07:04.827+08:00</atom:updated>
            <title>T-Mobile 原生手机卡购买激活教程，eSIM 激活教程，改 3 美元套餐，转入手机靓号</title>
            <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;p&gt;via &lt;a href=&quot;https://itangtalk.com/tmobile/&quot; target=&quot;_blank&quot;&gt;https://itangtalk.com/tmobile/&lt;/a&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;今天向大家介绍一张全新的美国手机卡，美国&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;预付费卡。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;128hsld.jpg&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/128hsld.jpg&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;首先这张卡是&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile 原生手机卡&lt;/a&gt;，是预付费卡，不需要去进行实名认证。&lt;/p&gt;
&lt;p&gt;这张卡默认的套餐是月租 10 美元，其中包含 1000 条短信和 1000 分钟通话。当然这些短信和通话，只限于和美国手机号码进行通讯使用。可以说这个价格能够有这么多的免费用量还是挺香的。&lt;/p&gt;
&lt;p&gt;但是这张卡在国内使用默认的套餐，有个致命的问题，它无法进行国际漫游。所以说这张卡在中国是没有信号的。&lt;/p&gt;
&lt;p&gt;那么在中国没有信号，我们要如何去使用这张卡呢？这个时候就不得不提到&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通话的功能。所谓的&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通话，就是我们在一些比较偏僻的地方或者说地下室，很有可能没有手机信号，但是这个时候的话如果有&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;，我们就可以把手机连接到&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;，然后通过&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;再和手机的基站进行通讯。这样的话就能够达到正常使用的效果了。&lt;/p&gt;
&lt;p&gt;目前支持&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通话的手机很多，比如说 iPhone 5C 以上的机型基本上都是支持&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通话的，包括中国大陆国行的 iPhone，也是支持&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通话的。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;KZpIBR.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/KZpIBR.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;而安卓手机，像国产的一些大部分手机都是不支持&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通话的。小米和华为的个别型号是支持的。&lt;/p&gt;
&lt;p&gt;这样的话，即使这张卡在中国没有信号，我们也可以通过连接&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;，使用&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通话来使用这张卡。&lt;/p&gt;
&lt;p&gt;如果仅仅是上面我讲的，只能在中国使用 10 美元的无漫游套餐，那么这张卡的吸引力，其实并没有那么大。促使我开始深入研究这张卡的动力是：&lt;/p&gt;
&lt;p&gt;其实这张卡是可以联系客服，手动转成月租三美元的手机卡，甚至有小伙伴分享可以转成零月租的手机卡。&lt;/p&gt;
&lt;p&gt;转成三美元的卡之后，首先第一个优点就是它的月租非常低，三美元的月租包含，30 条短信和 30 分钟的美国本地通话。其次，它还是可以在&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通话的环境下正常使用，而且转成三美元的套餐之后，它是可以国际漫游的，也就是说在中国是有信号的了。&lt;/p&gt;
&lt;p&gt;这个时候其实就和之前介绍的 Ultra &lt;a href=&quot;https://itangtalk.com/paygo/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;PayGo&lt;/a&gt;卡是一样的了。&lt;/p&gt;
&lt;p&gt;这张卡的购买渠道一共有两种。一种是可以通过国内的电商平台，包括我自己的&lt;a href=&quot;https://shop.itangtalk.com/products/t-mobile10?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;自营商店平台&lt;/a&gt;，也有这张实体卡的出售。&lt;/p&gt;
&lt;p&gt;第二种渠道是，如果说我们的手机支持&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;，我们其实可以去下载 T-Mobile 的官方 APP，然后去订购下载&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;卡，这样就不需要再去额外购买实体的手机卡了。&lt;/p&gt;
&lt;p&gt;即使我们已经购买了实体卡，也可以联系客服转换成&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;接下来就向大家演示一下，如何去购买&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;的原生手机卡，包括在官网订购&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;，如何去激活手机卡，如何去改套餐。希望能够帮到大家。&lt;/p&gt;
&lt;p&gt;我们可以先来到 T-Mobile 的官网，一起了解一下他们家的原生手机卡。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;6jiwAM.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/6jiwAM.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;首先，他们家的手机卡主要分为两种。一种是后付费，这种需要人在美国并且有美国的身份才可以申请，需要实名认证。&lt;/p&gt;
&lt;p&gt;另外一种就是预付费卡，不需要实名认证，只要购买卡片交钱就可以使用，没有那么多繁琐的流程。我们这次讲的就是预付费卡。&lt;/p&gt;
&lt;p&gt;我们直接去点击预付费卡。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;hVXqMN.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/hVXqMN.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;然后跳转到这个界面。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;lbPpfV.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/lbPpfV.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;在这里，我们可以去输入自己手机的 IMEI 号码。IMEI 相当于手机的一个身份证号，我们可以点击这个感叹号，它提示我们在拨号界面拨打*#06#，就可以看到 IMEI。&lt;/p&gt;
&lt;p&gt;然后我们在这个地方输入我们的 IMEI，然后检查一下我们的手机能否使用 T-Mobile 的手机卡。我这边显示是可以使用的。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;NbP0Rx.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/NbP0Rx.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;接下来去确认一下，我们的手机是否有锁，像美国一些合约机可能无法正常使用。我们直接勾选无锁就可以了。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;XCCQGM.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/XCCQGM.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;下一步有三个选项：&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;JklmgD.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/JklmgD.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;第一个是激活&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;卡，如果我们的手机支持&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;，可以通过&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;的官方 APP 直接订购&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;，不需要再购买实体手机卡；&lt;/p&gt;
&lt;p&gt;第二种是直接在官网订购实体的 SIM 卡，它会把这个实体的 SIM 卡邮寄给我们；&lt;/p&gt;
&lt;p&gt;第三种是已经购买过了，卡已在手，直接激活。我们在这里输入 SIM 卡的卡号进行直接激活。&lt;/p&gt;
&lt;p&gt;接下来，我将按照这三种流程一一向大家分解如何操作。&lt;/p&gt;
&lt;h2&gt;T-​Mobile 手机卡&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;购买&lt;/h2&gt;
&lt;p&gt;首先我们要在支持&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;的手机上面去下载，T-Mobile 的预付费卡&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;这个 APP。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;WoGVcG.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/WoGVcG.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;下载完成后打开 APP，它会检测手机是否支持&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;，如果不支持将无法继续。&lt;/p&gt;
&lt;p&gt;如果支持，我们在 APP 里输入想要绑定的邮箱。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;WQX0rA.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/WQX0rA.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;然后输入要激活的手机号码的区号。比如说，我想要一个洛杉矶的手机号码，那么我输入洛杉矶的区号 90001，然后点击下一步，再点击确认。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;Az0Xih.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/Az0Xih.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;接下来我们选择套餐。建议直接选择最便宜的 10 美元的套餐，因为前面的 60 美元和 50 美元套餐都是无限的短信、语音和流量，但在中国是无法使用流量的。所以 10 美元的套餐就够了。不过，如果你想要无限的语音和短信，可以选择 15 美元的套餐。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;RKo2qJ.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/RKo2qJ.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;选择完成后点击继续，然后同意一下协议。&lt;/p&gt;
&lt;p&gt;接下来，我们需要输入&lt;a href=&quot;https://itangtalk.com/tag/us-bank&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;银行卡号&lt;/a&gt;进行付款。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;5K4sEM.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/5K4sEM.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;我用的是&lt;a href=&quot;https://itangtalk.com/tag/us-bank/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;美国银行的信用卡&lt;/a&gt;来支付，但是网上有小伙伴反馈，使用国内发行的 Visa 或者万事达卡也是可以的。然后选择美国作为国家，输一下账单的地址。&lt;/p&gt;
&lt;p&gt;接下来非常关键的一步，是要创建一个 PIN。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;DUOqsE.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/DUOqsE.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;这个 PIN 非常重要，无论是登录账户还是使用手机卡都需要用到。设置完成后点击下一步，然后确认信息没有问题，最后点击完成支付。系统会处理支付。&lt;/p&gt;
&lt;p&gt;接下来，我们要跳转到安装&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;的步骤。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;EjKCSG.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/EjKCSG.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;我们点击继续，然后自定义一个标签，我选择「T-Mobile」，然后点击继续。现在我们可以看到已经生成了一个号码，&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;已经安装成功了。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;Y6Pow8.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/Y6Pow8.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img alt=&quot;9qdhzQ.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/9qdhzQ.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;接下来我们点开手机的设置，点击蜂窝网络，可以看到&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;的卡，但是信号栏是没有信号的。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;U5jufs.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/U5jufs.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img alt=&quot;gwEwJy.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/gwEwJy.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;我们需要去激活&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通话的功能。我们直接点击&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通话，然后选择启用。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;UwAZMe.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/UwAZMe.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;接下来会跳出一个窗口，如果你和我一样遇到错误提示的话，是因为我们的网络不好。这时候需要通过开启代理才可以。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;BmZf39.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/BmZf39.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;我们打开了美国代理，我们再次点击，可以看到已经成功跳出来输入地址的界面。在这里，我们随便输入一个美国地址就可以了。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;pduCgB.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/pduCgB.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;输入完成后点击保存。需要注意的是，保存完成后一定要点击右下角的关闭按钮，不要点击左上角的取消按钮。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;aPkWli.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/aPkWli.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;之前我操作了好几次都没有成功，主要原因就是点击了取消，这样会取消设置&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通话。只有点击关闭才是确定设置了&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通话。&lt;/p&gt;
&lt;p&gt;点击完关闭后，我们回到设置的界面，就可以看到&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通话已经成功打开了。此时，我们就可以收到 T-Mobile 发来的账户激活成功的信息了。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;k2ekwv.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/k2ekwv.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img alt=&quot;Udjpw6.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/Udjpw6.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;以上就是&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;的购买、下载和安装的教程。&lt;/p&gt;
&lt;h2&gt;购买&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;的三个要点&lt;/h2&gt;
&lt;p&gt;购买&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;有三个非常关键的点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;首先，手机要支持&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;。目前所有的国行手机都不支持，需要有美版、港版等其他支持&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;的海外版手机才可以。&lt;/li&gt;&lt;li&gt;其次，第二个难点是我们在购买时必须要有一个&lt;a href=&quot;https://itangtalk.com/tag/us-bank/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;外币信用卡&lt;/a&gt;，这样才能够去付款。&lt;/li&gt;&lt;li&gt;第三个是在激活&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通话时，必须要有科学上网的环境，这样才能打开输入地址的界面去激活&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通话进行使用。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;接下来我们继续向大家演示，如果我有实体手机卡，要如何去激活账户进行操作。&lt;/p&gt;
&lt;p&gt;好的，现在我们回到&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile 的官网&lt;/a&gt;，然后我们先演示如何去订购一张实体的手机卡。如果你有美国的地址，而且不希望从别人那里购买手机卡，想要一张全新的话，那么可以选择直接在官网进行订购。&lt;/p&gt;
&lt;p&gt;我们点击这里的选择。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;ml8xZN.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/ml8xZN.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;然后选择「我是新用户」。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;Q9h76D.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/Q9h76D.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;在这里，我们选择套餐。首先给我们展示的是无限流量和语音的套餐，我们不需要，直接点击「有限流量套餐」，然后选择最便宜的 10 美元的套餐就可以了。然后点击选择。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;MbVAB2.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/MbVAB2.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;在这个界面，我们可以看到一共需要支付 20 美元，其中 10 美元是购买卡的费用，另外 10 美元是第 1 个月的月租。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;yG1Jzn.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/yG1Jzn.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;确认完成后，点击「开始结算」。&lt;/p&gt;
&lt;p&gt;接下来，在这里去创建一个&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;的账号。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;D45iLD.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/D45iLD.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;输入自己的邮箱，然后设置一个账号的 PIN。接着，输入自己的名字和收货地址。输入完成后，继续付款。&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;就会把实体的手机卡寄送到我们的地址。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;5bHRAb.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/5bHRAb.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;等我们收到这张实体的手机卡后，就可以去进行激活了。&lt;/p&gt;
&lt;p&gt;接下来我们演示实体手机卡的激活和使用。&lt;/p&gt;
&lt;p&gt;好的，我们还是回到这个页面，在这里输入自己 SIM 卡的卡号，也就是卡片背面的二维码上面的号码。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;7FdjGR.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/7FdjGR.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;输入完成后点击选择，然后页面会跳转到去付款的页面，和之前操作是一样的。关键是付 10 美元去激活这个卡片。&lt;/p&gt;
&lt;p&gt;当我们支付完 10 美元后，就可以看到我们的手机号码了。我们把卡插到手机里，依然是没有信号的，需要我们开启&lt;a href=&quot;https://itangtalk.com/%5BWiFi%5D(https://itangtalk.com/wifi-calling/)-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Wi-​Fi&lt;/a&gt;通话，具体流程和&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;开通是一样的。&lt;/p&gt;
&lt;p&gt;接下来我们去注册&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;的账户。需要注意的是在这个过程中需要全程开启美国代理，如果没有开启，直接用国内 IP 的话，可能是打不开这个网站。&lt;/p&gt;
&lt;p&gt;我们点击注册。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;XT59Nr.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/XT59Nr.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;接着输入自己的美国手机号码，点击下一步。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;ODNNyn.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/ODNNyn.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;在这里去输入自己的名字，邮箱，电话号码，并设置一个 T-Mobile 账户的密码。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;pWHQH8.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/pWHQH8.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;接下来要进行邮箱验证码的验证。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;DCAnVb.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/DCAnVb.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;完成邮箱验证后，我们要进行手机卡的验证。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;SyzCPq.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/SyzCPq.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;在这步操作时，我们需要先把手机卡插在手机上，或者打开&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;，并保持&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通话连接的状态，这样才能收到系统发给我们的六位数字验证码。&lt;/p&gt;
&lt;p&gt;输入验证码后点击继续，然后再输入之前设置的 PIN。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;0NfBPf.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/0NfBPf.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;这里会问是否要设置谷歌验证账户，我们可以选择不设置。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;DJCmCQ.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/DJCmCQ.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;接下来就顺利登录到后台了。&lt;/p&gt;
&lt;p&gt;在后台的界面中，我们可以看到我们当前的手机号码套餐还有可用的余额。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;xA2SSj.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/xA2SSj.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;在我的账户里，我们可以修改一些信息。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;RPy623.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/RPy623.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;设置一个安全问题，充值或者打开自动充值，这样就不会因为忘记充话费而导致账户暂停。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;HUhk6b.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/HUhk6b.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;这些设置都比较简单，大家可以自己进去操作一下。&lt;/p&gt;
&lt;h2&gt;转移号码教程&lt;/h2&gt;
&lt;p&gt;接下来想重点和大家分享的就是如何去转入自己已有的号码，或者说如何去更换号码。&lt;/p&gt;
&lt;p&gt;点击左上角的「支持」。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;dNTqWI.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/dNTqWI.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;然后选择「账户」。在账户页面中，我们可以选择「更换手机号码」。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;WNyStr.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/WNyStr.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;这个时候要输入我们旧号码的转移信息。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;gJxoTJ.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/gJxoTJ.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;如果没有旧号码，那么可以选择继续使用&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;随机分配给我们的号码。或者也可以购买一个号码。&lt;/p&gt;
&lt;p&gt;购买美国手机号码现在主要有两种途径：一种是购买&lt;a href=&quot;https://itangtalk.com/google-voice/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Google Voice&lt;/a&gt;，然后转移到这张卡，具体方法大家可以看我之前做的视频教程。转移之后&lt;a href=&quot;https://itangtalk.com/google-voice/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Google Voice&lt;/a&gt;的运营商就会变成 T-Mobile，不再是虚拟号码；&lt;/p&gt;
&lt;p&gt;另外一种方式是直接在之前推荐过的，&lt;a href=&quot;https://www.numberbarn.com/?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;NumberBarn&lt;/a&gt;网站上购买号码。也是可以转移成功的。&lt;/p&gt;
&lt;p&gt;购买完号码后，我们会得到四个关键的信息：手机号码、账户号码，&lt;a href=&quot;https://itangtalk.com/google-voice/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Google Voice&lt;/a&gt;的手机号码和账户号码是一样的，但其他运营商的话大部分是不一样的、PIN，以及之前旧号码的邮编。&lt;/p&gt;
&lt;p&gt;全部输入完成后，我们点击继续。如果输入后无法继续的话，可能是因为我们的 IP 问题，这时候尝试更换美国 IP 就可以了。然后我们继续输入这些信息后，就可以顺利地将我们之前的号码转移到这张新卡上面了。&lt;/p&gt;
&lt;p&gt;下面向大家说明一下如何去更改套餐。&lt;/p&gt;
&lt;p&gt;目前有四个渠道可以要求修改套餐：&lt;/p&gt;
&lt;p&gt;1.打客服电话，要求人工客服&lt;a href=&quot;https://itangtalk.com/tmobile/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;877–464-8646&lt;/a&gt;把套餐改成三美元，如果说不行就挂掉，重新联系下一个客服。&lt;/p&gt;
&lt;p&gt;2.关注&lt;a href=&quot;https://twitter.com/TMobileHelp?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile Twitter&lt;/a&gt;，然后发私信，提出相同的要求，如果说不行就退出，过一会儿重新联系下一个客服。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;QEbeKG.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/QEbeKG.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img alt=&quot;uF7p7R.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/uF7p7R.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;3.关注&lt;a href=&quot;https://www.facebook.com/TMobile/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile Facebook&lt;/a&gt;，然后发私信，提出相同的要求，如果说不行就退出，过一会儿重新联系下一个客服。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;d6JHTA.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/d6JHTA.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;4.第四种方式是隐藏模式，我们可以来到&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile 官网&lt;/a&gt;，在最下面的用户条款中有说明。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;iqhxX1.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/iqhxX1.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;如果我们账户内有余额，但是不足以支付 10 美元的月租，那么在 120 天之后，我们的卡就会自动转为月租 3 美元的套餐了。所以我们只需要在激活卡片后，账户充值 3–9 美元之间的任意金额，然后躺平 120 天就可以了。&lt;/p&gt;
&lt;p&gt;使用这种模式转套餐，需要注意的是，因为从第二个月开始，我们实际上就已经是欠费状态了，所以这个卡我们是无法正常使用的，只能接受系统短信。在 120 天之后，变成 3 美元的套餐了，我们就可以正常使用这张卡了。&lt;/p&gt;
&lt;p&gt;我自己是通过&lt;a href=&quot;https://www.facebook.com/TMobile/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile Facebook&lt;/a&gt;客服更换成功，提出要求后，客服二话没说就给改了，后台马上可以看到套餐下个月生效。&lt;/p&gt;
&lt;p&gt;总结起来的话，推荐使用&lt;a href=&quot;https://twitter.com/TMobileHelp?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;和&lt;a href=&quot;https://www.facebook.com/TMobile/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Facebook&lt;/a&gt;私信的方法。电话客服普遍等待时间比较长，英语不会的小伙伴更是不适用。还不如就直接扔条私信给客服，慢慢等回应就可以了。&lt;/p&gt;
&lt;p&gt;更改套餐并不困难，需要的是耐心和毅力，就是不停地与客服进行沟通和尝试。如果一个客服无法帮助你，就换下一个客服继续尝试。我打算在一个月的时间内慢慢联系客服去解决这个问题。然而，经过我的实际测试，第二天联系了七八个客服后，终于碰到了一个可以帮我修改套餐的客服。大家可以参考一下我的经验。&lt;/p&gt;
&lt;p&gt;最后总结一下，&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;的三美元套餐，与 Ultra&lt;a href=&quot;https://itangtalk.com/paygo/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;PayGo&lt;/a&gt;的三美元套餐。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;最明显的区别是&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;三美元套餐，只包含 30 条短信和 30 分钟通话，而 Ultra &lt;a href=&quot;https://itangtalk.com/paygo/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;PayGo&lt;/a&gt;有 100 分钟通话和 100 条短信。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;允许在后台查看所有操作和账单明细，而 Ultra &lt;a href=&quot;https://itangtalk.com/paygo/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;PayGo&lt;/a&gt;不提供账单明细，只能看到每月扣费总额。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;原生卡的充值金额是可选的，从 1 美元到 300 美元都可以，而 Ultra &lt;a href=&quot;https://itangtalk.com/paygo/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;PayGo&lt;/a&gt;只能充值 5、10、20 这三种面值，相对而言不太灵活。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;的三美元套餐是绝版套餐，由&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;官方提供服务，相对而言客服服务也较好。而 Ultra &lt;a href=&quot;https://itangtalk.com/paygo/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;PayGo&lt;/a&gt;提供的客服服务质量一般，但是胜在有中文客服电话，适合英语不好的小伙伴。&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;hr /&gt;&lt;p style=&quot;text-indent: 0;&quot;&gt;&lt;br /&gt;&lt;/p&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻墙技术博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;订阅地址及社交帐号&lt;/a&gt;&lt;/div&gt;</description>
            <link>https://www.chinagfw.org/2023/08/t-mobileesim3.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-1611700167891167683</guid>
            <pubDate>Sun, 30 Jul 2023 12:34:00 +0000</pubDate>
            <atom:updated>2023-08-06T21:38:52.255+08:00</atom:updated>
            <title>中国封锁全球网络审查项目 OONI，影响测量数据提交和访问</title>
            <description>&lt;p data-pm-slice=&quot;0 0 []&quot;&gt;近日，&lt;a href=&quot;https://ooni.org/post/2023-china-blocks-ooni/&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;全球网络审查分析项目 OONI 发布公告&lt;/a&gt;：&lt;/p&gt;&lt;p&gt;鉴于我们的工作和工具主要围绕测量和揭示中国和世界各地的互联网审查，而中国拥有全球最先进和普遍的互联网审查水平，这并不令人意外。然而，我们不确定为什么中国决定在此特定时刻开始封锁我们（&lt;b&gt;而不是几年前&lt;/b&gt;），因为自 2014 年以来，我们已经从中国收集到了 OONI 的测量数据。OONI 在中国的封锁时间（似乎始于 2023 年 7 月 7 日）使我们认为这可能与我们最近在 2023 年 6 月底关于 F-Droid 在中国的封锁有关。但是我们还在 2019 年报告了中国封锁维基百科的情况（以及其他关于中国审查的报告），当时中国并没有封锁我们的服务。&lt;/p&gt;&lt;p&gt;虽然我们过去曾注意到其他国家尝试封锁我们的服务（这就是为什么我们在 OONI Probe 中添加了后端代理支持，以规避对我们服务的任何意外或故意封锁），但这是我们首次看到由此导致的 OONI 测量覆盖范围大幅下降。&lt;/p&gt;&lt;p&gt;在这份报告中，我们分享了关于中国封锁 OONI 服务的 OONI 数据。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;封锁 OONI 网站&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;从 2023 年 7 月 7 日开始，中国的几个网络似乎封锁了我们的网站（ooni.org）的访问。以下图表汇总了过去一个月内在中国网络中对 ooni.org 进行测试的 OONI 测量覆盖范围。&lt;/p&gt;&lt;p&gt;从上图可以看出，所有测量在 2023 年 7 月 7 日失败，此后收集的大多数测量要么失败，要么出现异常。虽然测量通常被注释为「失败」，当 OONI Probe 实验无法按预期执行时（例如由于错误），这些测量也可能是审查的症状。同时，当测量出现互联网审查的迹象时，它们被注释为「异常」（尽管可能会出现误报）。&lt;/p&gt;&lt;p&gt;值得注意的是，在此之前，从中国对 ooni.org 的测试收集的 OONI 测量显示 ooni.org 在中国的测试网络上是可访问的。只有 2023 年 7 月 4 日的一次测量出现异常（因为 DNS 查询导致超时错误），但这个单独的测量并不能提供关于审查的强烈信号（因为 DNS 解析返回了正确的 IP 地址）。&lt;/p&gt;&lt;p&gt;如果我们扩展在中国对 ooni.org 的测量覆盖范围的日期范围（从今年年初开始），我们可以更清楚地看到以前的大多数测量都是成功的（偶尔会有一些异常），而从 2023 年 7 月 7 日开始，失败和异常测量的比例增加了（如下图所示）。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://ooni.org/post/2023-china-blocks-ooni/images/image1.png&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;image1_hu8959f9e31213f67bfc81716700490062_692998_1000x800_fit_box_3.png&quot; src=&quot;https://ooni.org/post/2023-china-blocks-ooni/images/image1_hu8959f9e31213f67bfc81716700490062_692998_1000x800_fit_box_3.png&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;strong&gt;&lt;/strong&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;上图不仅表明中国在 2023 年 7 月 7 日开始封锁对 ooni.org 的访问，还表明他们可能还开始封锁我们的后端服务，阻止 OONI 测量的提交。与之前的几个月相比，过去两周的测量覆盖范围下降，这一点暗示了这一点。我们将在报告的下一部分进一步探讨这个问题。&lt;/p&gt;&lt;p&gt;使用我们的 Web 连接性 v0.5 实验收集的数据说明了 https://ooni.org 的封锁情况。查询密钥显示使用系统和 8.8.8.8:53/udp 解析器进行 DNS 查找返回以下表中的值。&lt;/p&gt;&lt;p&gt;IP 地址 	AS 号码 	组织&lt;/p&gt;&lt;p&gt;2a03:2880:f12c:183:face:b00c:0:25de 	32934 	Facebook, Inc.&lt;/p&gt;&lt;p&gt;202.160.130.52 	13414 	Twitter Inc.&lt;/p&gt;&lt;p&gt;111.243.214.169 	3462 	Chunghwa Telecom Co., Ltd.&lt;/p&gt;&lt;p&gt;2001::caa0:80d2 	N/A（bogon） 	N/A（bogon）&lt;/p&gt;&lt;p&gt;前三个 IP 地址显然对于 ooni.org 域名是错误的（托管在 AS16509 上），第四个 IP 地址是一个 bogon IP 地址（即不应该出现在公共 IP 网络上的 IP 地址）。向 DNS 查询注入属于大公司（如 Facebook）的似乎随机的 IP 地址以审查 DNS 查询是中国防火墙的典型做法。&lt;/p&gt;&lt;p&gt;OONI 数据显示测试助手无法连接到第二个和第三个 IP 地址。由于第四个 IP 地址是 bogon，测试助手甚至不会尝试建立连接。测试助手可以连接到第一个 IP 地址，但显然 TLS 握手失败，因为给定的 Facebook IP 地址无法为 ooni.org 域名显示有效的 X.509 证书。&lt;/p&gt;&lt;p&gt;除了尝试使用 TLS 验证探测到的 IP 地址外，测试助手还为域名提供了有效的 IP 地址。在此测量实例中，测试助手将 99.83.231.61 和 75.2.60.5 返回给探测器。反过来，探测器使用这两个地址，但在 TLS 握手期间都失败了。&lt;/p&gt;&lt;p&gt;我们的 DNS-over-UDP 客户端在接收到第一个响应后会等待一段时间以获取重复的 DNS 响应。在此测量中，我们收到了发送到 8.8.8.8:53/udp 公共 DNS 解析器的每个 DNS 查询的两个重复响应。以下表格显示了我们收到的额外响应（其中第一个接收到的响应为 1，第一个重复响应为 2，依此类推）。&lt;/p&gt;&lt;p&gt;域名 	类型 	计数 	地址 	AS 号码 	组织&lt;/p&gt;&lt;p&gt;&lt;a data-link-auto=&quot;&quot; href=&quot;https://ooni.org&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;ooni.org&lt;/a&gt; 	AAAA 	2 	[ 2001::a27d:601 ] 	N/A（bogon） 	N/A（bogon）&lt;/p&gt;&lt;p&gt;&lt;a data-link-auto=&quot;&quot; href=&quot;https://ooni.org&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;ooni.org&lt;/a&gt; 	A 	2 	[ 108.160.165.173 ] 	19679 	Dropbox Inc&lt;/p&gt;&lt;p&gt;&lt;a data-link-auto=&quot;&quot; href=&quot;https://ooni.org&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;ooni.org&lt;/a&gt; 	AAAA 	3 	None 	N/A 	N/A&lt;/p&gt;&lt;p&gt;&lt;a data-link-auto=&quot;&quot; href=&quot;https://ooni.org&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;ooni.org&lt;/a&gt; 	A 	3 	[ 75.2.60.5, 99.83.231.61 ] 	16509 	Amazon&lt;/p&gt;&lt;p&gt;每个查询的第三个响应（第二个重复响应）包含正确的结果。这一事实强烈暗示存在中间盒子在合法响应到达探测器之前对查询进行响应，这是中国防火墙的众所周知的审查特性。&lt;/p&gt;&lt;p&gt;总结一下，我们得出结论，&lt;a data-link-auto=&quot;&quot; href=&quot;https://ooni.org/被 DNS 注入和 TLS 干扰的方式封锁。DNS 封锁包括注入包含无效 IP 地址的响应。TLS 封锁包括干扰 TLS 握手并重置 TCP 连接。&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;https://ooni.org/被 DNS 注入和 TLS 干扰的方式封锁。DNS 封锁包括注入包含无效 IP 地址的响应。TLS 封锁包括干扰 TLS 握手并重置 TCP 连接。&lt;/a&gt;&lt;/p&gt;&lt;p&gt;此外，OONI 数据显示&lt;a data-link-auto=&quot;&quot; href=&quot;https://ooni.torproject.org/也被封锁。封锁此 URL 的方法与上述封锁 https://ooni.org/的方法相同，我们观察到 DNS 注入和连接重置对 TLS 握手的干扰。&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;https://ooni.torproject.org/也被封锁。封锁此 URL 的方法与上述封锁 https://ooni.org/的方法相同，我们观察到 DNS 注入和连接重置对 TLS 握手的干扰。&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;封锁 OONI Probe&lt;/b&gt;&lt;/p&gt;&lt;p&gt;中国似乎还试图阻止 OONI Probe 用户提交测量数据。首先，这一点可以从过去两周中国 OONI 测量覆盖范围的大幅持续下降中推断出来。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://ooni.org/post/2023-china-blocks-ooni/images/image1.png&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;image1_hu8959f9e31213f67bfc81716700490062_692998_1000x800_fit_box_3.png&quot; src=&quot;https://ooni.org/post/2023-china-blocks-ooni/images/image1_hu8959f9e31213f67bfc81716700490062_692998_1000x800_fit_box_3.png&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;strong&gt;&lt;/strong&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;测量覆盖范围的下降表明，中国的大多数 OONI Probe 用户可能无法再提交测量数据进行发布。这一点尤其表明，以前每天从中国收集到的测量数据量更大，并且过去两周内测量覆盖范围的下降一直持续存在。我们还观察到从 2023 年 7 月 7 日开始的 Web 连接性测量失败数量的总体增加，这与 ooni.org 封锁开始的日期相关。&lt;/p&gt;&lt;p&gt;要封锁 OONI Probe，中国的 ISP 必须封锁我们的后端服务，阻止 OONI Probe 用户提交测量数据。因此，我们分析了通过使用 Snowflake 作为代理收集的与我们的 API 和测试助手相关的 OONI 数据。&lt;/p&gt;&lt;p&gt;以下表格总结了我们的发现。&lt;/p&gt;&lt;p&gt;测量 	目标域名 	bogons 	错误地址 	TCP/IP 封锁 	TLS 封锁&lt;/p&gt;&lt;p&gt;数据 	&lt;a data-link-auto=&quot;&quot; href=&quot;https://api.ooni.io&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;api.ooni.io&lt;/a&gt; 	✔️ 	✔️ 		✔️&lt;/p&gt;&lt;p&gt;数据 	&lt;a data-link-auto=&quot;&quot; href=&quot;https://0.th.ooni.org&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;0.th.ooni.org&lt;/a&gt; 	✔️ 	✔️ 		✔️&lt;/p&gt;&lt;p&gt;数据 	&lt;a data-link-auto=&quot;&quot; href=&quot;https://1.th.ooni.org&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;1.th.ooni.org&lt;/a&gt; 	✔️ 	✔️ 		✔️&lt;/p&gt;&lt;p&gt;数据 	&lt;a data-link-auto=&quot;&quot; href=&quot;https://2.th.ooni.org&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;2.th.ooni.org&lt;/a&gt; 	✔️ 	✔️ 		✔️&lt;/p&gt;&lt;p&gt;数据 	&lt;a data-link-auto=&quot;&quot; href=&quot;https://3.th.ooni.org&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;3.th.ooni.org&lt;/a&gt; 		✔️ 	✔️ 	✔️&lt;/p&gt;&lt;p&gt;数据 	&lt;a data-link-auto=&quot;&quot; href=&quot;https://dkyhjv0wpi2dk.cloudfront.net&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;dkyhjv0wpi2dk.cloudfront.net&lt;/a&gt; 				✔️&lt;/p&gt;&lt;p&gt;bogons、错误地址和 TLS 封锁的审查条件与上述封锁&lt;a data-link-auto=&quot;&quot; href=&quot;https://ooni.org/的情况完全相同。实际上，我们可以将封锁 https://ooni.org/的特征描述为 bogons、错误地址和 TLS 封锁。TCP/IP 封锁的审查条件表示我们无法建立 TLS 连接。成功表示我们可以成功与服务器通信。&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;https://ooni.org/的情况完全相同。实际上，我们可以将封锁 https://ooni.org/的特征描述为 bogons、错误地址和 TLS 封锁。TCP/IP 封锁的审查条件表示我们无法建立 TLS 连接。成功表示我们可以成功与服务器通信。&lt;/a&gt;&lt;/p&gt;&lt;p&gt;api.ooni.io、0.th.ooni.org、1.th.ooni.org 和 2.th.ooni.org 域名的封锁方式与 ooni.org 的封锁方式相同。&lt;/p&gt;&lt;p&gt;3.th.ooni.org 域名与 ooni.org 不同之处在于 DNS 响应不包含 bogons，而只包含与 3.th.ooni.org 域名无关的 IP 地址。此外，测试助手的 IP 地址也被 TCP/IP 封锁。我们不清楚为什么他们选择通过 IP 封锁此测试助手，而没有对其他测试助手采取同样的措施。&lt;/p&gt;&lt;p&gt;通过手动测试，我们确认了 SNI 3.th.ooni.org 也被过滤，并且过滤规则似乎适用于 ooni.org 或 ooni.io 的任何子域名。&lt;/p&gt;&lt;p&gt;最后，我们的 cloudfront 端点 dkyhjv0wpi2dk.cloudfront.net 只在 TLS 握手期间被封锁。本地解析器返回的所有 IP 地址都是合法的。&lt;/p&gt;&lt;p&gt;规避&lt;/p&gt;&lt;p&gt;为了使全球范围内的 OONI Probe 用户能够规避对我们服务的意外或故意封锁，OONI Probe 移动应用程序包括后端代理设置。通过这些设置，您可以启用 Psiphon 或使用自定义代理提交 OONI 测量数据。&lt;/p&gt;&lt;p&gt;中国的 OONI Probe 用户可以在 Android 上安装 Orbot 并配置其使用 Snowflake。然后，他们可以编辑 OONI Probe 移动应用程序的后端代理设置，将其设置为使用自定义代理，并将其指向 127.0.0.1:9050。&lt;/p&gt;&lt;p&gt;具体而言，可以通过以下步骤完成：&lt;/p&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li&gt;从 Play 商店安装 Orbot 或从 GitHub 下载 APK。&lt;/li&gt;&lt;li&gt;打开 Orbot 并启用「使用桥接」选项。&lt;/li&gt;&lt;li&gt;选择「通过其他使用 Snowflake 的 Tor 用户连接（方法 1-快速）」，然后点击返回按钮。&lt;/li&gt;&lt;li&gt;通过点击大洋葱标志启动 Orbot，并等待它启动。&lt;/li&gt;&lt;li&gt;在 OONI Probe 中进入设置-&amp;gt; OONI 后端代理。&lt;/li&gt;&lt;li&gt;选择「自定义代理」，并将主机名设置为 127.0.0.1，端口设置为 9050。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;如果您运行 OONI Probe，现在应该能够使用 Orbot 和 Snowflake 提交测量数据进行发布。&lt;/p&gt;&lt;p&gt;重要提示：运行 OONI Probe 可能存在风险，尤其是在中国。现在中国的 ISP 正在封锁 OONI 服务，因此在中国运行 OONI Probe 可能会引起更多关注并带来更大的风险。&lt;/p&gt;&lt;p&gt;&lt;b&gt;结论&lt;/b&gt;&lt;/p&gt;&lt;p&gt;自 2014 年以来，OONI 测量数据已经从中国收集，记录了该国先进和普遍的互联网审查水平。最近封锁我们的后端服务意味着在中国运行 OONI Probe 现在更加困难（可能也更加危险），导致过去几周 OONI 测量覆盖范围的显著下降。&lt;/p&gt;&lt;p&gt;我们对此封锁特别担忧，因为来自中国的 OONI 数据已经成为该国互联网审查的大型开放数据集。从 2014 年至今，收集了来自 193 个网络的 800 多万个测量数据，OONI 数据为过去 9 年中国的互联网审查情况提供了独特的见解。如果 OONI 封锁继续下去，将限制研究人员今后研究中国互联网审查的能力。&lt;/p&gt;&lt;p&gt;因此，这一封锁突出了我们需要改进规避能力的问题。虽然 OONI Probe 包括用于规避意外或故意封锁的后端代理设置，但还需要更多工作来提高 OONI Probe 的韧性，以确保在被审查的环境中仍然可以进行审查测量。&lt;/p&gt;&lt;p&gt;致谢&lt;/p&gt;&lt;p&gt;我们感谢过去 9 年在中国运行 OONI Probe 的所有人。&lt;/p&gt;&lt;p&gt;&lt;a data-link-auto=&quot;&quot; href=&quot;https://ooni.org/post/2023-china-blocks-ooni/&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;https://ooni.org/post/2023-china-blocks-ooni/&lt;/a&gt;&lt;/p&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻墙技术博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;订阅地址及社交帐号&lt;/a&gt;&lt;/div&gt;</description>
            <link>https://www.chinagfw.org/2023/07/ooni.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-5311980598164035378</guid>
            <pubDate>Sun, 30 Jul 2023 12:21:00 +0000</pubDate>
            <atom:updated>2023-08-01T13:26:58.616+08:00</atom:updated>
            <title>到底一台服务器上最多能创建多少个 TCP 连接</title>
            <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;p&gt;via &lt;a href=&quot;https://plantegg.github.io/2020/11/30/%E4%B8%80%E5%8F%B0%E6%9C%BA%E5%99%A8%E4%B8%8A%E6%9C%80%E5%A4%9A%E8%83%BD%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%B0%91%E4%B8%AATCP%E8%BF%9E%E6%8E%A5/&quot; target=&quot;_blank&quot;&gt;https://plantegg.github.io/2020/11/30/%E4%B8%80%E5%8F%B0%E6%9C%BA%E5%99%A8%E4%B8%8A%E6%9C%80%E5%A4%9A%E8%83%BD%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%B0%91%E4%B8%AATCP%E8%BF%9E%E6%8E%A5/&lt;/a&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;blockquote&gt;经常听到有同学说一台机器最多能创建 65535 个 TCP 连接，这其实是错误的理解，为什么会有这个错误的理解呢？&lt;/blockquote&gt;

&lt;h2&gt;port range&lt;/h2&gt;
&lt;p&gt;我们都知道 linux 下本地随机端口范围由参数控制，也就是 listen、connect 时候如果没有指定本地端口，那么就从下面的 port range 中随机取一个可用的&lt;/p&gt;
&lt;figure&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;br /&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;# cat /​proc/​sys/​net/​ipv4/​ip_​local_​port_​range&lt;/p&gt;
&lt;p&gt;2000 65535&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/figure&gt;
&lt;p&gt;port range 的上限是 65535，所以也经常看到这个&lt;strong&gt;误解&lt;/strong&gt;：一台机器上最多能创建 65535 个 TCP 连接&lt;/p&gt;
&lt;h2&gt;到底一台机器上最多能创建多少个 TCP 连接&lt;/h2&gt;
&lt;p&gt;先说&lt;strong&gt;结论&lt;/strong&gt;：在内存、文件句柄足够的话可以创建的连接是&lt;strong&gt;没有限制&lt;/strong&gt;的（每个 TCP 连接至少要消耗一个文件句柄）。&lt;/p&gt;
&lt;p&gt;那么/​proc/​sys/​net/​ipv4/​ip_​local_​port_​range 指定的端口范围到底是什么意思呢？&lt;/p&gt;
&lt;p&gt;核心规则：&lt;strong&gt;一个 TCP 连接只要保证四元组 (src-ip src-​port dest-​ip dest-port) 唯一就可以了，而不是要求 src port 唯一&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;后面所讲都遵循这个规则，所以在心里反复默念：&lt;strong&gt;四元组唯一&lt;/strong&gt; 五个大字，就能分析出来到底能创建多少 TCP 连接了。&lt;/p&gt;
&lt;p&gt;比如如下这个机器上的 TCP 连接实际状态：&lt;/p&gt;
&lt;figure&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;br /&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;# netstat –ant |grep 18089&lt;/p&gt;
&lt;p&gt;tcp 0 0 192.168.1.79:18089 192.168.1.79:22 ESTABLISHED&lt;/p&gt;
&lt;p&gt;tcp 0 0 192.168.1.79:18089 192.168.1.79:18080 ESTABLISHED&lt;/p&gt;
&lt;p&gt;tcp 0 0 192.168.0.79:18089 192.168.0.79:22 TIME_​WAIT&lt;/p&gt;
&lt;p&gt;tcp 0 0 192.168.1.79:22 192.168.1.79:18089 ESTABLISHED&lt;/p&gt;
&lt;p&gt;tcp 0 0 192.168.1.79:18080 192.168.1.79:18089 ESTABLISHED&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/figure&gt;
&lt;p&gt;从前三行可以清楚地看到 18089 被用了三次，第一第二行 src-ip、dest-ip 也是重复的，但是 dest port 不一样，第三行的 src-port 还是 18089，但是 src-ip 变了。他们的四元组均不相同。&lt;/p&gt;
&lt;p&gt;所以一台机器能创建的 TCP 连接是没有限制的，而 ip_local_port_range 是指没有 bind 的时候 OS 随机分配端口的范围，但是分配到的端口要同时满足五元组唯一，这样
 ip_​local_​port_​range 
限制的是连同一个目标（dest-ip 和 dest-port 一样）的 port 的数量（请忽略本地多网卡的情况，因为 dest-ip 为以后 route 只会选用一个本地 ip）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;那么为什么大家有这样的误解呢？&lt;/strong&gt;我总结了下，大概是以下两个原因让大家误解了：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果是 listen 服务，那么肯定端口不能重复使用，这样就跟我们的误解对应上了，一个服务器上最多能监听 65535 个端口。比如 nginx 监听了 80 端口，那么 tomcat 就没法再监听 80 端口了，这里的 80 端口只能监听一次。&lt;/li&gt;&lt;li&gt;另外如果我们要连的 server 只有一个，比如：1.1.1.1:80 ，同时本机只有一个 ip 的话，那么这个时候即使直接调 connect 也只能创建出 65535 个连接，因为四元组中的三个是固定的了。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;我们在创建连接前，经常会先调 bind，bind 后可以调 listen 当做服务端监听，也可以直接调 connect 当做 client 来连服务端。&lt;/p&gt;
&lt;p&gt;bind(ip,port=0) 
的时候是让系统绑定到某个网卡和自动分配的端口，此时系统没有办法确定接下来这个 socket 是要去 connect 还是 listen. 
如果是 listen 的话，那么肯定是不能出现端口冲突的，如果是 connect 的话，只要满足 4 元组唯一即可。在这种情况下，系统只能尽可能满足更强的要求，就是先要求端口不能冲突，即使之后去 connect 的时候四元组是唯一的。&lt;/p&gt;
&lt;p&gt;比如 Nginx HaProxy envoy 这些软件在创建到 upstream 的连接时，都会用 bind(0) 的方式, 导致到不同目的的连接无法复用同一个 src port，这样后端的最大连接数受限于 local_port_range。&lt;/p&gt;

&lt;blockquote&gt;Linux 4.2 后的内核增加了 IP_BIND_ADDRESS_NO_PORT 这个 socket option 来解决这个问题，将 src port 的选择延后到 connect 的时候&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;a href=&quot;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=90c337da1524863838658078ec34241f45d8394d&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;IP_​BIND_​ADDRESS_​NO_​PORT (since Linux 4.2)&lt;/a&gt;&lt;br /&gt;Inform
 the kernel to not reserve an ephemeral port when using bind(2) with a 
port number of 0. The port will later be automatically chosen at 
connect(2) time, in a way that allows sharing a source port as long as 
the 4-​tuple is unique.&lt;/blockquote&gt;

&lt;p&gt;但如果我只是个 client 端，只需要连接 server 建立连接，也就不需要 bind，直接调 connect 就可以了，这个时候只要保证四元组唯一就行。&lt;/p&gt;
&lt;p&gt;bind() 的时候内核是还不知道四元组的，只知道 src_ip、src_port，所以这个时候单网卡下 src_port 是没法重复的，但是 connect() 的时候已经知道了四元组的全部信息，所以只要保证四元组唯一就可以了，那么这里的 src_port 完全是可以重复使用的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://plantegg.github.io/images/951413iMgBlog/640-20220224103024676.png&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;640-20220224103024676.png&quot; src=&quot;https://plantegg.github.io/images/951413iMgBlog/640-20220224103024676.png&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;是不是加上了 SO_REUSEADDR、SO_REUSEPORT 就能重用端口了呢？&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;TCP SO_​REUSEADDR&lt;/h2&gt;
&lt;p&gt;文档描述：&lt;/p&gt;

&lt;blockquote&gt;SO_​REUSEADDR Indicates that the rules used in validating 
addresses supplied in a bind(2) call should allow reuse of local 
addresses. For AF_​INET sockets this means that a socket may bind, 
except when there is an active listening socket bound to the address. 
When the listening socket is bound to INADDR_​ANY with a specific port 
then it is not possible to bind to this port for any local address. 
Argument is an integer boolean flag.&lt;/blockquote&gt;

&lt;p&gt;从这段文档中我们可以知道三个事：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;使用这个参数后，bind 操作是可以重复使用 local address 的，注意，这里说的是 local address，即 ip 加端口组成的本地地址，也就是两个本地地址，如果有任意 ip 或端口部分不一样，它们本身就是可以共存的，不需要使用这个参数。&lt;/li&gt;&lt;li&gt;当 local address 被一个处于 listen 状态的 socket 使用时，加上该参数也不能重用这个地址。&lt;/li&gt;&lt;li&gt;当处于 listen 状态的 socket 监听的本地地址的 ip 部分是 INADDR_ANY，即表示监听本地的所有 ip，即使使用这个参数，也不能再 bind 包含这个端口的任意本地地址，这个和 2 中描述的其实是一样的。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;==SO_​REUSEADDR 可以用本地相同的 (sip, sport) 去连 connect 远程的不同的（dip、dport）//而 SO_​REUSEPORT 主要是解决 Server 端的 port 重用==&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/YWzuKBK3TMclejeN2ziAvQ&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;SO_​REUSEADDR 还可以重用 TIME_​WAIT 状态的 port&lt;/a&gt;, 在程序崩溃后之前的 TCP 连接会进入到 TIME_WAIT 状态，需要一段时间才能释放，如果立即重启就会抛出 Address Already in use 的错误导致启动失败。这时候可以通过在调用 bind 函数之前设置 SO_REUSEADDR 来解决。&lt;/p&gt;

&lt;blockquote&gt;What exactly does SO_​REUSEADDR do?&lt;/blockquote&gt;
&lt;blockquote&gt;This socket option tells the kernel that even if this port 
is busy (in the TIME_​WAIT state), go ahead and reuse it anyway. If it 
is busy, but with another state, you will still get an address already 
in use error. It is useful if your server has been shut down, and then 
restarted right away while sockets are still active on its port. You 
should be aware that if any unexpected data comes in, it may confuse 
your server, but while this is possible, it is not likely.&lt;/blockquote&gt;
&lt;blockquote&gt;It has been pointed out that 「A socket is a 5 tuple (proto, 
local addr, local port, remote addr, remote port). SO_REUSEADDR just 
says that you can reuse local addresses. The 5 tuple still must be 
unique!」 This is true, and this is why it is very unlikely that 
unexpected data will ever be seen by your server. The danger is that 
such a 5 tuple is still floating around on the net, and while it is 
bouncing around, a new connection from the same client, on the same 
system, happens to get the same remote port.&lt;/blockquote&gt;

&lt;p&gt;By setting &lt;code&gt;SO_REUSEADDR&lt;/code&gt; user informs the kernel of an 
intention to share the bound port with anyone else, but only if it 
doesn’t cause a conflict on the protocol layer. There are at least three
 situations when this flag is useful:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Normally after binding to a port and stopping a server it’s 
neccesary to wait for a socket to time out before another server can 
bind to the same port. With &lt;code&gt;SO_REUSEADDR&lt;/code&gt; set it’s possible to rebind immediately, even if the socket is in a &lt;code&gt;TIME_WAIT&lt;/code&gt; state.&lt;/li&gt;&lt;li&gt;When one server binds to &lt;code&gt;INADDR_ANY&lt;/code&gt;, say &lt;code&gt;0.0.0.0:1234&lt;/code&gt;, it’s impossible to have another server binding to a specific address like &lt;code&gt;192.168.1.21:1234&lt;/code&gt;. With &lt;code&gt;SO_REUSEADDR&lt;/code&gt; flag this behaviour is allowed.&lt;/li&gt;&lt;li&gt;When using the bind before connect trick only a single connection 
can use a single outgoing source port. With this flag, it’s possible for
 many connections to reuse the same source port, given that they connect
 to different destination addresses.&lt;/li&gt;&lt;/ol&gt;
&lt;h2&gt;TCP SO_​REUSEPORT&lt;/h2&gt;
&lt;p&gt;SO_REUSEPORT 主要用来解决惊群、性能等问题。通过多个进程、线程来监听同一端口，进来的连接通过内核来 hash 分发做到负载均衡，避免惊群。&lt;/p&gt;

&lt;blockquote&gt;SO_​REUSEPORT is also useful for eliminating the 
try-​10-​times-​to-​bind hack in ftpd’s data connection setup routine. 
Without SO_​REUSEPORT, only one ftpd thread can bind to TCP (lhost, 
lport, INADDR_​ANY, 0) in preparation for connecting back to the client.
 Under conditions of heavy load, there are more threads colliding here 
than the try-​10-​times hack can accomodate. With SO_​REUSEPORT, things 
work nicely and the hack becomes unnecessary.&lt;/blockquote&gt;

&lt;p&gt;SO_REUSEPORT 使用场景：linux kernel 3.9 
引入了最新的 SO_REUSEPORT 选项，使得多进程或者多线程创建多个绑定同一个 ip:port 的监听 socket，提高服务器的接收链接的并发能力,程序的扩展性更好；此时需要设置 SO_REUSEPORT（&lt;strong&gt;注意所有进程都要设置才生效&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;setsockopt(listenfd, SOL_​SOCKET, SO_REUSEPORT,(const void *)&amp;amp;reuse , sizeof(int));&lt;/p&gt;
&lt;p&gt;目的：每一个进程有一个独立的监听 socket，并且 bind 相同的 ip:port，独立的 listen() 和 accept()；提高接收连接的能力。（例如 nginx 多进程同时监听同一个 ip:port）&lt;/p&gt;

&lt;blockquote&gt;(a) on Linux SO_​REUSEPORT is meant to be used &lt;em&gt;purely&lt;/em&gt;
 for load balancing multiple incoming UDP packets or incoming TCP 
connection requests across multiple sockets belonging to the same app. 
ie. it’s a work around for machines with a lot of cpus, handling heavy 
load, where a single listening socket becomes a bottleneck because of 
cross-​thread contention on the in-​kernel socket lock (and state).&lt;/blockquote&gt;
&lt;blockquote&gt;(b) set IP_​BIND_​ADDRESS_​NO_​PORT socket option for tcp sockets before binding to a specific source ip&lt;br /&gt;with port 0 if you’re going to use the socket for connect() rather then listen() this allows the kernel&lt;br /&gt;to delay allocating the source port until connect() time at which point it is much cheaper&lt;/blockquote&gt;

&lt;p&gt;Ephemeral Port Range 就是我们前面所说的 Port Range（/proc/sys/net/ipv4/ip_local_port_range）&lt;/p&gt;

&lt;blockquote&gt;A TCP/​IPv4 connection consists of two endpoints, and each 
endpoint consists of an IP address and a port number. Therefore, when a 
client user connects to a server computer, an established connection can
 be thought of as the 4-​tuple of (server IP, server port, client IP, 
client port).&lt;/blockquote&gt;
&lt;blockquote&gt;Usually three of the four are readily known – client machine
 uses its own IP address and when connecting to a remote service, the 
server machine’s IP address and service port number are required.&lt;/blockquote&gt;
&lt;blockquote&gt;What is not immediately evident is that when a connection is
 established that the client side of the connection uses a port number. 
Unless a client program explicitly requests a specific port number, the 
port number used is an ephemeral port number.&lt;/blockquote&gt;
&lt;blockquote&gt;Ephemeral ports are temporary ports assigned by a machine’s 
IP stack, and are assigned from a designated range of ports for this 
purpose. When the connection terminates, the ephemeral port is available
 for reuse, although most IP stacks won’t reuse that port number until 
the entire pool of ephemeral ports have been used.&lt;/blockquote&gt;
&lt;blockquote&gt;So, if the client program reconnects, it will be assigned a different ephemeral port number for its side of the new connection.&lt;/blockquote&gt;

&lt;h2&gt;linux 如何选择 Ephemeral Port&lt;/h2&gt;
&lt;p&gt;有资料说是随机从 Port Range 选择 port，有的说是顺序选择，那么实际验证一下。&lt;/p&gt;
&lt;p&gt;如下测试代码：&lt;/p&gt;
&lt;figure&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;br /&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;#include &amp;lt;stdio.h&amp;gt; /​/​printf&lt;/p&gt;
&lt;p&gt;#include &amp;lt;stdlib.h&amp;gt; /​/​atoi&lt;/p&gt;
&lt;p&gt;#include &amp;lt;unistd.h&amp;gt; /​/​close&lt;/p&gt;
&lt;p&gt;#include &amp;lt;arpa/inet.h&amp;gt; /​/​ntohs&lt;/p&gt;
&lt;p&gt;#include &amp;lt;sys/socket.h&amp;gt; /​/​connect, socket&lt;/p&gt;
&lt;p&gt;void sample() {&lt;/p&gt;
&lt;p&gt;/​/​Create socket&lt;/p&gt;
&lt;p&gt;int sockfd;&lt;/p&gt;
&lt;p&gt;if (sockfd = socket(AF_INET, SOCK_​STREAM, 0), –1 == sockfd) {&lt;/p&gt;
&lt;p&gt;perror(「socket」);&lt;/p&gt;
&lt;p&gt;/​/​Connect to remote. This does NOT actually send a packet.&lt;/p&gt;
&lt;p&gt;const struct sockaddr_​in raddr = {&lt;/p&gt;
&lt;p&gt;.sin_​family = AF_​INET,&lt;/p&gt;
&lt;p&gt;.sin_​port = htons(8080), /​/​arbitrary remote port&lt;/p&gt;
&lt;p&gt;.sin_​addr = htonl(INADDR_ANY) /​/​arbitrary remote host&lt;/p&gt;
&lt;p&gt;if (-1 == connect(sockfd, (const struct sockaddr *)&amp;amp;raddr, sizeof(raddr))) {&lt;/p&gt;
&lt;p&gt;perror(「connect」);&lt;/p&gt;
&lt;p&gt;/​/​Display selected ephemeral port&lt;/p&gt;
&lt;p&gt;const struct sockaddr_​in laddr;&lt;/p&gt;
&lt;p&gt;socklen_​t laddr_​len = sizeof(laddr);&lt;/p&gt;
&lt;p&gt;if (-1 == getsockname(sockfd, (struct sockaddr *)&amp;amp;laddr, &amp;amp;laddr_​len)) {&lt;/p&gt;
&lt;p&gt;perror(「getsockname」);&lt;/p&gt;
&lt;p&gt;printf(「local port: %i\n」, ntohs(laddr.sin_port));&lt;/p&gt;
&lt;p&gt;/​/​Close socket&lt;/p&gt;
&lt;p&gt;close(sockfd);&lt;/p&gt;
&lt;p&gt;int main() {&lt;/p&gt;
&lt;p&gt;for (int i = 0; i &amp;lt; 5; i++) {&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/figure&gt;
&lt;p&gt;bind 逻辑测试代码&lt;/p&gt;
&lt;figure&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;br /&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;#include &amp;lt;netinet/in.h&amp;gt;&lt;/p&gt;
&lt;p&gt;#include &amp;lt;arpa/inet.h&amp;gt;&lt;/p&gt;
&lt;p&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/p&gt;
&lt;p&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/p&gt;
&lt;p&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/p&gt;
&lt;p&gt;#include &amp;lt;errno.h&amp;gt;&lt;/p&gt;
&lt;p&gt;#include &amp;lt;string.h&amp;gt;&lt;/p&gt;
&lt;p&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/p&gt;
&lt;p&gt;#include &amp;lt;time.h&amp;gt;&lt;/p&gt;
&lt;p&gt;void test_​bind(){&lt;/p&gt;
&lt;p&gt;int listenfd = 0, connfd = 0;&lt;/p&gt;
&lt;p&gt;struct sockaddr_​in serv_​addr;&lt;/p&gt;
&lt;p&gt;char sendBuff[1025];&lt;/p&gt;
&lt;p&gt;time_​t ticks;&lt;/p&gt;
&lt;p&gt;socklen_​t len;&lt;/p&gt;
&lt;p&gt;listenfd = socket(AF_INET, SOCK_​STREAM, 0);&lt;/p&gt;
&lt;p&gt;memset(&amp;amp;serv_addr, ‘0’, sizeof(serv_addr));&lt;/p&gt;
&lt;p&gt;memset(sendBuff, ‘0’, sizeof(sendBuff));&lt;/p&gt;
&lt;p&gt;serv_addr.sin_family = AF_​INET;&lt;/p&gt;
&lt;p&gt;serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);&lt;/p&gt;
&lt;p&gt;serv_addr.sin_port = htons(0);&lt;/p&gt;
&lt;p&gt;bind(listenfd, (struct sockaddr*)&amp;amp;serv_addr, sizeof(serv_addr));&lt;/p&gt;
&lt;p&gt;len = sizeof(serv_addr);&lt;/p&gt;
&lt;p&gt;if (getsockname(listenfd, (struct sockaddr *)&amp;amp;serv_​addr, &amp;amp;len) == –1) {&lt;/p&gt;
&lt;p&gt;perror(「getsockname」);&lt;/p&gt;
&lt;p&gt;printf(「port number %d\n」, ntohs(serv_addr.sin_port)); //只是挑选到了 port，在系统层面保留，tcp 连接还没有，netstat 是看不到的&lt;/p&gt;
&lt;p&gt;int main(int argc, char *argv[])&lt;/p&gt;
&lt;p&gt;for (int i = 0; i &amp;lt; 5; i++) {&lt;/p&gt;
&lt;p&gt;test_​bind();&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/figure&gt;
&lt;h3&gt;3.10.0–327.ali2017.alios7.x86_64&lt;/h3&gt;
&lt;p&gt;编译后，执行 (3.10.0–327.ali2017.alios7.x86_64)：&lt;/p&gt;
&lt;figure&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;br /&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;#date; ./​client &amp;amp;&amp;amp; echo 「+++++++」 ; ./​client &amp;amp;&amp;amp; 
sleep 0.1 ; echo 「——-」 &amp;amp;&amp;amp; ./​client &amp;amp;&amp;amp; sleep 10; date; 
./​client &amp;amp;&amp;amp; echo 「+++++++」 ; ./​client &amp;amp;&amp;amp; sleep 0.1 
&amp;amp;&amp;amp; echo 「******」; ./​client;&lt;/p&gt;
&lt;p&gt;Fri Nov 27 10:52:52 CST 2020&lt;/p&gt;
&lt;p&gt;local port: 17448&lt;/p&gt;
&lt;p&gt;local port: 17449&lt;/p&gt;
&lt;p&gt;local port: 17451&lt;/p&gt;
&lt;p&gt;local port: 17452&lt;/p&gt;
&lt;p&gt;local port: 17453&lt;/p&gt;
&lt;p&gt;local port: 17455&lt;/p&gt;
&lt;p&gt;local port: 17456&lt;/p&gt;
&lt;p&gt;local port: 17457&lt;/p&gt;
&lt;p&gt;local port: 17458&lt;/p&gt;
&lt;p&gt;local port: 17460&lt;/p&gt;
&lt;p&gt;local port: 17475&lt;/p&gt;
&lt;p&gt;local port: 17476&lt;/p&gt;
&lt;p&gt;local port: 17477&lt;/p&gt;
&lt;p&gt;local port: 17478&lt;/p&gt;
&lt;p&gt;local port: 17479&lt;/p&gt;
&lt;p&gt;Fri Nov 27 10:53:02 CST 2020&lt;/p&gt;
&lt;p&gt;local port: 17997&lt;/p&gt;
&lt;p&gt;local port: 17998&lt;/p&gt;
&lt;p&gt;local port: 17999&lt;/p&gt;
&lt;p&gt;local port: 18000&lt;/p&gt;
&lt;p&gt;local port: 18001&lt;/p&gt;
&lt;p&gt;local port: 18002&lt;/p&gt;
&lt;p&gt;local port: 18003&lt;/p&gt;
&lt;p&gt;local port: 18004&lt;/p&gt;
&lt;p&gt;local port: 18005&lt;/p&gt;
&lt;p&gt;local port: 18006&lt;/p&gt;
&lt;p&gt;local port: 18010&lt;/p&gt;
&lt;p&gt;local port: 18011&lt;/p&gt;
&lt;p&gt;local port: 18012&lt;/p&gt;
&lt;p&gt;local port: 18013&lt;/p&gt;
&lt;p&gt;local port: 18014&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/figure&gt;
&lt;p&gt;从测试看起来 linux 下端口选择跟时间有关系，起始端口肯定是顺序增加，起始端口应该是在 Ephemeral Port 范围内并且和时间戳绑定的某个值（也是递增的），即使没有使用任何端口，起始端口也会随时间增加而增加。&lt;/p&gt;
&lt;h3&gt;4.19.91–19.1.al7.x86_64&lt;/h3&gt;
&lt;p&gt;换个内核版本编译后，执行 (4.19.91–19.1.al7.x86_64)：&lt;/p&gt;
&lt;figure&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;br /&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;$date; ./​client &amp;amp;&amp;amp; echo 「+++++++」 ; ./​client &amp;amp;&amp;amp; 
sleep 0.1 ; echo 「——-」 &amp;amp;&amp;amp; ./​client &amp;amp;&amp;amp; sleep 10; date; 
./​client &amp;amp;&amp;amp; echo 「+++++++」 ; ./​client &amp;amp;&amp;amp; sleep 0.1 
&amp;amp;&amp;amp; echo 「******」; ./​client;&lt;/p&gt;
&lt;p&gt;Fri Nov 27 14:10:47 CST 2020&lt;/p&gt;
&lt;p&gt;local port: 7890&lt;/p&gt;
&lt;p&gt;local port: 7892&lt;/p&gt;
&lt;p&gt;local port: 7894&lt;/p&gt;
&lt;p&gt;local port: 7896&lt;/p&gt;
&lt;p&gt;local port: 7898&lt;/p&gt;
&lt;p&gt;local port: 7900&lt;/p&gt;
&lt;p&gt;local port: 7902&lt;/p&gt;
&lt;p&gt;local port: 7904&lt;/p&gt;
&lt;p&gt;local port: 7906&lt;/p&gt;
&lt;p&gt;local port: 7908&lt;/p&gt;
&lt;p&gt;local port: 7910&lt;/p&gt;
&lt;p&gt;local port: 7912&lt;/p&gt;
&lt;p&gt;local port: 7914&lt;/p&gt;
&lt;p&gt;local port: 7916&lt;/p&gt;
&lt;p&gt;local port: 7918&lt;/p&gt;
&lt;p&gt;Fri Nov 27 14:10:57 CST 2020&lt;/p&gt;
&lt;p&gt;local port: 7966&lt;/p&gt;
&lt;p&gt;local port: 7968&lt;/p&gt;
&lt;p&gt;local port: 7970&lt;/p&gt;
&lt;p&gt;local port: 7972&lt;/p&gt;
&lt;p&gt;local port: 7974&lt;/p&gt;
&lt;p&gt;local port: 7976&lt;/p&gt;
&lt;p&gt;local port: 7978&lt;/p&gt;
&lt;p&gt;local port: 7980&lt;/p&gt;
&lt;p&gt;local port: 7982&lt;/p&gt;
&lt;p&gt;local port: 7984&lt;/p&gt;
&lt;p&gt;local port: 7988&lt;/p&gt;
&lt;p&gt;local port: 7990&lt;/p&gt;
&lt;p&gt;local port: 7992&lt;/p&gt;
&lt;p&gt;local port: 7994&lt;/p&gt;
&lt;p&gt;local port: 7996&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/figure&gt;
&lt;p&gt;以上测试时的参数&lt;/p&gt;
&lt;figure&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;br /&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;$cat /​proc/​sys/​net/​ipv4/​ip_​local_​port_​range&lt;/p&gt;
&lt;p&gt;1024 65535&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/figure&gt;
&lt;p&gt;将 1024 改成 1025 后，分配出来的都是奇数端口了：&lt;/p&gt;
&lt;figure&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;br /&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;$cat /​proc/​sys/​net/​ipv4/​ip_​local_​port_​range&lt;/p&gt;
&lt;p&gt;local port: 1033&lt;/p&gt;
&lt;p&gt;local port: 1025&lt;/p&gt;
&lt;p&gt;local port: 1027&lt;/p&gt;
&lt;p&gt;local port: 1029&lt;/p&gt;
&lt;p&gt;local port: 1031&lt;/p&gt;
&lt;p&gt;local port: 1033&lt;/p&gt;
&lt;p&gt;local port: 1025&lt;/p&gt;
&lt;p&gt;local port: 1027&lt;/p&gt;
&lt;p&gt;local port: 1029&lt;/p&gt;
&lt;p&gt;local port: 1031&lt;/p&gt;
&lt;p&gt;local port: 1033&lt;/p&gt;
&lt;p&gt;local port: 1025&lt;/p&gt;
&lt;p&gt;local port: 1027&lt;/p&gt;
&lt;p&gt;local port: 1029&lt;/p&gt;
&lt;p&gt;local port: 1031&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/figure&gt;
&lt;p&gt;之所以都是偶数端口，是因为 port_range 从偶数开始, 每次从++变到+2 的&lt;a href=&quot;https://github.com/plantegg/linux/commit/1580ab63fc9a03593072cc5656167a75c4f1d173&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;原因&lt;/a&gt;，connect 挑选随机端口时都是在起始端口的基础上+2，而 bind 挑选随机端口的起始端口是系统 port_range 起始端口+1（这样和 connect 错开），然后每次仍然尝试+2，这样 connect 和 bind 基本一个用偶数另外一个就用奇数，一旦不够了再尝试使用另外一组&lt;/p&gt;
&lt;figure&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;br /&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;$cat /​proc/​sys/​net/​ipv4/​ip_​local_​port_​range&lt;/p&gt;
&lt;p&gt;$./​bind &amp;amp; —bind 程序随机挑选 5 个端口&lt;/p&gt;
&lt;p&gt;port number 1039&lt;/p&gt;
&lt;p&gt;port number 1043&lt;/p&gt;
&lt;p&gt;port number 1045&lt;/p&gt;
&lt;p&gt;port number 1041&lt;/p&gt;
&lt;p&gt;port number 1047 –用完所有奇数端口&lt;/p&gt;
&lt;p&gt;$./​bind &amp;amp; –继续挑选偶数端口&lt;/p&gt;
&lt;p&gt;port number 1044&lt;/p&gt;
&lt;p&gt;port number 1042&lt;/p&gt;
&lt;p&gt;port number 1046&lt;/p&gt;
&lt;p&gt;port number 0 –实在没有了&lt;/p&gt;
&lt;p&gt;port number 0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/figure&gt;
&lt;p&gt;可见 4.19 内核下每次 port 是+2，在 3.10 内核版本中是+1. 并且都是递增的，同时即使 port 不使用，也会随着时间的变化这个起始 port 增大。&lt;/p&gt;
&lt;p&gt;Port Range 有点像雷达转盘数字，时间就像是雷达上的扫描指针，这个指针不停地旋转，如果这个时候刚好有应用要申请 Port，那么就从指针正好指向的 Port 开始向后搜索可用 port&lt;/p&gt;
&lt;h2&gt;tcp_​max_​tw_​buckets&lt;/h2&gt;
&lt;p&gt;tcp_​max_​tw_​buckets: 在 TIME_​WAIT 数量等于 tcp_​max_​tw_​buckets 时，新的连接断开不再进入 TIME_WAIT 阶段，而是直接断开，并打印 warnning.&lt;/p&gt;
&lt;p&gt;实际测试发现，在 TIME_​WAIT 数量等于 tcp_​max_​tw_​buckets 时 
新的连接仍然可以不断地创建和断开，这个参数大小不会影响性能，只是影响 TIME_WAIT 数量的展示（当然 TIME_​WAIT 
太多导致 local port 不够除外）, 这个值设置小一点会避免出现端口不够的情况&lt;/p&gt;

&lt;blockquote&gt;tcp_​max_​tw_​buckets — INTEGER&lt;br /&gt;Maximal number of 
timewait sockets held by system simultaneously.If this number is 
exceeded time-​wait socket is immediately destroyed and warning is 
printed. This limit exists only to prevent simple DoS attacks, you &lt;em&gt;must&lt;/em&gt;
 not lower the limit artificially, but rather increase it (probably, 
after increasing installed memory), if network conditions require more 
than default value.&lt;/blockquote&gt;

&lt;p&gt;SO_​LINGER 选项&lt;strong&gt;用来设置延迟关闭的时间，等待套接字发送缓冲区中的数据发送完成&lt;/strong&gt;。 没有设置该选项时，在调用 close() 后，在发送完 FIN 后会立即进行一些清理工作并返回。 如果设置了 SO_LINGER 选项，并且等待时间为正值，则在清理之前会等待一段时间。&lt;/p&gt;
&lt;p&gt;如果把延时设置为 0 时，Socket 就丢弃数据，并向对方发送一个 &lt;code&gt;RST&lt;/code&gt; 来终止连接，因为走的是 RST 包，所以就不会有 &lt;code&gt;TIME_WAIT&lt;/code&gt; 了。&lt;/p&gt;

&lt;blockquote&gt;This option specifies how the &lt;code&gt;close&lt;/code&gt; function operates for a connection-​oriented protocol (for TCP, but not for UDP). By default, &lt;code&gt;close&lt;/code&gt;
 returns immediately, but ==if there is any data still remaining in the 
socket send buffer, the system will try to deliver the data to the 
peer==.&lt;/blockquote&gt;

&lt;p&gt;SO_​LINGER 有三种情况&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;l_​onoff 为 false（0）， 那么 l_​linger 的值没有意义，socket 主动调用 close 时会立即返回，操作系统会将残留在缓冲区中的数据发送到对端，并按照正常流程关闭 (交换 FIN-ACK），最后连接进入&lt;code&gt;TIME_WAIT&lt;/code&gt;状态。&lt;strong&gt;这是默认情况&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;l_​onoff 为 true（非 0）， l_​linger 为 0，主动调用 close 的一方也是立刻返回，但是这时 TCP 会丢弃发送缓冲中的数据，而且不是按照正常流程关闭连接（不发送 FIN 包），直接发送&lt;code&gt;RST&lt;/code&gt;，连接不会进入 time_​wait 状态，对端会收到 &lt;code&gt;java.net.SocketException: Connection reset&lt;/code&gt;异常&lt;/li&gt;&lt;li&gt;l_​onoff 为 true（非 0）， l_​linger 也为非 0，这表示 &lt;code&gt;SO_LINGER&lt;/code&gt;选项生效，并且超时时间大于零，这时调用 close 的线程被阻塞，TCP 会发送缓冲区中的残留数据，这时有两种可能的情况： &lt;ul&gt;&lt;li&gt;数据发送完毕，收到对方的 ACK，然后进行连接的正常关闭（交换 FIN-ACK）&lt;/li&gt;&lt;li&gt;超时，未发送完成的数据被丢弃，连接发送&lt;code&gt;RST&lt;/code&gt;进行非正常关闭&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;figure&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;br /&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;struct linger {&lt;/p&gt;
&lt;p&gt;int l_​onoff; /​* 0=off, nonzero=on */​&lt;/p&gt;
&lt;p&gt;int l_​linger; /​* linger time, POSIX specifies units as seconds */​&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/figure&gt;
&lt;h3&gt;NIO 下设置 SO_​LINGER 的错误案例&lt;/h3&gt;
&lt;p&gt;在使用 NIO 时，最好不设置&lt;code&gt;SO_LINGER&lt;/code&gt;。比如 Tomcat 服务端接收到请求创建新连接时，做了这样的设置：&lt;/p&gt;
&lt;figure&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;br /&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;SocketChannel.setOption(SocketOption.SO_LINGER, 1000)&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;SO_LINGER&lt;/code&gt;的单位为&lt;code&gt;秒&lt;/code&gt;！在网络环境比较好的时候，例如客户端、服务器都部署在同一个机房，close 虽然会被阻塞，但时间极短可以忽略。但当网络环境不那么好时，例如存在丢包、较长的网络延迟，buffer 中的数据一直无法发送成功，那么问题就出现了：&lt;code&gt;close 会被阻塞较长的时间，从而直接或间接引起 NIO 的 IO 线程被阻塞&lt;/code&gt;，服务器会不响应，不能处理 accept、read、write 等任何 IO 事件。也就是应用频繁出现挂起现象。解决方法就是删掉这个设置，close 时立即返回，由操作系统接手后面的工作。&lt;/p&gt;
&lt;p&gt;这时会看到如下连接状态&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://plantegg.github.io/images/951413iMgBlog/image-20220721100246598.png&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;image-20220721100246598.png&quot; src=&quot;https://plantegg.github.io/images/951413iMgBlog/image-20220721100246598.png&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以及对应的堆栈&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://plantegg.github.io/images/951413iMgBlog/image-20220721100421130.png&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;image-20220721100421130.png&quot; src=&quot;https://plantegg.github.io/images/951413iMgBlog/image-20220721100421130.png&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;查看其中一个 IO 线程等待的锁，发现锁是被 HTTP 线程持有。这个线程正在执行&lt;code&gt;preClose0&lt;/code&gt;，就是在这里等待连接的关闭&lt;a href=&quot;https://plantegg.github.io/images/951413iMgBlog/image-20220721100446521.png&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;image-20220721100446521.png&quot; src=&quot;https://plantegg.github.io/images/951413iMgBlog/image-20220721100446521.png&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;每次 HTTP 线程在关闭连接被阻塞时，同时持有了&lt;code&gt;SocketChannelImpl&lt;/code&gt;的对象锁，而 IO 线程在把这个连接移除出它的 selector 管理队列时，也要获得同一个&lt;code&gt;SocketChannelImpl&lt;/code&gt;的对象锁。IO 线程就这么一次次的被阻塞，悲剧的无以复加。有些 NIO 框架会让 IO 线程去做 close，这时候就更加悲剧了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总之这里的错误原因有两点：1）网络状态不好；2）错误理解了 l_linger 的单位，是秒，不是毫秒。 在这两个原因的共同作用下导致了数据迟迟不能发送完毕，l_linger 超时又需要很久，所以服务会出现一直阻塞的状态。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;为什么要有 time_​wait 状态&lt;/h2&gt;

&lt;blockquote&gt;TIME-​WAIT — represents waiting for enough time to pass to 
be sure the remote TCP received the acknowledgment of its connection 
termination request.&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://plantegg.github.io/images/951413iMgBlog/image-20220721093116395.png&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;image-20220721093116395.png&quot; src=&quot;https://plantegg.github.io/images/951413iMgBlog/image-20220721093116395.png&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个案例来自腾讯 7 层网关团队，网关用的 Nginx，请求转发给后面的被代理机器 (RS:real server)，发现 sys CPU 异常高，CPU 都用在搜索可用端口.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://plantegg.github.io/images/951413iMgBlog/640-8259033.png&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;640-8259033.png&quot; src=&quot;https://plantegg.github.io/images/951413iMgBlog/640-8259033.png&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://plantegg.github.io/images/951413iMgBlog/640-20221112211814567.png&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;640-20221112211814567.png&quot; src=&quot;https://plantegg.github.io/images/951413iMgBlog/640-20221112211814567.png&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;local port 不够的时候 inet_​hash_​connect 中的 spin_​lock 会消耗过高的 sys（特别注意 4.6 内核后 local port 分奇偶数，每次 loop+2，所以更容易触发 port 不够的场景）&lt;/p&gt;
&lt;p&gt;核心原因总结: 4.6 后内核把本地端口分成奇偶数，奇数给 connect, 
偶数给 listen，本来端口有 6 万，这样 connect 只剩下 3 万，当这 3 万用完后也不会报找不到本地可用端口的错误 (这里报错可能更好)，而是在奇数里找不到就找偶数里的，每次都这样。
 
没改以前，总共 6 万端口，用掉 3 万，不分奇偶的话那么每找两个端口就有一个能用，也就是 50% 的概率。但是改了新的实现方案后，每次先要找奇数的 3 万个，全部在用，然后到偶数里继续找到第 30001 个才是可用的，也就是找到的概率变成了 3 万分之一，一下子复杂度高了 15000 倍，不慢才怪
 如果你对&lt;/p&gt;
&lt;p&gt;我的看法，这个分奇偶数的实现就是坑爹货，在内核里胡乱搞，为了一个小场景搞崩大多数正常场景，真没必要，当然我这是事后诸葛亮，如果当时这种 feature 拿给我看我也会认为很不错，想不到这个坑点！&lt;/p&gt;
&lt;p&gt;listen port search 消耗 CPU 异常高&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://plantegg.github.io/images/951413iMgBlog/640-9840722.jpeg&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;640-9840722.jpeg&quot; src=&quot;https://plantegg.github.io/images/951413iMgBlog/640-9840722.jpeg&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在正常的情况下，服务器的 listen port 数量，大概就是几 w 个这样的量级。这种量级下，一个 port 对应一个 socket，哈希桶大小为 32 是可以接受的。&lt;/p&gt;
&lt;p&gt;然而在内核支持了 reuseport 并且被广泛使用后，情况就不一样了，&lt;strong&gt;在多进程架构里，listen port 对应的 socket 数量，是会被几十倍的放大的。&lt;/strong&gt;以应用层监听了 5000 个端口，reuseport
 使用了 50 个 cpu 核心为例，5000*50/32 约等于 7812，意味着每次握手包到来时，光是查找 listen 
socket，就需要遍历 7800 多次。随着机器硬件性能越来越强，应用层使用的 cpu 数量增多，这个问题还会继续加剧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正因为上述原因，并且我们现网机器开启了 reuseport，在端口数量较多的机器里，inet_lookup_listener 的哈希桶大小太小，遍历过程消耗了 cpu，导致出现了函数热点。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;短连接的开销&lt;/h2&gt;
&lt;p&gt;用 ab 通过短连接走 lo 网卡压本机 nginx，CPU0 是 ab 进程，CPU3/4 是 Nginx 服务，可以看到 si 非常高，QPS 2.2 万&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://plantegg.github.io/images/951413iMgBlog/image-20220627154822263.png&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;image-20220627154822263.png&quot; src=&quot;https://plantegg.github.io/images/951413iMgBlog/image-20220627154822263.png&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;再将 ab 改用长连接来压，可以看到 si、sy 都有下降，并且 si 下降到短连接的 20%，QPS 还能提升到 5.2 万&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://plantegg.github.io/images/951413iMgBlog/image-20220627154931495.png&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;image-20220627154931495.png&quot; src=&quot;https://plantegg.github.io/images/951413iMgBlog/image-20220627154931495.png&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主要是内存开销 (如图，来源见水印)，另外就是每个连接都会占用一个文件句柄，可以通过参数来设置：fs.nr_open、nofile（其实 nofile 还分 soft 和 hard） 和 fs.file-max&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://plantegg.github.io/images/951413iMgBlog/640-20220413134252639&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;640-20220413134252639&quot; src=&quot;https://plantegg.github.io/images/951413iMgBlog/640-20220413134252639&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从上图可以看到：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;没有收发数据的时候收发 buffer 不用提前分配，3K 多点的内存是指一个连接的元信息数据空间，不包含传输数据的内存 buffer&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;客户端发送数据后，会根据数据大小分配 send buffer（一般不超过 wmem，默认 kernel 会根据系统内存压力来调整 send buffer 大小)&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;server 端 kernel 收到数据后存放在 rmem 中，应用读走后就会释放对应的 rmem&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;rmem 和 wmem 都不会重用，用时分配用完释放&lt;/p&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;可见，内核在 socket 内存开销优化上采取了不少方法:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;内核会尽量及时回收发送缓存区、接收缓存区，但高版本做的更好&lt;/li&gt;&lt;li&gt;发送接收缓存区最小并一定不是 rmem 内核参数里的最小值，实际大部分时间都是 0&lt;/li&gt;&lt;li&gt;其它状态下，例如对于 TIME_WAIT 还会回收非必要的 socket_​alloc 等对象&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;A 进程选择某个端口，并设置了 reuseaddr 
opt（表示其它进程还能继续用这个端口），这时 B 进程选了这个端口，并且 bind 了，B 进程用完后把这个 bind 的端口释放了，但是如果 A 
进程一直不释放这个端口对应的连接，那么这个端口会一直在内核中记录被 bind 用掉了（能 bind 的端口 
是 65535 个，四元组不重复的连接你理解可以无限多），这样的端口越来越多后，剩下可供 A 
进程发起连接的本地随机端口就越来越少了 (也就是本来 A 进程选择端口是按四元组的，但因为前面所说的原因，导致不按四元组了，只按端口本身这个一元组来排重)，这时会造成新建连接的时候这个四元组高概率重复，一般这个时候对端大概率还在
 time_wait 状态，会忽略掉握手 syn 包并回复 ack ，进而造成建连接卡顿的现象&lt;/p&gt;
&lt;h2&gt;结论&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;在内存、文件句柄足够的话一台服务器上可以创建的 TCP 连接数量是没有限制的&lt;/li&gt;&lt;li&gt;SO_​REUSEADDR 主要用于快速重用 TIME_WAIT 状态的 TCP 端口，避免服务重启就会抛出 Address Already in use 的错误&lt;/li&gt;&lt;li&gt;SO_REUSEPORT 主要用来解决惊群、性能等问题&lt;/li&gt;&lt;li&gt;全局范围可以用 net.ipv4.tcp_max_tw_buckets = 50000 来限制总 time_​wait 数量，但是会掩盖问题&lt;/li&gt;&lt;li&gt;local port 的选择是递增搜索的，搜索起始 port 随时间增加也变大&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000002396411&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;https://segmentfault.com/a/1190000002396411&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/a364572/article/details/40628171&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;linux 中 TCP 的 socket、bind、listen、connect 和 accept 的实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ops.tips/blog/how-linux-tcp-introspection/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;How Linux allows TCP introspection The inner workings of bind and listen on Linux.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://idea.popcount.org/2014-04-03-bind-before-connect/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;https://idea.popcount.org/2014–04-03-bind-before-connect/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/C-Eeoeh9GHxugF4J30fz1A&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;TCP 连接中客户端的端口号是如何确定的？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/plantegg/linux/commit/9b3312bf18f6873e67f1f51dab3364c95c9dc54c&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;对应 4.19 内核代码解析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.cloudflare.com/how-to-stop-running-out-of-ephemeral-ports-and-start-to-love-long-lived-connections/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;How to stop running out of ephemeral ports and start to love long-​lived connections&lt;/a&gt;&lt;/p&gt;&lt;hr /&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;翻墙技术博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;订阅地址及社交帐号&lt;/a&gt;&lt;/div&gt;</description>
            <link>https://www.chinagfw.org/2023/07/tcp.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-7336789949329270707</guid>
            <pubDate>Thu, 27 Jul 2023 04:13:00 +0000</pubDate>
            <atom:updated>2023-07-27T12:13:51.626+08:00</atom:updated>
            <title>谷歌提议对网络进行 DRM - 破坏开放性</title>
            <description>&lt;div class=&quot;SinglePost_SinglePost__3in7m&quot;&gt;&lt;h2&gt;via &lt;a href=&quot;https://here.news/post/64c1eb5f39cc7a79010a22c1&quot;&gt;https://here.news/post/64c1eb5f39cc7a79010a22c1&lt;/a&gt;&lt;br /&gt;&lt;/h2&gt;&lt;p&gt;&lt;a class=&quot;hidden md:block text-[20px] text-primary font-medium leading-[25px] no-underline&quot; href=&quot;https://here.news/explore&quot;&gt;&lt;svg fill=&quot;none&quot; height=&quot;24&quot; viewbox=&quot;0 0 25 24&quot; width=&quot;25&quot;
                xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/p&gt;&lt;div data-tooltip-content=&quot;1µ to post&quot; data-tooltip-id=&quot;globalTooltip&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/e25d1f74-e4c7-42eb-9b1f-fc1404b204f2_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;谷歌试图巩固 Chrome 在网络标准上的垄断地位，阻止广告拦截，摧毁 Firefox 和较小的 Chromium 和 WebKit 分支，并提高其广告收入。&lt;/p&gt;&lt;p&gt;此（拟议中的）API 允许网站从「认证者」那里请求「认证」，以验证客户端环境。谷歌可以通过将 Chrome 作为认证者来利用这一点，从而巧妙地提升 Chrome 在 Firefox 等其他浏览器上的优势。这是伪装成的供应商锁定！&lt;/p&gt;&lt;p&gt;「认证者」决定您的设备和/或浏览器是否足够「值得信赖」-这是由您试图访问的网站定义的。&lt;/p&gt;&lt;p&gt;它专门设计用于摧毁开放网络，拒绝您使用任何您想使用的浏览器，在任何操作系统上。&lt;/p&gt;&lt;p&gt;另一个担忧在于限制广告拦截器。通过 Manifest v3，谷歌打算限制 Chrome 扩展中的广告拦截功能。结合 WEI API，谷歌可能会在浏览体验、垄断和广告收入方面获得更多控制权。&lt;/p&gt;&lt;p&gt;这个 API 几乎没有什么好处，但可能最终会伤害到小型浏览器分支、修改过的 Android/iOS 手机、定制 Linux 发行版、用户隐私（通过向认证者提供更多数据点并限制隐私工具）、用户体验（通过破坏广告拦截）。&lt;/p&gt;&lt;p&gt;提案的官方 GitHub 链接：&lt;a href=&quot;https://github.com/RupertBenWiser/Web-Environment-Integrity&quot; target=&quot;_blank&quot;&gt;https://github.com/RupertBenWiser/Web-Environment-Integrity&lt;/a&gt; （大家去查看问题和 PRs）&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;翻墙技术博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;订阅地址及社交帐号&lt;/a&gt;&lt;/div&gt;
            </description>
            <link>https://www.chinagfw.org/2023/07/drm.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-723930248903429566</guid>
            <pubDate>Mon, 24 Jul 2023 14:07:00 +0000</pubDate>
            <atom:updated>2023-07-24T22:07:52.387+08:00</atom:updated>
            <title>家人的 Apple ID 开了双重认证，仍然被钓鱼，求大佬解惑，也顺便给大家提个醒</title>
            <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;div class=&quot;cell&quot;&gt;
&lt;div class=&quot;topic_content&quot;&gt;&lt;div class=&quot;markdown_body&quot;&gt;&lt;h3&gt;via &lt;a href=&quot;https://www.v2ex.com/t/959041&quot;&gt;https://www.v2ex.com/t/959041&lt;/a&gt; &lt;br /&gt;&lt;/h3&gt;&lt;h3&gt;时间线&lt;/h3&gt;
&lt;p&gt;7 月 12 晚上发生的事情，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;23:33 ，丈母娘的手机突然被抹掉了资料，变成出厂设置的状态。&lt;/li&gt;&lt;li&gt;23:35 ，她拿手机找我给她看看，我以为是苹果系统问题，开始给她重新设置。&lt;/li&gt;&lt;li&gt;23:36 ，在设置的过程中，手机陆续收到了短信通知，我发现其中有银行、支付等字样。&lt;/li&gt;&lt;li&gt;23:37 ，开始意识到事情不太对，赶紧联系银行和微信支付冻结。&lt;/li&gt;&lt;li&gt;23:40 ，等到冻结完毕，已经产生了 20 多笔订单，共计 1.6w 。&lt;/li&gt;&lt;li&gt;23:50 ，报警之后，到社区派出所立案。&lt;/li&gt;&lt;li&gt;01:10 ，立案过程中，我在 Apple Store 的退款渠道提交了退款。&lt;/li&gt;&lt;/ul&gt;
&lt;h3&gt;被盗经过&lt;/h3&gt;
&lt;p&gt;之前一直以为开了双重认证就高枕无忧，经过排查后，基本确定是被钓鱼了：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;丈母娘曾经在某 App 购买虚拟商品，App Store 绑定了微信免密支付。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;7 月 11 号下午，丈母娘在 Apple Store 上下载了一个叫 「菜谱大全」 的 App ，它的登录方式是 Apple ID 授权，这一步如果没有开启 iCloud+ 隐藏邮件地址的话，Apple ID 账号就会泄露，如图&lt;br /&gt;
&lt;img alt=&quot;&quot; class=&quot;embedded_image&quot; rel=&quot;noreferrer&quot; src=&quot;https://i.imgur.com/cexSIbrl.jpg&quot; /&gt; &lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;接着，会出来一个跟 App Store 长得非常像的密码输入框，大家如果经常安装 App ，人脸识别失败的时候，就会有这个密码输入框，不熟悉 App Store 登录流程的话，很容易中招，如图&lt;br /&gt;
&lt;img alt=&quot;&quot; class=&quot;embedded_image&quot; rel=&quot;noreferrer&quot; src=&quot;https://i.imgur.com/2HPmhH2l.jpg&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;有了 Apple ID 的账号和密码，就可以登录了，这一步我跟丈母娘反复确认了，她没有见过双重认证的弹窗。 &lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;登录之后，他会把自己的号码，加入双重认证的信任号码中，目的是为了后续的登录可以通过自己认证，如图
&lt;img alt=&quot;&quot; class=&quot;embedded_image&quot; rel=&quot;noreferrer&quot; src=&quot;https://i.imgur.com/E9BvCjsl.jpg&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;到这一步，他已经掌握了受害者 Apple ID 的所有权限。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;接下来，盗号者并不会直接用 Apple ID 下单支付，而是会创建一个家庭共享，加入另一个账号，由这个账号购买 App 中的虚拟商品，如图&lt;br /&gt;
&lt;img alt=&quot;&quot; class=&quot;embedded_image&quot; rel=&quot;noreferrer&quot; src=&quot;https://i.imgur.com/MKN9oFWl.jpg&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;h3&gt;疑问&lt;/h3&gt;
&lt;p&gt;整个钓鱼过程，我有一点不太理解，在开启了双重认证的情况下，除非我丈母娘主动输入验证码，否则即使对方拿到了 Apple ID 的账号密码，应该也无法登录才对，这里请大佬帮忙解惑。&lt;/p&gt;
&lt;h3&gt;尝试退款&lt;/h3&gt;
&lt;p&gt;我在 Apple 400 客服尝试了多种方式，最终都失败了:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在 &lt;a href=&quot;http://reportaproblem.apple.com&quot; rel=&quot;nofollow&quot;&gt;reportaproblem.apple.com&lt;/a&gt; 页面申请退款，申请后联系客服告知被拒绝。&lt;/li&gt;&lt;li&gt;找负责 App Store 订单的客服，要求升级高级顾问，告知这是最终结果，升级也没有意义，被拒绝。&lt;/li&gt;&lt;li&gt;找负责 Apple ID 的客服，曲线救国，要求查询 Apple ID 被盗的问题，被告知查不到记录。&lt;/li&gt;&lt;li&gt;由负责 Apple ID 的高级顾问转到负责 App Store 订单的高级顾问，和该顾问扯皮了 2 小时，被拒绝。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;目前还能尝试的方式：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;打 12315 反馈&lt;/li&gt;&lt;li&gt;在工信部违法和不良信息举报中心投诉&lt;/li&gt;&lt;li&gt;起诉苹果&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;subtle&quot;&gt;
&lt;span class=&quot;fade&quot;&gt;第 1 条附言 &amp;nbsp;·&amp;nbsp; &lt;span title=&quot;2023-07-23 22:34:11 +08:00&quot;&gt;23 小时 29 分钟前&lt;/span&gt;&lt;/span&gt;
&lt;div class=&quot;sep5&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;topic_content&quot;&gt;补充一下：&lt;br /&gt;抹除设备是为了防止盗号者在支付的时候，受害者微信出现支付通知。&lt;br /&gt;评论区有大佬提到，如果这个 APP 有截屏，可以截到双重认证的弹窗并上传，并不需要 Apple ID 所有者主动提供验证码。&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;subtle&quot;&gt;
&lt;span class=&quot;fade&quot;&gt;第 2 条附言 &amp;nbsp;·&amp;nbsp; &lt;span title=&quot;2023-07-23 23:05:29 +08:00&quot;&gt;22 小时 57 分钟前&lt;/span&gt;&lt;/span&gt;
&lt;div class=&quot;sep5&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;topic_content&quot;&gt;这个 App 的权限只有两个：Siri 与搜索，无线数据&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;subtle&quot;&gt;
&lt;span class=&quot;fade&quot;&gt;第 3 条附言 &amp;nbsp;·&amp;nbsp; &lt;span title=&quot;2023-07-24 11:05:02 +08:00&quot;&gt;10 小时 58 分钟前&lt;/span&gt;&lt;/span&gt;
&lt;div class=&quot;sep5&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;topic_content&quot;&gt;抓包看了下，app 会访问这个 &lt;a href=&quot;http://app.yime888.com&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;app.yime888.com&lt;/a&gt; ，有没有大佬有兴趣爆破一下。&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;subtle&quot;&gt;
&lt;span class=&quot;fade&quot;&gt;第 4 条附言 &amp;nbsp;·&amp;nbsp; &lt;span title=&quot;2023-07-24 13:27:35 +08:00&quot;&gt;8 小时 35 分钟前&lt;/span&gt;&lt;/span&gt;
&lt;div class=&quot;sep5&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;topic_content&quot;&gt;89 楼的大佬，给了一个绕过双重认证的思路，感觉是比较靠谱的。&lt;/div&gt;
&lt;/div&gt;

&lt;span class=&quot;fade&quot;&gt;第 5 条附言 &amp;nbsp;·&amp;nbsp; &lt;span title=&quot;2023-07-24 15:14:46 +08:00&quot;&gt;6 小时 48 分钟前&lt;/span&gt;&lt;/span&gt;
&lt;div class=&quot;sep5&quot;&gt;&lt;/div&gt;
感谢各位大佬，目前差不多搞清楚对方是如何绕过双重认证的：&lt;br /&gt;对方在 App 内置了一个 Webview ，然后访问 &lt;a href=&quot;http://appleid.apple.com/sign-in&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;appleid.apple.com/sign-in&lt;/a&gt; ，这一步系统会出现 Apple ID 的弹窗，如果人脸识别通过了或者输入了正确的密码，这个页面就登录了（可以理解为在内置的 safafi 打开了 Apple ID 的登录页面）。&lt;br /&gt;&lt;br /&gt;接下来会出现密码弹窗，受害者输入密码之后，这个 Webview 可以注入一些 js 获取到 Cookie ，然后访问 &lt;a href=&quot;http://appleid.apple.com/account/manage&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;appleid.apple.com/account/manage&lt;/a&gt; ，通过一些自动接收验证码的机制，配合 Cookie 和密码，就可以在受害者 Apple ID 的信任号码中加入他自己的号码，用来接收双重认证的短信 &lt;div class=&quot;blogger-post-footer&quot;&gt;翻墙技术博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;订阅地址及社交帐号&lt;/a&gt;&lt;/div&gt;</description>
            <link>https://www.chinagfw.org/2023/07/apple-id.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-4646238239211693982</guid>
            <pubDate>Mon, 17 Jul 2023 08:47:00 +0000</pubDate>
            <atom:updated>2023-07-17T16:47:35.506+08:00</atom:updated>
            <title> 中国的网络行为在海底光缆生态系统中得到体现</title>
            <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;via &lt;a href=&quot;https://here.news/post/64b4fffa791292e41eb8d586&quot;&gt;https://here.news/post/64b4fffa791292e41eb8d586&lt;/a&gt; &lt;br /&gt;&lt;br /&gt;随着世界渴望数字化，实现经济一体化和超越边界，全球第二大经济体中国不能置身事外。但中国在网络空间的行动显示了中国打算以一种不同的方式进行数字化过程。中国在数字化和网络安全方面制定国际规范的意图可以从其对网络空间变化的看法和反应中得到体现。中国在网络空间中对「数字主权」的理解正在为全球数字治理设定平行标准，这些标准基于封闭和不互动的网络空间。&lt;br /&gt;&lt;br /&gt;嵌入水下的海底光缆是运行网络空间的基础，通常似乎不受此类行动的影响。但中国在网络领域的三个具体特点在海底光缆生态系统中也得到延续。&lt;br /&gt;&lt;br /&gt;中国知道，特别是在发展中国家和欠发达国家，成本效益优先于质量。习近平于 2015 年提出的数字丝绸之路战略旨在帮助参与国发展和提升数字基础设施。为了建立这个数字生态系统，中国公司如中兴、大华、华为等在西亚和北非国家备受青睐，因为它们提供低成本的服务，推动了数字丝绸之路的实现。同样，中国的海底光缆公司华为海洋网络有限公司（HMN Tech）也以更低的成本提供光缆制造、铺设、维护和修复服务。尽管成立于 2008 年，HMN Tech 已经获得全球四分之一的光缆维护和修复合同，并成为最快的海底光缆铺设公司。尽管由于美国的秘密外交，中国在 Sea-Me-We 6 光缆的投标过程中失去了竞标，但其最终报价只有原始报价的三分之一。&lt;br /&gt;&lt;br /&gt;此外，基于价格，中国满足了全球南方国家的需求，这些国家更有可能成为中国制定数字标准的一方。除了其周边地区之外，HMN Tech 的几乎所有海底光缆项目都位于全球南方。&lt;br /&gt;&lt;br /&gt;中国确保与全球数字网络的最小整合，以维护其数字主权。中国的「防火长城」是各种技术和政府政策的产物，禁止大量数据进入中国的数字空间。尽管中国渴望保留来自其他国家流入其领土的最大信息量，但它不希望将自己整合并将自己的信息提供给全球数字网络，以确保数据安全和数据隐私的幌子下。对从其数字空间流出的数据有非常严格的监管。它在海底光缆生态系统中也保持着同样的行为。世界上最大的经济体美国有大约 85 条海底光缆登陆其海岸，而全球第二大经济体中国只有大约 19 条这样的海底光缆。较少的海底光缆意味着更少的数据交换和较慢的数据传播。虽然中国的公司 HMN Tech 正在全球范围内开展约 134 个海底光缆项目，但中国在其领土上目前只计划在不久的将来铺设 4 条海底光缆，与国际海底光缆网络的整合较少。这是对数字主权的延伸。&lt;br /&gt;&lt;br /&gt;中国的私营公司，特别是那些包含对维护中国稳定和安全至关重要的信息的公司，在后台受到政府的严格控制。一直有传言称电信制造公司华为与共产党有关联，导致一些国家担心通过华为的设备进行监视和间谍活动而退出华为的 5G 试验。这种强大的政府控制在海底光缆生态系统中也得到延续。当 HMN Tech 在 SeaMeWe-6 光缆的投标过程中失败时，中国两家电信巨头中国移动和中国电信退出了该项目，作为反对的标志。同样，政府还向 HMN Tech 提供了巨额补贴，以承担一项价值 5 亿美元的项目，该项目将连接亚洲、中东和欧洲，并成为 SeaMeWe-6 项目的竞争对手。&lt;br /&gt;&lt;br /&gt;一些人认为，中国通过窃听海底光缆进行间谍活动的担忧是夸大其词的。但是，仔细审查这些从网络空间延伸到海底光缆的连续性，暗示了在海底光缆生态系统中可能出现类似情况的未来可能性。据称，华为的监视设备曾对其他国家的政府机构进行监视。有报告暗示全球范围内发生了类似的监视事件。&lt;br /&gt;&lt;br /&gt;尽管故意切断海底光缆干扰全球数字数据流尚未成为常态，但全球数字化需求的增加和对海底光缆架构的重视已经在中美技术战争中开辟了一个新的战线。最近，中国据称破坏了马祖岛的海底光缆，对台湾外岛进行了约六周的信息封锁。如果通过这些海底光缆流动的信息可以停止，那么也可以提取。信息的停止和提取的致命组合可以在权力动态中产生巨大的转变，因为数据成为最尖锐的双刃剑之一。了解这些反映是重要的，以便预测中国在海底光缆生态系统中的行为，其重要性将在不久的将来倍增。&lt;br /&gt;&lt;/span&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻墙技术博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;订阅地址及社交帐号&lt;/a&gt;&lt;/div&gt;</description>
            <link>https://www.chinagfw.org/2023/07/blog-post.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-1365889382429842171</guid>
            <pubDate>Tue, 11 Jul 2023 04:05:00 +0000</pubDate>
            <atom:updated>2023-07-11T12:05:29.478+08:00</atom:updated>
            <title>DNS 隧道可以实现 DoH 和 DoT</title>
            <description>&lt;p&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;via: &lt;a href=&quot;https://github.com/net4people/bbs/issues/30&quot;&gt;https://github.com/net4people/bbs/issues/30&lt;/a&gt; &lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;dnstt 是一种新的 DNS 隧道，可以与 DNS over HTTPS 和 DNS over TLS 解析器一起使用，根据 Turbo Tunnel 的理念设计。&lt;br /&gt;&lt;br /&gt;https://www.bamsoftware.com/software/dnstt/&lt;br /&gt;&lt;br /&gt;git clone https://www.bamsoftware.com/git/dnstt.git&lt;br /&gt;&lt;br /&gt;&lt;b&gt;它与其他 DNS 隧道有何不同？&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 它可以与 DNS over HTTPS（DoH）和 DNS over TLS（DoT）解析器一起使用，这使得网络观察者更难以判断是否使用了隧道。&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 它嵌入了一个适当的可靠性和会话协议（KCP+smux）。客户端和服务器可以同时发送和接收数据，客户端无需等待一个查询接收到响应后再发送下一个查询。同时进行多个查询有助于提高性能。（这就是 Turbo Tunnel 的概念。）&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 它使用 Noise 协议对隧道进行端到端的加密和认证，与 DoH/DoT 加密分开。&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;notranslate&quot;&gt;&lt;code class=&quot;notranslate&quot;&gt;.------.  |            .--------.               .------.
|tunnel|  |            | public |               |tunnel|
|client|&amp;lt;---DoH/DoT---&amp;gt;|resolver|&amp;lt;---UDP DNS---&amp;gt;|server|
&#39;------&#39;  |c           &#39;--------&#39;               &#39;------&#39;
   |      |e                                       |
.------.  |n                                    .------.
|local |  |s                                    |remote|
| app  |  |o                                    | app  |
&#39;------&#39;  |r                                    &#39;------&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;这样的 DNS 隧道对于绕过审查是有用的。想象一下，一个审查者可以观察到客户端⇔解析器的连接，但无法观察到解析器⇔服务器的连接（图中的垂直线）。传统基于 UDP 的 DNS 隧道通常被认为很容易被检测到，因为它们生成的 DNS 消息的格式不同寻常，而且每个 DNS 消息必须带有隧道服务器的域名标记，因为中间的递归解析器需要知道将它们转发到哪里。但是使用 DoH 或 DoT，客户端⇔解析器的 DNS 消息是加密的，因此审查者不能轻易地看到正在使用隧道。（当然，根据加密流量的数量和时序可能仍然可能启发式地检测到隧道，仅仅加密本身并不能解决这个问题。）&lt;br /&gt;&lt;br /&gt;我希望这个软件发布可以展示这种类型的隧道设计的潜力。目前，该软件不提供 TUN/TAP 网络接口，甚至不提供 SOCKS 或 HTTP 代理接口。它只是将本地 TCP 套接字连接到远程 TCP 套接字。不过，您可以相对容易地设置它以像普通的 SOCKS 或 HTTP 代理一样工作，见下文。&lt;br /&gt;DNS 区设置&lt;br /&gt;&lt;br /&gt;DNS 隧道通过使隧道服务器充当特定 DNS 区的权威解析器来工作。中间的解析器通过将该区域的子域的查询转发到隧道服务器来充当代理。要设置 DNS 隧道，您需要一个域名和一个可以运行服务器的主机。&lt;br /&gt;&lt;br /&gt;假设您的域名是 example.com，您的主机的 IP 地址是 203.0.113.2 和 2001:db8::2。转到您的域名注册商的配置面板，并添加三个新记录：&lt;br /&gt;&lt;br /&gt;A&amp;nbsp;&amp;nbsp;&amp;nbsp; tns.example.com&amp;nbsp;&amp;nbsp;&amp;nbsp; 指向 203.0.113.2&lt;br /&gt;AAAA&amp;nbsp;&amp;nbsp;&amp;nbsp; tns.example.com&amp;nbsp;&amp;nbsp;&amp;nbsp; 指向 2001:db8::2&lt;br /&gt;NS&amp;nbsp;&amp;nbsp;&amp;nbsp; t.example.com&amp;nbsp;&amp;nbsp;&amp;nbsp; 由 tns.example.com 管理&lt;br /&gt;&lt;br /&gt;tns 和 t 标签可以是任何您想要的内容，但 tns 标签不应是 t 标签的子域（该子域下的所有内容都保留给隧道负载）。t 标签应该很短，因为 DNS 消息中的空间有限，而且域名占用其中的一部分。&lt;br /&gt;隧道服务器设置&lt;br /&gt;&lt;br /&gt;在服务器主机上运行以下命令；即在上面的示例中的 tns.example.com / 203.0.113.2 / 2001:db8::2 上运行。&lt;br /&gt;&lt;br /&gt;cd dnstt-server&lt;br /&gt;go build&lt;br /&gt;&lt;br /&gt;首先，您需要为端到端隧道加密生成加密密钥。&lt;br /&gt;&lt;br /&gt;./dnstt-server -gen-key -privkey-file server.key -pubkey-file server.pub&lt;br /&gt;privkey 写入 server.key&lt;br /&gt;pubkey 写入 server.pub&lt;br /&gt;&lt;br /&gt;现在运行服务器。127.0.0.1:8000 是将转发隧道流的 TCP 地址（图中的「远程应用程序」）。&lt;br /&gt;&lt;br /&gt;./dnstt-server -udp :5300 -privkey-file server.key t.example.com 127.0.0.1:8000&lt;br /&gt;&lt;br /&gt;隧道服务器需要在端口 53 上可访问。您可以直接绑定到端口 53（-udp :53），但这需要您以 root 身份运行服务器。最好像上面显示的那样在非特权端口上运行服务器，并使用端口转发将端口 53 转发到它。在 Linux 上，以下命令将端口 53 转发到端口 5300：&lt;br /&gt;&lt;br /&gt;sudo iptables -I INPUT -p udp --dport 5300 -j ACCEPT&lt;br /&gt;sudo iptables -t nat -I PREROUTING -i eth0 -p udp --dport 53 -j REDIRECT --to-ports 5300&lt;br /&gt;sudo ip6tables -I INPUT -p udp --dport 5300 -j ACCEPT&lt;br /&gt;sudo ip6tables -t nat -I PREROUTING -i eth0 -p udp --dport 53 -j REDIRECT --to-ports 5300&lt;br /&gt;&lt;br /&gt;您还需要为隧道服务器连接到的内容提供一些内容。它可以是代理服务器或其他任何内容。为了测试，您可以使用 Ncat 监听器：&lt;br /&gt;&lt;br /&gt;sudo apt install ncat&lt;br /&gt;ncat -lkv 127.0.0.1 8000&lt;br /&gt;&lt;br /&gt;隧道客户端设置&lt;br /&gt;&lt;br /&gt;cd dnstt-client&lt;br /&gt;go build&lt;br /&gt;&lt;br /&gt;将服务器上的 server.pub（公钥文件）复制到客户端。您不需要在客户端上使用 server.key（私钥文件）。&lt;br /&gt;&lt;br /&gt;选择一个 DoH 或 DoT 解析器。这里有一个 DoH 解析器的列表：&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; https://github.com/curl/curl/wiki/DNS-over-HTTPS#publicly-available-servers&lt;br /&gt;&lt;br /&gt;以及这里有一个 DoT 解析器的列表：&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; https://dnsprivacy.org/wiki/display/DP/DNS+Privacy+Public+Resolvers#DNSPrivacyPublicResolvers-DNS-over-TLS%28DoT%29&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; https://dnsencryption.info/imc19-doe.html&lt;br /&gt;&lt;br /&gt;要使用 DoH 解析器，请使用-doh 选项：&lt;br /&gt;&lt;br /&gt;./dnstt-client -doh https://doh.example/dns-query -pubkey-file server.pub t.example.com 127.0.0.1:7000&lt;br /&gt;&lt;br /&gt;对于 DoT，请使用-dot：&lt;br /&gt;&lt;br /&gt;./dnstt-client -dot dot.example:853 -pubkey-file server.pub t.example.com 127.0.0.1:7000&lt;br /&gt;&lt;br /&gt;127.0.0.1:7000 指定了隧道的客户端端口。连接到该端口的任何内容（图中的「本地应用程序」）将通过解析器进行隧道传输，并连接到隧道服务器上的 127.0.0.1:8000。您可以使用 Ncat 客户端测试它；运行此命令，您在客户端终端中键入的任何内容都将显示在服务器上，反之亦然。&lt;br /&gt;&lt;br /&gt;ncat -v 127.0.0.1 7000&lt;br /&gt;&lt;br /&gt;如何创建标准代理&lt;br /&gt;&lt;br /&gt;您可以通过使隧道服务器转发到标准代理服务器来使隧道工作像普通的代理服务器。我发现使用 Ncat 的 HTTP 代理服务器模式很方便。&lt;br /&gt;&lt;br /&gt;ncat -lkv --proxy-type http 127.0.0.1 3128&lt;br /&gt;./dnstt-server -udp :5300 -privkey-file server.key t.example.com 127.0.0.1:3128&lt;br /&gt;&lt;br /&gt;在客户端上，将您的应用程序配置为使用隧道的本地端口（127.0.0.1:7000）作为 HTTP/HTTPS 代理：&lt;br /&gt;&lt;br /&gt;./dnstt-client -doh https://doh.example/dns-query -pubkey-file server.pub t.example.com 127.0.0.1:7000&lt;br /&gt;curl -x http://127.0.0.1:7000/ https://example.com/&lt;br /&gt;&lt;br /&gt;我尝试使用 Firefox 通过 DNS 隧道连接到 Ncat HTTP 代理，它可以正常工作。&lt;br /&gt;本地测试&lt;br /&gt;&lt;br /&gt;如果您只想看看它是如何工作的，而不想费心设置 DNS 区域或网络服务器，您可以在本地主机上运行隧道的两端。这种方式使用明文 UDP DNS，所以不用说，跨互联网使用这样的配置是不隐蔽的。因为在这种情况下没有中间解析器，您可以使用任何您想要的域名；只需在客户端和服务器上保持一致即可。&lt;br /&gt;&lt;br /&gt;./dnstt-server -gen-key -privkey-file server.key -pubkey-file server.pub&lt;br /&gt;./dnstt-server -udp 127.0.0.1:5300 -privkey-file server.key t.example.com 127.0.0.1:8000&lt;br /&gt;ncat -lkv 127.0.0.1 8000&lt;br /&gt;&lt;br /&gt;./dnstt-client -udp 127.0.0.1:5300 -pubkey-file server.pub t.example.com 127.0.0.1:7000&lt;br /&gt;ncat -v 127.0.0.1 7000&lt;br /&gt;&lt;br /&gt;当它工作时，您将在服务器上看到如下的日志消息：&lt;br /&gt;&lt;br /&gt;2020/04/20 01:48:58 pubkey 0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff&lt;br /&gt;2020/04/20 01:49:00 begin session 468d274a&lt;br /&gt;2020/04/20 01:49:03 begin stream 468d274a:3&lt;br /&gt;&lt;br /&gt;以及在客户端上看到如下的日志消息：&lt;br /&gt;&lt;br /&gt;2020/04/20 01:49:00 MTU 134&lt;br /&gt;2020/04/20 01:49:00 begin session 468d274a&lt;br /&gt;2020/04/20 01:49:03 begin stream 468d274a:3&lt;br /&gt;&lt;br /&gt;注意事项&lt;br /&gt;&lt;br /&gt;对于外部观察者来说，DoH 或 DoT 隧道是隐蔽的，但对于中间的解析器来说并非如此。如果解析器想要阻止您使用隧道，他们可以很容易地做到，只需不递归解析隧道服务器的 DNS 区域的请求。然而，隧道仍然对恶意解析器的窃听或篡改是安全的；解析器可以拒绝服务，但无法更改或读取隧道的内容。&lt;br /&gt;&lt;br /&gt;出于技术原因，该隧道要求解析器支持至少 1232 字节的 UDP 负载大小，这比 DNS 保证的最小值 512 要大。我怀疑大多数公共的 DoH 或 DoT 服务器都满足这个要求，但我没有进行过调查或其他任何操作。&lt;br /&gt;&lt;br /&gt;我没有进行任何系统性能测试，但我对 Google、Cloudflare 和 Quad9 解析器进行了一些初步测试。使用 Google 和 Cloudflare 时，通过 Ncat 传输文件时，我可以获得超过 100 KB/s 的下载速度。Cloudflare 的 DoH 解析器偶尔会发送「400 Bad Request」响应（当隧道客户端看到这样的意外状态码时，它会自动限制自身的速度）。Quad9 解析器的性能似乎明显不如其他解析器，但我不知道原因。&lt;br /&gt;&lt;/span&gt; &lt;/p&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;翻墙技术博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;订阅地址及社交帐号&lt;/a&gt;&lt;/div&gt;</description>
            <link>https://www.chinagfw.org/2023/07/dns-dohdot.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-8090901627736432729</guid>
            <pubDate>Thu, 29 Jun 2023 04:49:00 +0000</pubDate>
            <atom:updated>2023-06-29T12:49:53.141+08:00</atom:updated>
            <title>中国如何缺席 ChatGPT 盛宴</title>
            <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;h2 style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: calc(1.16667rem); font-weight: 600; line-height: calc(1.42857); margin-bottom: 24px; margin-top: calc(3.33333rem); text-align: center; visibility: visible; white-space: normal;&quot;&gt;原文已删除，存档页面： &lt;a href=&quot;https://web.archive.org/web/20230209093123/https://mp.weixin.qq.com/s/V4D72elC8ezY1gDtjaZEUg&quot;&gt;https://web.archive.org/web/20230209093123/https://mp.weixin.qq.com/s/V4D72elC8ezY1gDtjaZEUg&lt;/a&gt;&lt;/h2&gt;&lt;h2 style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: calc(1.16667rem); font-weight: 600; line-height: calc(1.42857); margin-bottom: 24px; margin-top: calc(3.33333rem); text-align: center; visibility: visible; white-space: normal;&quot;&gt;&lt;img alt=&quot;Image&quot; class=&quot;css-9pa8cd&quot; draggable=&quot;true&quot; src=&quot;https://pbs.twimg.com/media/FogtpCfaIAQIGIS?format=jpg&amp;amp;name=small&quot; /&gt; &lt;br /&gt;&lt;/h2&gt;&lt;p style=&quot;visibility: visible;&quot;&gt;&lt;span style=&quot;caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; text-align: start; visibility: visible;&quot;&gt;目录：&lt;/span&gt;&lt;br style=&quot;visibility: visible;&quot; /&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot; style=&quot;caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin-left: auto; margin-right: auto; margin-top: calc(1.66667rem); padding-left: 2.2222rem; text-align: start; visibility: visible; white-space: normal;&quot;&gt;&lt;li style=&quot;box-sizing: border-box; visibility: visible;&quot;&gt;&lt;p style=&quot;visibility: visible;&quot;&gt;ChatGPT 编年史&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; visibility: visible;&quot;&gt;&lt;p style=&quot;visibility: visible;&quot;&gt;我们如何错过 GPT 盛宴&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; visibility: visible;&quot;&gt;&lt;p style=&quot;visibility: visible;&quot;&gt;GPT 大语言模型能实现 AGI 吗&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; visibility: visible;&quot;&gt;&lt;p style=&quot;visibility: visible;&quot;&gt;连载话题预告&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 1rem; font-weight: 600; line-height: calc(1.66667); margin-bottom: 24px; margin-top: calc(1.66667rem); text-align: center; visibility: visible; white-space: normal;&quot;&gt;&lt;span style=&quot;font-size: 20px; visibility: visible;&quot;&gt;ChatGPT 编年史&lt;/span&gt;&lt;/h3&gt;&lt;section style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: 16px auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;我们来梳理一个时间轴。ChatGPT 是对话式 UI + GPT–3.5 系列模型，我们以最具代表性的论文、模型、API 为主线，梳理到今天。&lt;/section&gt;&lt;section style=&quot;line-height: normal; margin: 0px 0px 8px; text-align: justify; text-indent: 0em;&quot;&gt;&lt;br /&gt;&lt;/section&gt;&lt;section style=&quot;margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;2020 之前&lt;/span&gt;&lt;/section&gt;&lt;section style=&quot;margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 2017 年 6 月，Google 发布 Transformer 论文。&lt;/span&gt;&lt;/section&gt;&lt;section style=&quot;margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 2017 年 6 月，7 月，OpenAI 发布人类喜好的强化学习算法、PPO 算法，都是 ChatGPT 用到的算法。&lt;/span&gt;&lt;/section&gt;&lt;section style=&quot;margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 2018 年 6 月，OpenAI 发布 GPT-1.&lt;/span&gt;&lt;/section&gt;&lt;section style=&quot;margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 2018 年 11 月，Google 发布 BERT，此后 NLP 领域主要基于这个框架研究下游任务。&lt;/span&gt;&lt;/section&gt;&lt;section style=&quot;margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 2019 年 2 月，OpenAI 发布 GPT-2，OpenAI 获得了自信，此后专注于 GPT.&lt;/span&gt;&lt;/section&gt;&lt;section style=&quot;line-height: normal;&quot;&gt;&lt;br /&gt;&lt;/section&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;2020 年&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 年初，Covid-19 爆发。&lt;strong&gt;中国闭关&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 1 月，OpenAI 发布语言模型的 Scaling Law（概念：模型能力跟参数规模、数据规模强相关），OpenAI 获得了在数据和参数规模上 Scaling-up 的信心。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 5 月，GPT-3 论文发布。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 6 月，&lt;strong&gt;GPT-3 API 发布&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 9 月，ChatGPT 的关键原型算法相关论文发布。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 12 月，欧洲机构发布用于 GPT-3 复现的开源数据集。&lt;/span&gt;&lt;/p&gt;&lt;section style=&quot;line-height: normal;&quot;&gt;&lt;br /&gt;&lt;/section&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;2021 年&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 7 月，OpenAI 发布 Copilot 原型算法。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 8 月，Codex API 发布。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 11 月，&lt;strong&gt;GPT-3 API Public Release，不对中国开放&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- &lt;strong&gt;中国闭关&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;section style=&quot;line-height: normal;&quot;&gt;&lt;br /&gt;&lt;/section&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;2022 年&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;-
 1 月，GPT-3.5 API 
(text-davinci-002) 发布，该模型经过 Github 代码的训练加持，推理能力显著提升（该假设的因果关系待学术界论证），经过 Alignment 技术的加持，Follow 人类指令的能力显著提升，输出结果有用性和无害性显著提升。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 3 月，GPT-3.5 论文发布，公开 Alignment 算法。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 5 月，OpenAI Codex 已经被 70 个应用使用，包括微软收购的 Github 的 Copilot.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 8 月，Stability AI 开源 StableDiffusion，文生图的算法的效果可用、速度可行、代码开源同时发生，引爆图片生成。一时间，在中国，AIGC 似乎就是图片生成的代名词。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 9 月，Sequoia Capital 发布 Generative AI: A Creative New World 博客。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 中国研究人员和开发者，没有 OpenAI 的 API 权限。但图片生成却人人都可以尝试，于是互联网似乎只注意到了图片生成，对 GPT 大语言模型的关注度进一步下降。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;-
 经过接近一年的 API 接入和 UI 探索、近一年的思维链（Chain of Thought）等 Prompt 
Engineering 技术试错、模型加速等技术（如 Flash 
Attention、Fixed-Point）带来的成本和延迟下降，GPT-3.5 的模型潜力得到开发（变得 Better、Faster and 
Cheaper）, Copy.ai, Jasper 等文本生成类公司的产品逐渐成熟。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 11 月，OpenAI 发布 GPT3.5 API 的新模型 (text-davinci-003).&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- &lt;strong&gt;12 月 1 日，ChatGPT 发布&lt;/strong&gt;。Musk 等名流开始谈论 ChatGPT，引爆英文互联网。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 12 月初，中国互联网的自媒体逐渐开始讨论 ChatGPT，主要以翻译 twitter 的方式。知乎上有学者开始反思。一周后，关注指数下降，两个月来只剩下 AI 自媒体把 ChatGPT 作为自己的主要关注内容。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- &lt;strong&gt;中国闭关&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;section style=&quot;line-height: normal;&quot;&gt;&lt;br /&gt;&lt;/section&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;2023 年&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 1 月，微软宣布投资 OpenAI 数十亿美元，并将 GPT 加入全家桶。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 2 月，中国春节结束，微软和 Google 你方唱罢我登场，纳斯达克财报季，AI 被反复提起。中国互联网是认识微软的，ChatGPT 引爆中国互联网，关注指数飙升。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- &lt;strong&gt;中国开放&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;值得注意的是，&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;中国因为疫情闭关的三年，正是 OpenAI 的 GPT 发展、壮大、产品化的三年。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 1rem; font-weight: 600; line-height: calc(1.66667); margin-bottom: 24px; margin-top: calc(1.66667rem); text-align: center; text-size-adjust: auto; white-space: normal;&quot;&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;我们如何错过 GPT 盛宴？&lt;/span&gt;&lt;/h3&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin-bottom: 0px; margin-left: auto; margin-right: auto; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;历史回顾完了，那么为什么我们（中国，尤其是 AI 社区）没有更早地意识到，OpenAI 技术在应用层面的突破性？&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;意识到问题需要同时具备哪些条件：&lt;/p&gt;&lt;section style=&quot;line-height: 1.6em; margin: 1.66667px 0px 0px; text-align: left; text-indent: 0em;&quot;&gt;&lt;span style=&quot;color: #1a1a1a; font-size: 16px; letter-spacing: normal; text-decoration: none;&quot;&gt;1. 能够看且懂 OpenAI、DeepMind、Google 等机构的论文（代表人群：研究员）&lt;/span&gt;&lt;/section&gt;&lt;section style=&quot;line-height: 1.6em; margin: 1.66667px 0px 0px; text-align: left; text-indent: 0em;&quot;&gt;&lt;span style=&quot;color: #1a1a1a; font-size: 16px; letter-spacing: normal; text-decoration: none;&quot;&gt; 2. 能够使用 OpenAI 的 API 探索论文里的模型 （代表人群：研究员里的尝鲜者）&lt;/span&gt;&lt;/section&gt;&lt;section style=&quot;line-height: 1.6em; margin: 1.66667px 0px 0px; text-align: left; text-indent: 0em;&quot;&gt;&lt;span style=&quot;color: #1a1a1a; font-size: 16px; letter-spacing: normal; text-decoration: none;&quot;&gt; 3. 对硅谷的敏感性，经常看大家在用 OpenAI 的 API 做什么产品 （代表人群：VC）&lt;/span&gt;&lt;/section&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;这三类人在中国，我们粗估一下，第一类，大概有 1/100,000，第二类大概是第一类里的 1/1,000，第三类大概是 1/1,000,000. 三个条件，缺少一个，都无法意识到 OpenAI 发展到哪一步了。&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;有哪个团队汇集了这三种人，并且他们有充分的碰撞？有哪个人是具备了这三种属性？&lt;/span&gt;&amp;nbsp;雪上加霜的是，&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;研究人员三年来被封在国内&lt;/span&gt;，没有出国参加过学术会议交流，甚至我猜很多人连线上会议都没有参加，很多东西我们从论文上是看不到的。&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;我们继续深挖。第一类人群中，又分成 NLP（自然语言处理）研究人员，其他 AI 研究人员（比如计算机视觉、语音识别、机器学习）。&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;中国 NLP 的研究群体里，基本上是把语言模型（尤其是 BERT，而不是 GPT）拿去应用在 NLP 的各种下游任务上，在学术界就是刷榜发论文，在工业界，就是拿去做客服机器人、写稿机器人、角色扮演机器人，研究方法也完全不同于 GPT 精髓——Scaling-up 和 Alignment。&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;（几乎）没有人是把大语言模型（LLM）当做通用人工智能（AGI）的一种可能性来研究的。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;其他 AI 研究人员，比如计算机视觉，大部分人还是专注在图像上，即使是用 Transformer，也是解决图像的问题，比如用 Transformer 来做自动驾驶、图像生成等。即使是 Tesla
 AutoPilot 的 AI 主管 Karpathy。Karpathy 在 2022 年上半年从 Tesla 裸辞，以独立研究员的身份，投身于大语言模型。&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;Karpathy 曾经说他过去十年痴迷于 AI 中取得最快进展的方向，并且曾经对语言模型非常感兴趣，但是却忽视了 scaling
 up 的力量，那就是简单的 Objective（next word）+简单的结构（Transformer）+ 足够的参数+足够的数据 (web 
text)，一个语言模型可以涌现出在小规模状态下看不到的能力，他曾像其他人一样（他应该指早期的 OpenAI），一度以为强化学习是 AGI 的路径，到头来却发现大语言模型是看起来最有希望的路径。在此之前，语言模型的研究人员，把精力过多地放在了具体任务上。&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;再说 AI 领域的另一个重要群体——计算机视觉（Computer
 
Vision) 群体。在 2012 年开始的深度学习浪潮里，计算机视觉一直是应用最广、商业化最成功的方向，吸引了太多 AI 研究员的精力，从图像分类、检测、分割到识别，从图像到视频，从高层视觉到底层视觉，我们在卷积神经网络上卷出了一个又一个新高度。一个 YOLO 目标检测框架，被迭代到原作者都放弃了，还有人给推到了 v7 版本。最具代表性的是计算机视觉的登月工程——自动驾驶，它需要成像、识别、合成、建图、规划等几乎所有的视觉 AI 技术加持，从 CNN 时代到 Transformer 时代，不断地拉更多的人下水，但直到今天，全自动驾驶的方案仍未收敛。马斯克定义的问题是对的，自动驾驶是一个 real-world
 AI 问题，但显然特斯拉的方案并没有为全自动驾驶准备好。&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;NLP 圈的小家碧玉，CV 圈的隔行隔山，疫情闭关三年，互联网信息不通。这些因素叠加起来，整个中文世界，形成了一个信息茧房。10 年来，我们以为自己积攒的 AI 算法、数据、应用的优势，如今变成中美巨大的鸿沟。这个时候，我们甚至没有一个新闻调查，把这件事的来龙去脉，挖它个底朝天。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;另一个问题是，&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;我们的中文互联网不足以提供高质量的训练数据&lt;/span&gt;。什么是高质量的数据？比如维基百科、高质量的活跃论坛、专业新闻、学术论文、高质量代码、图书。&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;我们看看 GPT–3 的训练数据是什么。权重最大的数据集是 OpenWebText（开源版本）,数据是从 Reddit 论坛上收集的 URL，再把内容抓取下来。Common Crawl 是一个开放的互联网数据存档（英文占一半，&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;中文大概 5%&lt;/span&gt;）。其他一些代表性的数据包括 Wikipedia 维基百科，Books 开放图书，Stack
 Exchange 技术问答社区，Github 
代码，ArXiv 论文，RealNew 新闻存档，PubMed 医疗数据。可以看到，由中文互联网产生的数据，比例低到可以忽略。这也是困扰很多试图训练中文大模型的问题，但实际上，ChatGPT 的用中文沟通的能力，已经远超那些专门的中文大语言模型了，背后原因是 GPT 隐式学到的翻译能力。&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;没有好的中文数据，我们就只能搭全球互联网的数据顺风车。&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;上面这些优质数据的产生，需要开放的社区，我们似乎无解。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 1rem; font-weight: 600; line-height: calc(1.66667); margin-bottom: 24px; margin-top: 24px; text-align: center; text-size-adjust: auto; white-space: normal;&quot;&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;GPT 大语言模型能实现 AGI 吗？&lt;/span&gt;&lt;/h3&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin-bottom: 0px; margin-left: auto; margin-right: auto; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;基于 GPT 的 LLM，仅仅依赖语言，大概率无法实现 AGI，而只是」通往 AGI 的高速公路的一个出口（Yann
 
Lecun）「。但 LLM 足以把互联网基础设施搞个天翻地覆，它同时具备了 Logic 和 Memory。Logic 是推理能力，Memory 是对高频知识的记忆，显然 Memory 可以分为片上和片外，片上有限，片外无限。下一步，我们只需要专注于把 LLM 的 Logic 推到极致，把大部分低频 Memory
 
offload 到模型以外，配以搜索等查询技术，就可以实现对整个互联网前后端的重构。我们远远没有吃尽 scaling-law 的红利，限制我们的，只有集成电路的摩尔定律和制造能力、能源的价格、数据的获取。&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;集成电路方面，以 Chiplet 为代表的系统摩尔定律还不够，人们需要能够 scaling-up 的 Foundry。&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;能源方面，太阳能和风能 + 能源存储能够解决很多问题，更加激动人心的是以 Helion 为代表的核聚变技术，则有机会把能源价格降低一个量级，然后更多。&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;数据方面，目前的 GPT 模型依赖互联网文本数据，这会用尽，没关系，现实世界的数据是无限的。&lt;/p&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻墙技术博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;订阅地址及社交帐号&lt;/a&gt;&lt;/div&gt;</description>
            <link>https://www.chinagfw.org/2023/06/chatgpt.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-8350892200322034371</guid>
            <pubDate>Tue, 20 Jun 2023 06:05:00 +0000</pubDate>
            <atom:updated>2023-06-20T14:05:10.753+08:00</atom:updated>
            <title> 你不能相信 Google</title>
            <description>&lt;p&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;via &lt;a href=&quot;https://world.hey.com/dhh/you-can-t-trust-google-f7d64064&quot;&gt;https://world.hey.com/dhh/you-can-t-trust-google-f7d64064&lt;/a&gt; &lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;大衞·海涅梅尔·汉森&lt;br /&gt;&lt;br /&gt;2023 年 6 月 19 日&lt;br /&gt;如果 Google 找不到能够通过广告以数十亿的规模直接盈利的方法，他们最终会消除你关心的每一项服务。他们在产品或服务业务上从根本上无法成功，因为产品和服务对 Google 来说并无利可图，广告才是。&lt;br /&gt;&lt;br /&gt;你可以从多个方面看到这种重点，但我最喜欢的是以客户服务为镜。在客户服务方面，Google 一直表现得非常糟糕，因为帮助某人解决 Workspaces 甚至 Google Cloud 平台上的问题从来不会像帮助广告商霸占你的注意力那样利润丰厚。&lt;br /&gt;&lt;br /&gt;这是一个永恒的观察，但我现在提到它是为了庆祝 Google 刚刚关闭他们的域名注册商 Google Domains。在九年的经营中，它将在三个月内毫不矜持地消失（并将残骸出售给 Squarespace）。这是一个每年营业额达 1.8 亿美元，为 1000 万个域名提供服务的业务！&lt;br /&gt;&lt;br /&gt;Google Home / Nest 的闭著死走也并不足取。Google 在将近十年前收购了 Nest，却在其产品组合上做得比什么都不做还要糟糕。就在几年前，他们关闭了 Nest Secure，导致那些购买这一系统的人明年得到一堆砖石。而原本应该取而代之的优秀 Nest 应用程式的 Google Home 应用程式已成为数年的尴尬和忽视。&lt;br /&gt;&lt;br /&gt;鉴于这样的历史，为什么还有人会信任 Google 在广告以外的产品和服务呢？这涉及从 Workspaces 到 Gmail for Domains 再到 Google Cloud 平台的所有领域。只要这家公司进行一次重大的重组，或者提拔任一高层，它就有可能摧毁其中的任何一个。&lt;br /&gt;&lt;br /&gt;我只是想说，你最好有个备用计划。如何备份你的协作、你的邮件、你的家庭安全系统。任何一个标有「Made by Google」的产品都暗指下面有「直到我们不再在乎」这样的解释。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;/p&gt;&lt;p&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;==========&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;关于 David Heinemeier Hansson&lt;br /&gt;作为 37signals 公司的共同所有者和首席技术官，为那些处于劣势地位的人们创建了 Basecamp 和 HEY。创建了 Ruby on Rails。著有《REWORK》、《It Doesn&#39;t Have to Be Crazy at Work》和《REMOTE》。作为一名赛车手在勒芒赛车比赛中获胜。作为反托拉斯倡导者与大型科技垄断公司作斗争。投资于丹麦的初创企业。&lt;br /&gt;&lt;/span&gt; &lt;/p&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;翻墙技术博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;订阅地址及社交帐号&lt;/a&gt;&lt;/div&gt;</description>
            <link>https://www.chinagfw.org/2023/06/google.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-6659314781463108026</guid>
            <pubDate>Wed, 31 May 2023 04:19:00 +0000</pubDate>
            <atom:updated>2023-05-31T12:19:11.677+08:00</atom:updated>
            <title>IPVM 发现大华公司销售抗议者/横幅报警设备，并随后删除证据 - Here News</title>
            <description>&lt;p&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; font-size: 16px; line-height: 24px;&quot;&gt;

via &lt;a href=&quot;https://here.news/post/6476c93a4e793c181e076867&quot;&gt;https://here.news/post/6476c93a4e793c181e076867&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;政治抗议活动在中华人民共和国很快被镇压，最近的北京「桥人横幅」尤为著名。大华公司提供了一种技术解决方案，利用人工智能分析自动检测和报告抗议横幅和抗议者的面部特征给中国公安机关。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;img alt=&quot;55f3c1d1-c394-4c33-aa07-2d92da91054b_application_1.png&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/55f3c1d1-c394-4c33-aa07-2d92da91054b_application_1.png&quot; style=&quot;display: block; max-width: 100%;&quot; /&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;IPVM 还发现英飞凌也列出了具有这种分析功能的摄像头。IPVM 是第一个报道这种解决方案存在的机构。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;大华在 IPVM 联系后不久删除了所有证据。关于中国对抗议者、记者以及宗教/民族少数群体的警报，请参见：&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;大华和英飞凌都未回复置评请求。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;strong&gt;「横幅报警」AI 平台&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;大华的「巨灵」AI 平台于 2021 年推出，提供多种分析功能，如检测工地上的安全帽、室内吸烟、工人闲置时间等。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;其中一项解决方案名为「拉横幅」，列在「社会治安」类别下，会对任何检测到的抗议横幅产生报警：&lt;/p&gt;&lt;blockquote style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;在指定区域内，如果检测到人举横幅并持续一定时间，则会产生报警[强调添加] 指定区域内，检测到人举横幅且持续一定时间则产生报警&lt;/blockquote&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;大华进行了一次系统演示，演示的左上角用英文单词「banner_​alarm」进行标注。演示还显示，抗议者的面部特征会自动被检测和记录，作为同一解决方案的一部分：&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;img alt=&quot;c2204c14-5477-46fe-8b1a-97d3200d3eee_application_1.png&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/c2204c14-5477-46fe-8b1a-97d3200d3eee_application_1.png&quot; style=&quot;display: block; max-width: 100%;&quot; /&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;此标语写着：「战 70 天，拼在寒冬，赢下」（战 70 天，拼在寒冬，赢下）。IPVM 在大华的演示中没有找到此标语的其他提及。目前尚不清楚这是否指涉特定事件，或者仅用于演示目的。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;strong&gt;没有 OCR 证据&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;大华的系统中并未提到光学字符识别（OCR），即没有证据表明该系统能够自动识别横幅上的口号，或者仅设定为仅对特定词语或口号发出警报。从概念上讲，技术上讲，这并不难实现，因为 OCR 技术已经得到广泛应用，而且横幅往往较大，易于摄像头处理。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;strong&gt;服务于中国当局&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;大华使用「社会治安」和「社会治理」这些术语来描述该解决方案，表明该解决方案针对警察和中国其他相关机构的使用，因为这些术语在中国特定用于描述通过详细的刑法规定来维护公共秩序的行动。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;strong&gt;2020 年的演示，2023 年可用&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;IPVM 发现这些抗议者警报在 2023 年 5 月实时可用，尽管可能已经提供了多年，因为横幅图像的时间戳显示为 2020 年 11 月。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;strong&gt;用于城市广场、道路、大厅&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;大华的解决方案表示，它适用于「室内大厅或室外较空旷的广场、道路和其他场景」。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;strong&gt;以 100–500 像素为目标&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;大华的解决方案还指出，它自动检测「在 1080P 分辨率下大小在 100 到 500 像素的横幅或标语牌」。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;strong&gt;英飞凌等公司也提供相同的功能&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;英飞凌的两款摄像头也包括「拉横幅检测」功能：VH311-B5 5MP 枪式摄像头和 VS211-​A60B-​AJ0-​T 8MP 枪式摄像头。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;strong&gt;中国抗议背景&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;尽管中华人民共和国宪法第 35 条保障了集会自由，但抗议者和举着横幅的人常常因中华人民共和国反对「扰乱公共秩序」和「妨碍社会管理」的广泛法律而被逮捕。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;尽管如此，在中华人民共和国，展开横幅抗议（「拉横幅」）仍经常被用来表达诉求，例如 2016 年湖南地区教师因未支付工资而举行抗议活动，要求当局「依法保障教师待遇」。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;img alt=&quot;25d49d2f-5831-4bbc-b363-502357ae2f7a_application_1.png&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/25d49d2f-5831-4bbc-b363-502357ae2f7a_application_1.png&quot; style=&quot;display: block; max-width: 100%;&quot; /&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;更为著名的是，中国在 2022 年爆发的反封控抗议活动就是由一名在北京展开横幅、呼吁「我们不想要封控，我们要自由」的抗议者启发而起。该抗议者当场被逮捕，至今下落不明。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;a href=&quot;https://youtu.be/lguW9FjLKC0&quot; rel=&quot;noreferrer noopener&quot; style=&quot;color: black;&quot; target=&quot;_blank&quot;&gt;https://youtu.be/lguW9FjLKC0&lt;/a&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;strong&gt;中国横幅看起来相似&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;与美国和欧洲不同，中国的抗议标语通常相当相似，这使得构建能够自动检测它们的视频分析更加容易。IPVM 找到了一个训练数据库，里面有 100 张不同横幅的图片，专门用于创建这种分析功能。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;img alt=&quot;60e4230e-d37e-4b1a-9e58-18cca86d350e_application_1.png&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/60e4230e-d37e-4b1a-9e58-18cca86d350e_application_1.png&quot; style=&quot;display: block; max-width: 100%;&quot; /&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;strong&gt;与海康威视的比较&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;海康威视也向中华人民共和国警方提供了抗议者警报：&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;海康威视的平台列出了与「非法集会、游行、示威」和「聚众」相关的报警功能，IPVM 和《衞报》在 2022 年报道了这一情况。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;海康威视的警报不是由视频分析驱动的，而是与现有警察系统集成，用于跟踪抗议者，特别是「信访人」，这个群体在中华人民共和国受到密切监控。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;strong&gt;大华删除证据&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;在 IPVM 联系大华之前，「社会治安」类别下列出了「拉横幅」的检测功能：&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;img alt=&quot;b4511988-d86d-4451-a4b9-039b95325b1b_application_1.png&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/b4511988-d86d-4451-a4b9-039b95325b1b_application_1.png&quot; style=&quot;display: block; max-width: 100%;&quot; /&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;然而，大华在 IPVM 联系之后很快将该解决方案从其网站上删除，即「Unfurled Banners」（拉横幅）不再显示。IPVM 预料到了这一点，并存档了大华的网页。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;a href=&quot;https://ipvm.com/reports/dahua-protestor-alarms&quot; rel=&quot;noreferrer noopener&quot; style=&quot;color: black;&quot; target=&quot;_blank&quot;&gt;https://ipvm.com/reports/dahua-protestor-alarms&lt;/a&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;这对于大华来说并不是新鲜事，因为该公司有删除自己网站上证据的历史，例如大华召开习近平学习会后随即删除（2021 年）和大华自定义中国军队视频管理系统，删除证据（2022 年）。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;strong&gt;大华和英飞凌未回复&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;大华和英飞凌均未对我们的多次置评请求作出回应。IPVM 在 5 月 25 日（大华）和 5 月 26 日（英飞凌）首次联系这些公司，即在我们发表文章之前的 4 到 5 天。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;翻墙技术博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;订阅地址及社交帐号&lt;/a&gt;&lt;/div&gt;</description>
            <link>https://www.chinagfw.org/2023/05/ipvm-here-news.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-6354298615595485383</guid>
            <pubDate>Thu, 25 May 2023 04:41:00 +0000</pubDate>
            <atom:updated>2023-06-29T12:53:35.335+08:00</atom:updated>
            <title>警惕 SNI 白名单地区隐蔽的大规模「降级攻击」</title>
            <description>（读者反馈此文有大量争议，我们暂时打码，&lt;a href=&quot;https://github.com/net4people/bbs/issues/254&quot;&gt;请读者到技术讨论区自行分辨&lt;/a&gt;）&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;&lt;/span&gt;&lt;h2 dir=&quot;auto&quot;&gt;&lt;span style=&quot;background-color: #444444;&quot;&gt;via &lt;a href=&quot;https://t.me/projectXtls/91&quot;&gt;https://t.me/projectXtls/91&lt;/a&gt;&lt;br /&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;span style=&quot;background-color: #444444;&quot;&gt;根据长期的观察，以及多位身处 SNI 白名单地区的群友的反馈，这些地区的 IPv4 TCP 并不封锁 SS、VMess 这类全随机数裸协议，与其它地区的封锁策略形成了鲜明的反差，是一种非常反常的现象。&lt;/span&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;span style=&quot;background-color: #444444;&quot;&gt;我们已知对于封锁翻墙流量，SNI 白名单是一种附带伤害极高的方式，我们也知道，其它地区的 GFW 正在轻易识别并封锁全随机数裸协议。那么请大家思考：&lt;b&gt;为什么某些地区并不在乎附带伤害，对 TLS 采用 SNI 白名单这样的强过滤策略，却「完全不管」全随机数裸协议？&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;span style=&quot;background-color: #444444;&quot;&gt;&lt;b&gt;只有一种可能：故意留的口子，除此之外没有任何其它合理解释。&lt;/b&gt; 我们已知相较于 TLS，全随机数裸协议相当于是把翻墙写在了脸上，更便于识别、掌握情况。且它们普遍缺乏 TLS 的「前向安全」等高级安全特性，非常原始，通过某种方式拿到密码就可以解密以前、以后的所有流量，非常利于监控。&lt;b&gt;所以我认为，这种 SNI 白名单+不封锁全随机数裸协议的组合策略，实质上是在迫使人们从较为安全的 TLS 协议迁移到不够安全的全随机数裸协议，是一场隐蔽的大规模「降级攻击」。&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;background-color: #444444;&quot;&gt;
SNI 白名单地区存在的这种非常反常的现象也从侧面证实了，&lt;b&gt;我在多个场合曾提醒过的关于全随机数裸协议的种种风险切实存在，就连 GFW 也明确希望你们使用全随机数裸协议而不是 TLS。&lt;/b&gt; 目前，这些地区仍可直接使用 REALITY，且它解决了 TLS 令人诟病的 CA 风险。 &lt;/span&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;翻墙技术博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;订阅地址及社交帐号&lt;/a&gt;&lt;/div&gt;</description>
            <link>https://www.chinagfw.org/2023/05/sni.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <thr:total>2</thr:total>
        </item>
    </channel>
</rss>