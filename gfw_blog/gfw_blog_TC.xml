<?xml version='1.0' encoding='UTF-8'?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:openSearch="http://a9.com/-/spec/opensearchrss/1.0/"
    xmlns:blogger="http://schemas.google.com/blogger/2008"
    xmlns:georss="http://www.georss.org/georss"
    xmlns:gd="http://schemas.google.com/g/2005"
    xmlns:thr="http://purl.org/syndication/thread/1.0" version="2.0">
    <channel>
        <atom:id>tag:blogger.com,1999:blog-5500297126185736776</atom:id>
        <lastBuildDate>Sun, 08 Oct 2023 14:08:48 +0000</lastBuildDate>
        <category>anti-censorship</category>
        <category>翻牆動態</category>
        <category>Internet control</category>
        <category>anti-censorship campaign</category>
        <category>Internet censorship</category>
        <category>GFW</category>
        <category>notices</category>
        <category>翻牆</category>
        <category>VPN</category>
        <category>blog</category>
        <category>Tor</category>
        <category>foreign countries</category>
        <category>self-censorship</category>
        <category>BBS</category>
        <category>Social Critic</category>
        <category>close</category>
        <category>lawsuits</category>
        <category>Internet censorship research</category>
        <category>翻牆資源</category>
        <category>China Internet Research</category>
        <category>Proxies</category>
        <category>翻牆觀察</category>
        <category>Civil Society Communication</category>
        <category>Internet dissent</category>
        <category>harmful information</category>
        <category>online public opinion</category>
        <category>website registration</category>
        <category>internet police</category>
        <category>Participatory Media Handbook</category>
        <category>Citizen Media Law</category>
        <category>SSH</category>
        <category>anti-censorship research</category>
        <category>online porn</category>
        <category>IDC</category>
        <category>real name registration</category>
        <category>censorware</category>
        <category>Guangdong</category>
        <category>government officials</category>
        <category>online activism</category>
        <category>ShadowSocks</category>
        <category>delete</category>
        <category>網絡安全</category>
        <category>digital security</category>
        <category>google</category>
        <category>publishing</category>
        <category>rumors</category>
        <category>Psiphon</category>
        <category>block</category>
        <category>propaganda</category>
        <category>技術剖析</category>
        <category>UltraSurf</category>
        <category>科學上網</category>
        <category>netizens&#39; voices</category>
        <category>Internet commentator</category>
        <category>Hotspot Shield</category>
        <category>cell phone</category>
        <category>detention</category>
        <category>universities</category>
        <category>Freegate</category>
        <category>Internet politics</category>
        <category>key words</category>
        <category>School</category>
        <category>YouTube</category>
        <category>Twitter</category>
        <category>online video</category>
        <category>審查</category>
        <category>bloggers</category>
        <category>internet cafes</category>
        <category>GFW 資源</category>
        <category>online culture</category>
        <category>wordpress</category>
        <category>Blogger</category>
        <category>GPass</category>
        <category>Guizhou</category>
        <category>大事記</category>
        <category>Du Dongjin</category>
        <category>news site</category>
        <category>教程</category>
        <category>censored</category>
        <category>Beijing</category>
        <category>新聞審查</category>
        <category>citizen journalism</category>
        <category>from Renren</category>
        <category>unblock</category>
        <category>防火牆</category>
        <category>netizens</category>
        <category>email</category>
        <category>sina</category>
        <category>GFW 新聞</category>
        <category>SMS</category>
        <category>Shandong</category>
        <category>安全</category>
        <category>Afghanistan</category>
        <category>Sichuan</category>
        <category>chinatelecom</category>
        <category>lawyers</category>
        <category>wiki</category>
        <category>xiamen</category>
        <category>隱私</category>
        <category>Henan</category>
        <category>MII</category>
        <category>lawsuits research</category>
        <category>Burma</category>
        <category>GAPP</category>
        <category>academics</category>
        <category>defamation</category>
        <category>foreign IT companies</category>
        <category>Chinese government</category>
        <category>Chongqing</category>
        <category>IPV6</category>
        <category>Shan Zhidong</category>
        <category>baidu</category>
        <category>filtering</category>
        <category>ss</category>
        <category>AlwaysVPN</category>
        <category>Internet human rights declaration</category>
        <category>Jap</category>
        <category>Shanxi</category>
        <category>Zan Aizong</category>
        <category>Zhejiang</category>
        <category>Zuola</category>
        <category>media controls</category>
        <category>Chinese leaders</category>
        <category>Du Daobin</category>
        <category>GTunnel</category>
        <category>Iran</category>
        <category>Jiang Huanwen</category>
        <category>Linkideo</category>
        <category>Liu Xiaoyuan</category>
        <category>Putty</category>
        <category>V2Ray</category>
        <category>Your Freedom</category>
        <category>cctv</category>
        <category>flickr</category>
        <category>gladder</category>
        <category>photo</category>
        <category>reports</category>
        <category>sohu</category>
        <category>視頻</category>
        <category>Drupal</category>
        <category>Fujian</category>
        <category>IM</category>
        <category>Internet growth</category>
        <category>Jiangsu</category>
        <category>Yahoo</category>
        <category>Yemen</category>
        <category>Yunnan</category>
        <category>libel</category>
        <category>youth</category>
        <category>技術</category>
        <category>Epoch Times</category>
        <category>FirePhoenix</category>
        <category>Freenet</category>
        <category>GFW 彙總</category>
        <category>Hunan</category>
        <category>QQ</category>
        <category>SARFT</category>
        <category>Shanghai</category>
        <category>Skype</category>
        <category>Tibet</category>
        <category>Xinjiang</category>
        <category>Zhang Yuanxin</category>
        <category>屏蔽</category>
        <category>工具</category>
        <category>瀏覽器</category>
        <category>China Mobile</category>
        <category>IPv9</category>
        <category>Inner Mongolia</category>
        <category>Online Organizing</category>
        <category>Saudi Arabia</category>
        <category>Search Engines</category>
        <category>Shaanxi</category>
        <category>Shadowrocket</category>
        <category>Shi Tao</category>
        <category>privacy</category>
        <category>中國數字時代</category>
        <category>加密</category>
        <category>匿名</category>
        <category>彙總</category>
        <category>翻牆工具與技術大事記</category>
        <category>自由</category>
        <category>2018</category>
        <category>Anhui</category>
        <category>Audio</category>
        <category>Cisco</category>
        <category>DNS</category>
        <category>Hainan</category>
        <category>He Depu</category>
        <category>Internet Society</category>
        <category>Lian Yue</category>
        <category>Liang hui</category>
        <category>Lu Gengsong</category>
        <category>MPS</category>
        <category>Microsoft</category>
        <category>Tianwang</category>
        <category>Turkey</category>
        <category>Zhang Jianping</category>
        <category>book</category>
        <category>books</category>
        <category>democracy</category>
        <category>free speech</category>
        <category>internet language</category>
        <category>mapping</category>
        <category>ubuntu</category>
        <category>歷史紀錄</category>
        <category>微信</category>
        <category>方濱興</category>
        <category>瀏覽器插件</category>
        <category>Australia</category>
        <category>Cai Mingzhao</category>
        <category>Chen Shuqing</category>
        <category>Culture Revolution</category>
        <category>Egypt</category>
        <category>GFW 評論</category>
        <category>Gansu</category>
        <category>Gaotang</category>
        <category>Guo Qizhen</category>
        <category>Harbin Institute of Technology</category>
        <category>Hebei</category>
        <category>Hu Jintao</category>
        <category>Hubei</category>
        <category>IPFS</category>
        <category>Internet law</category>
        <category>Jiangxi</category>
        <category>KeePass</category>
        <category>Li Jian</category>
        <category>Liaoning</category>
        <category>Pakistan</category>
        <category>Participatory Media Research</category>
        <category>Shi Zhao</category>
        <category>Taiwan</category>
        <category>Wang Haiyang</category>
        <category>Yang Jinzhu</category>
        <category>Yao Jian</category>
        <category>Yilishen</category>
        <category>ZeroNet</category>
        <category>book banning</category>
        <category>ecomomy</category>
        <category>from Xiaonei</category>
        <category>gaming</category>
        <category>hosts</category>
        <category>poisoned milk</category>
        <category>安裝教程</category>
        <category>微博</category>
        <category>微軟</category>
        <category>操作系統</category>
        <category>翻牆問答</category>
        <category>路由器</category>
        <category>50 Cents Party</category>
        <category>BandwagonHost</category>
        <category>CNNIC</category>
        <category>CentOS</category>
        <category>DigitalOcean</category>
        <category>GFW 教程</category>
        <category>Github</category>
        <category>Green Internet</category>
        <category>Han Han</category>
        <category>Hao Wu</category>
        <category>IPR</category>
        <category>India</category>
        <category>Isaac Mao</category>
        <category>Jilin</category>
        <category>Lantern</category>
        <category>Li Jianping</category>
        <category>Li Yuanlong</category>
        <category>Linux</category>
        <category>Liu Binjie</category>
        <category>MOE</category>
        <category>Mac</category>
        <category>MediaWiki</category>
        <category>Morocco</category>
        <category>Nart Villeneuve</category>
        <category>Openwrt</category>
        <category>P2P</category>
        <category>Potatso</category>
        <category>Qin Zhongfei</category>
        <category>Surge</category>
        <category>United States</category>
        <category>Web-at-Risk</category>
        <category>Wen Jiabao</category>
        <category>Xi Guohua</category>
        <category>Yang Tongyan</category>
        <category>Yang Zaixin</category>
        <category>Yitahutu</category>
        <category>Zhang Lin</category>
        <category>Zhao Lianhai</category>
        <category>corruption</category>
        <category>iPhone 翻牆</category>
        <category>ios</category>
        <category>law</category>
        <category>socksv5</category>
        <category>videos</category>
        <category>互聯網管理</category>
        <category>信息安全</category>
        <category>刪除</category>
        <category>搜索</category>
        <category>敏感詞</category>
        <category>樹莓派</category>
        <category>百度雲盤</category>
        <category>監控</category>
        <category>網上義務監督員</category>
        <category>網信辦</category>
        <category>美國</category>
        <category>翻牆事件大事記</category>
        <category>谷歌瀏覽器</category>
        <category>Ai Weiwei</category>
        <category>Android</category>
        <category>BTsync</category>
        <category>Cai Lujun</category>
        <category>China Netcom</category>
        <category>China Tietong</category>
        <category>China Unicom</category>
        <category>Chrome</category>
        <category>Ciphire</category>
        <category>Docker</category>
        <category>Eraser</category>
        <category>Finland</category>
        <category>Firefox</category>
        <category>GFW 分析</category>
        <category>GFW 問答</category>
        <category>GIMP</category>
        <category>Global Voices Advocacy</category>
        <category>Guangxi</category>
        <category>Guo Qinghai</category>
        <category>Guo Quan</category>
        <category>Hu Jia</category>
        <category>Huang Qi</category>
        <category>Huang Wanli</category>
        <category>HyperApp</category>
        <category>ISP</category>
        <category>Internet TV</category>
        <category>Ireland</category>
        <category>Israel</category>
        <category>JanusVM</category>
        <category>Li Xinde</category>
        <category>Li Yuan</category>
        <category>Li Zhi</category>
        <category>Liu Yunshan</category>
        <category>Lu Xinhua</category>
        <category>Luo Yongzhong</category>
        <category>MSN</category>
        <category>Mao Zedong</category>
        <category>Ministry of Culture</category>
        <category>NGO-in-a-box</category>
        <category>Ningxia</category>
        <category>OpenNet Initiative</category>
        <category>Paper Bus</category>
        <category>Proxifier</category>
        <category>RSS</category>
        <category>RSS 訂閲</category>
        <category>Ran Yunfei</category>
        <category>SSR</category>
        <category>ShadowsocksR</category>
        <category>Shenzhen</category>
        <category>Singapore</category>
        <category>Thailand</category>
        <category>TrueCrypt</category>
        <category>Tudou</category>
        <category>UK</category>
        <category>WYWZ</category>
        <category>WeChat</category>
        <category>Wifi</category>
        <category>Windows10</category>
        <category>WireGuard</category>
        <category>ZeroNet，教程</category>
        <category>Zhang Jianhong</category>
        <category>Zhang Yihe</category>
        <category>Zheng Yichun</category>
        <category>app</category>
        <category>blogbus</category>
        <category>bullog</category>
        <category>censorship</category>
        <category>facebook</category>
        <category>free trade</category>
        <category>from qzone</category>
        <category>goagent</category>
        <category>iOS 翻牆</category>
        <category>information revolution</category>
        <category>international relationship</category>
        <category>ipsec</category>
        <category>kcptun</category>
        <category>l2tp</category>
        <category>movie censorship</category>
        <category>news censorship</category>
        <category>online TV</category>
        <category>online forum</category>
        <category>overseas Chinese</category>
        <category>pptp</category>
        <category>sanxia</category>
        <category>tools</category>
        <category>unnatural death in China</category>
        <category>vps</category>
        <category>websites</category>
        <category>下載</category>
        <category>中國</category>
        <category>中文</category>
        <category>中文版</category>
        <category>互聯網</category>
        <category>亞馬遜</category>
        <category>俄羅斯</category>
        <category>免費</category>
        <category>劫持</category>
        <category>歷史</category>
        <category>原理</category>
        <category>可信計算</category>
        <category>台灣</category>
        <category>大事件</category>
        <category>存儲</category>
        <category>密碼</category>
        <category>開源</category>
        <category>搭建</category>
        <category>政府</category>
        <category>敏感詞庫</category>
        <category>新聞</category>
        <category>新聞出版署</category>
        <category>月報</category>
        <category>服務器</category>
        <category>樹莓</category>
        <category>泄密</category>
        <category>泄露</category>
        <category>火狐</category>
        <category>環球時報</category>
        <category>白名單</category>
        <category>百度</category>
        <category>監管</category>
        <category>硬件</category>
        <category>編程隨想</category>
        <category>網站</category>
        <category>網絡</category>
        <category>網絡隱私</category>
        <category>翻牆技術</category>
        <category>藍燈</category>
        <category>證書</category>
        <category>谷歌</category>
        <category>貿易</category>
        <category>魯煒</category>
        <category>黑客</category>
        <category>A.GIG.T</category>
        <category>ASUS</category>
        <category>Apple</category>
        <category>Azure</category>
        <category>Bahrain</category>
        <category>Banana Pi R1</category>
        <category>Bob Dylan</category>
        <category>CA</category>
        <category>CCP</category>
        <category>Canada</category>
        <category>Chat Rooms</category>
        <category>China Satcom</category>
        <category>Chinese pens</category>
        <category>ChnRoute</category>
        <category>DNSCrypt</category>
        <category>DNSProxy</category>
        <category>EasyPi</category>
        <category>EasytimeTV</category>
        <category>EdgeRouterX</category>
        <category>ExpressVPN</category>
        <category>Feng Zhenghu</category>
        <category>Freedur</category>
        <category>GFW 內容徵集</category>
        <category>GPG</category>
        <category>Germany</category>
        <category>Gogo</category>
        <category>Google Cloud</category>
        <category>Google Drive</category>
        <category>GreatFire.org</category>
        <category>HTTPS</category>
        <category>He weifang</category>
        <category>Hexo</category>
        <category>Hexun</category>
        <category>Hong Kong</category>
        <category>Hu Qiheng</category>
        <category>Huang Jinqiu</category>
        <category>Hyper</category>
        <category>I2P</category>
        <category>I2Pd</category>
        <category>Infranet</category>
        <category>Internet addiction</category>
        <category>Internet voting</category>
        <category>Japan</category>
        <category>Jiang Yaoping</category>
        <category>Jinan</category>
        <category>June 4th</category>
        <category>Kenya</category>
        <category>Keso</category>
        <category>Kindle</category>
        <category>Kino</category>
        <category>Kodachi</category>
        <category>Lanten</category>
        <category>Li Baozhong</category>
        <category>Li Dawei</category>
        <category>Li Qinhua</category>
        <category>Linode</category>
        <category>Martus</category>
        <category>OTA</category>
        <category>Onion Routing</category>
        <category>Opera</category>
        <category>PAC</category>
        <category>Paas</category>
        <category>Password Safe</category>
        <category>Pokemon Go</category>
        <category>Poland</category>
        <category>Proxy</category>
        <category>Publius</category>
        <category>Relakks</category>
        <category>Ren Ziyuan</category>
        <category>SCIO</category>
        <category>SNI</category>
        <category>SSL</category>
        <category>SetupVPN</category>
        <category>ShadowRay</category>
        <category>Shanxi brick kiln</category>
        <category>SocksCap64</category>
        <category>Speedplus</category>
        <category>Squid</category>
        <category>Streisand</category>
        <category>Stunnel</category>
        <category>Surge for Mac</category>
        <category>TLS</category>
        <category>Tails</category>
        <category>Telegram</category>
        <category>The Untraceable Surfer</category>
        <category>TheCthulhu</category>
        <category>Tian&#39;an Men</category>
        <category>Tianjin</category>
        <category>Tianya</category>
        <category>Tox</category>
        <category>Tunisia</category>
        <category>Tunnello</category>
        <category>USSR</category>
        <category>Ubuntu Unleashed</category>
        <category>VPN-WS</category>
        <category>VpnGate</category>
        <category>Wang Xiaofeng</category>
        <category>Wang Xiaoning</category>
        <category>Websocket</category>
        <category>Whonix</category>
        <category>WinEvsys</category>
        <category>Windows</category>
        <category>WoSign</category>
        <category>XeroBank Browser</category>
        <category>Xici</category>
        <category>Xu Wanping</category>
        <category>Yan Jun</category>
        <category>Yan Zhengxue</category>
        <category>Yang ZhiZhu</category>
        <category>Yi Xiaobing</category>
        <category>Zhou Yuanzhi</category>
        <category>art censorship</category>
        <category>banned websites</category>
        <category>blogcn</category>
        <category>china</category>
        <category>dante</category>
        <category>economic reform</category>
        <category>from tianya</category>
        <category>google plus 帳號</category>
        <category>google plus 賬戶</category>
        <category>google reader</category>
        <category>goproxy</category>
        <category>iPad 翻牆</category>
        <category>internet</category>
        <category>lightsword</category>
        <category>minganci</category>
        <category>mistress</category>
        <category>msocks</category>
        <category>nationalism</category>
        <category>netcom</category>
        <category>one- child policy</category>
        <category>online comments</category>
        <category>online games</category>
        <category>political prisoners</category>
        <category>political reform</category>
        <category>pollution</category>
        <category>press censorship</category>
        <category>public participation</category>
        <category>squidproxy</category>
        <category>state secrets</category>
        <category>technorati</category>
        <category>virtual property</category>
        <category>wireshark</category>
        <category>xSocks</category>
        <category>zhenli bu</category>
        <category>zmirror</category>
        <category>一月</category>
        <category>中國政府，Windows10</category>
        <category>中國瀏覽器</category>
        <category>中國網安協會</category>
        <category>中科院</category>
        <category>中韓</category>
        <category>雲梯</category>
        <category>互聯網自由</category>
        <category>付費</category>
        <category>代理</category>
        <category>代理服務器</category>
        <category>優劣</category>
        <category>保護</category>
        <category>免費牆</category>
        <category>全局代理</category>
        <category>公眾號</category>
        <category>分答</category>
        <category>北京</category>
        <category>十一月</category>
        <category>十二月</category>
        <category>十月</category>
        <category>千里馬</category>
        <category>華爾街日報</category>
        <category>協議</category>
        <category>印刷</category>
        <category>去中心化</category>
        <category>反向代理</category>
        <category>反審查</category>
        <category>反投毒</category>
        <category>叫停</category>
        <category>可能吧</category>
        <category>合法性</category>
        <category>同步</category>
        <category>哈爾濱工業大學</category>
        <category>迴歸</category>
        <category>國產</category>
        <category>土豆絲</category>
        <category>聖戰</category>
        <category>地穴寓言</category>
        <category>域名</category>
        <category>外企</category>
        <category>太子黨</category>
        <category>媒體</category>
        <category>安裝</category>
        <category>審議</category>
        <category>客戶數據</category>
        <category>密鑰交換</category>
        <category>封鎖</category>
        <category>小米</category>
        <category>小粉紅</category>
        <category>局域網</category>
        <category>工信部，</category>
        <category>工商總局</category>
        <category>巴基斯坦</category>
        <category>開發</category>
        <category>影梭</category>
        <category>徐麟</category>
        <category>手機</category>
        <category>擴展程序</category>
        <category>技巧</category>
        <category>推特</category>
        <category>插件</category>
        <category>搬瓦工</category>
        <category>搭建服務器</category>
        <category>攝像頭</category>
        <category>數字世界</category>
        <category>數字生活</category>
        <category>數據泄露</category>
        <category>新浪微博搜索</category>
        <category>無界</category>
        <category>曬客</category>
        <category>智能路由器</category>
        <category>暗網</category>
        <category>朋友圈</category>
        <category>朝鮮</category>
        <category>木馬</category>
        <category>極路由</category>
        <category>梯子</category>
        <category>模塊化</category>
        <category>污染</category>
        <category>沃通</category>
        <category>測試</category>
        <category>深網</category>
        <category>遊戲</category>
        <category>源碼</category>
        <category>炎黃春秋</category>
        <category>特殊管理股</category>
        <category>電子產品</category>
        <category>病毒</category>
        <category>研究項目</category>
        <category>禁言</category>
        <category>科學上網用</category>
        <category>祕密搜查</category>
        <category>突破內網</category>
        <category>算法</category>
        <category>紐約時報</category>
        <category>維基百科</category>
        <category>網關</category>
        <category>網絡加速</category>
        <category>網絡空間安全</category>
        <category>網絡自由</category>
        <category>翻牆</category>
        <category>自媒體</category>
        <category>自我審查</category>
        <category>自由之家</category>
        <category>輿論導向</category>
        <category>艾未未</category>
        <category>螢火蟲</category>
        <category>被封</category>
        <category>訂閲</category>
        <category>記錄</category>
        <category>評測</category>
        <category>財務自由</category>
        <category>越南</category>
        <category>越獄</category>
        <category>軟件</category>
        <category>輸入法</category>
        <category>辯護</category>
        <category>過濾</category>
        <category>透明度</category>
        <category>郵件</category>
        <category>重慶</category>
        <category>鏈接</category>
        <category>間諜軟件</category>
        <category>隱私</category>
        <category>香港</category>
        <category>麥克風</category>
        <title>GFW BLOG（功夫網與翻牆）</title>
        <description>翻越防火長城，你可以到達世界上的每一個角落。&lt;br&gt;&#xa;Across the Great Firewall, you can reach every corner in the world.</description>
        <link>https://www.chinagfw.org/</link>
        <managingEditor>noreply@blogger.com (GFW BLOG 功夫網與翻牆)</managingEditor>
        <generator>Blogger</generator>
        <openSearch:totalResults>13352</openSearch:totalResults>
        <openSearch:startIndex>1</openSearch:startIndex>
        <openSearch:itemsPerPage>25</openSearch:itemsPerPage>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-8648238033503343467</guid>
            <pubDate>Mon, 02 Oct 2023 05:11:00 +0000</pubDate>
            <atom:updated>2023-10-02T13:11:04.452+08:00</atom:updated>
            <title>多份報告稱中國封鎖了 1.1.1.1</title>
            <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;自 2023 年 10 月 1 日起，有多份報告稱中國封鎖了 1.1.1.1 這個 IP 地址。而根據一份來自@5e2t 的觀察報告稱，自 2023 年 9 月 5 日至 20 日，中國注入了 TCP RST 數據包以封鎖 1.1.1.1:443 端口。&lt;br /&gt;&lt;br /&gt;在騰訊雲北京（ASN AS45090）的 VPS 上對此事件的觀察結果：&lt;br /&gt;&lt;br /&gt;與@5e2t 的觀察結果不同，我們並未在我們的觀察點上觀察到 1.1.1.1:443 端口的 TCP RST 數據包。特別是，我們可以成功使用 curl -v https://1.1.1.1 獲取完整的網頁。這表明這次新的審查事件在不同地理位置或自治系統之間存在不一致性。&lt;br /&gt;&lt;br /&gt;我們觀察到 1.1.1.1:80 端口可能會注入一個「302 Moved Temporarily」或「301 Moved Permanently」消息，試圖將用戶重定向到國家反欺詐中心的網站。&lt;br /&gt;&lt;br /&gt;以下是一種未發生注入的示例：&lt;br /&gt;&lt;br /&gt;&lt;blockquote&gt;ubuntu@VM-32-5-ubuntu:~$ curl -v http://1.1.1.1&lt;br /&gt;*&amp;nbsp;&amp;nbsp; Trying 1.1.1.1:80...&lt;br /&gt;* TCP_NODELAY set&lt;br /&gt;* Connected to 1.1.1.1 (1.1.1.1) port 80 (#0)&lt;br /&gt;&amp;gt; GET / HTTP/1.1&lt;br /&gt;&amp;gt; Host: 1.1.1.1&lt;br /&gt;&amp;gt; User-Agent: curl/7.68.0&lt;br /&gt;&amp;gt; Accept: */*&lt;br /&gt;&amp;gt;&lt;br /&gt;* Mark bundle as not supporting multiuse&lt;br /&gt;&amp;lt; HTTP/1.1 301 Moved Permanently&lt;br /&gt;&amp;lt; Server: cloudflare&lt;br /&gt;&amp;lt; Date: Sun, 01 Oct 2023 22:49:54 GMT&lt;br /&gt;&amp;lt; Content-Type: text/html&lt;br /&gt;&amp;lt; Content-Length: 167&lt;br /&gt;&amp;lt; Connection: keep-alive&lt;br /&gt;&amp;lt; Location: https://1.1.1.1/&lt;br /&gt;&amp;lt; CF-RAY: **REDACTED**-SJC&lt;br /&gt;&amp;lt;&lt;br /&gt;&amp;lt;html&amp;gt;&lt;br /&gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;301 Moved Permanently&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&lt;br /&gt;&amp;lt;body&amp;gt;&lt;br /&gt;&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;301 Moved Permanently&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;&lt;br /&gt;&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;cloudflare&amp;lt;/center&amp;gt;&lt;br /&gt;&amp;lt;/body&amp;gt;&lt;br /&gt;&amp;lt;/html&amp;gt;&lt;br /&gt;* Connection #0 to host 1.1.1.1 left intact&lt;/blockquote&gt;&lt;br /&gt;&lt;br /&gt;以下是注入了「302 Moved Temporarily」的示例：&lt;br /&gt;&lt;br /&gt;&lt;blockquote&gt;ubuntu@VM-32-5-ubuntu:~$ curl -v http://1.1.1.1&lt;br /&gt;*&amp;nbsp;&amp;nbsp; Trying 1.1.1.1:80...&lt;br /&gt;* TCP_NODELAY set&lt;br /&gt;* Connected to 1.1.1.1 (1.1.1.1) port 80 (#0)&lt;br /&gt;&amp;gt; GET / HTTP/1.1&lt;br /&gt;&amp;gt; Host: 1.1.1.1&lt;br /&gt;&amp;gt; User-Agent: curl/7.68.0&lt;br /&gt;&amp;gt; Accept: */*&lt;br /&gt;&amp;gt;&lt;br /&gt;* Mark bundle as not supporting multiuse&lt;br /&gt;&amp;lt; HTTP/1.1 302 Moved Temporarily&lt;br /&gt;&amp;lt; Connection: close&lt;br /&gt;&amp;lt; Location: http://182.43.124.6/fzyujing?parameter2=REDACTED&lt;br /&gt;&amp;lt;&lt;br /&gt;* Closing connection 0&lt;/blockquote&gt;&lt;br /&gt;&lt;br /&gt;特別需要注意的是，輸出中的 REDACTED 參數由 319 個字符組成。通過在不同時間點對相同的觀察點進行查詢，發現 319 個字符消息中只有第 129 到 150 個字符（22 個字符）和第 257 到 278 個字符（22 個字符）發生了變化。目前尚不清楚這個參數中編碼了什麼信息。&lt;br /&gt;&lt;br /&gt;來自 1.1.1.1 的真實的 301 Moved Permanently 響應最終會傳遞給客戶端（但比注入消息到達的時間晚），表明審查者並未丟棄來自 1.1.1.1:80 的真實響應。&lt;br /&gt;&lt;br /&gt;託管國家反欺詐中心網站的 IP &lt;a href=&quot;http://182.43.124.6&quot;&gt;182.43.124.6&lt;/a&gt;的 ASN 信息如下：&lt;br /&gt;&lt;br /&gt;&lt;blockquote&gt;host&amp;nbsp;&amp;nbsp;&amp;nbsp; asn&amp;nbsp;&amp;nbsp;&amp;nbsp; asname&amp;nbsp;&amp;nbsp;&amp;nbsp; cc&amp;nbsp;&amp;nbsp;&amp;nbsp; registry&lt;br /&gt;182.43.124.6&amp;nbsp;&amp;nbsp;&amp;nbsp; AS58519&amp;nbsp;&amp;nbsp;&amp;nbsp; CHINATELECOM-CTCLOUD Cloud Computing Corporation, CN&amp;nbsp;&amp;nbsp;&amp;nbsp; CN&amp;nbsp;&amp;nbsp;&amp;nbsp; apnic&lt;/blockquote&gt;&lt;br /&gt;&lt;br /&gt;此外，根據@5e2t 的觀察，他位於河南，但收到的 RST 信號並不來自河南的審查設備，而是上海出口的審查設備。由於他和上海出口之間的延遲為 28 毫秒，traceroute 也顯示網絡路徑經過了上海。&lt;br /&gt;&lt;/span&gt;&lt;img alt=&quot;Screenshot from 2023-10-02 08-48-19&quot; src=&quot;https://ci6.googleusercontent.com/proxy/S69bdmUk5xQNoCUEq9Dno24eJj1ZliF3AnDgZSvBsUcxb0ovqbBK6pztF7DRbQncMVTdHRFq8180MEtrMICjQqfx83-hOhPjPQOfIKltZIM0Z-_BbD-HmC7XobLKKSwWcf20eP-Nd3qvhOwdcSpHCd7wghG7wVOtbA=s0-d-e1-ft#https://user-images.githubusercontent.com/111228501/271862929-6f68b9f0-178f-4701-842a-4a4116af265d.png&quot; /&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;基於中國網絡審查的複雜性和地域差異, &lt;/span&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;有關 GFW 是否對 1.1.1.1 進行了封鎖尚不得而知。我們將繼續關注事件的進展，並持續報道相關信息。&lt;br /&gt;&lt;/span&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻牆技術博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;訂閲地址及社交帳號&lt;/a&gt;&lt;/div&gt;</description>
            <link>https://www.chinagfw.org/2023/10/1111.html</link>
            <author>noreply@blogger.com (pompei)</author>
            <media:thumbnail
                xmlns:media="http://search.yahoo.com/mrss/" url="https://ci6.googleusercontent.com/proxy/S69bdmUk5xQNoCUEq9Dno24eJj1ZliF3AnDgZSvBsUcxb0ovqbBK6pztF7DRbQncMVTdHRFq8180MEtrMICjQqfx83-hOhPjPQOfIKltZIM0Z-_BbD-HmC7XobLKKSwWcf20eP-Nd3qvhOwdcSpHCd7wghG7wVOtbA=s72-c-d-e1-ft#https://user-images.githubusercontent.com/111228501/271862929-6f68b9f0-178f-4701-842a-4a4116af265d.png" height="72" width="72"/>
                <thr:total>0</thr:total>
            </item>
            <item>
                <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-469016020215219010</guid>
                <pubDate>Fri, 22 Sep 2023 03:56:00 +0000</pubDate>
                <atom:updated>2023-09-23T20:24:35.367+08:00</atom:updated>
                <title>使用 Yggdrasil 進行遠程訪問</title>
                <description>&lt;p&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

來源： &lt;a href=&quot;https://here.news/post/53977940-e2da-4d26-99a7-24e65eae588a/使用 Yggdrasil 進行遠程訪問&quot;&gt;HERE&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;div class=&quot;flex flex-col gap-4 px-1 my-4&quot;&gt;&lt;h1 class=&quot;text-5xl lg:text-6xl xl:text-7xl leading-[1.2em] !text-base sm:!text-2xl !leading-[1.6rem] sm:!leading-[2.4rem] font-medium text-header&quot;&gt;&lt;/h1&gt;&lt;div class=&quot;SinglePost_SinglePost__3in7m&quot;&gt;&lt;p&gt;&lt;strong&gt;作者：Neil Alexander&lt;/strong&gt;&lt;/p&gt;&lt;h2 style=&quot;text-align: left;&quot;&gt;&lt;b&gt;關於 Yggdrasil 網絡&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://yggdrasil-network.github.io/installation.html&quot; target=&quot;_blank&quot;&gt;Yggdrasil&lt;/a&gt; 是一種新的實驗性緊湊路由方案，設計用於網狀或類似互聯網的網絡。它主要是一種最短路徑方案，網絡將嘗試找到最直接的路徑到目的地。&lt;/p&gt;&lt;p&gt;與今天許多網絡上使用的結構化和通常層次化的路由方案相比，Yggdrasil 是強烈的分散式和自動排列的。網絡上的每個節點都由一個加密公鑰標識，在實現中，&lt;strong&gt;IPv6 地址是從該密鑰生成的&lt;/strong&gt;。網絡拓撲是自適應的，旨在利用可用的任何鏈接，以提供所有網絡參與者之間的完全路由能力。這是因為所有 Yggdrasil 節點都是路由器，共享路由知識並代表其他網絡參與者轉發流量。&lt;/p&gt;&lt;p&gt;下表説明瞭傳統網絡（如互聯網）和 Yggdrasil 網絡之間的差異：&lt;/p&gt;&lt;p&gt;                                                              傳統網絡               Yggdrasil&lt;/p&gt;&lt;p&gt;網絡上所有流量的端到端加密                  否                         是&lt;/p&gt;&lt;p&gt;使用 DHT 共享分散式路由信息                 否                         是&lt;/p&gt;&lt;p&gt;具有密碼綁定的尋址，沒有中央機構       否                         是&lt;/p&gt;&lt;p&gt;節點知道其與其他節點的相對位置           否                         是&lt;/p&gt;&lt;p&gt;移動尋址隨設備移動而保持不變               否                         是&lt;/p&gt;&lt;p&gt;拓撲圖在不同媒介上優雅擴展，如網狀，否 是&lt;/p&gt;&lt;h2&gt;今天存在哪些問題？&lt;/h2&gt;&lt;p&gt;我們今天所知的互聯網並不符合明確定義的拓撲結構。這在很大程度上是隨着互聯網的發展而發生的，越來越多的網絡通過服務提供商之間的互聯安排「拼湊」在一起。缺乏明確定義的拓撲給我們帶來了一些不可避免的問題：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;存儲「互聯網地圖」的路由表非常龐大且低效，因為每個提供商都必須傳遞有關所有其他提供商的 IP 前綴的信息&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;計算機實際上沒有辦法知道它在互聯網上相對於其他任何東西的位置 - 大多數計算機只知道一個「默認網關」&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;很難在不實際發送數據包的情況下檢查它從源到目的地的路徑&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;這些問題已經在一定程度上得到緩解（但並沒有真正解決）
 - 
與其在家中的計算機上保存全局路由表的副本相比，您的服務提供商代表您這樣做。您的計算機和網絡設備只需配置為「將流量發送到上游」，並讓您的提供商決定流量的去向。這使您完全受制於您的 ISP，他們可以將您的流量重定向到任何地方，並對其進行檢查、操作或攔截。&lt;/p&gt;&lt;p&gt;ISP 網絡通常具有結構化的設計，並且通常是層次化的，因此許多現有的路由協議都是根據此設計的。一些優化，如前綴聚合，用於嘗試減少提供商必須發送到世界各地的路由條目數量。這些協議通常不適用於拓撲不明確或經常變化的網絡
 - 例如無線網狀網絡，因此過去很難讓社區根據需要構建自己的無線網狀基礎設施。&lt;/p&gt;&lt;h2&gt;Yggdrasil 有什麼不同之處？&lt;/h2&gt;&lt;p&gt;Yggdrasil 在共享路由知識方面採取了非常不同的方法。與通過集中分配自治系統的路徑來分發地址範圍不同，Yggdrasil 以分佈式方式建立一個單一的全局網絡拓撲。&lt;/p&gt;&lt;p&gt;使用生成樹提供同步，並允許節點分配一組樹座標，這些座標用於交換和建立引導和路徑設置消息。然後，節點通過網絡設置到其鍵空間鄰居的路徑，有效地將網絡排列成一個由公鑰排序的虛擬線。然後，中間節點使用這些路徑填充其路由表，使節點能夠將數據包轉發到更接近其目標公鑰的位置。&lt;/p&gt;&lt;p&gt;此外，節點可以使用生成樹路由進行路徑查找，以建立比通過鍵空間的路徑更短的路徑，然後切換流量會話到源路由。只要源路由路徑可用，通常更直接的源路由將繼續使用，並在源路由路徑中斷時回退到鍵空間路由。&lt;/p&gt;&lt;p&gt;使用加密簽名來保護樹公告、引導和路徑消息，防止篡改或偽造。&lt;/p&gt;&lt;p&gt;有什麼好處？&lt;/p&gt;&lt;p&gt;這種路由方案有許多好處：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;設備只需要維護相對較少的狀態以便正常工作和轉發數據包 - 沒有任何 Yggdrasil 節點需要像 BGP 那樣維護「完整的路由表」，大多數節點總共只有少數幾個路由表條目&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;路徑會自動發現和建立，因此不需要手動配置路由條目 - 唯一需要配置的是節點之間的對等連接&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;網絡可以快速建立和拆除路徑，而無需丟棄所有路由狀態，這在處理節點移動事件時有助於顯着減少丟包&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;我們可以輕鬆地將可靠/靜態網絡與動態/非靜態網絡橋接，而無需洪泛大量狀態&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;當任何兩個或更多個 Yggdrasil 節點相互連接時，網絡會自動形成，即使這些連接完全是臨時的&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;稀疏的路由知識和僅有少量的協議流量應該意味着 Yggdrasil 能夠高效地擴展到非常大的網絡&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;取代傳統的 VPN&lt;/h2&gt;&lt;p&gt;到目前為止，我最喜歡也是最常使用 Yggdrasil 的一個用例是從遠程位置（比如工作地點或我隨身攜帶的筆記本電腦所在的任何地方）訪問我的機器。最近，我主要關注的是通過 VNC 使用 Yggdrasil 連接到我家裏的 iMac，而 VNC 恰好內置在 macOS 中。我發現 Yggdrasil 是一款出色的工具，它有效地取代了我對傳統 VPN 的需求。&lt;/p&gt;&lt;p&gt;使用 Yggdrasil 進行遠程訪問的一些優點包括：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;端到端加密，為通常在開箱即用的情況下並不安全的協議（如 VNC 或 FTP）提供傳輸安全性&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;TCP-over-TCP 性能優越 - 顯著優於 OpenVPN 或 SSH 轉發！&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;源可驗證性，可以根據源 IPv6 地址進行白名單驗證，並阻止其他所有人&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;可在網絡的任何地方進行路由&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;端到端加密&lt;/h2&gt;&lt;p&gt;所有通過 Yggdrasil 的隧道流量都在加密的「會話」中進行。當你試圖向該節點發送流量時，會在你和遠程節點之間建立一個會話。作為會話握手的一部分，你的公鑰加密密鑰被交換，這些密鑰用於對所有封裝的網絡流量進行完全的端到端加密。&lt;/p&gt;&lt;p&gt;即使是純文本協議，在跨 Yggdrasil 網絡傳輸時也會被加密，確保沒有中間路由器或對手可以窺探你的流量，使得像 VNC 這樣的協議更安全，因為它們本身可能並不安全。&lt;/p&gt;&lt;p&gt;這也意味着，你可以在 Yggdrasil 上發送和接收流量，而不必過於擔心在給定位置的網絡的安全性。公共場所的開放 Wi-Fi 網絡對於任何類型的連接安全性來説都是一場噩夢，因為它們通常沒有受到無線加密的保護，但是對於 Yggdrasil 來説，這並不是一個問題。&lt;/p&gt;&lt;h2&gt;TCP-over-TCP 性能&lt;/h2&gt;&lt;p&gt;過去，我曾嘗試使用 OpenVPN 和 SSH 隧道作為一種回家的方法，通過在我的 EdgeRouter
 
X 上終止 VPN 連接。我的工作地點的網絡允許在少數端口上進行出站 TCP 連接，並且在互聯網邊界完全丟棄 UDP，因此我被限制在 TCP 模式下使用 OpenVPN，而不是 UDP 模式。&lt;/p&gt;&lt;p&gt;對於傳輸少量信息，這種方法是可行的，但肯定不是特別好。OpenVPN 並未對 TCP 流量進行任何優化，因此，對於任何對延遲敏感的內容，性能都很糟糕 - 回到我的 iMac 上的 VNC 根本無法使用。SSH 轉發也沒有好多少。&lt;/p&gt;&lt;p&gt;相反，我在我的 EdgeRouter
 
X 上安裝了 Yggdrasil，並將其作為網關來直接路由到我的家庭機器（這是未來博客文章的一個主題）。每個 Yggdrasil 節點都有一個路由的/64 子網，這在我的情況下，使用 iptables 將 NETMAP&#39;d 映射到我的家庭 IPv6
 
ULA 範圍。這實際上使我的整個家庭網絡在 Yggdrasil 網絡上可路由（即使是那些不知道 Yggdrasil 的設備或沒有安裝它的設備），只需遵守一些防火牆限制，我將在後面討論。&lt;/p&gt;&lt;p&gt;主要的好處在於，Yggdrasil 使用 LIFO 隊列進行會話流量，並利用巨大的 MTUs（如我之前的博客文章中所討論的）來減少 TCP 控制消息放大的影響，並改善擁塞處理。這使得在 TCP
 Yggdrasil 對等連接上隧道 TCP 時，連接的可用性和穩定性得到了大大的改善 - 
VNC 的穩定性和響應性在這種設置下比在 OpenVPN 或 SSH 上得到了大大的改善。&lt;/p&gt;&lt;h2&gt;防火牆和源可驗證性&lt;/h2&gt;&lt;p&gt;當然，Yggdrasil 網絡上還有其他人，你不能確定他們是誰，或者他們可能是惡意的。因此，就像在互聯網上一樣，使用防火牆是明智的。源可驗證性在這裏特別有用，因為它使得只允許特定的機器通過你的防火牆發送流量，並將所有其他人排除在外變得相當容易。&lt;/p&gt;&lt;p&gt;在 Yggdrasil 中，你的 IPv6 地址與你的加密密鑰對直接關聯，因此，對你的密鑰對的任何更改都會導致你的 IPv6 地址隨之更改。當你生成一個配置（使用 yggdrasil
 
-genconf）時，你實際上是在生成一個新的 IPv6 地址。只要你繼續在給定的機器上使用相同的 Yggdrasil 配置和相同的加密密鑰對，那麼該機器將永遠保持相同的 Yggdrasil
 IPv6 地址。&lt;/p&gt;&lt;p&gt;這意味着我可以在我的 EdgeRouter 防火牆上創建一個白名單，除非它來自我已知的特定 Yggdrasil 
IPv6 地址列表，比如我的工作電腦和我的筆記本電腦，否則我會丟棄指向我的網絡的連接。任何來自這個白名單之外的地址的意外連接都會被丟棄，從網絡上隱藏我的機器。&lt;/p&gt;&lt;p&gt;以下是我在我的 EdgeRouter X 上實現這個的一個例子：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;set firewall group ipv6-address-group YGG_TRUSTED ipv6-address &#39;xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx&#39;&lt;/p&gt;&lt;p&gt;set firewall group ipv6-network-group YGG_TRUSTEDNETS ipv6-network &#39;xxx:xxx:xxx::/48&#39;&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_IN default-action drop&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_IN rule 10 action accept&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_IN rule 10 state established enable&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_IN rule 10 state related enable&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_IN rule 20 action drop&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_IN rule 20 state invalid enable&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_IN rule 30 action accept&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_IN rule 30 source group ipv6-address-group YGG_TRUSTED&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_IN rule 40 action accept&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_IN rule 40 source group ipv6-network-group YGG_TRUSTEDNETS&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_LOCAL default-action drop&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_LOCAL rule 10 action accept&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_LOCAL rule 10 state established enable&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_LOCAL rule 10 state related enable&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_LOCAL rule 20 action drop&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_LOCAL rule 20 state invalid enable&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_LOCAL rule 30 action accept&lt;/p&gt;&lt;p&gt;set firewall ipv6-name YGG_LOCAL rule 30 source group ipv6-address-group YGG_TRUSTED&lt;/p&gt;&lt;p&gt;set interfaces yggdrasil tun0 firewall in ipv6-name YGG_IN&lt;/p&gt;&lt;p&gt;set interfaces yggdrasil tun0 firewall local ipv6-name YGG_LOCAL&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;從整個網絡路由&lt;/h2&gt;&lt;p&gt;你不需要直接與一個節點進行對等連接就能遠程訪問它
 - 
你可以從 Yggdrasil 網絡的任何地方路由流量。最好總是與地理位置接近你自己的節點進行對等連接，因為這有助於減少網絡延遲。然而，你可以在一個新的位置（例如，使用筆記本電腦）設置，並連接到你最近的 Yggdrasil 節點，仍然能夠像以前一樣訪問你的機器。&lt;/p&gt;&lt;h2&gt;結論&lt;/h2&gt;&lt;p&gt;Yggdrasil 已經證明是一種非常有能力的方法，可以遠程訪問我的家庭網絡，並且非常正常化了所有網絡流量都應該被加密並被視為私有的觀念，即使在連接安全性不能保證的地方也是如此。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://yggdrasil-network.github.io/2018/07/15/remote-access.html&quot; target=&quot;_blank&quot;&gt;https://yggdrasil-network.github.io/2018/07/15/remote-access.html&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;&amp;nbsp;&lt;/span&gt; &lt;/p&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;翻牆技術博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;訂閲地址及社交帳號&lt;/a&gt;&lt;/div&gt;</description>
                <link>https://www.chinagfw.org/2023/09/yggdrasil.html</link>
                <author>noreply@blogger.com (pompei)</author>
                <thr:total>0</thr:total>
            </item>
            <item>
                <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-5600230735872138700</guid>
                <pubDate>Wed, 20 Sep 2023 03:17:00 +0000</pubDate>
                <atom:updated>2023-09-20T11:23:40.485+08:00</atom:updated>
                <title>谷歌將 Outline 開源項目的代碼作為 SDK 提供給開發者</title>
                <description>&lt;p&gt;via &lt;a href=&quot;https://here.news/post/ef9f331f-843b-4dfb-b698-90598f568a8a/%E8%B0%B7%E6%AD%8C%E5%B0%86outline%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%BB%A3%E7%A0%81%E4%BD%9C%E4%B8%BAsdk%E6%8F%90%E4%BE%9B%E7%BB%99%E5%BC%80%E5%8F%91%E8%80%85&quot;&gt;HERE.news&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;br /&gt;谷歌開始將其&lt;a href=&quot;https://github.com/Jigsaw-Code/outline-sdk&quot;&gt;Outline 代理客戶端-服務器代碼拆分為軟件開發工具包（SDK）&lt;/a&gt;，以便開發人員最終可以將繞過審查的技術嵌入到他們的應用程序中。&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;首先，對於那些不知道的人來説：谷歌的 Jigsaw 互聯網自由單位提供了一個名為 Outline 的開源項目，包括一個客戶端和一個管理器。&lt;br /&gt;&lt;br /&gt;您可以使用管理器啓動個人 Outline 代理服務器，該服務器可以位於您自己的硬件上或雲中的虛擬機中，並生成由客戶端用於連接到此服務器節點的訪問密鑰。您可以為自己設置一個 Outline 服務器，也可以與朋友、家人和同事共享訪問權限。成功連接到它的客戶端將通過 Outline 代理服務器安全地路由其設備的互聯網流量。&lt;br /&gt;&lt;br /&gt;因此，如果您無法從您所在的位置訪問某些在線服務，您可以通過您的服務器連接，該服務器可以放置在具有更多自由的國家或網絡中。Outline 有時被描述為 VPN，但它實際上是一個與 Shadowsocks 兼容的代理，並使用標準的加密和身份驗證算法：AES 和 ChaCha20-Poly1305。&lt;br /&gt;&lt;br /&gt;Outline 的主要特點之一是您不使用公共 VPN 提供商：您使用自己的私有基礎設施。另一個主要特點是它被認為相對容易設置和使用，可在 Android、iOS、Windows、macOS、Chrome 和 Linux 上隨時使用。&lt;br /&gt;&lt;br /&gt;現在，谷歌已經開始將該客戶端代碼作為軟件開發工具包（SDK）提供，以便將其嵌入到第三方應用程序中，使這些應用程序能夠為用戶提供內置的繞過審查、地理鎖定內容和其他限制的功能。&lt;br /&gt;&lt;br /&gt;「在危機時刻，互聯網連接是生命線，但威權主義政權擅長封鎖訪問。這就是為什麼 VPN 在人們最需要時保持在線的關鍵所在」，Jigsaw 團隊在週三表示。&lt;br /&gt;&lt;br /&gt;「介紹 Outline SDK：我們的團隊為開發人員創建了這個工具包。它使他們能夠直接將繞過技術嵌入到他們的應用程序中。Outline SDK 簡化了這個過程，使應用程序即使面臨審查也能繼續提供關鍵內容，而無需使用 VPN。」&lt;br /&gt;&lt;br /&gt;目前，該項目的這一部分處於 Alpha 階段，具有各種庫可供集成到應用程序中。Jigsaw 警告説，用 Go 編寫的軟件「處於早期階段，不能保證穩定」。&lt;br /&gt;&lt;br /&gt;還有一些其他限制。其中之一是目前它只關注客戶端，因此如果您想在應用程序中使用 Outline，您需要幫助用戶設置代理服務器並導入訪問密鑰。服務器端庫以及文檔和其他資源尚未推出。&lt;br /&gt;&lt;br /&gt;此外，Outline 並不孤單。還有一些類似的努力，從這個記者的角度來看，Cult of the Dead Cow 的類似 Tor 的 Veilid 也是一個用於應用程序集成的開源 SDK。不過，與 Outline 不同，Veilid 並不真正針對代理或 VPN 服務，而是針對客戶端之間的私密、安全網絡連接。&lt;br /&gt;&lt;br /&gt;如果您想設置自己的 VPN，可以查看 Trail of Bits 的 Algo，它使配置 WireGuard 服務器（另一個很酷的項目）變得簡單。&lt;br /&gt;&lt;br /&gt;無論如何，通過 Outline，開發人員似乎有另一個可能的選擇，如果他們想要將繞過審查或地理鎖定功能添加到他們的應用程序中。® &lt;/p&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;翻牆技術博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;訂閲地址及社交帳號&lt;/a&gt;&lt;/div&gt;</description>
                <link>https://www.chinagfw.org/2023/09/outlinesdk.html</link>
                <author>noreply@blogger.com (pompei)</author>
                <thr:total>0</thr:total>
            </item>
            <item>
                <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-5752169151928460430</guid>
                <pubDate>Sun, 17 Sep 2023 16:14:00 +0000</pubDate>
                <atom:updated>2023-09-19T09:07:22.305+08:00</atom:updated>
                <title>家庭網絡改造記錄：旁路由</title>
                <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;div class=&quot;p-name&quot; itemprop=&quot;headline&quot; style=&quot;text-align: left;&quot;&gt;via &lt;a href=&quot;http://whyes.org/2023/home-network-2023&quot;&gt;http://whyes.org/2023/home-network-2023&lt;br /&gt;&lt;/a&gt;&lt;/div&gt;
        
              &lt;h2&gt;緣由&lt;/h2&gt;
&lt;p&gt;今年夏天的高溫天氣都快結束了，但家裏的網絡卻越發卡頓。終於在一個工作日的晚上，我把光貓和 J1900 
軟路由都拔電重啓了一下。重啓後發現，軟路由再也不肯工作，家裏就上不了網了。一番操作之後，確認了是軟路由罷工。好在幾年前淘汰下來的華碩 AC66U
 還沒有扔掉，於是接上去替代了軟路由頂過了一天。&lt;/p&gt;
&lt;h2&gt;改造過程&lt;/h2&gt;
&lt;p&gt;我家裏的網絡佈局是光貓撥號，接 J1900 軟路由作為主路由，下面連接了 4 個組建了 Mesh 網絡的 Linksys 
路由器（開啓橋接模式）作為無線 AP。軟路由作為主路由的設置是最方便的，畢竟智能音箱的聯網和 Apple TV 
看油管都需要走外網。但軟路由作為主路由也有不合理的地方，因為大多數設備都不需要聯外網。30 
多個設備都通過軟路由走一遍，看起來不是經濟的選擇。J1900 這樣的 x86 
軟路由發熱量比較大，在夏天穩定性下降也是個麻煩事。最近拔電重啓的頻率明顯增加，想不到這次拔電之後就再也起不來了。&lt;/p&gt;
&lt;p&gt;於是趁着這個機會，乾脆還是試試旁路由。原本的 Linksys 
路由器設置的是橋接模式，現在就改成了路由模式，作為主路由。把原來的軟路由刷機之後做成旁路由。目前 J1900 
軟路由至少是固件有損壞，重啓數次，都不能正確運行。給這貨刷固件需要找 HDMI 線連接顯示器、找個 USB 鍵盤、找個 U 
盤來協助寫固件，雖然這些東西家裏都有，但是折騰起來還是比較痛苦的，於是想幹脆還是買個友善 R4S 軟路由。我目前辦公室裏在用一個 R2S 
的軟路由，非常穩定，看了一下已經連續開機四百多天了，因此對這樣的 ARM 
設備增加了信心（當然辦公室的氣溫和使用環境比家裏電視櫃要強多了）。另外，這友善的固件可以寫到 TF 卡里，而往 TF 
卡寫固件比較方便，放在讀卡器裏插到電腦裏就行了。這期間也有朋友提到了給 Apple TV 刷 TVOS17 的測試版固件，然後裝某些 App 
作為軟路由，但考慮到穩定性，還是買個 R4S 的專職軟路由可能更合適。於是有了這些操作：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;將 Linksys 改成路由模式。這個比較簡單，Web 方式登錄路由器後台一鍵修改；&lt;/li&gt;&lt;li&gt;給 R4S 找個合適的 OpenWRT 固件。目前固件很多，也比較成熟了。&lt;/li&gt;&lt;li&gt;把 R4S 設置成旁路由模式。這個在油管上也有不少教程，我參考的是 &lt;a href=&quot;https://youtu.be/w7rwNF2Q3lM&quot;&gt;洋蔥的教程&lt;/a&gt; 。&lt;/li&gt;&lt;li&gt;更改一些需要連接外網的設備的網絡設置，包括電腦、Apple TV、Google Home、Amazon Echo Dot 
等等，把他們的網關和 DNS 都指向 R4S。但修改過程中發現智能音箱不支持修改網絡設置，而 Linksys 也不能修改 DHCP 
參數。研究了一番，只有關閉了 Linksys 主路由的 DHCP 功能，打開了 R4S 的 DHCP 
功能。這樣一來，就算是入侵式的旁路由模式了。局域網內的流量都需要通過旁路由走一遍，看起來跟軟路由作為主路由沒有差別，但在穩定性上還是有一些好處，如果旁路由出問題了，打開主路由的
 DHCP 功能就可以了。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;於是形成了這樣的網絡模式：&lt;/p&gt;
&lt;div class=&quot;photo&quot;&gt;&lt;figure&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot;&gt;&lt;/source&gt;&lt;img alt=&quot;家庭網絡.png&quot; height=&quot;738&quot; src=&quot;https://i.typlog.com/whyes/8305737146_549616.png&quot; width=&quot;912&quot; /&gt;&lt;/picture&gt;&lt;/figure&gt;&lt;/div&gt;&lt;h2&gt;有待觀察的地方&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Linksys 在路由模式下其實是一個節點管理所有設備，目前對它的穩定性還沒有足夠的信心，只能先觀察一陣子。&lt;/li&gt;&lt;li&gt;目前 R4S 拖這麼多設備的信心也不是很足，穩定性也有待觀察，希望目前這個固件能夠重複出 R2S 的穩定性，動輒能連續開機一年以上。
如果穩定性解決不了，可能得升級無線 AP 或者把 R4S 改成主路由，到時又是一番折騰。&lt;/li&gt;&lt;/ul&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻牆技術博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;訂閲地址及社交帳號&lt;/a&gt;&lt;/div&gt;</description>
                <link>https://www.chinagfw.org/2023/09/blog-post_18.html</link>
                <author>noreply@blogger.com (pompei)</author>
                <thr:total>0</thr:total>
            </item>
            <item>
                <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-5206015822767196397</guid>
                <pubDate>Mon, 11 Sep 2023 04:39:00 +0000</pubDate>
                <atom:updated>2023-09-14T21:46:31.144+08:00</atom:updated>
                <title>信息繭房自救指南</title>
                <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;div class=&quot;SinglePost_SinglePost__3in7m&quot;&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/ad9b861c-564c-4f68-9210-7aa56056a8ff_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/ad9b861c-564c-4f68-9210-7aa56056a8ff_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Michael Simmons&lt;br /&gt;&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;「我們消費的信息和我們攝入的食物一樣重要。它影響着我們的思想，我們的行為，我們如何理解自己在世界上的位置，以及我們如何理解他人「 ——Evan Williams，Twitter 和 Medium 的聯合創始人&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;現在，在世界的某個角落，有一段文字、一章內容或者一整本書籍，只要你讀過，就有可能永久改變你的人生軌跡。我把這種內容稱之為「突破性知識」。&lt;/p&gt;&lt;p&gt;在這個信息爆炸的時代，尋找並掌握突破性知識的能力，是我們需要學習的最重要的技能之一。我們每個人都曾有過類似的突破性體驗。可能是父母、導師或老師説過的一句話，深深地改變了我們的思維和行為。或者是一本書，深深地震撼了我們的內心世界。（下文將這種書籍簡稱為「觸動書」）。&lt;/p&gt;&lt;p&gt;比如，&lt;a href=&quot;https://www.cnbc.com/2017/02/02/billionaire-warren-buffett-discusses-the-book-that-changed-his-life.html&quot; target=&quot;_blank&quot;&gt;沃倫·巴菲特的「觸動書」&lt;/a&gt;是&lt;a href=&quot;http://amzn.to/2FfcsIJ&quot; target=&quot;_blank&quot;&gt;《聰明的投資者》&lt;/a&gt;，他在 19 歲時就閲讀了這本書。這本書為他的投資哲學奠定了基礎。&lt;/p&gt;&lt;p&gt;而&lt;a href=&quot;https://www.cnbc.com/2017/06/06/elon-musk-says-this-science-fiction-classic-changed-his-life.html&quot; target=&quot;_blank&quot;&gt;埃隆·馬斯克的「觸動書」&lt;/a&gt;是&lt;a href=&quot;http://amzn.to/2F6h0lx&quot; target=&quot;_blank&quot;&gt;《銀河系漫遊指南》&lt;/a&gt;，他表示這本書幫助他思考更大的問題，從而解決世界上更大的問題。&lt;/p&gt;&lt;p&gt;我最近的「觸動書」是&lt;a href=&quot;http://amzn.to/2oylsPM&quot; target=&quot;_blank&quot;&gt;《窮查理寶典》&lt;/a&gt;，作者是白手起家的億萬富翁查理·芒格。這是我首次接觸到心理模型的書籍。通過學習和&lt;a href=&quot;https://www.mentalmodelclub.com/mental-model-club-v2.html?utm_source=Medium&amp;amp;utm_medium=article&amp;amp;utm_campaign=18&amp;amp;utm_content=CTA1&quot; target=&quot;_blank&quot;&gt;應用心理模型&lt;/a&gt;，我成功開啓了新的事業。&lt;/p&gt;&lt;p&gt;一次突破性的知識體驗可能只持續幾分鐘，但它的影響卻可能伴隨我們一生。這就是學習的極致槓桿效應。&lt;/p&gt;&lt;p&gt;現在，試想一下，如果每年都能有一次突破性的知識體驗，而不是十年才有一次，或者一個月有兩次，而不是一年僅有一次，那麼這將會帶來翻天覆地的改變！這並非遙不可及的夢想。&lt;/p&gt;&lt;p&gt;考慮到突破性知識的強大影響力和尋找它的難度，我們都需要面對一個基本問題：我們如何在有限的時間中，在紛繁複雜的信息中，找到那份能夠改變我們的突破性知識？&lt;/p&gt;&lt;p&gt;這個問題引起了我的濃厚興趣。作為一個閲讀過數千本跨學科書籍的人，我多年來一直在反覆思索這個問題。&lt;/p&gt;&lt;p&gt;我的書架、亞馬遜購物車、Kindle 電子書庫和 Audible 願望清單中堆積着數百本我渴望閲讀，但卻沒時間去讀的書。因此，我形成了一個真正的「&lt;a href=&quot;https://www.newyorker.com/magazine/2009/08/10/infinite-playlist&quot; target=&quot;_blank&quot;&gt;無盡的閲讀列表&lt;/a&gt;」。&lt;/p&gt;&lt;p&gt;隨着時間的推移，我開發出了一種獨特的方法來應對信息過載，這是基於我自身的經驗，並借鑑了世界上許多&lt;a href=&quot;https://medium.com/@michaeldsimmons/how-elon-musk-learns-faster-and-better-than-everyone-else-a010a4f586ef&quot; target=&quot;_blank&quot;&gt;頂尖企業家和領導者（包括埃隆·馬斯克）的學習方式&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;然而，在我們開始採納這種方法之前，我們首先需要理解這個問題。正如發明家查爾斯·凱特琳（&lt;a href=&quot;https://en.wikipedia.org/wiki/Charles_F._Kettering&quot; target=&quot;_blank&quot;&gt;Charles Kettering&lt;/a&gt;）曾經説過的，「一個好問題的提出，就等於問題解決的一半。 」&lt;/p&gt;&lt;h2&gt;一、引發信息末日的四大問題&lt;/h2&gt;&lt;p&gt;儘管信息過載是一個重大問題，但實際上，它是由四個各自以指數級加速惡化的問題構成的，它們彙集在一起，就可能引發一場巨大的危機。&lt;/p&gt;&lt;p&gt;這場危機有可能讓我們集體變得更加愚昧，而非更加聰明，讓我們分崩離析，而非團結一致。這場危機有許多種稱呼，但我認為最為恰當的是信息末日（&lt;a href=&quot;https://www.buzzfeed.com/charliewarzel/the-terrifying-future-of-fake-news?utm_term=.sxdj8a2vY#.lubjnZlo7&quot; target=&quot;_blank&quot;&gt;Info-Apocalypse&lt;/a&gt;）。&lt;/p&gt;&lt;p&gt;引發信息末日的四大問題包括：內容衝擊、信息繭房、持續性分心以及錯過恐懼症（FOMO）。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1.信息末日問題一：內容衝擊（Content Shock）&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;「信息的大量湧入導致了注意力的極度匱乏……」——赫伯特·西蒙（Herbert A. Simon）&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;隨着在線出版和社交媒體的蓬勃發展，我們可以接觸到的知識量正在飛速增長，而我們人類的信息處理能力卻無法跟上這種速度。同時，每一天，每一秒鐘都有更多的內容湧入眼簾。&lt;/p&gt;&lt;p&gt;問題在於：我們如何從中挖掘出大量新信息，學習新技能？這些信息深藏得太深，我們甚至無法察覺到它們的存在。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.信息末日問題二：信息繭房（Echo Chambers）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;隨着羣體規模的擴大，它們往往會變得&lt;a href=&quot;http://www.lifewithalacrity.com/2004/03/the_dunbar_numb.html&quot; target=&quot;_blank&quot;&gt;不穩定，多元化&lt;/a&gt;，最終分化為各種子羣體。這種現象在宗教中表現得尤為明顯。&lt;/p&gt;&lt;p&gt;猶太教一直在發展，直到它分裂成多個不同的教派，其中一個分支發展成為基督教。基督教發展後，又分裂成天主教和新教。新教發展後，進一步分裂為浸信會，衞理公會，路德會等等。這種分裂現象在每個發展中的領域都有所體現。&lt;/p&gt;&lt;p&gt;每個新的羣體都會發展出自己的語言和文化。儘管這提高了羣體內部的溝通效率，但知識的輸入和輸出卻變得更加困難，因為它必須先經過語言和文化的轉譯。&lt;/p&gt;&lt;p&gt;每個羣體都會根據與其他羣體的差異或優勢發展出一種身份認同。這些羣體之間的觀念壁壘，會導致極端化和偏見的產生。&lt;/p&gt;&lt;p&gt;在宗教和政治領域，這種現象尤為明顯，但實際上，它在所有領域都存在：過於商業化的藝術家被視為「背叛者」。企業家高管常常認為學者過於理論化，脫離實際。許多從事自然科學的人，甚至不認為社會科學是真正的科學。寫暢銷書的學者，常常被視為不夠嚴謹的研究人員。&lt;/p&gt;&lt;p&gt;問題在於：每個羣體都生活在自己的信息繭房中，他們認為這就是「真實」的世界，他們通過妖魔化其他羣體來維持這種信念。&lt;/p&gt;&lt;p&gt;在這個社交媒體和算法推薦內容盛行的時代，這些信息繭房變得更加孤立，因為我們接觸到的信息越來越少，尤其是那些來自於我們所選擇的羣體之外的信息。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.信息末日問題三：注意力持續性渙散（Constant Distraction）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;大約五年前，我有幸採訪了 Meetup 的創始人，我們不經意間聊起了社交媒體的信息流推薦功能。他當時説了一句令我困惑不解的話：「如果你現在就覺得這東西容易讓人上癮，那麼等到五年後再來評價吧。」&lt;/p&gt;&lt;p&gt;如今，五年的時光已然流轉，我的與移動設備、互聯網以及社交媒體的關係經歷了驚人的轉變。&lt;/p&gt;&lt;p&gt;隨着時間的推移，我變得日益警覺。我甚至從手機上卸載了所有社交媒體應用，並設定了一個只有我妻子知道的 App Store 密碼，以阻止我再次下載新應用。儘管如此，我仍覺得自己在這場戰鬥中節節敗退。&lt;/p&gt;&lt;p&gt;儘管我可以隨心所欲地擺脫 Facebook、Twitter 或 YouTube，但它們每一個都是我業務發展的重要平台。我在 Facebook 上管理着一個擁有近五萬名成員的羣組，通過 Facebook 和谷歌來購買廣告，並在 Facebook 上推廣我的最新文章。&lt;/p&gt;&lt;p&gt;我曾嘗試屏蔽 YouTube，但考慮到它上面有大量有價值的教育視頻，我最終決定還是解除屏蔽。即便我大部分時間在家工作，一旦打開電腦，我總感覺自己彷彿是在一個喧囂的集市中設立了一間店鋪。&lt;/p&gt;&lt;p&gt;市場營銷專家、軟件開發者和增長黑客正獲得比以往任何時候都要多的用戶行為數據。他們藉助這些信息，來吸引並牢牢抓住人們的注意力，以達到讓他們沉迷於產品的目的。&lt;/p&gt;&lt;p&gt;為了達到這個目標，他們每年都有數十億美元的投入。他們甚至開發了基於廣告收益的商業模型，或者通過傳播虛假信息，以最少的努力獲得最多的點擊量。&lt;/p&gt;&lt;p&gt;更為複雜的是，不久的將來，越來越多的人可能會通過先進的 VR 眼鏡來體驗生活，這無疑會使問題進一步惡化。&lt;/p&gt;&lt;p&gt;關鍵問題在於，我們的現實和虛擬世界正被越來越多、越來越精心製作的內容所包圍，無論是經過策略性篩選的內容、廣告，還是假新聞。這些都是根據我們個人的喜好來定製的，形成了一股不可忽視的幹擾力量，不僅分散了我們的注意力，還阻礙了我們獲取更有價值的信息或實現個人目標。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4.信息末日問題四：害怕錯過（FOMO - Fear of Missing Out)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;如今，相較於十年前，吸引人的「值得一讀或一看」的內容比以往任何時候都要豐富。然而，更多的選擇並非總是好事，事實上，這種選擇的多樣性很快會讓人感到不堪重負。&lt;/p&gt;&lt;p&gt;讓人感到不堪重負的並非選項的多樣性，而是高質量選項的豐富性。對人們來説，放棄這些優質選擇是一件非常痛苦的事，這種現象在心理學上被稱為「損失厭惡」。&lt;/p&gt;&lt;p&gt;此外，由於優質選擇如此之多，我們經常面臨一些難以明確判斷哪個是最佳選擇的決策。&lt;/p&gt;&lt;p&gt;例如，為了未來的職業規劃，我們應該閲讀有關數據科學或人工智能的書籍嗎？或者，我們是否應該提升自己的溝通技巧以成為更優秀的領導者？又或者，我們是否應該探究最新的健身方式、飲食習慣或育兒指導，以提升個人生活的品質？&lt;/p&gt;&lt;p&gt;這些選擇每一個都是重要的，而在這些選擇之間進行權衡，就像是在蘋果、橘子和杏仁之間做選擇一樣複雜。這類決策在心理層面上極其具有挑戰性。&lt;/p&gt;&lt;p&gt;問題的關鍵在於：由於優質選擇過多，加之對最佳選擇的預知不足，我們總是在不斷地質疑自己是否做出了正確的決策。&lt;/p&gt;&lt;h2&gt;結果: 媒體垃圾食品成了我們的日常飲食。&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;這四個挑戰（內容衝擊、信息繭房、注意力持續性渙散和 FOMO 情緒）使得未經深思熟慮的普通人更容易沉迷於「媒體垃圾食品」。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;他們會隨意瀏覽眼前推薦的內容，輕易點擊那些分心的信息，而當面對好的選擇時，卻往往感到無法確切判斷哪一個是最好的。&lt;/p&gt;&lt;p&gt;在公共衞生領域，「食物沙漠」是指那些因為地理位置偏遠，難以以合理價格獲取到新鮮食物的區域。&lt;/p&gt;&lt;p&gt;對於那些未經深思熟慮的人來説，互聯網越來越像一個「信息沙漠」，充斥着大量的低質量或誤導性的信息。&lt;/p&gt;&lt;p&gt;更為讓人擔憂的是，很多人在這樣的環境下誤以為自己變得更加聰明瞭，實則恰恰相反。&lt;/p&gt;&lt;h2&gt;這就是問題所在，解決辦法是什麼？&lt;/h2&gt;&lt;p&gt;雖然信息末日為我們描繪了一幅黯淡的未來圖景，但從另一角度看，突破性知識和信息比以往任何時候都更加豐富和觸手可及。&lt;/p&gt;&lt;p&gt;現在，來自世界頂級專家的更多樣化的知識，越來越容易獲得，其中大部分都是免費的或負擔得起的。據預測，&lt;a href=&quot;http://blogs.nature.com/news/2014/05/global-scientific-output-doubles-every-nine-years.html&quot; target=&quot;_blank&quot;&gt;未來九年內，人類所創造的科學知識將達到目前水平的兩倍&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;比如説，如果我想學習攝影，20 年前，我只能尋找本地的專業培訓課或者閲讀相關書籍。而在今天，我可以輕鬆地在 YouTube 上找到 27.7 萬個相關視頻，並從中選取一個來學習。&lt;/p&gt;&lt;p&gt;更進一步，我還可以以 180 美元的價格購買 Masterclass 的全程通行證，從羅恩·霍華德（Ron
 Howard）那裏學習導演藝術，從阿倫·索爾金（Aaron Sorkin）那裏研究編劇，或者從馬丁·斯科塞斯（Martin 
Scorsese）那裏深入瞭解電影製作。&lt;/p&gt;&lt;p&gt;在這種情況下，只要我們謹慎地挑選我們所消費的信息，我們實際上就是生活在一個充滿了無限可能的信息烏託邦之中。&lt;/p&gt;&lt;p&gt;正如查爾斯·狄更斯（Charles Dickens）在&lt;a href=&quot;https://en.wikipedia.org/wiki/A_Tale_of_Two_Cities&quot; target=&quot;_blank&quot;&gt;《雙城記》&lt;/a&gt;中寫道的：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;這是最好的時代，這是最壞的時代； 這是智慧的時代，這是愚蠢的時代； 這是信仰的時代，這是懷疑的時代； 這是光明的季節，這是黑暗的季節； 這是希望的春天，這是絕望的冬天； 人們眼前擁有一切，人們眼前一切荒蕪； 人們正踏上天堂之路，人們正走向地獄之門；&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如何快速獲取突破性知識，如何在信息噪音中快速找到信號，這些技能將在未來轉化具有巨大的優勢。這些人彷彿生活在一個充滿「美味水果」的信息富饒之地。這正是一項被普遍低估的技能。&lt;/p&gt;&lt;p&gt;要將這個充滿潛在危機的信息世界轉變為一個烏託邦，關鍵在於我們需要從被動接收信息轉向主動篩選和獲取信息。&lt;/p&gt;&lt;p&gt;我們不能盲目依賴新聞摘要、默認通知、算法推薦來為我們在信息世界中指引航向。控制這些內容的公司並沒有把我們的最佳利益放在心上，他們已經失去了公眾的信任。&lt;/p&gt;&lt;p&gt;這些信息流的設計目的只有一個：在短期和長期內儘可能地吸引並抓住你的注意力。這種商業模式從根本上與我們的人生目標是相沖突的。&lt;/p&gt;&lt;p&gt;那麼，我們應如何在這海量的信息噪聲中尋找到那極少數有價值的信號呢？在一個充滿「害怕錯過（FOMO）」和各種幹擾的環境中，如何找到那些能帶來突破的知識和信息？我們應該如何在這個信息爆炸的時代中，建立起自己的信息烏託邦，而非沉淪在信息末日的漩渦裏？&lt;/p&gt;&lt;p&gt;在接下來的部分，我提出三個解決方法：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;1.問自己一個簡單的問題，可以幫助你從增強性知識中篩選出突破性知識；&lt;/p&gt;&lt;p&gt;2.使用具有更高信噪比的新知識格式；&lt;/p&gt;&lt;p&gt;3.學習一項技能，這將系統性的幫助你找到突破性知識；&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;解決方法一：提出問題，從增強性知識中篩選出突破性知識&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在掌握學習技巧時，最核心的一步就是明確區分&lt;a href=&quot;https://medium.com/@michaeldsimmons/5-hour-rule-if-youre-not-spending-5-hours-per-week-learning-you-re-being-irresponsible-309a76eabae7?inf_contact_key=cc10aaca105fceca1da79c32996f4dcfd766532b1ddaef2f2fece5553dd0e7a6&quot; target=&quot;_blank&quot;&gt;增強性知識和突破性知識&lt;/a&gt;。一旦你明確了自己的目標，找到它便會變得無比容易。&lt;/p&gt;&lt;p&gt;增強性知識進一步加強了我們對已知事物的認知。這就像我們已經讀過二十本營銷相關的書，然後又讀了一本講同樣內容的書。這樣的知識通常只是一時激起你的興趣，很快就會被遺忘。&lt;/p&gt;&lt;p&gt;相反，突破性知識會挑戰我們關於世界如何運作的基礎信念，或者為我們提供一種全新的觀察視角。這樣的知識會深刻地影響我們。&lt;/p&gt;&lt;p&gt;要識別有潛力的突破性知識其實並不難。在我接觸任何媒體內容之前，我都會自問一個直截了當但極具啓發性的問題：&lt;/p&gt;&lt;p&gt;這是否有潛力從根本上改變我的生活？&lt;/p&gt;&lt;p&gt;這個關鍵問題讓我避免了因為標題吸睛或者推薦在我的信息流而盲目地消費內容。&lt;/p&gt;&lt;p&gt;我第一次深入理解這兩種知識之間的差異是在觀看埃隆·馬斯克的一次訪談時。當記者詢問他對未來的創業者有何建議時，馬斯克給出了一個出人意料的回答。&lt;a href=&quot;https://www.youtube.com/watch?v=L-s_3b5fRd8&amp;amp;feature=youtu.be&amp;amp;t=20m41&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;積極地尋求並認真聽取負面反饋至關重要，這是人們傾向於避免的，因為這很痛苦。我認為這是一個很常見的錯誤。&lt;/p&gt;&lt;p&gt;當我第一次聽到這個回答時感到十分驚訝。因為，這似乎過於簡單了。但隨後我發現，馬斯克的這種方法比我初次理解的要更深刻和底層，它凸顯了科學方法的威力。&lt;/p&gt;&lt;p&gt;讓我給你舉一個大家都會知道的例子。幾百年前，人們普遍接受的觀點是太陽圍繞地球轉動。儘管這個概念早在公元前 3 世紀就被提出過，但從未得到廣泛的關注。&lt;/p&gt;&lt;p&gt;在整個歷史長河中，每一天人們都可以看到太陽從地球的一側升起，然後在另一側落下。這樣的個人經驗看似都支持了這一普遍觀點。&lt;/p&gt;&lt;p&gt;然而，哥白尼僅憑幾年的研究和一種新穎的工具——望遠鏡，就成功推翻了這個長達數千年的普遍認知。他收集的新數據顯示，實際上是地球繞着太陽轉動。&lt;/p&gt;&lt;p&gt;這個眾所周知的案例突出了一個至關重要的觀點：能夠證偽你當前觀點的證據，其價值遠超過能夠證實你觀點的證據。歷代科學家都有着這樣的認識：科學是通過被證偽而非被證實來不斷髮展的。&lt;/p&gt;&lt;p&gt;一條能推翻你現有觀點的證據，其價值可能遠勝於一百萬條能證實你觀點的證據，就如同一本能帶來突破性知識的書籍比一百本只能提供增強性知識的書籍更有價值一樣。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;解決方法二：意識到信息過載是一個古老的問題，有古老的解決方法值得一提的是，信息過載其實是一個由來已久的問題。信息過載的速度可能在增加，但這個問題本身並不是新出現的。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;人類的集體知識以一種超過我們處理能力的指數速度持續增長。&lt;/p&gt;&lt;p&gt;自古以來，哲學家、思想家和知識分子就一直對信息過載發出評論。羅馬哲學家塞涅卡（Seneca）曾説：&lt;/p&gt;&lt;p&gt;擁有數不盡的書籍和圖書館有什麼意義？其所有者一生可能都難以閲讀完這些書名。&lt;/p&gt;&lt;p&gt;學習者並沒有從中受到指導，反而被它們的數量所壓垮。&lt;/p&gt;&lt;p&gt;塞涅卡的觀點強調了，僅僅擁有大量的信息和資源，並不意味着能夠從中受益。相反，過多的信息可能反而成為一種負擔。&lt;/p&gt;&lt;p&gt;1962 年，詹姆斯·米勒的研究更是強調了處理信息輸入的重要性，表明人們必須對信息的處理和應用進行調整，而不是無節制地吸收。&lt;/p&gt;&lt;p&gt;而在 2007 年，&lt;a href=&quot;http://neugierig.org/content/dfw/bestamerican.pdf&quot; target=&quot;_blank&quot;&gt;大衞·福斯特·華萊士更進一步&lt;/a&gt;，他提醒我們，在處理海量和多變的信息時，維持開放和靈活的心態是至關重要的。&lt;/p&gt;&lt;p&gt;與所有古老但重要的問題一樣，人們代代相傳地試圖解決信息過載的問題。雖然大多數嘗試都失敗了，但確實有一些解決方案一直存在，並且它們非常有價值。&lt;/p&gt;&lt;p&gt;其中一個解決方案就是尋求具有高價值密度的知識格式&lt;/p&gt;&lt;p&gt;社交媒體上發表的帖子，通常是一個作者一天中最好的想法。在某些情況下，如果他們發表了一篇長文章，這可能是他們這個月最好的想法。&lt;/p&gt;&lt;p&gt;一本書更有價值，因為它包含了作者好多年中最好的想法。它還經過了仔細的審查、批准和編輯。&lt;/p&gt;&lt;p&gt;書籍摘要更有價值。在過去的五年裏，這類摘要的製作已經形成了一個小型產業。如果你在亞馬遜搜索任何一本暢銷書，極有可能會發現有數個相關的摘要版本可供購買。&lt;/p&gt;&lt;p&gt;在谷歌上一搜索，你甚至能找到免費的版本。像 Blinkist 和 Get Abstract 這樣的平台已經彙編了數以萬計的書籍摘要，並以音頻和文本的形式提供給大眾。&lt;/p&gt;&lt;p&gt;書籍摘要具有其獨特的價值，原因在於它們將書中的核心觀點、引人入勝的故事、實用的練習和主要的結論進行了高效壓縮。&lt;/p&gt;&lt;p&gt;此外，在這一類別中，我還會包括那些由作者自己進行的關於書的演講（如 TEDx 或 Google Talks）以及與作者的專訪（如播客節目）。這些都是對原書內容的精華概覽。&lt;/p&gt;&lt;p&gt;領域摘要則是對整個領域的精煉。最好的例子是《傻瓜指南 For Dummies guides》系列。自從它們近 30 年前首次推出以來，該系列已經銷售了超過兩億冊，並且擁有 2500 多個不同的標題，使其成為史上最暢銷的書籍系列之一。&lt;/p&gt;&lt;p&gt;但還有一種比領域摘要更簡潔的格式，這就是所謂的&lt;a href=&quot;https://medium.com/the-mission/the-founders-of-the-worlds-five-largest-companies-all-follow-the-5-hour-rule-and-they-re-9ca82e93f3fc&quot; target=&quot;_blank&quot;&gt;心智模型&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;2013 年，當我看到內容衝擊的曲線變化時，我有了一個「哇，天哪！」的時刻，並開始思考：「作為一個社會，我們該如何應對這一現象？我個人應該怎麼辦？」&lt;/p&gt;&lt;p&gt;這個問題引發了我一段歷時多年、充滿曲折的探尋之旅，最終讓我意識到，世界上很多最聰明的企業家們與我們大多數人在知識結構上有很大的不同。他們不是將知識按照不同的學科或領域進行分類，而是使用心智模型。&lt;/p&gt;&lt;p&gt;這最終推動我深入研究了心智模型。&lt;/p&gt;&lt;p&gt;心智模型是跨時間、跨研究領域、跨生活領域觀察到的現象的表徵。在我看來，它們提供的知識價值最大，因為：&lt;/p&gt;&lt;p&gt;它們傳遞的知識比書本摘要，甚至是領域摘要都要濃縮得多。&lt;/p&gt;&lt;p&gt;隨着時間的推移，它們的價值不會減少 (甚至會增加)。&lt;/p&gt;&lt;p&gt;它們廣泛適用於各個領域。&lt;/p&gt;&lt;p&gt;例如，我最喜歡的心智模型就是二八法則：20% 的努力或投入會導致 80% 的結果或產出。這個規則適用於商業、創意、人際關係、健康以及其他許多領域。&lt;/p&gt;&lt;p&gt;另一個心智模型的例子是機會成本：即在面臨多方案擇一決策時,被捨棄的選項中的最高價值。&lt;/p&gt;&lt;p&gt;這個模型在你一生中做決定的時候是很有價值的，因為它鼓勵你思考一個決定可能的替代方案。它會阻止你做出頭腦中的第一選擇。&lt;/p&gt;&lt;p&gt;當你學習心智模型時，你會開始看到生活中各個領域的潛在模型，在噪音中發現信號，就變得容易得多。你可以在《This Is Exactly How You Should Train Yourself To BeSmarter》中讀到一些有價值的模型。&lt;/p&gt;&lt;p&gt;一旦我理解了心智模型的力量，我就開始在我的生活中使用它們。我回顧了以前的許多錯誤，心想:「天啊！我不敢相信我做了那個決定。如果我只知道 XXX 心智模型，我肯定會避免這種情況發生。」&lt;/p&gt;&lt;p&gt;突然，我能夠在生活中遇到的問題上取得突破性的進展，而這些問題是我多年來一直停滯不前的……尤其是與金錢有關的問題。&lt;/p&gt;&lt;p&gt;我開始有許多更大的、違反直覺的想法，而以前我的很多想法都是很傳統的。我開始用不同的方式説話和寫作。我把我所有的知識都與心智模型聯繫起來。每一個新的情況都是一個更大原則的例子。&lt;/p&gt;&lt;p&gt;我能夠看到更多學科之間的聯繫。&lt;/p&gt;&lt;p&gt;我現在幾乎每天都會接觸到「a-ha」知識。我看到或讀到的東西，要麼打破了我的世界觀，要麼將我幾個月或幾年來一直在探索的許多不同的東西聯繫了起來。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;解決方法三：學習如何學習&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;學習如何學習是一系列的技能，將最終幫助我們找到突破性的知識，並將其應用到我們的生活中，以便在最短的時間內取得成果。&lt;/p&gt;&lt;p&gt;很少有人意識到，學習如何學習是自己獨特的技能。 結果，它們並沒有改善。&lt;/p&gt;&lt;p&gt;由於它涉及信息過載，它包括：&lt;/p&gt;&lt;p&gt;瞭解科學的方法，來&lt;a href=&quot;https://amzn.to/2HNqAau&quot; target=&quot;_blank&quot;&gt;識別高質量的信息&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;瞭解&lt;a href=&quot;https://medium.com/the-mission/modern-polymath-81f882ce52db&quot; target=&quot;_blank&quot;&gt;各種知識的價值&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;理解那些認知偏差 (如&lt;a href=&quot;https://en.wikipedia.org/wiki/Confirmation_bias&quot; target=&quot;_blank&quot;&gt;確認偏差&lt;/a&gt;、&lt;a href=&quot;https://rationalwiki.org/wiki/Backfire_effect&quot; target=&quot;_blank&quot;&gt;逆火效應&lt;/a&gt;、&lt;a href=&quot;https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect&quot; target=&quot;_blank&quot;&gt;鄧寧-克魯格效應&lt;/a&gt;、&lt;a href=&quot;https://en.wikipedia.org/wiki/Halo_effect&quot; target=&quot;_blank&quot;&gt;光環效應&lt;/a&gt;、&lt;a href=&quot;https://en.wikipedia.org/wiki/In-group_favoritism&quot; target=&quot;_blank&quot;&gt;羣體內偏見&lt;/a&gt;)。&lt;/p&gt;&lt;p&gt;學習如何學習是一個宏大的話題，這些要點提供了一個起點。&lt;/p&gt;&lt;h2&gt;結語: 從信息末日到信息烏託邦&lt;/h2&gt;&lt;p&gt;我依然清晰地記得，在我還是紐約大學的學生時，有一次我與城市中心 20 所高中的學生進行了關於創業精神的對話。那次經歷讓我深切地感受到了這個世界存在着多麼巨大的不平等。&lt;/p&gt;&lt;p&gt;我尤其難忘的是哈萊姆區的一所高中，那裏更像一座監獄，而非一個教育機構。所有的窗戶都被木板牢牢封住，建築物外部佈滿了塗鴉。為了進入學校，我還需要經過金屬探測器的檢測。學校四周是圍牆和廢棄的建築，幾乎像是一座孤島。&lt;/p&gt;&lt;p&gt;與此形成鮮明對比的是，我的高中環境美麗，周圍是鮮花、運動場和繁茂的樹木。在我那一屆畢業生中，幾乎每個人都有機會進入大學深造。&lt;/p&gt;&lt;p&gt;當我踏入哈萊姆的那所學校，我感到一陣深沉的悲哀。誰能説這裏的機會是平等的呢？學生們能上哪所學校，歸根結底只取決於他們碰巧出生的地方。&lt;/p&gt;&lt;p&gt;這種社會差距不僅令人心痛，而且更讓我擔憂的是，網絡世界可能孕育出比現實世界更大的不平等。儘管互聯網理論上為每個人提供了平等的機會，但並非每個人都平等地理解如何充分利用這些機會。&lt;/p&gt;&lt;p&gt;這種情況導致了一部分人生活在信息過剩的混亂世界裏，而另一部分人則享受着信息豐富的烏託邦。如果我們不積極地學習網絡環境管理的技能，並將這些知識廣泛傳播，我擔心我們的社會將進一步兩極分化。&lt;/p&gt;&lt;p&gt;via &lt;a href=&quot;https://www.linkedin.com/pulse/while-everyone-distracted-social-media-successful-people-simmons-1e/&quot; target=&quot;_blank&quot;&gt;https://www.linkedin.com/pulse/while-everyone-distracted-social-media-successful-people-simmons-1e/&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://here.news/post/51490631-fddf-4699-af26-42d721ddc3bc/%E4%BF%A1%E6%81%AF%E8%8C%A7%E6%88%BF%E8%87%AA%E6%95%91%E6%8C%87%E5%8D%97&quot;&gt;https://here.news/post/51490631-fddf-4699-af26-42d721ddc3bc/%E4%BF%A1%E6%81%AF%E8%8C%A7%E6%88%BF%E8%87%AA%E6%95%91%E6%8C%87%E5%8D%97&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻牆技術博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;訂閲地址及社交帳號&lt;/a&gt;&lt;/div&gt;</description>
                <link>https://www.chinagfw.org/2023/09/blog-post_11.html</link>
                <author>noreply@blogger.com (pompei)</author>
                <thr:total>0</thr:total>
            </item>
            <item>
                <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-8514286720013979191</guid>
                <pubDate>Sat, 09 Sep 2023 03:15:00 +0000</pubDate>
                <atom:updated>2023-09-13T09:40:57.649+08:00</atom:updated>
                <title>中國如何將軟件漏洞武器化</title>
                <description>&lt;p&gt;via &lt;a href=&quot;https://here.news/post/6a190ad3-cf18-4e0c-a6ca-875b7cf41551/miit%E7%9A%84%E6%96%B0%E6%BC%8F%E6%B4%9E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E4%B8%AD%E5%9B%BD%E5%9B%BD%E5%AE%B6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E6%8A%80%E6%9C%AF%E5%8D%8F%E8%B0%83%E4%B8%AD%E5%BF%83%EF%BC%88cncert-c&quot;&gt;HERE&lt;/a&gt;&lt;br /&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Atlantic Council 於 2023 年 9 月 6 日&lt;a href=&quot;https://www.atlanticcouncil.org/in-depth-research-reports/report/sleight-of-hand-how-china-weaponizes-software-vulnerability/&quot;&gt;發佈一份報告&lt;/a&gt;，由 Dakota Cary 和 Kristin Del Rosso 撰寫，探討了中國如何利用新的漏洞管理系統武器化軟件漏洞。&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;報告揭示，中國 2021 年《軟件漏洞管理辦法》要求研究人員和公司在 48 小時內向國家漏洞數據庫（NVDB）報告漏洞。報告確定了一些表現出色的公司遵守了法律，並暗示可能有更多外國公司參與其中。報告指出，向 NVDB 報告的漏洞很可能被中國的攻擊團隊利用。&lt;br /&gt;&lt;br /&gt;報告還強調，與工業和信息化部（MIIT）共享的漏洞信息被傳遞給具有攻擊任務或與過去黑客攻擊有關的實體，如國家安全部第 13 局（CNITSEC）的北京局、上海交通大學和北京天融信。報告認為，這些實體有可能將接收到的漏洞報告用於攻擊目的。&lt;br /&gt;&lt;br /&gt;報告還指出，在 2021 年規定之前，公司向國家安全部的中國國家漏洞數據庫（CNNVD）報告漏洞，並且在向 MIIT 提交漏洞報告的公司中存在重疊。報告得出結論，中國的新漏洞管理系統存在重大風險，並引發了對漏洞報告被用於攻擊性網絡行動的擔憂。&lt;br /&gt;&lt;br /&gt;報告要點：&lt;br /&gt;&lt;br /&gt;- 《網絡產品安全漏洞管理規定》（RSMV）於 2021 年 9 月在中國實施，要求在發現漏洞後的 48 小時內向工業和信息化部（MIIT）報告軟件漏洞。&lt;br /&gt;&lt;br /&gt;- 這些規定還禁止在補丁發佈之前公開漏洞信息，發佈概念驗證代碼以及誇大漏洞的嚴重性。&lt;br /&gt;&lt;br /&gt;- MIIT 的新漏洞數據庫與中國國家計算機網絡應急響應技術協調中心（CNCERT/CC）和公安部（MPS）共享數據，使它們能夠訪問漏洞報告並有可能將其用於攻擊行動。&lt;br /&gt;&lt;br /&gt;- 在實施這些規定時出現了官僚主義問題，導致漏洞披露減少到其他政府管理的數據庫。目前尚不清楚 CNCERT/CC 是否能夠通過與其他國家的事件響應合同收集漏洞信息。&lt;br /&gt;&lt;br /&gt;- MIIT 正在資助研究項目以改進產品安全標準，並從網絡安全公司那裏接收軟件漏洞。這些漏洞很可能會被國家安全部門用於攻擊行動的評估。&lt;br /&gt;&lt;br /&gt;- 中國的規定與美國的分散、自願報告系統存在顯著差異。&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;img src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/7715bd95-c702-4b89-b57a-662da3cd1097_image_image.png&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;完整報告： &lt;a href=&quot;https://www.atlanticcouncil.org/in-depth-research-reports/report/sleight-of-hand-how-china-weaponizes-software-vulnerability/&quot;&gt;https://www.atlanticcouncil.org/in-depth-research-reports/report/sleight-of-hand-how-china-weaponizes-software-vulnerability/&lt;/a&gt;&lt;/p&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;翻牆技術博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;訂閲地址及社交帳號&lt;/a&gt;&lt;/div&gt;</description>
                <link>https://www.chinagfw.org/2023/09/blog-post_9.html</link>
                <author>noreply@blogger.com (pompei)</author>
                <thr:total>0</thr:total>
            </item>
            <item>
                <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-8095938613059099858</guid>
                <pubDate>Thu, 07 Sep 2023 01:57:00 +0000</pubDate>
                <atom:updated>2023-09-11T11:51:26.046+08:00</atom:updated>
                <title>Storm-0558 密鑰獲取的過程</title>
                <description>&lt;p&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;&amp;nbsp;via &lt;a href=&quot;https://msrc.microsoft.com/blog/2023/09/results-of-major-technical-investigations-for-storm-0558-key-acquisition/&quot;&gt;https://msrc.microsoft.com/blog/2023/09/results-of-major-technical-investigations-for-storm-0558-key-acquisition/&lt;br /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;2023 年 9 月 6 日，微軟發佈了一篇博客文章，詳細介紹了中國威脅行動者 Storm-0558 如何使用獲得的 Microsoft 賬戶（MSA）消費者密鑰偽造令牌以訪問 OWA 和 Outlook.com。在確定威脅行動者獲得了消費者密鑰後，微軟進行了一項全面的技術調查，調查了 Microsoft 賬戶消費者簽名密鑰的獲取方式，以及它如何被用來訪問企業電子郵件。我們的技術調查已經結束。作為我們對透明度和信任的承諾的一部分，我們將發佈我們的調查結果。&lt;br /&gt;&lt;br /&gt;密鑰獲取&lt;br /&gt;&lt;br /&gt;微軟維護着一個高度隔離和限制的生產環境。微軟員工訪問生產基礎設施的控制措施包括背景調查、專用賬戶、安全訪問工作站以及使用硬件令牌設備的多因素身份驗證。該環境中的控制措施還防止使用電子郵件、會議、網絡研究和其他合作工具，這些工具可能導致常見的賬戶被入侵矢量，如惡意軟件感染或釣魚，同時使用及時和有限訪問策略限制對系統和數據的訪問。&lt;br /&gt;&lt;br /&gt;我們的企業環境也需要安全身份驗證和安全設備，並允許使用電子郵件、會議、網絡研究和其他合作工具。雖然這些工具很重要，但它們也使用戶容易受到針對性網絡釣魚、令牌竊取惡意軟件和其他賬戶被入侵矢量的攻擊。因此，根據政策和作為我們零信任和「假定受損」思維方式的一部分，密鑰材料不應離開我們的生產環境。&lt;br /&gt;&lt;br /&gt;我們的調查發現，2021 年 4 月發生的消費者簽名系統崩潰導致了一個崩潰進程的快照（「崩潰轉儲」）。這些崩潰轉儲應該不包含簽名密鑰。但在這種情況下，一個競爭條件導緻密鑰出現在崩潰轉儲中（這個問題已經得到修復）。我們的系統沒有檢測到崩潰轉儲中的密鑰材料（這個問題已經得到修復）。&lt;br /&gt;&lt;br /&gt;我們發現，這個崩潰轉儲在當時被移動到了隔離的生產網絡之外，進入了我們連接到互聯網的企業網絡的調試環境。這與我們的標準調試流程一致。我們的憑證掃描方法沒有檢測到其存在（這個問題已經得到修復）。&lt;br /&gt;&lt;br /&gt;在 2021 年 4 月之後，當密鑰通過崩潰轉儲泄露到企業環境時，Storm-0558 行動者成功入侵了一名微軟工程師的企業賬戶。該賬戶具有訪問包含錯誤包含密鑰的崩潰轉儲的調試環境的權限。由於日誌保留政策的原因，我們沒有具體證據證明這個行動者的數據外泄，但這是最可能的行動者獲取密鑰的機制。&lt;br /&gt;&lt;br /&gt;消費者密鑰為什麼能夠訪問企業郵件&lt;br /&gt;&lt;br /&gt;為了滿足日益增長的客戶需求，支持同時使用消費者和企業應用程序的應用程序，微軟在 2018 年 9 月引入了一個公共密鑰元數據發佈端點。作為這個統一提供的一部分，微軟更新了文檔，澄清了密鑰範圍驗證的要求-用於企業賬戶的密鑰以及用於消費者賬戶的密鑰。&lt;br /&gt;&lt;br /&gt;作為預先存在的文檔和輔助 API 庫的一部分，微軟提供了一個 API 來幫助進行加密簽名的驗證，但沒有更新這些庫以自動執行這個範圍驗證（這個問題已經得到修復）。郵件系統在 2022 年更新，使用了公共元數據端點。郵件系統中的開發人員錯誤地認為庫已經執行了完整的驗證，並沒有添加所需的發行者/範圍驗證。因此，郵件系統會接受使用消費者密鑰簽名的安全令牌的企業郵件請求（這個問題已經使用更新的庫得到修復）。&lt;br /&gt;&lt;br /&gt;事後回顧&lt;br /&gt;&lt;br /&gt;微軟作為我們的深度防禦策略的一部分，不斷加強系統的安全性。與 MSA 密鑰管理相關的投資在 https://aka.ms/storm-0558 博客中有詳細介紹。本博客中詳細介紹的內容只是這些整體投資的一部分。為了明確起見，我們在這裏總結了與這些發現相關的改進措施：&lt;br /&gt;&lt;br /&gt;- 確定並解決了允許簽名密鑰出現在崩潰轉儲中的競爭條件問題&lt;br /&gt;- 加強了對錯誤包含在崩潰轉儲中的密鑰材料的預防、檢測和響應能力&lt;br /&gt;- 加強了憑證掃描以更好地檢測調試環境中籤名密鑰的存在&lt;br /&gt;- 發佈了增強的庫，以自動進行身份驗證庫中的密鑰範圍驗證，並澄清了相關文檔&lt;br /&gt;&lt;/span&gt; &lt;/p&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;翻牆技術博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;訂閲地址及社交帳號&lt;/a&gt;&lt;/div&gt;</description>
                <link>https://www.chinagfw.org/2023/09/storm-0558.html</link>
                <author>noreply@blogger.com (pompei)</author>
                <thr:total>0</thr:total>
            </item>
            <item>
                <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-1524784321191020643</guid>
                <pubDate>Wed, 06 Sep 2023 11:15:00 +0000</pubDate>
                <atom:updated>2023-09-09T11:15:23.249+08:00</atom:updated>
                <title>中國 GFW 封鎖了 Cloudflare 的 1.1.1.1 和 WARP 官網的 HTTPS 訪問</title>
                <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;div class=&quot;SinglePost_SinglePost__3in7m&quot;&gt;&lt;p&gt;via &lt;a href=&quot;https://here.news/post/1b17e6fe-b45c-465f-a416-c8fac066bf37/%E4%B8%AD%E5%9B%BDgfw%E5%B0%81%E9%94%81%E4%BA%86cloudflare%E7%9A%841-1-1-1-%E5%92%8Cwarp%E5%AE%98%E7%BD%91%E7%9A%84https&quot;&gt;HERE &lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;中國的網絡審查系統（GFW）封鎖了由 Cloudflare 運營的 1.1.1.1
 WARP 官網的 HTTPS 訪問。這個封鎖行為是在 2023 年 9 月 5 日下午開始的。雖然很多 DoH（DNS over 
HTTPS）早就被封了，但 1.1.1.1 這個網站一直未被封鎖，直到現在才被封鎖。這可能是因為 GFW 不得不補上這個「漏洞」，防止類似操作在推廣的 Early-Data
 with Client Hints（ECH）中被大規模複製。&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/e1718762-fbcb-473b-921c-dbae1031acf9_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/e1718762-fbcb-473b-921c-dbae1031acf9_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;目前還沒有關於 ECH 被封鎖的報道。2020 年，ESNI（Encrypted
 Server Name 
Indication）在中國被封鎖，但 ESNI 封鎖是針對特定的傳輸層安全性（TLS）擴展號碼進行的。而 ECH 使用不同的擴展號碼。目前沒有任何審查測量平台正在測試 ECH。&lt;/p&gt;&lt;p&gt;中國的網絡審查系統（GFW）採用了一種介於放行和封鎖之間的模糊幹擾機制。一些大型網站在中國訪問時可能會不穩定，但並非完全無法打開，比如 github.com。幾天前的測試中，1.1.1.1 可以正常訪問（實際上很多人都知道它以前沒有被封鎖），但是需要重新啓動幾次 Chrome 才能成功測試 Cloudflare 的 ECH。根據昨天的新聞和很多人的測試結果，1.1.1.1 的 TCP/443 端口無法使用，但其他端口的服務可以正常訪問。這表明底層路由沒有問題，GFW 專門封鎖了 1.1.1.1 的 TCP/443 端口，這與之前的行為不同。&lt;/p&gt;&lt;p&gt;根據路由追蹤結果，TTL（Time to Live）在傳輸中過期的問題似乎是由省級移動運營商的幹擾導致的。最後一跳的 IP 地址指向了省級移動運營商的服務器。&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/9a7cdc57-c9d5-4dea-a2c8-1df3456c7e84_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/9a7cdc57-c9d5-4dea-a2c8-1df3456c7e84_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;總的來説，中國的網絡審查系統（GFW）封鎖了由 Cloudflare 運營的 1.1.1.1
 
WARP 官網的 HTTPS 訪問。這可能是為了防止類似操作在推廣的 ECH 中被大規模複製。目前還沒有 ECH 被封鎖的報道，而之前的 ESNI 封鎖是針對特定的 TLS 擴展號碼進行的。GFW 採用了一種模糊幹擾機制，一些大型網站在中國訪問時可能會不穩定。1.1.1.1 的 TCP/443 端口被封鎖，但其他端口的服務可以正常訪問。TTL 過期的問題可能是由省級移動運營商的幹擾導致的。&lt;/p&gt;&lt;p&gt;via &lt;a href=&quot;https://github.com/net4people/bbs/issues/280#issuecomment-1706267069&quot; target=&quot;_blank&quot;&gt;https://github.com/net4people/bbs/issues/280#issuecomment-1706267069&lt;/a&gt;&lt;/p&gt;&lt;/div&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻牆技術博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;訂閲地址及社交帳號&lt;/a&gt;&lt;/div&gt;</description>
                <link>https://www.chinagfw.org/2023/09/gfwcloudflare1111-warphttps.html</link>
                <author>noreply@blogger.com (pompei)</author>
                <thr:total>2</thr:total>
            </item>
            <item>
                <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-8476996904763629080</guid>
                <pubDate>Tue, 05 Sep 2023 03:20:00 +0000</pubDate>
                <atom:updated>2023-09-07T09:57:19.915+08:00</atom:updated>
                <title>個人信息獲取與知識管理系統（Heptabase + Logseq + Readwise）</title>
                <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;div id=&quot;前言&quot; style=&quot;text-align: left;&quot;&gt;via: &lt;a href=&quot;https://www.pseudoyu.com/zh/2023/09/05/my_personal_pkm_input_output_system/&quot;&gt;https://www.pseudoyu.com/zh/2023/09/05/my_personal_pkm_input_output_system/&lt;/a&gt; &lt;br /&gt;&lt;/div&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;img alt=&quot;yu_blog_my_pkm_system&quot; src=&quot;https://image.pseudoyu.com/images/yu_blog_my_pkm_system.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;我似乎一直有一種把自己作為一個機器來看待的傾向，常常會以置身事外的視角來觀察自己，集成各個模組，並不斷折騰和優化。當自己搭建的某種行為模式或是習慣在某個時刻突然發揮了作用就會有一種欣喜感，而當受到外界或是自身狀態影響而停止運轉時則會有一種秩序感被打破的重度不適。&lt;/p&gt;&lt;p&gt;作為一個效率工具控，我的個人知識管理與信息管理則可以説是自己最重要的一部分。其實本沒有想要寫這篇文章，有太多的先例實踐在前，而自己也只是一種前人基礎上的微調優化，常常沒有什麼信心去分享，而這周重新搭建和優化了一下自己的知識管理系統，很開心，有一種想要記錄下來的衝動，本來只是想在週報裏稍稍提及，卻發現越寫越收不住，於是就有了這篇文章。&lt;/p&gt;&lt;p&gt;其實之前對於信息輸出在週報中時常有提及，所以本文也會覆蓋一些之前的內容，並且終於補上了信息獲取和知識管理的部分，就作為一個總集篇了。其中，理論的部分，如「費曼學習法」、「盧曼卡片盒筆記法」已經有很多很好的介紹文章，不再花篇幅介紹了，而更多的是闡述我使用的軟件工具實踐，希望能夠對大家有所幫助。&lt;/p&gt;&lt;h2 id=&quot;信息獲取與管理&quot;&gt;信息獲取與管理&lt;/h2&gt;&lt;p&gt;不知道從什麼時候起，其實能很明顯感受到自己對網絡世界信息的依賴。可能有別於遊戲癮或是經常被詬病的短視頻算法鴉片，我的這種依賴並不是機械性地刷刷刷，或是面對焦慮時的逃避，而是一種對於信息獲取的渴求，甚至內化為了一種生活方式。因為我對自己的信息篩選和消化能力頗有信心，所以其實一直以來沒有在輸入源和整理上花太多的心思。&lt;/p&gt;&lt;p&gt;而隨着自己接觸和感興趣的領域越來越多，信息不斷積累，有時候僅僅是瀏覽和通讀都已經有些超過了記憶負荷，並且這些信息常常也零散地留在我的筆記或是腦海的某個角落中，並沒有成為內化的一部分，以後也很難記起或是檢索，於是重新對自己的信息獲取方式進行了梳理。&lt;/p&gt;&lt;h3 id=&quot;信息源分類&quot;&gt;信息源分類&lt;/h3&gt;&lt;p&gt;我的信息來源按照大類可以分為以下幾類：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;隨機想法&lt;/li&gt;&lt;li&gt;信息流&lt;/li&gt;&lt;li&gt;聚焦閲讀&lt;/li&gt;&lt;/ol&gt;&lt;h4 id=&quot;隨機想法&quot;&gt;隨機想法&lt;/h4&gt;&lt;p&gt;&lt;img alt=&quot;logseq_random_thoughts&quot; src=&quot;https://image.pseudoyu.com/images/logseq_random_thoughts.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;在日常生活、工作、學習或是什麼任意的時刻，我有時候會萌生一些隨機的想法，這些想法和當前所做的事並不相關或是天馬行空，但也許會在未來的某個時刻被用到。因為我大部分時間都不會離開電腦太遠，我通常會記錄
 Logseq 的 Journal 中，有時可能會臨時發在一個只有自己一個人的微信羣中或是 Telegram 的 Saved Message 
中，後續再補充上去。&lt;/p&gt;&lt;h4 id=&quot;信息流&quot;&gt;信息流&lt;/h4&gt;&lt;p&gt;我每天從起牀開始就會被來自各個平台的信息流所裹挾，依賴於網絡世界其實最難免的是與社交媒體與算法的抗爭，一方面是要避免自己被過載的販賣焦慮的信息或是熟人社交圈的「Peer
 
Pressure」所困擾，另一方面也需要警惕算法所構造的信息繭房。實話説這一點挺難做到，即使自己多少算是具備一些剋制和過濾信息的能力並有意識在這樣做，但依然難以避免被其所擾亂思緒或是引導。&lt;/p&gt;&lt;p&gt;我最後採取了一種簡單卻也行之有效的方式
 —— 關閉微信朋友圈入口與大部分軟件通知提醒，並且把大部分不帶社交屬性而僅僅是用於信息獲取的平台（如 B 站、微博等）的關注數量控制在 100
 以內，如果新增則篩選優化之前的關注，減少無關內容的幹擾。在完成上述行為的基礎上，我使用 RSS 訂閲這一似乎有些古早的方式，但是僅訂閲了不到 
50 個網站，其中大部分是博客或是個人網站，且會定期篩選，減少自己每天的 feeds，但幾乎在這一 feeds list 
中的文章都會掃一下標題或初步瀏覽一下。&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;readwise_reader_feeds&quot; src=&quot;https://image.pseudoyu.com/images/readwise_reader_feeds.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;這一點我最開始是自己搭建了 Miniflux 服務來抓取，並且用一個 &lt;a href=&quot;https://github.com/Rongronggg9/RSS-to-Telegram-Bot&quot;&gt;RSS-to-Telegram-Bot&lt;/a&gt; 來推送提醒的，而最近開始使用 &lt;a href=&quot;https://read.readwise.io/&quot;&gt;Readwise Reader&lt;/a&gt; 後，由於體驗很好，便把這一部分遷移過來了。我使用的是 Readwise Reader 內置的一種管理模式，分為三類：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Later&lt;/li&gt;&lt;li&gt;Shortlist&lt;/li&gt;&lt;li&gt;Archive&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;我會每天掃描一下
 Feeds 面板，掃到感興趣的文章會加入到 Later 
中，作為一個稍後讀，當然，就以前的經驗來説，稍後讀放久了常常會變成「稍後也不讀」，所以我在篩選時非常剋制，僅將很感興趣且有時間後馬上會讀的文章加入，並要求自己在晚上的時候清理
 Later 列表。&lt;/p&gt;&lt;p&gt;而我們也會在社交媒體互聯網的各個角落被推送到一些信息，其中我尤其在意的是這幾類：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;感興趣的一些觀點/推文 threads&lt;/li&gt;&lt;li&gt;感興趣的文章&lt;/li&gt;&lt;li&gt;有用的資源&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;如果是一些比較有意思的觀點或是評論，我通常並不會加入軟件的對應
 List、收藏夾等，而是會複製其內容到 Logseq 的 Journal 中並打上對應 tag，其實這一步很多軟件（包括 Readwise 
Reader）提供了推特 threads 
保留或是其他的一些更方便保存推文的方式，但我傾向於自己複製和整理，以幾句話的方式記錄下來而不是僅僅存一個鏈接，這樣似乎刻意增加的步驟會讓我多一步審視這些觀點，避免被強引導性或是情緒化的觀點所影響，也更有益於自己消化信息並內化為自己的想法。&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;readwise_chrome_extension&quot; src=&quot;https://image.pseudoyu.com/images/readwise_chrome_extension.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;如果是自己感興趣的一些文章，則會通過 Readwise 的 Chrome 插件進行閲讀或保存。這部分我給自己的要求是每篇文章都要打上標籤和 notes，notes 中主要描述為什麼要讀這篇文章。&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;readwise_chrome_extension_highlight&quot; src=&quot;https://image.pseudoyu.com/images/readwise_chrome_extension_highlight.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;其中如果僅僅是需要泛讀或是獲取信息的一些文章，我會加入
 Later 列表，而精讀的我則是會加入 Shortlist，並且必須要對其中一些有意義的話加 highlights，也儘量對 
highlights 加上自己的一些評價和想法，這些都可以在插件中直接操作，很方便。&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;pinboard_bookmark&quot; src=&quot;https://image.pseudoyu.com/images/pinboard_bookmark.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;而如果是一些有用的網站、文檔、代碼、軟件或是其他資源類的信息，我會使用 &lt;a href=&quot;https://pinboard.in/&quot;&gt;Pinboard&lt;/a&gt;，一個很古早但是很好用的書籤管理工具來保存，同樣是用瀏覽器插件進行保存，也會打上標籤和簡單的描述，大概一年左右了我積累了 455 個書籤，其中大部分我都能夠通過 tag 和名稱在需要用的時候快速檢索到。&lt;/p&gt;&lt;p&gt;而像是視頻網站等我更多還是使用點贊或是收藏的方式，一方面對創作者表示支持，另一方面也通過一些自動化工具同步到我的 Telegram 個人頻道「&lt;a href=&quot;https://t.me/pseudoyulife&quot;&gt;Yu’s Life&lt;/a&gt;」，並標記上對應 tag，但大多視頻的信息效率並不高，所以更多是一些有趣的或是探索向的。&lt;/p&gt;&lt;h4 id=&quot;聚焦閲讀&quot;&gt;聚焦閲讀&lt;/h4&gt;&lt;p&gt;除了上述這些被動推送的一些信息流外，其實我們也還會有很多特定主題或是與自己的領域強相關的一些信息需求，這需要我們去主動閲讀一些書籍、報告等。&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;wechat_reader_sync_readwise&quot; src=&quot;https://image.pseudoyu.com/images/wechat_reader_sync_readwise.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;這一部分我原本更多是使用 kindle 或閲讀紙質書，並手動在 Logseq 進行一些記錄。但是在 &lt;a href=&quot;https://lutaonan.com/&quot;&gt;Randy&lt;/a&gt; 推出 &lt;a href=&quot;https://notepal.randynamic.org/&quot;&gt;Notepal&lt;/a&gt; 工具後，我開始使用微信讀書，它本身有很多可閲讀的書籍資源，並且我也用它導入 mobi 或是 epub 格式的一些書籍，閲讀體驗感還不錯。&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;wechat_reader_to_readwise&quot; src=&quot;https://image.pseudoyu.com/images/wechat_reader_to_readwise.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;並且也很方便做一些筆記和標註，由於全平台同步，可以很方便地定期通過 Notepal 瀏覽器插件同步到 Readwise 中，效果也很好（上圖就是同步過來的），這樣也更有動力在碎片的一些時間裏閲讀一些書籍。&lt;/p&gt;&lt;h3 id=&quot;信息管理&quot;&gt;信息管理&lt;/h3&gt;&lt;p&gt;上一節我對信息獲取的渠道和系統進行了一些梳理，但這些依然還是零散的信息，如果要讓它們成為自己知識和思考的一部分，依然需要更多整理、消化與沉澱的過程。但涉及那麼多平台，搜索和整理並不方便，也比較難建立起信息之間的關聯，受正在讀的這本「Building
 a Second Brain」 啓發，我主要做了如下兩點：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;借鑑和改造了 P.A.R.A 作為自己的全局 Tag 分類系統&lt;/li&gt;&lt;li&gt;使用 Logseq 和 Heptabase 構建 Second Brain&lt;/li&gt;&lt;/ol&gt;&lt;h4 id=&quot;全局-tag-系統&quot;&gt;全局 Tag 系統&lt;/h4&gt;&lt;p&gt;&lt;img alt=&quot;pama_framework&quot; src=&quot;https://image.pseudoyu.com/images/pama_framework.jpg&quot; /&gt;&lt;/p&gt;&lt;p&gt;其中 P.A.R.A 是作者所提出的一個框架，分別是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Projects，正在做的項目相關&lt;/li&gt;&lt;li&gt;Areas，特定領域&lt;/li&gt;&lt;li&gt;Resources，未來可能會用到的資源&lt;/li&gt;&lt;li&gt;Archives，已完成的項目&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我在這四個的類型的基礎上增加了一個「Thoughts」，用於歸類我的一些隨機的想法。&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;logseq_tag_system&quot; src=&quot;https://image.pseudoyu.com/images/logseq_tag_system.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;我的實現思路是把這五個類型作為我的全局一級 Tag，而更具體的一些項目、領域、行業可作為二級、三級 Tag，例如 &lt;code&gt;Projects/writing/pkm&lt;/code&gt;，&lt;code&gt;Areas/blockchain&lt;/code&gt;，&lt;code&gt;Thoughts/weekly-review&lt;/code&gt; 等，Logseq 提供了很強大的多層 Tag 系統，會自動根據 &lt;code&gt;/&lt;/code&gt; 進行分層，便於檢索，分類也一目瞭然，我把之前現有的一些 Tag 修改後效果如下：&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;para_logseq_graph&quot; src=&quot;https://image.pseudoyu.com/images/para_logseq_graph.png&quot; /&gt;&lt;/p&gt;&lt;h4 id=&quot;基於-heptabase--logseq-的-second-brain&quot;&gt;基於 Heptabase + Logseq 的 Second Brain&lt;/h4&gt;&lt;p&gt;我之前一直都是使用 Logseq 作為自己的知識管理系統的，最近看到了 &lt;a href=&quot;https://twitter.com/WuPingJu&quot;&gt;P.J. Wu 吳秉儒&lt;/a&gt; 入職 Heptabase，對這一平台有了更多瞭解，於是將其納入自己的知識管理系統，和 Logseq 雙刀流共同構建自己的第二大腦。只要因循上文所説的 Tag 系統，兩個平台之間並不需要額外的關聯便可以各司其職地進行信息管理。&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;logseq_sync_readwise_sample_page&quot; src=&quot;https://image.pseudoyu.com/images/logseq_sync_readwise_sample_page.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;其中，Logseq
 作為兼具簡單任務管理和雙向鏈接的筆記系統，非常適合沉澱我上述的這些信息流和一些自己閲讀後產出的初步想法，如高亮、評論 notes 等，由於 
Logseq 有 Readwise 官方插件，可以很方便地將我在微信讀書和網絡文章中的高亮和筆記自動同步為 Logseq 的 
pages，並通過時間與 Journal 關聯，這樣我在每天/每週寫一些回顧時能很直觀地看到我過去的閲讀和想法，如上文就是我在閲讀 &lt;a href=&quot;https://twitter.com/MapleShadow&quot;&gt;楓影 Justin Yan&lt;/a&gt; 的這篇「&lt;a href=&quot;https://justinyan.me/post/5790&quot;&gt;每個人每天都只有 24 小時，希望我的選擇真的是我的選擇&lt;/a&gt;」時在他的網站上使用 Readwise Chrome 插件做的一些高亮和筆記，自動同步到了 Logseq 中，並根據我的配置打上了一些 tag 與屬性。&lt;/p&gt;&lt;p&gt;Logseq
 很適合做一些信息整理和回顧，但當我要對某個領域/概念進行調研、閲讀書籍整理脈絡或是輸出一篇博客文章時就顯得稍稍有些單薄，它的信息以 block
 為單位散落在每一天的 Journal 中，通過雙向鏈接或是 tag 
進行關聯跳轉，不方便進行一些直接的可視化關聯，也需要自己對在前期就對關鍵詞和 tag 做到足夠清晰，依然有一些心智負擔，所以這一部分我使用 
Heptabase 來進行管理。&lt;/p&gt;&lt;p&gt;Heptabase 可以看作是一個功能完善的白板筆記工具， &lt;a href=&quot;https://twitter.com/WuPingJu&quot;&gt;P.J. Wu 吳秉儒&lt;/a&gt; 有很多關於 Heptabase 的&lt;a href=&quot;https://pinchlime.com/tags/heptabase/&quot;&gt;高質量介紹文章&lt;/a&gt;，可以閲讀瞭解一下。簡單來説，它主要分為以下三個層級：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Map&lt;/li&gt;&lt;li&gt;Whiteboard&lt;/li&gt;&lt;li&gt;Card&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img alt=&quot;heptabase_map_overview&quot; src=&quot;https://image.pseudoyu.com/images/heptabase_map_overview.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;其中 Map 可以看作是我們 Second Brain 的整個空間，裏面可以裝各種白板，我建立了五個白板來作為第一層級 Tag。&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;heptabase_whiteboard_overview&quot; src=&quot;https://image.pseudoyu.com/images/heptabase_whiteboard_overview.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;卡片代表的是我們腦中的一個個想法或是一些獨立的信息點，我們可以通過卡片與卡片的關聯，白板與卡片之間的層級來組織我們知識。&lt;/p&gt;&lt;p&gt;當我在寫 Foundry 智能合約開發框架的教程時，我首先把一些零散的知識點或是實踐中遇到的一些經驗、教訓以一個個白板平鋪在 Foundy 的白板上（其為 &lt;code&gt;Projects&lt;/code&gt; - &lt;code&gt;Blockchain&lt;/code&gt; - &lt;code&gt;Smart Contract&lt;/code&gt; 下的第四級子白板），當某個知識點已經足夠多時，我會把白板之間再作一些 Section 分組、畫線關聯等。&lt;/p&gt;&lt;p&gt;其中它還提供了原生與
 Readwise 的集成，可以在右側邊欄直接選擇 Readwise 中我們對某些文章、書籍的一些 highlights 與 notes 
作為卡片直接引入到白板中，為它們建立一些關聯，很像我們人腦整理零散信息或是頭腦風暴的過程，完美符合了我的需求。&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;heptabase_chiangmai_trip&quot; src=&quot;https://image.pseudoyu.com/images/heptabase_chiangmai_trip.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;我目前還會用它做一些旅行攻略，把從小紅書和其他人的攻略帖中的信息點作為一個個 card 放在旅行規劃的白板中，然後再通過關聯和分組進行整理，很規整。&lt;/p&gt;&lt;h2 id=&quot;信息輸出&quot;&gt;信息輸出&lt;/h2&gt;&lt;p&gt;而我的輸出則主要包含以下幾個部分：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;筆記/觀點/日常&lt;/li&gt;&lt;li&gt;長文&lt;/li&gt;&lt;li&gt;主題研究&lt;/li&gt;&lt;li&gt;信息流&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&quot;筆記觀點日常&quot;&gt;筆記/觀點/日常&lt;/h3&gt;&lt;p&gt;&lt;img alt=&quot;yu_twitter_profile&quot; src=&quot;https://image.pseudoyu.com/images/yu_twitter_profile.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;其中 Twitter 「&lt;a href=&quot;https://twitter.com/pseudo_yu&quot;&gt;pseudo_yu&lt;/a&gt;」是我最主要的無結構化的信息輸出渠道，有時候是一些關於新技術的想法、關於工作的感受、與朋友相見的心情或是一張可愛的貓貓圖，都構成了我輸出，也對應着我輸入中那些隨機想法的快速產出。&lt;/p&gt;&lt;p&gt;其中，Twitter 上認識的朋友也給我帶來了很多溫暖。&lt;/p&gt;&lt;h3 id=&quot;長文&quot;&gt;長文&lt;/h3&gt;&lt;p&gt;&lt;img alt=&quot;yu_blog_homepage&quot; src=&quot;https://image.pseudoyu.com/images/yu_blog_homepage.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;而我最重要的輸出平台是個人博客「&lt;a href=&quot;https://www.pseudoyu.com/&quot;&gt;Pseudoyu&lt;/a&gt;」，目前週報是我的主要出口，偶爾也會有一些主題或專題性的關於技術或是效率工具的博文。&lt;/p&gt;&lt;h3 id=&quot;主題研究&quot;&gt;主題研究&lt;/h3&gt;&lt;p&gt;輸出一篇博文由於要考慮到受眾、言辭表述與完整性等，其實有一定的心智負擔，且週期較長，而我在進行特定領域的主題研究過程中大多把學習資料和一些
 Demo 放在 GitHub 倉庫中或是 Logseq 的某個筆記角落，有時候時間久了就得要重新學習了。而我現在更多放在 Heptabase 
的一個白板裏，能夠存放很多小的知識點並且在後續的創作中再進一步歸納和精煉，所以其實可以在初具框架後把這個白板共享出來，可以與更多人進行交流，也能對同樣在學習的朋友有所幫助。&lt;/p&gt;&lt;h3 id=&quot;信息流輸出&quot;&gt;信息流輸出&lt;/h3&gt;&lt;p&gt;&lt;img alt=&quot;yu_telegram_channel_screenshot&quot; src=&quot;https://image.pseudoyu.com/images/yu_telegram_channel_screenshot.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;我搭建了一個自己的 n8n 同步服務，採集我零散在各個平台的信息輸入輸出，並且還會將我對電影、書籍的觀後感以及自己其他一些所思所想發在自己的 Telegram 頻道「&lt;a href=&quot;https://t.me/pseudoyulife&quot;&gt;Yu’s Life&lt;/a&gt;」裏。也關注了一些頻道和羣組獲取一些資訊或是認識一些志同道合的人，偶爾會手動轉發，主要同步以下幾個平台：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Blog，現在更像是一種生活日誌。&lt;/li&gt;&lt;li&gt;YouTube，也是重度用戶了，看技術相關教程和數碼資訊比較多，偶爾也有很多好玩的內容。&lt;/li&gt;&lt;li&gt;Bilibili，主要保留了自己這麼多年一直在關注的一些博主，看旅拍比較多，只看動態不看首頁和熱門。&lt;/li&gt;&lt;li&gt;Pinboard，書籤和網站保存管理工具，重度依賴了。&lt;/li&gt;&lt;li&gt;Instapaper，管理稍後讀，主要是一些精品或是長文的保存。&lt;/li&gt;&lt;li&gt;GitHub，也是日常刷了，看一些好的項目，也用列表在管理 Star。&lt;/li&gt;&lt;li&gt;Spotify，好聽的歌會標註一下。&lt;/li&gt;&lt;li&gt;豆瓣，記錄自己的書籍、劇集、電影、動漫和遊戲，也是重度使用了，也在嘗試每一個看過/玩過的作品都寫一下自己的評價。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;數據備份&quot;&gt;數據備份&lt;/h2&gt;&lt;p&gt;雖然像是
 Twitter、Telegram 已經是比較大的平台，但畢竟是中心化的產物，再加上最近的各種風波，對於自己這些信息源的歸集總是不放心 
Telegram 作為最終站，尤其是我常常在刪消息時差點誤點刪除全部（奇怪的交互體驗），所以信息的同步導出部分也是很重要一環，我使用 
Crossbell 生態下的 &lt;a href=&quot;https://xlog.app/&quot;&gt;xLog&lt;/a&gt; 與 &lt;a href=&quot;https://xsync.app/&quot;&gt;xSync&lt;/a&gt; 服務進行我的博客與各平台信息的鏈上備份。&lt;/p&gt;&lt;h3 id=&quot;xlog&quot;&gt;xLog&lt;/h3&gt;&lt;p&gt;&lt;img alt=&quot;yu_xlog_profile&quot; src=&quot;https://image.pseudoyu.com/images/yu_xlog_profilea6f9af1d5482abc7.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;視覺效果和體驗感都不錯，且基於 Crossbell 地址能夠很方便地進行 follow 和評論，包含了 NFT 展示櫃、個人作品集等功能，這是我的 &lt;a href=&quot;https://xlog.pseudoyu.com/&quot;&gt;xLog 訪問地址&lt;/a&gt;，有興趣的朋友們也可以關注一下，不過目前出於定製化程度、各種歷史文章遷移路由問題、自己各項數據統計服務變動等考慮，還是更多作為一個同步分發渠道。&lt;/p&gt;&lt;h3 id=&quot;xsync&quot;&gt;xSync&lt;/h3&gt;&lt;p&gt;&lt;img alt=&quot;yu_sync_profile&quot; src=&quot;https://image.pseudoyu.com/images/yu_sync_profile.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;xSync 能夠同步 Twitter、Telegram Channel 等平台，不需要做任何侵入式改造就能把我的聚合頻道作再一次備份與存檔，後續可以通過 xChar 來查看自己的各項消息了，很完美的解決方案，這是我的 xChar 個人主頁: &lt;a href=&quot;https://xchar.app/pseudoyu&quot;&gt;xChar&lt;/a&gt;，也可以通過 &lt;a href=&quot;https://xfeed.app/u/pseudoyu&quot;&gt;xFeed&lt;/a&gt; 查看我的信息流。&lt;/p&gt;&lt;h2 id=&quot;總結&quot;&gt;總結&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;it is probably a mistake, in the end, to ask software to improve our thinking.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://www.theverge.com/authors/casey-newton&quot;&gt;Casey Newton&lt;/a&gt; 在最近的一篇「&lt;a href=&quot;https://www.theverge.com/2023/8/25/23845590/note-taking-apps-ai-chat-distractions-notion-roam-mem-obsidian&quot;&gt;Why note-taking apps don’t make us smarter&lt;/a&gt;」中如是説。確實，這些系統或是工具軟件其實終究只能輔助我們進行信息管理和輸出，並不能代替我們思考，但構建知識管理系統在取悅自己的同時，也能夠讓思考變得更加高效，悅己才能達人，從而產出更有價值的輸出。&lt;/p&gt;&lt;p&gt;希望這篇文章能夠對大家有所幫助。&lt;/p&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻牆技術博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;訂閲地址及社交帳號&lt;/a&gt;&lt;/div&gt;</description>
                <link>https://www.chinagfw.org/2023/09/heptabase-logseq-readwise.html</link>
                <author>noreply@blogger.com (pompei)</author>
                <thr:total>0</thr:total>
            </item>
            <item>
                <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-9076859839982080284</guid>
                <pubDate>Mon, 04 Sep 2023 07:59:00 +0000</pubDate>
                <atom:updated>2023-09-06T10:55:00.946+08:00</atom:updated>
                <title>沙特男子因推特言論被判死刑，這是對網絡批評者的最嚴厲判決</title>
                <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/83d19bb3-f1a0-40f8-96be-3448a99d12c8_image_image.png&quot;&gt;&lt;/div&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/83d19bb3-f1a0-40f8-96be-3448a99d12c8_image_image.png&quot;&gt;&lt;/div&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/83d19bb3-f1a0-40f8-96be-3448a99d12c8_image_image.png&quot;&gt;&lt;/div&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/83d19bb3-f1a0-40f8-96be-3448a99d12c8_image_image.png&quot;&gt;&lt;/div&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/83d19bb3-f1a0-40f8-96be-3448a99d12c8_image_image.png&quot;&gt;&lt;/div&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/83d19bb3-f1a0-40f8-96be-3448a99d12c8_image_image.png&quot;&gt;&lt;/div&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/83d19bb3-f1a0-40f8-96be-3448a99d12c8_image_image.png&quot;&gt;&lt;/div&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/83d19bb3-f1a0-40f8-96be-3448a99d12c8_image_image.png&quot;&gt;via:&lt;a href=&quot;https://here.news/post/64f539b120d455ec73d57d93&quot;&gt; https://here.news/post/64f539b120d455ec73d57d93&lt;/a&gt;&lt;br /&gt;&lt;/div&gt;&lt;p&gt;根據人權倡導者和他的家人的説法，沙特阿拉伯一名退休教師最近因推特上批評該國領導層的言論而被判死刑。&lt;/p&gt;&lt;p&gt;現年 50 多歲的穆罕默德·阿爾加姆迪（Mohammad
 
Alghamdi）的判決是沙特阿拉伯對社交媒體用戶日益加強的打擊行動中的最新一例。雖然其他人因推特和在線批評政府而被判服刑 20 至 45 年，但阿爾加姆迪似乎是第一個僅憑其在推特（前身為 Twitter）和 YouTube 上的帖子而被判死刑的人。&lt;/p&gt;&lt;p&gt;對批評者的廣泛打擊行動發生在沙特阿拉伯王儲穆罕默德·本·薩勒曼（Mohammed
 bin 
Salman）推動敏感改革的同時，這些改革已經徹底改變了該國的生活，並放寬了許多限制。這些全面的改革，如允許婦女開車，結束公共場所的嚴格性別隔離規定，以及向娛樂和旅遊開放國家，與同樣全面的異議浪潮同時發生。&lt;/p&gt;&lt;p&gt;居住在麥加的七個孩子的父親阿爾加姆迪在推特上的兩個匿名賬戶之間只有 10 個關注者。根據人權觀察組織的説法，他在這個社交媒體網站上抨擊所謂的政府腐敗，但主要是轉發更受歡迎的政府批評者的帖子。&lt;/p&gt;&lt;h2&gt;推特賬戶受到打擊&lt;/h2&gt;&lt;p&gt;X 平台是沙特阿拉伯最受歡迎的社交媒體網站之一。沙特人經常在這裏發泄他們對政府政策的不滿。&lt;/p&gt;&lt;p&gt;ALQST 人權組織的監測和倡導主任麗娜·阿爾哈特盧爾（Lina Alhathloul）表示，儘管用戶因推文而受到打擊和拘留，但該平台仍然是沙特人可以表達觀點的最後一片空地，即使是匿名的。&lt;/p&gt;&lt;p&gt;她説：「這是人們實際上討論社會問題的最後一個空間。」 「在現實生活中，每個人都自我審查。他們知道自己處於危險之中，但人們認為在推特上，尤其是在匿名賬戶上，他們可能是安全的。」&lt;/p&gt;&lt;p&gt;但是，即使是匿名賬戶也無法保護用戶免受沙特起訴。目前尚不清楚沙特當局如何能夠在 X 上驗證阿爾加姆迪的身份。&lt;/p&gt;&lt;p&gt;在其他案件中，沙特用戶的身份似乎已經泄露，使他們面臨逮捕和長期監禁的風險。美國的一份聯邦調查和聯邦調查局的投訴導致去年一名前推特員工被判犯有未註冊為沙特阿拉伯代理人的罪名。他還因收受賄賂以交出沙特政府批評者的機密用戶數據而被判有罪。&lt;/p&gt;&lt;p&gt;阿爾哈特盧爾表示，所有這些案件傳遞出的信息是明確的。&lt;/p&gt;&lt;p&gt;她説：「無論你做什麼，無論你是誰，你都不安全。你只需要讓自己閉嘴。」&lt;/p&gt;&lt;h2&gt;領導層遭到批評引發反恐法&lt;/h2&gt;&lt;p&gt;阿爾加姆迪的案件之所以引人注目，是因為他在 X 上的賬戶顯然影響範圍很小，與他所受到的嚴厲判決形成鮮明對比。他可以對判決提出上訴。&lt;/p&gt;&lt;p&gt;人權倡導者和人權觀察組織審查的法庭文件顯示，阿爾加姆迪於 7 月 10 日根據該國措辭含糊的反恐法被判死刑，原因是他利用自己的社交媒體賬戶犯下了侮辱沙特國王或王儲以及支持恐怖主義意識形態等罪行。&lt;/p&gt;&lt;p&gt;他被利雅得的專門刑事法院判有罪。該法院成立於 15 年前，用於審理恐怖主義案件，但也被用於起訴政府批評者。&lt;/p&gt;&lt;p&gt;檢方在這些案件中經常辯稱，侮辱或批評沙特阿拉伯領導層對國家安全構成威脅，可能破壞社會穩定。許多這些審判都是在閉門會議上進行的。&lt;/p&gt;&lt;p&gt;沙特政府尚未迴應 NPR 關於阿爾加姆迪案的請求。然而，當官員在公共論壇上被問及沙特阿拉伯的法律和司法體系時，他們經常表示法院是獨立的，或者認為整體改革需要時間。&lt;/p&gt;&lt;h2&gt;一個被通緝的兄弟&lt;/h2&gt;&lt;p&gt;阿爾加姆迪的兄弟賽義德·阿爾加姆迪（Saeed
 
Alghamdi）認為，對他的年輕兄弟的起訴實際上是為了針對他。賽義德·阿爾加姆迪是一位著名的伊斯蘭學者，與該國最著名的被監禁批評者有聯繫。他於 2013 年離開沙特阿拉伯，並創辦了沙納德（SANAD）沙特人權組織。他現在在英國流亡。&lt;/p&gt;&lt;p&gt;他説，沙特當局試圖説服他回到王國，承諾如果他回去並停止在國外進行活動，他將獲得金錢和美好的生活。&lt;/p&gt;&lt;p&gt;他説：「他們想要針對我個人，因為他們曾多次試圖説服我回國。」 「當我拒絕時，他們就採取了這種方式。這是我對這種情況的看法。」&lt;/p&gt;&lt;p&gt;儘管無法獨立驗證他的説法，但已知有對海外異見人士家屬的報復行動。&lt;/p&gt;&lt;p&gt;賽義德·阿爾加姆迪説：「只要情況保持這樣，我絕對不打算返回（沙特阿拉伯）。」&lt;/p&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻牆技術博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;訂閲地址及社交帳號&lt;/a&gt;&lt;/div&gt;</description>
                <link>https://www.chinagfw.org/2023/09/blog-post_4.html</link>
                <author>noreply@blogger.com (pompei)</author>
                <thr:total>0</thr:total>
            </item>
            <item>
                <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-5887901843693319375</guid>
                <pubDate>Mon, 04 Sep 2023 03:28:00 +0000</pubDate>
                <atom:updated>2023-09-04T11:29:49.548+08:00</atom:updated>
                <title>蘋果終止 CSAM 照片掃描，引發 HeatInitiative 運動兒童安全爭議</title>
                <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;p&gt;via: &lt;a href=&quot;https://here.news/post/64f4001020d455ec73d542a6&quot;&gt;https://here.news/post/64f4001020d455ec73d542a6&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;&lt;p&gt;兒童安全組織 Heat Initiative 計劃發起一項運動，敦促蘋果在兒童性虐待材料掃描和用戶舉報方面採取行動。該公司在週四發表了一份罕見而詳細的迴應。&lt;/p&gt;&lt;p&gt;12 月份，蘋果表示將終止設計一個保護隱私的 iCloud 照片掃描工具，用於檢測平台上的兒童性虐待材料（CSAM）。該項目最初於 2021 年 8 月宣佈，自從開始就備受爭議。蘋果最初在 2021 年 9 月暫停該項目，以迴應數字權利組織和研究人員的擔憂，他們認為這樣的工具不可避免地會被濫用和利用，從而危及所有 iCloud 用戶的隱私和安全。本週，一個名為 Heat
 
Initiative 的新的兒童安全組織告訴蘋果，他們正在組織一場運動，要求蘋果「檢測、舉報和刪除」iCloud 中的兒童性虐待材料，併為用戶提供更多舉報 CSAM 的工具。&lt;/p&gt;&lt;p&gt;今天，蘋果罕見地迴應了 Heat
 Initiative，概述了放棄開發 iCloud 
CSAM 掃描功能的原因，並轉而專注於一套稱為通信安全功能的設備上工具和資源。蘋果與 WIRED 分享了公司對 Heat 
Initiative 的迴應，這不僅提供了蘋果轉向通信安全的理由，還展示了蘋果對創建繞過用戶隱私保護（如加密）的機制的更廣泛觀點。這一立場與加密辯論更廣泛相關，特別是在英國等國家考慮通過法律要求科技公司能夠訪問用戶數據以配合執法請求的情況下。&lt;/p&gt;&lt;p&gt;蘋果的用戶隱私和兒童安全總監 Erik
 Neuenschwander 在公司對 Heat 
Initiative 的迴應中寫道：「兒童性虐待材料是令人憎惡的，我們致力於打破使兒童易受其害的脅迫和影響鏈條。」他補充道，儘管與一系列隱私和安全研究人員、數字權利組織和兒童安全倡導者進行了合作，但公司得出結論，無法繼續開發 CSAM 掃描機制，即使是專門為了保護隱私而構建的機制。&lt;/p&gt;&lt;p&gt;Neuenschwander 寫道：「掃描每個用戶的私人存儲的 iCloud 數據將為數據竊賊尋找和利用提供新的威脅向量。這也會引發潛在的滑坡效應。例如，掃描某一類型的內容會為大規模監視打開大門，並可能導致希望搜索其他加密消息系統的內容類型。」&lt;/p&gt;&lt;p&gt;Heat
 Initiative 由 Sarah 
Gardner 領導，她曾是非營利組織 Thorn 的外部事務副總裁，該組織致力於利用新技術打擊在線兒童剝削和性販賣。2021 年，Thorn 稱讚蘋果開發 iCloud
 CSAM 掃描功能的計劃。Gardner 在 8 月 30 日星期三給首席執行官 Tim Cook 的一封電子郵件中寫道，Heat 
Initiative 對蘋果終止該功能的決定感到「失望」，這封電子郵件也與 WIRED 分享了。&lt;/p&gt;&lt;p&gt;Gardner 在給 Cook 的郵件中寫道，蘋果的照片掃描工具「不僅將蘋果定位為全球用戶隱私的領導者，還承諾從 iCloud 中清除數百萬張兒童性虐待圖像和視頻。……兒童性虐待是一個難以討論的問題，這就是為什麼它會被沉默和被遺忘。我們在這裏確保這種情況不會發生。」&lt;/p&gt;&lt;p&gt;蘋果堅持認為，即使是自己出於善意的設計，在實踐中也無法得到充分的保護，而對於消息、FaceTime、AirDrop 和照片選擇器等功能的設備上的裸體檢測是更安全的替代方案。蘋果還開始為其通信安全功能提供應用程序編程接口（API），以便第三方開發人員可以將其整合到其應用程序中。蘋果表示，通信平台 Discord 正在整合這些功能，並且應用程序開發者普遍熱衷於採用這些功能。&lt;/p&gt;&lt;p&gt;Neuenschwander 在給 Heat Initiative 的迴應中寫道：「我們決定不繼續推進幾年前關於 iCloud 照片的混合客戶端-服務器方法的 CSAM 檢測提案。我們得出結論，從實際上來説，這是不可行的，因為它最終會危及我們用戶的安全和隱私。」&lt;/p&gt;&lt;p&gt;對於 Heat
 
Initiative 要求蘋果為用戶創建 CSAM 舉報機制，該公司告訴 WIRED，它的重點是將其脆弱或受害用戶直接與當地資源和執法機構聯繫，以協助他們，而不是將蘋果定位為處理報告的中間人。該公司表示，為交互式平台（如社交網絡）提供這種中間服務可能是有意義的。&lt;/p&gt;&lt;p&gt;保護兒童免受在線性虐待的需求是緊迫的，然而，隨着這些關切與更廣泛的加密辯論交織在一起，蘋果拒絕實施數據掃描的決心將繼續受到考驗。&lt;/p&gt;&lt;p&gt;閲讀 Heat Initiative 和蘋果之間的完整交流，請參見下文。為了保護髮件人和收件人的隱私，WIRED 已經刪除了敏感個人信息：&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/jpeg&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/72971025-d217-4396-9b51-d19ada1362bf_image_apple-letter-to-heat-initiative_page-0003.jpg&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/72971025-d217-4396-9b51-d19ada1362bf_image_apple-letter-to-heat-initiative_page-0003.jpg&quot; /&gt;&lt;/div&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/jpeg&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/9428dc07-dc4b-4bb4-b72f-7109c0aeccda_image_apple-letter-to-heat-initiative_page-0002.jpg&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/9428dc07-dc4b-4bb4-b72f-7109c0aeccda_image_apple-letter-to-heat-initiative_page-0002.jpg&quot; /&gt;&lt;/div&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/jpeg&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/b930eba2-3835-4450-ad35-d51ea4836b7c_image_apple-letter-to-heat-initiative_page-0001.jpg&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/b930eba2-3835-4450-ad35-d51ea4836b7c_image_apple-letter-to-heat-initiative_page-0001.jpg&quot; /&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;https://www.wired.com/story/apple-csam-scanning-heat-initiative-letter/&quot; target=&quot;_blank&quot;&gt;https://www.wired.com/story/apple-csam-scanning-heat-initiative-letter/&lt;/a&gt;&lt;/p&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻牆技術博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;訂閲地址及社交帳號&lt;/a&gt;&lt;/div&gt;</description>
                <link>https://www.chinagfw.org/2023/09/csamheatinitiative.html</link>
                <author>noreply@blogger.com (pompei)</author>
                <thr:total>0</thr:total>
            </item>
            <item>
                <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-8685891923325635596</guid>
                <pubDate>Fri, 01 Sep 2023 12:28:00 +0000</pubDate>
                <atom:updated>2023-09-01T20:28:36.795+08:00</atom:updated>
                <title>&quot;請別公開&quot;: 加拿大公民實驗室公開搜狗輸入法安全漏洞和隱私侵犯的完整報告</title>
                <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;p&gt;&lt;i&gt;via &lt;a href=&quot;https://here.news/post/3507b25e-b8cb-4b34-b58a-ee6cd9ce791d/%E8%AF%B7%E5%88%A5%E5%85%AC%E5%BC%80-%E5%8A%A0%E6%8B%BF%E5%A4%A7%E5%85%AC%E6%B0%91%E5%AF%A6%E9%A9%97%E5%AE%A4%E5%85%AC%E5%B8%83%E6%90%9C%E7%8B%97%E8%BC%B8%E5%85%A5%E6%B3%95%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%92%8C%E9%9A%B1%E7%A7%81%E4%BE%B5%E7%8A%AF%E7%9A%84%E5%AE%8C%E6%95%B4%E5%A0%B1%E5%91%8A&quot;&gt;here.news&lt;/a&gt; &lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;搜狗輸入法加密中的漏洞使按鍵暴露於網絡竊聽&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;作者：Jeffrey Knockel, Zoë Reichert, and Mona Wang&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;日期：2023 年 8 月 9 日&lt;/b&gt;&lt;/p&gt;&lt;p&gt;我們敦促搜狗輸入法用戶立即更新到最新版本的應用程序（至少是 Windows 版本 13.7，Android 版本 11.26 或 iOS 版本 11.25）。&lt;/p&gt;&lt;p&gt;&lt;b&gt;主要發現：&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;我們分析了騰訊的搜狗輸入法，該輸入法是中國最受歡迎的輸入法，擁有超過 4.5 億的月活躍用戶。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通過分析軟件的 Windows、Android 和 iOS 版本，我們發現了搜狗輸入法自定義的「EncryptWall」加密系統以及它對敏感數據進行加密的漏洞。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;我們發現，包含用戶按鍵等敏感數據的網絡傳輸可以被網絡竊聽者解密，揭示用戶的實時輸入內容。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;我們已將這些漏洞披露給搜狗開發人員，並且他們已經發布了修復的軟件版本（截至 2023 年 7 月 20 日，Windows 版本 13.7，Android 版本 11.26 和 iOS 版本 11.25）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;這些發現強調了中國軟件開發人員使用得到良好支持的加密實現（如 TLS）的重要性，而不是試圖自行設計加密系統。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;簡介：&lt;/h2&gt;&lt;p&gt;與輸入少量字母的字母語言相比，輸入象形文字語言（如中文）更加困難。中文有數以萬計的字符，使用頻率各不相同，無法全部放在一個鍵盤上。沒有標準的中文輸入方法，但隨着現代技術的發展，出現了許多互補的方法。最流行的是拼音輸入法，基於漢字的拼音羅馬化。注音是另一種常用的音標輸入法，而形狀或筆畫輸入法（如倉頡或五筆）也常被使用。現代輸入法還支持通過手寫、語音識別、照片或 OCR 輸入字符。&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/e43f0ba9-b7e0-4802-a428-8b51428e3713_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/e43f0ba9-b7e0-4802-a428-8b51428e3713_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;在本報告中，我們分析了騰訊的搜狗輸入法，這是中國最受歡迎的輸入法，擁有超過 4.55 億的月活躍用戶，並且有適用於 Windows、Android 和 iOS 等多個平台的應用程序版本。搜狗輸入法佔據了中國輸入法用戶的 70%，其次是訊飛和百度的產品。麥咖啡在 2015 年的分析中曾觀察到該應用程序的 Windows 版本在不加密的情況下傳輸設備標識符，但沒有分析該應用程序的加密系統傳輸的數據的安全性。&lt;/p&gt;&lt;p&gt;我們分析了搜狗輸入法的 Windows、Android 和 iOS 版本，發現該應用程序的自定義加密系統存在嚴重的漏洞，使得諸如用戶按鍵等敏感數據可以被網絡竊聽者解密。我們發現的這些漏洞不僅限於中國的中文作者，根據市場研究估計，訪問該應用程序網站的美國用戶佔比超過 3.3%，台灣佔近 1.8%，日本佔超過 1.5%。&lt;/p&gt;&lt;p&gt;本報告的其餘部分結構如下。在「方法論」部分，我們概述了我們用於分析搜狗輸入法的逆向工程工具和技術。在「發現」部分，我們描述了搜狗輸入法的自定義加密系統的工作原理，我們發現的漏洞以及受影響的數據傳輸示例。在「緩解措施」和「協調披露」部分，我們討論了搜狗如何修復我們報告的漏洞以及我們如何向他們報告漏洞。最後，在「討論」部分，我們反思了這些漏洞對中國應用程序生態系統中的系統性問題的影響。&lt;/p&gt;&lt;h2&gt;方法論：&lt;/h2&gt;&lt;p&gt;我們分析了搜狗輸入法的 Windows、Android 和 iOS 版本。為了獲取我們分析的版本，我們在 2023 年 5 月從產品網站下載了 Windows 和 Android 版本的最新版本（儘管 Android 版本截至 2021 年 6 月 3 日仍然可用，但目前在 Google
 Play 商店中不可用）。我們從 Apple 的 App Store 獲取了 iOS 版本（有關分析版本的詳細信息，請參見表 1）。&lt;/p&gt;&lt;p&gt;平台，搜狗輸入法版本，設備&lt;/p&gt;&lt;p&gt;Windows 7 SP1 13.4 虛擬機&lt;/p&gt;&lt;p&gt;Android 9 11.20 Google Pixel 2&lt;/p&gt;&lt;p&gt;iOS 14.8 11.21 iPhone SE 2 代&lt;/p&gt;&lt;p&gt;表 1：分析的搜狗輸入法版本的詳細信息。&lt;/p&gt;&lt;p&gt;我們使用靜態和動態分析方法分析了這些版本的搜狗輸入法。我們使用 jadx 對 Dalvik 字節碼進行靜態分析和反編譯，使用 IDA
 Pro 對本機機器代碼進行靜態分析和反編譯。我們使用 frida 對 Android 和 iOS 版本進行動態分析，使用 IDA 
Pro 對 Windows 版本進行動態分析。最後，我們使用 Wireshark 和 mitmproxy 進行網絡流量捕獲和分析。&lt;/p&gt;&lt;h2&gt;發現：&lt;/h2&gt;&lt;p&gt;我們發現搜狗輸入法的每個版本都使用一個名為「EncryptWall」的加密系統對敏感數據進行加密。我們發現 Windows 和 Android 版本的搜狗輸入法在這個加密系統中存在漏洞，包括對 CBC 填充預言攻擊的漏洞，這使得網絡竊聽者可以恢復加密的網絡傳輸的明文，揭示包括用戶輸入的內容在內的敏感信息（請參見表 2 以瞭解受影響的版本的詳細信息）。在 Android 版本的情況下，我們還能夠恢復用於加密流量的對稱加密密鑰的第二半部分。我們還發現了影響 iOS 版本的加密的漏洞，但我們目前不知道如何利用我們分析的版本中的這些漏洞。&lt;/p&gt;&lt;p&gt;平台，是否可利用？&lt;/p&gt;&lt;p&gt;Windows 是&lt;/p&gt;&lt;p&gt;Android 是&lt;/p&gt;&lt;p&gt;iOS 沒有已知的利用方法&lt;/p&gt;&lt;p&gt;表 2：搜狗輸入法受影響的版本摘要。&lt;/p&gt;&lt;p&gt;在本節的其餘部分，我們詳細介紹了對搜狗的 EncryptWall 加密系統的攻擊。我們首先介紹加密系統的背景，然後詳細説明我們對其進行的攻擊，最後分析我們的攻擊如何適用於我們分析的三個平台，以適應 EncryptWall 系統在不同平台上的實現差異。&lt;/p&gt;&lt;h2&gt;搜狗的 EncryptWall&lt;/h2&gt;&lt;p&gt;我們在本報告中討論的攻擊涉及我們在搜狗的「EncryptWall」加密系統中發現的漏洞，該系統似乎旨在通過明文 HTTP
 POST 請求中的加密字段，將敏感流量安全地隧道傳輸到未加密的搜狗 HTTP 
API 端點。在本報告中，我們將外部的明文 HTTP 請求稱為 EncryptWall 請求，而每個 EncryptWall 請求封裝了隧道請求的單個加密請求。儘管在我們分析的三個平台上的實現存在差異，但我們發現該系統的工作原理通常如下：&lt;/p&gt;&lt;p&gt;EncryptWall 請求作為 HTTP
 POST 請求發送到搜狗 EncryptWall 
API 端點，其中包含至少五個 HTTP 表單字段，指定用於加密隧道請求以及加密隧道數據的加密參數。兩個表單字段與指定用於加密 EncryptWall 請求中的其他字段的密鑰和初始化向量（IV）有關：&lt;/p&gt;&lt;p&gt;「K」 - 使用 PKCS#v1.5 填充，使用硬編碼的 1024 位公共 RSA 密鑰對 256 位 AES 密鑰 k 進行加密的 base64 編碼；每個請求隨機生成 k&lt;/p&gt;&lt;p&gt;「V」 - 使用硬編碼的 128 位初始化向量 v 進行加密的 base64 編碼；每個請求隨機生成 v&lt;/p&gt;&lt;p&gt;這些字段中的三個字段分別進行 zlib 壓縮、使用 k 和 v 進行加密，並根據以下偽代碼進行 base64 編碼：&lt;/p&gt;&lt;p&gt;ᴇɴᴄʀʏᴘᴛ(data) = base64_encode(AES_cbc_encrypt(zlib_compress(data, wbits=-15), k, v))&lt;/p&gt;&lt;p&gt;我們一直觀察到以這種方式加密的三個字段如下：&lt;/p&gt;&lt;p&gt;「U」 - ᴇɴᴄʀʏᴘᴛ(隧道 HTTP 請求的 URL)&lt;/p&gt;&lt;p&gt;「G」 - ᴇɴᴄʀʏᴘᴛ(隧道 HTTP 請求的 GET 參數，以查詢字符串的形式)&lt;/p&gt;&lt;p&gt;「P」 - ᴇɴᴄʀʏᴘᴛ(隧道 HTTP 請求的原始 POST 數據，如果有的話)&lt;/p&gt;&lt;p&gt;根據分析的平台和正在進行的請求類型，EncryptWall 請求可能通過加密的 HTTPS 或明文 HTTP 發送。在使用 HTTPS 發送 EncryptWall 請求的情況下，我們認為這些請求在網絡竊聽方面是安全的，儘管 EncryptWall 請求的底層加密可能存在缺陷，HTTPS 的 TLS 加密還可以提供額外的保護。因此，我們在本節其餘部分的發現僅涉及我們觀察到的通過不受 HTTPS 額外保護的明文 HTTP 發送的 EncryptWall 請求。&lt;/p&gt;&lt;h2&gt;攻擊&lt;/h2&gt;&lt;p&gt;我們發現 EncryptWall 系統容易受到 CBC 填充預言攻擊的漏洞，這是一種最初於 2002 年發表的攻擊類型，影響使用密碼塊鏈接（CBC）塊密碼模式和 PKCS#7 填充的塊密碼。在這種攻擊中，可以逐字節地恢復消息的明文，每個字節最多使用 256 個消息。我們不打算在此完全重述此攻擊的工作原理，該攻擊依賴於一種稱為填充預言的特定類型的邊信道，該邊信道明確地顯示解密後的接收到的密文是否正確填充。我們在 EncryptWall 系統中識別到了這樣的預言，我們發現在「U」表單字段中發送的密文在包含錯誤填充時返回 HTTP
 
400 狀態碼，而在正確填充時，根據解密後的 URL 是否是有效 URL，返回 200 狀態碼或 500 狀態碼。通過進行 CBC 填充預言攻擊，這個填充預言允許我們不僅揭示「U」的整個明文，還可以揭示「G」和「P」的明文，因為它們使用相同的密鑰和初始化向量。因此，通過使用這個填充預言，我們可以解密整個 EncryptWall 請求的內容。&lt;/p&gt;&lt;p&gt;在本節的其餘部分，我們將這個攻擊適應到 Windows 和 Android 平台上 EncryptWall 系統實現的所有偏差。儘管我們目前無法利用我們在 iOS 版本中發現的問題，但我們還是詳細説明瞭 EncryptWall 系統中的問題。&lt;/p&gt;&lt;h2&gt;Windows 版本 13.4&lt;/h2&gt;&lt;p&gt;我們分析的 Windows 版本中實現的 EncryptWall 系統在一個細節上與上述基本實現有所偏差，即 IV
 
v 不是公開的，而是以與 AES 密鑰 k 相同的方式進行加密。由於這種差異，v 不是立即可知的，這可能會帶來兩個潛在的問題：首先，在 CBC 填充預言攻擊中，必須知道 IV 才能解密第一個明文塊。其次，由於在加密之前，EncryptWall 請求中的隧道數據被壓縮，第一個明文塊對於解壓縮其餘塊來説非常重要。&lt;/p&gt;&lt;p&gt;然而，我們開發了一種方法來恢復 v，該方法利用 v 被重用以加密多個明文的事實。具體而言，由於「U」的 URL 很容易預測，並且始終只有少數可能的端點之一，我們可以通過在第一個密文塊「U」上執行 CBC 填充預言攻擊來恢復 v，假設初始 IV 為全零。這種攻擊的結果將是 URL 的第一個明文塊與 v 異或的結果。然後，我們將此結果與我們對 URL 的第一個明文塊的預測進行異或，得到 v。一旦我們恢復了 v，我們就可以像往常一樣對「G」和「P」進行 CBC 填充預言攻擊。&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/b6a2e2c5-3cec-4e75-acb0-95562777cc6b_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/b6a2e2c5-3cec-4e75-acb0-95562777cc6b_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;作為此攻擊易受攻擊的數據的一個示例，我們發現對於發送到 「&lt;a href=&quot;http://get.sogou.com/q」的 EncryptWall 請求，當「U」為「http://master-proxy.shouji.sogou.com/swc.php」&quot; target=&quot;_blank&quot;&gt;http://get.sogou.com/q」的 EncryptWall 請求，當「U」為「http://master-proxy.shouji.sogou.com/swc.php」&lt;/a&gt;
 
時，「G」包含與搜狗軟件版本相關的版本信息，「P」是一個包含最近輸入的按鍵的 protobuf 緩衝區（請參見圖 2 的示例）。我們認為這些傳輸與基於雲的自動完成服務有關。由於這些傳輸容易受到我們的攻擊，搜狗輸入法用戶的按鍵可以被網絡竊聽者解密，從而告知竊聽者用戶實時輸入的內容。&lt;/p&gt;&lt;h2&gt;Android 版本 11.20&lt;/h2&gt;&lt;p&gt;我們分析的 Android 版本採用了 EncryptWall 的基本實現，但增加了四個額外的表單字段：「R」、「S」、「E」和「F」。字段「R」傳輸另一個 32 字節的密鑰 r。值得注意的是，r 的每個字節都是從 ASCII 大寫字母和數字的 36 個字符集中隨機選擇的。因此，與 25632
 = 2256 位熵相比，該密鑰只有 3632 &amp;lt; 
2166 位熵。此外，與 k 不同，r 不是每個請求隨機生成的，而是僅在應用程序生命週期內生成一次，並且緩存在 C 靜態內存中。字段「R」然後作為 k ⊕ 
r 的 base64 編碼進行傳輸。請注意，由於這種傳輸，k 的熵也降低到 3632 &amp;lt; 
2166 位熵。參數 k、r 和 v 用於根據以下偽代碼對「S」、「E」和「F」進行編碼和加密：&lt;/p&gt;&lt;p&gt;ᴇɴᴄʀʏᴘᴛSEF(data) = base64Encode(k ⊕ AES_cbc_encrypt(data, r, 「EscowDorisCarlos」))&lt;/p&gt;&lt;p&gt;請注意，與典型的ᴇɴᴄʀʏᴘᴛ() 函數不同，ᴇɴᴄʀʏᴘᴛSEF() 函數具有硬編碼的 IV「EscowDorisCarlos」且不進行 zlib 壓縮。此外，儘管ᴇɴᴄʀʏᴘᴛSEF() 使用 r 而不是 k 作為 AES 密鑰，但 k 還與 AES 加密結果進行異或。每個字段「S」、「E」和「F」都根據ᴇɴᴄʀʏᴘᴛSEF() 函數進行單獨加密和編碼。&lt;/p&gt;&lt;p&gt;儘管使用了這種修改後的加密算法，我們仍然能夠成功攻擊這些字段的加密。我們能夠應用 CBC 填充預言攻擊，使用搜狗對「E」表單字段的處理來替代我們通常使用的「U」表單字段，但有以下兩個適應：&lt;/p&gt;&lt;p&gt;首先，由於密鑰 k 是 32 字節，而 AES 塊是 16 字節，當 AES 塊密碼的輸出與 k 進行異或時，我們可以將輸出視為與兩個密鑰 k1 和 k2 進行異或的結果，其中 k1 與奇數塊（1、3、…）進行異或，k2 與偶數塊（2、4、…）進行異或（請參見圖 3 的示例）。因此，在進行 CBC 填充預言攻擊時，我們必須確保我們攻擊的塊在原始塊為偶數時處於偶數位置，原始塊為奇數時處於奇數位置。換句話説，我們必須保持塊位置的奇偶性。&lt;/p&gt;&lt;p&gt;其次，由於 IV 是硬編碼的，我們無法修改它，因此，類似於 Windows 版本，CBC 填充預言攻擊無法在沒有適應的情況下恢復第一個明文塊 p1。換句話説，我們發現 p1 對於「S」、「E」和「F」字段仍然是可恢復的，通過以下步驟：&lt;/p&gt;&lt;p&gt;我們將固定的 IV「EscowDorisCarlos」視為第一個密文塊 c1 之前的一個密文塊 c0，並將其發送給預言。由於 c1 必須位於奇數位置，我們確保 c0 位於偶數位置。因此，在攻擊過程中，預言在解密第一個密文塊 c1 時首先將 c0 與 k2 進行異或。&lt;/p&gt;&lt;p&gt;結果，解密 c1 會產生 p1&#39;，它等於 p1 ⊕ 「EscowDorisCarlos」 ⊕ c0 ⊕ k2。&lt;/p&gt;&lt;p&gt;由於（根據步驟 1）c0 = 「EscowDorisCarlos」，p1&#39;僅僅是 p1 ⊕ k2。因此，通過應用步驟 1-3，我們恢復了「S」、「E」和「F」字段的 p1 ⊕ k2。&lt;/p&gt;&lt;p&gt;此外，我們還發現「S」字段的第一個明文塊的內容非常可預測。具體而言，它們包含正在使用的搜狗版本，這已經作為 EncryptWall 請求的 HTTP 頭明文傳輸，因此任何網絡竊聽者都可以獲得這些信息。因此，在「S」字段的情況下，我們知道 p1。在步驟 3 中，我們恢復了「S」字段的 p1
 ⊕ k2。由於我們知道 p1 和 p1 ⊕ k2，因此我們已經恢復了 k2。&lt;/p&gt;&lt;p&gt;一旦我們知道了 k2，它對於「E」和「F」字段也是相同的值，因為（根據步驟 3）我們知道了「E」和「F」字段的 p1 ⊕ k2，我們也可以恢復「E」和「F」的 p1。&lt;/p&gt;&lt;p&gt;此外，我們現在還可以恢復 r 的第二半部分 r2，這對於攻擊者很有幫助，因為我們對 r2 的瞭解可以在隨後的請求中更容易地恢復 k2。請記住，「R」字段對 k
 ⊕ 
r 進行編碼。因此，在恢復 k2 後，我們可以通過將「R」字段的編碼內容的第二半部分與 k2 進行異或來恢復 r2。一旦恢復了 r2，由於 r 與 k 不同，每個應用程序生命週期只生成一次，我們可以更容易地通過將「R」的第二半部分與 r2 進行異或來在將來的請求中恢復 k2，從而使攻擊更容易進行。此外，這也降低了 r 的熵，因此也降低了 k 的熵，使其為 3616
 &amp;lt; 283 位。&lt;/p&gt;&lt;p&gt;作為此攻擊易受攻擊的數據的另一個示例，我們觀察到對於發送到「&lt;a href=&quot;http://v2.get.sogou.com/q」的 EncryptWall 請求，當「U」為「http://swc.pinyin.sogou.com/swc.php」&quot; target=&quot;_blank&quot;&gt;http://v2.get.sogou.com/q」的 EncryptWall 請求，當「U」為「http://swc.pinyin.sogou.com/swc.php」&lt;/a&gt;
 
時，「P」是一個包含當前輸入字段中的所有文本以及文本所在應用程序的包名的 protobuf 緩衝區（請參見圖 4 的示例）。這些傳輸發生在按下放大鏡圖標時，我們認為這些傳輸與一種圖像搜索功能有關，其中輸入的文本將與動畫和表情包的數據庫進行搜索，並可以插入到輸入的消息中。由於這些傳輸易受我們的攻擊，搜狗輸入法用戶的按鍵是網絡竊聽者可以解密的內容，從而告知竊聽者這些用戶在輸入時正在輸入什麼。&lt;/p&gt;&lt;p&gt;作為此攻擊易受攻擊的數據的另一個示例，我們觀察到對於發送到「&lt;a href=&quot;http://v2.get.sogou.com/q」的 EncryptWall 請求，當「U」為「http://update.ping.android.shouji.sogou.com/update.gif」&quot; target=&quot;_blank&quot;&gt;http://v2.get.sogou.com/q」的 EncryptWall 請求，當「U」為「http://update.ping.android.shouji.sogou.com/update.gif」&lt;/a&gt;
 
時，「P」是一個查詢字符串，其中包含 Android 設備上安裝的每個應用程序的列表。我們不知道這個數據傳輸實現的具體功能是什麼。雖然可以想象知道用戶當前正在使用的應用程序可能有助於在該應用程序中提供更好的輸入建議，但很難想象知道用戶安裝了每個應用程序，甚至是用戶不打算與搜狗輸入法一起使用的應用程序，如何提供更好的輸入建議。&lt;/p&gt;&lt;p&gt;iOS 版本 11.21&lt;/p&gt;&lt;p&gt;我們分析的 iOS 版本與基本的 EncryptWall 實現沒有明顯的偏差。然而，與我們在某些平台上觀察到的一些 EncryptWall 請求通過加密的 HTTPS 發送，其他通過明文 HTTP 發送不同，我們觀察到的所有由我們分析的 iOS 版本發送的 EncryptWall 請求都通過 HTTPS 發送，因此我們認為它們在網絡竊聽方面是安全的。然而，我們注意到，如果沒有 HTTPS 的額外保護，iOS 版本將是最容易受到攻擊的，因為在 EncryptWall 的實現中存在另一個缺陷。具體而言，我們發現 iOS 版本根據以下代碼隨機選擇密鑰 k 和 IV
 v：&lt;/p&gt;&lt;p&gt;請注意，在隨機生成密鑰之前，隨機數生成器以從 Unix 紀元以來的秒數為種子，向下取整。這種行為有兩個後果：首先，推導 AES 密鑰 k 所需的唯一信息是請求發送的時間，任何網絡竊聽者都可以輕鬆記錄。其次，由於隨機數生成器在生成 IV
 
v 之前使用幾乎總是相同的時間進行重新種子化，v 幾乎總是 k 的前 128 位。由於 v 是公開的，所有的 EncryptWall 消息都會在 v 中公開 k 的前半部分，儘管 k 使用公共 RSA 密鑰進行了加密。&lt;/p&gt;&lt;p&gt;然而，我們再次注意到，由於 EncryptWall 請求在 iOS 上似乎總是額外包裝在 HTTPS 中，因此目前無法利用這個缺陷。然而，由於這個缺陷的嚴重性，我們仍然不得不提及它，因為先前的 iOS 版本可能會受到影響，並且這段代碼可能會在其他可能存在漏洞的應用程序中被重用。&lt;/p&gt;&lt;h2&gt;緩解措施&lt;/h2&gt;&lt;p&gt;為瞭解決報告的問題，搜狗輸入法應該使用流行的、最新的 HTTPS 或 TLS 實現來保護所有傳輸，而不是依賴自定義的加密來保護敏感用戶數據的傳輸。此外，搜狗輸入法不應傳輸對程序功能無關的數據。&lt;/p&gt;&lt;h2&gt;協調披露&lt;/h2&gt;&lt;p&gt;2023 年 5 月 31 日，我們在附上的信函中向騰訊披露了我們的發現，遵循我們的安全披露漏洞政策。下表 3 是我們的披露時間表：&lt;/p&gt;&lt;p&gt;日期，聯繫方式&lt;/p&gt;&lt;p&gt;2023 年 5 月 31 日，漏洞披露給 IMETS@tencent.com。&lt;/p&gt;&lt;p&gt;2023 年 6 月 16 日，通過騰訊安全響應中心（TSRC）網門披露漏洞。&lt;/p&gt;&lt;p&gt;2023 年 6 月 25 日，我們通過 TSRC 門戶收到以下回復：&lt;/p&gt;&lt;p&gt;「感謝您對騰訊安全的關注。對於此問題，沒有低或低安全風險。期待您的下一個更令人興奮的報告。」&lt;/p&gt;&lt;p&gt;2023 年 6 月 25 日 18 小時後，我們通過 TSRC 門戶收到以下回復：&lt;/p&gt;&lt;p&gt;「很抱歉，我之前的回覆是錯誤的，我們正在處理這個漏洞，請不要公開，非常感謝您的報告。」&lt;/p&gt;&lt;p&gt;&lt;b&gt;騰訊對我們的披露的最初拒絕和隨後的改變成為本報告標題的靈感。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;2023 年 6 月 26 日，我們通過 TSRC 門戶發送以下消息：&lt;/p&gt;&lt;p&gt;「感謝您的更新。我們將在 2023 年 7 月 31 日之後公開披露此漏洞。」&lt;/p&gt;&lt;p&gt;2023 年 6 月 28 日，我們通過 TSRC 門戶收到以下回復：&lt;/p&gt;&lt;p&gt;「非常感謝您的報告，修復計劃和修復時間已通過電子郵件回覆給 disclosure@citizenlab.ca。」&lt;/p&gt;&lt;p&gt;2023 年 6 月 28 日，我們通過 TSRC 門戶發送以下消息：&lt;/p&gt;&lt;p&gt;「我們沒有在該地址收到此類電子郵件。然而，我們注意到我們的域名（citizenlab.ca）可能無法從中國訪問，因此來自中國的電子郵件可能無法傳遞到該地址。您能否將您發送到 disclosure@citizenlab.ca 的電子郵件的副本發送到我的另一個電子郵件地址[已刪除]@utoronto.ca？我相信從中國發送電子郵件到這個 utoronto.ca 地址不會有問題。謝謝。」&lt;/p&gt;&lt;p&gt;2023 年 6 月 29 日，我們通過 TSRC 門戶收到以下回復：&lt;/p&gt;&lt;p&gt;「我們發送的電子郵件是 security@tencent.com，主題是：回覆搜狗拼音法漏洞，可能被歸類為垃圾郵件？」&lt;/p&gt;&lt;p&gt;2023 年 6 月 29 日，我們通過 TSRC 門戶發送以下消息：&lt;/p&gt;&lt;p&gt;「不幸的是，我們沒有在該地址收到此類電子郵件，甚至沒有在垃圾郵件文件夾中收到。您能否嘗試將電子郵件的副本發送到我的另一個電子郵件地址[已刪除]@utoronto.ca？謝謝。」&lt;/p&gt;&lt;p&gt;2023 年 7 月 4 日，我們通過 TSRC 門戶收到以下回復：&lt;/p&gt;&lt;p&gt;「您能使用 disclosure@citizenlab.ca 給 security@tencent.com 發送一封未經請求的電子郵件嗎？然後我將把修復細節發送到[已刪除]@utoronto.ca。」&lt;/p&gt;&lt;p&gt;2023 年 7 月 4 日，我們通過 TSRC 門戶發送以下消息：&lt;/p&gt;&lt;p&gt;「是的，我們現在已經發送了這樣一封電子郵件，正在等待您的回覆。」&lt;/p&gt;&lt;p&gt;2023 年 7 月 4 日，我們在[已刪除]@utoronto.ca 電子郵件地址收到以下回復。在電子郵件回覆中，搜狗輸入法開發人員概述了他們已經在電子郵件日期之前部署的部分緩解措施，以及將在 2023 年 7 月 31 日之前將所有平台遷移到使用 TLS 加密的時間表。&lt;/p&gt;&lt;p&gt;2023 年 7 月 18 日，我們發現搜狗輸入法開發人員已經發布了每個平台的應用程序版本，這些版本被確定為修復我們發現的問題的版本。我們發現 Windows 和 iOS 版本解決了我們報告的問題，但 Android 版本沒有。因此，我們通過 TSRC 門戶發送以下消息：&lt;/p&gt;&lt;p&gt;「你好。在您發送給我們的電子郵件中，您指出 Android 應用程序的 11.25 版本將升級為使用 HTTPS 發送 EncryptWall 請求。我們分析了 11.25 版本（SogouInput_11.25_android_sweb.apk），發現它仍然沒有使用 HTTPS 來傳輸我們在披露中發現的所有 EncryptWall 請求，包括我們報告的請求。11.25 版本仍然是應該包含這些修復的 Android 應用程序版本嗎，還是將在未來版本中修復？」&lt;/p&gt;&lt;p&gt;2023 年 7 月 20 日，我們發現搜狗輸入法開發人員已經發布了 Android 應用程序的 11.26 版本。我們發現這個版本解決了我們報告的所有問題。&lt;/p&gt;&lt;p&gt;2023 年 7 月 21 日 TSRC 門戶提示以下消息：&lt;/p&gt;&lt;p&gt;「漏洞已修復，請查看並檢查是否仍存在。如果已修復，請點擊「已修復」；如果未修復，請點擊「未修復」。」&lt;/p&gt;&lt;p&gt;我們點擊了「已修復」。&lt;/p&gt;&lt;p&gt;2023 年 7 月 22 日，我們通過 TSRC 門戶收到以下回復：&lt;/p&gt;&lt;p&gt;「感謝您的反饋。我們將在內部進行調查。」&lt;/p&gt;&lt;p&gt;2023 年 7 月 24 日，我們通過 TSRC 門戶收到以下回復：&lt;/p&gt;&lt;p&gt;「非常感謝您的反饋，我們的最新修復版本是 11.26（SogouInput_11.26_android_sweb.apk），您可以從我們的官方網站 https:&lt;a href=&quot;https:////shurufa.sogou.com/下載。如果您有其他問題，請告訴我們。謝謝。」&quot; target=&quot;_blank&quot;&gt;//shurufa.sogou.com/下載。如果您有其他問題，請告訴我們。謝謝。」&lt;/a&gt;&lt;/p&gt;&lt;p&gt;2023 年 7 月 27 日，我們在[已刪除]@utoronto.ca 電子郵件地址收到以下電子郵件。在電子郵件中，搜狗輸入法開發人員向我們提供了包含修復的版本，並詢問我們公開披露的「確切時間、網站和具體內容」。&lt;/p&gt;&lt;p&gt;2023 年 7 月 27 日，我們通過[已刪除]@utoronto.ca 發送以下回復：&lt;/p&gt;&lt;p&gt;「我們可以確認您已經修復了我們報告的漏洞。我們將在 2023 年 7 月 31 日之後公開披露這些漏洞。我們將在我們的網站&lt;a href=&quot;https://citizenlab.ca/上發佈有關安全漏洞的詳細報告。」&quot; target=&quot;_blank&quot;&gt;https://citizenlab.ca/上發佈有關安全漏洞的詳細報告。」&lt;/a&gt;&lt;/p&gt;&lt;p&gt;2023 年 7 月 29 日，我們在[已刪除]@utoronto.ca 電子郵件地址收到以下電子郵件。在電子郵件中，搜狗輸入法表示他們致力於隱私和安全，並解釋了他們實施 EncryptWall 系統的最初動機，並提醒我們他們對報告的漏洞的快速解決。&lt;/p&gt;&lt;p&gt;表 3：漏洞披露時間表。&lt;/p&gt;&lt;p&gt;2023 年 7 月 4 日，我們評估了搜狗輸入法開發人員在 2023 年 6 月 30 日應用的部分緩解措施，其中，如果出現錯誤，搜狗服務器始終返回相同的 HTTP 狀態碼-400-而不是根據是否存在填充錯誤或某個更高級別的應用層返回 400 或 500。雖然這減輕了我們對 Windows 版本搜狗輸入法的攻擊以及對 Android 版本的「U」、「G」和「P」字段的攻擊，但我們對 Android 的「S」、「E」和「F」字段的攻擊仍然有效，因為它依賴於區分 HTTP 狀態碼 400 和 200，其中 200 是成功代碼而不是錯誤代碼，而且這種緩解只是修改服務器，在發生錯誤的情況下無條件返回狀態碼 400。&lt;/p&gt;&lt;p&gt;平台，修復版本&lt;/p&gt;&lt;p&gt;Windows 13.7&lt;/p&gt;&lt;p&gt;Android 11.26&lt;/p&gt;&lt;p&gt;iOS 11.25&lt;/p&gt;&lt;p&gt;表 4：搜狗輸入法的修復版本。&lt;/p&gt;&lt;p&gt;在搜狗輸入法開發人員的 2023 年 7 月 4 日的通信中，他們表示 Windows 版本的應用程序的 13.7 版本和 Android 和 iOS 版本的應用程序的 11.25 版本將解決我們報告的問題。2023 年 7 月 18 日，我們發現這些版本的應用程序已經發布。請注意，這些更新是在我們強制執行的 7 月 31 日截止日期之前發佈的。分析更新的 Windows 版本，我們發現所有 EncryptWall 流量都使用操作系統的 WinHTTP 服務提供的 TLS 實現進行加密，令人滿意地修復了我們在 Windows 版本中報告的漏洞。請記住，我們不知道如何利用我們在 iOS 版本中發現的問題。儘管最初將 11.25 版本確定為解決我們報告的漏洞，但我們發現 2023 年 7 月 20 日，搜狗輸入法開發人員發佈了 Android 應用程序的 11.26 版本，並且該版本使用 TLS 加密所有 EncryptWall 流量，令人滿意地修復了我們在 Android 版本中報告的漏洞。因此，到 2023 年 7 月 20 日，我們報告的所有問題都已修復（請參見表 4 以獲取修復版本的摘要）。&lt;/p&gt;&lt;p&gt;我們在收到騰訊對我們披露的電子郵件回覆方面遇到的困難突顯了在向某些司法管轄區的公司披露漏洞時面臨的意外挑戰。在向騰訊披露漏洞後，我們發現我們的電子郵件域名（citizenlab.ca）在中國被屏蔽。具體而言，我們發現中國的國家防火牆對查詢此域名（包括 MX 記錄查詢）的 DNS 回覆注入了異常的 DNS 回覆。注入的 DNS 回覆包含一個看似任意的 IP 地址的 A 記錄，即使查詢是針對 MX 記錄而不是 A 記錄。當執行 A 記錄查詢的客戶端收到其中一個注入的回覆時，它將錯誤地使用注入回覆中的虛假 IP 地址。然而，對於 MX 記錄，這些注入的回覆可能會被 DNS 客戶端解釋為錯誤，因為在 MX 查詢中收到 A 記錄，而 DNS 客戶端對注入域名的 MX 查詢可能只是失敗，而不是像 A 查詢中那樣錯誤地使用虛假記錄。儘管這種注入行為可能旨在阻止中國用戶訪問我們的網站，但它也妨礙了中國用戶發送電子郵件給我們的能力，即使這樣的電子郵件是經過徵求的。&lt;/p&gt;&lt;p&gt;我們無法確定中國屏蔽我們域名的原因是騰訊的電子郵件未能傳遞到我們域名的電子郵件服務器，但我們收到了一些後來的證據，進一步加強了這個假設。我們在[已刪除]@utoronto.ca 上收到的 7 月 27 日的電子郵件也發送到了 disclosure@citizenlab.ca。最終，disclosure@citizenlab.ca 地址在 24 小時後收到了電子郵件。通過檢查電子郵件的標頭，我們&lt;a href=&quot;https://發現電子郵件在騰訊的郵件服務器和 Google 的 MX 服務器之間停滯不前。由於 Google 是我們的電子郵件提供商在 citizenlab.ca&quot; target=&quot;_blank&quot;&gt;發現電子郵件在騰訊的郵件服務器和 Google 的 MX 服務器之間停滯不前。由於 Google 是我們的電子郵件提供商在 citizenlab.ca&lt;/a&gt;
 
MX 記錄中，這一發現加強了騰訊的郵件服務器在查找我們域名的 MX 記錄時遇到困難的假設。電子郵件可能最終在 24 小時後被傳遞，這是由於中國防火牆的間歇性故障或數據包丟失導致防火牆注入的 DNS 回覆丟失，從而使我們域名的 MX 查詢最終成功。因此，我們選擇使用另一個我們最瞭解的在任何國家都沒有被屏蔽的域名進行所有未來的披露，以確保我們不會在協調披露期間未能收到關鍵的溝通。同時，我們要求防火牆操作員考慮阻止域名可能會產生意想不到的後果，例如對那些可能在參與重要對話期間受到防火牆背後的軟件漏洞影響的人的持續漏洞的貢獻。&lt;/p&gt;&lt;h2&gt;限制&lt;/h2&gt;&lt;p&gt;在本報告中，我們詳細介紹了搜狗 EncryptWall 加密系統在搜狗輸入法中的使用的漏洞。然而，在這項工作中，我們沒有對搜狗輸入法進行全面審計，也沒有嘗試全面發現軟件中的每個安全漏洞。我們的報告涉及我們發現的一組相關漏洞，我們未報告其他漏洞並不意味着這些漏洞不存在的證據。&lt;/p&gt;&lt;p&gt;討論&lt;/p&gt;&lt;p&gt;在過去的八年中，我們致力於分析、記錄和負責任地披露中國開發的應用程序中涉及敏感數據不安全傳輸的漏洞。儘管我們在與開發人員協調解決這些問題方面取得了一些成功，但該生態系統仍存在問題，因為我們在這裏再次報告一個難以想象的受歡迎的中國開發的應用程序未能採用甚至簡單的最佳實踐來保護其傳輸的敏感數據。在這種情況下，搜狗輸入法是一個擁有超過 4.5 億用戶的應用程序，未能正確保護敏感數據的傳輸，包括用戶輸入的按鍵，使得任何網絡竊聽者都可以恢復這些數據。通過採用常見且成熟的加密協議 TLS，而不是使用「自制」加密方法，可以輕鬆避免這種漏洞。雖然沒有完美的加密協議，但 TLS 實現在 2003 年已經改善了對 CBC 填充錯誤攻擊的脆弱性，這已經是本文撰寫時的二十年前了。我們已經認識到，協調的安全披露遠遠不足以保護中國應用程序傳輸的用戶數據。我們認為，需要對軟件開發生態系統進行全面的變革，以解決這些系統性問題。&lt;/p&gt;&lt;p&gt;即使已經解決了報告的漏洞，搜狗應用程序仍依賴將鍵入的內容傳輸到搜狗的服務器作為其普通功能的一部分。來自世界各地的用戶的按鍵輸入被傳輸到中國大陸的服務器，這些服務器在中國政府的法律管轄下運營。使用搜狗的高風險用戶應該謹慎，因為鍵入的內容可能包含敏感或個人信息。本報告中概述的攻擊演示了網絡竊聽者如何解密這些數據。然而，即使漏洞得到解決，這些數據仍然可以被搜狗的運營商和與他們共享數據的任何人訪問。&lt;/p&gt;&lt;h2&gt;致謝&lt;/h2&gt;&lt;p&gt;我們要感謝 Jakub Dalek、Pellaeon Lin、Adam Senft 和 Mari Zhou 對編輯和同行評審的寶貴貢獻。該項目的研究由 Ron Deibert 監督。&lt;/p&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻牆技術博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;訂閲地址及社交帳號&lt;/a&gt;&lt;/div&gt;</description>
                <link>https://www.chinagfw.org/2023/09/blog-post.html</link>
                <author>noreply@blogger.com (pompei)</author>
                <thr:total>0</thr:total>
            </item>
            <item>
                <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-8332894985938445495</guid>
                <pubDate>Mon, 07 Aug 2023 05:55:00 +0000</pubDate>
                <atom:updated>2023-08-22T23:39:17.889+08:00</atom:updated>
                <title>NAT 穿透是如何工作的：技術原理及企業級實踐</title>
                <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;p&gt;via: &lt;a href=&quot;https://arthurchiao.art/blog/how-nat-traversal-works-zh/&quot; target=&quot;_blank&quot;&gt;https://arthurchiao.art/blog/how-nat-traversal-works-zh/&lt;/a&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;i&gt;本文翻譯自 2020 年的一篇英文博客： &lt;a href=&quot;https://tailscale.com/blog/how-nat-traversal-works/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;How NAT traversal works&lt;/a&gt;。&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;設想這樣一個問題：在北京和上海各有一台&lt;strong&gt;局域網的機器&lt;/strong&gt;（例如一台是家裏的台式機，一，台是連接到星巴克 WiFi 的筆記本），二者都是私網 IP 地址，但可以訪問公網， &lt;strong&gt;如何讓這兩台機器通信呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;既然二者都能訪問公網，那最簡單的方式當然是在公網上架設一箇中繼服務器： 兩台機器分別連接到中繼服務，後者完成雙向轉發。這種方式顯然有很大的性能開銷，而，且中繼服務器很容易成為瓶頸。&lt;/p&gt;
&lt;p&gt;有沒有辦法不用中繼，讓&lt;strong&gt;兩台機器直接通信&lt;/strong&gt;呢？&lt;/p&gt;
&lt;p&gt;如果有一定的網絡和協議基礎，就會明白這事兒是可能的。Tailscale 的這篇&lt;strong&gt;史詩級長文&lt;/strong&gt;由淺入深地展示了這種「可能」，如果完全實現本文所，介紹的技術，你將得到一個企業級的 NAT/​防火牆穿透工具。 此外，如作者所説，&lt;strong&gt;去中心化軟件&lt;/strong&gt;領域中的許多有趣想法，簡化之後其實都變成了 &lt;strong&gt;跨過公網（互聯網）實現端到端直連&lt;/strong&gt; 這一問題，因此本文的意義並不僅限於 NAT 穿透本身。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;由於譯者水平有限，本文不免存在遺漏或錯誤之處。如有疑問，請查閲原文。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下是譯文。&lt;/p&gt;
&lt;p&gt;在前一篇文章 &lt;a href=&quot;https://tailscale.com/blog/how-tailscale-works/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;How Tailscale Works&lt;/a&gt; 中， 我們已經用較長篇幅介紹了 Tailscale 是如何工作的。但其中並沒有詳細描述我們是 &lt;strong&gt;如何穿透 NAT 設備，從而實現終端設備直連的&lt;/strong&gt; —— 不管這些終端之間，有什麼設備（防火牆、NAT 等），以及有多少設備。本文試圖補足這一內容。&lt;/p&gt;
&lt;h2&gt;1.1 背景：IPv4 地址短缺，引入 NAT&lt;/h2&gt;
&lt;p&gt;全球 IPv4 地址早已不夠用，因此人們發明瞭 NAT（網絡地址轉換）來緩解這個問題。&lt;/p&gt;
&lt;p&gt;簡單來説，大部分機器都使用&lt;strong&gt;私有 IP 地址&lt;/strong&gt;，如果它們需要訪問公網服務，那麼，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;出向流量：需要經過一台 NAT 設備，它會對流量進行 SNAT，將私有 srcIP+Port 轉，換成 NAT 設備的公網 IP+Port（這樣應答包才能回來），然後再將包發出去；&lt;/li&gt;&lt;li&gt;應答流量（入向）：到達 NAT 設備後進行相反的轉換，然後再轉發給客戶端。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;整個過程對雙方透明。&lt;/p&gt;

&lt;blockquote&gt;更多關於 NAT 的內容，可參考 &lt;a href=&quot;https://arthurchiao.art/blog/nat-zh/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;(譯) NAT — 網絡地址轉換（2016）&lt;/a&gt;。 譯註。&lt;/blockquote&gt;

&lt;p&gt;以上是本文所討論問題的&lt;strong&gt;基本背景&lt;/strong&gt;。&lt;/p&gt;
&lt;h2&gt;1.2 需求：兩台經過 NAT 的機器建立點對點連接&lt;/h2&gt;
&lt;p&gt;在以上所描述的 NAT 背景下，我們從最簡單的問題開始：如何在兩台經過 NAT 的機器之間建立 &lt;strong&gt;點對點連接&lt;/strong&gt;（直連）。如下圖所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-intro.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-intro.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;直接用機器的 IP 互連顯然是不行的，因為它們都是私有 IP（例如 &lt;code&gt;192.168.1.x&lt;/code&gt;）。 在 Tailscale 中，我們會建立一個 &lt;strong&gt;WireGuard® 隧道&lt;/strong&gt; 來解決這個問題 —— 但這並不是太重要，因為我們將&lt;strong&gt;過去幾代人努力&lt;/strong&gt;都整合到了一個工具集， &lt;strong&gt;這些技術廣泛適用於各種場景&lt;/strong&gt;。例如，&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://webrtc.org/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WebRTC&lt;/a&gt; 使用這些技術在瀏覽器之間完成 peer-​to-​peer 語音、視頻和數據傳輸，&lt;/li&gt;&lt;li&gt;&lt;strong&gt;VoIP 電話和一些視頻遊戲&lt;/strong&gt;也使用類似機制，雖然不是所有情況下都很成功。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;接下來，本文將&lt;strong&gt;在一般意義上討論這些技術&lt;/strong&gt;，並在合適的地方拿 Tailscale 和其他一些東西作為例子。&lt;/p&gt;
&lt;h2&gt;1.3 方案：NAT 穿透&lt;/h2&gt;
&lt;h3&gt;1.3.1 兩個必備前提：UDP + 能直接控制 socket&lt;/h3&gt;
&lt;p&gt;如果想&lt;strong&gt;設計自己的協議來實現 NAT 穿透&lt;/strong&gt;，那必須滿足以下兩個條件：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;&lt;strong&gt;協議應該基於 UDP&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;理論上用 TCP 也能實現，但它會給本已相當複雜的問題再增加一層複雜性， 甚至還需要定製化內核 —— 取決於你想實現到什麼程度。本文接下來都將關注在 UDP 上。&lt;/p&gt;
&lt;p&gt;如果考慮 TCP 是想在 NAT 穿透時獲得&lt;strong&gt;面向流的連接&lt;/strong&gt;（ stream-​oriented connection），可以考慮用 &lt;strong&gt;QUIC&lt;/strong&gt; 來替代，它構，建在 UDP 之上，因此我們能將關注點放在 UDP NAT 穿透，而仍然能獲得一個，很好的流協議（stream protocol）。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;對收發包的 &lt;strong&gt;socket 有直接控制權&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;例如，從經驗上來説，無法基於某個現有的網絡庫實現 NAT 穿透，因為我們 &lt;strong&gt;必須在使用的「主要」協議之外，發送和接收額外的數據包&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;某些協議（例如 WebRTC）將 NAT 穿透與其他部分緊密集成。但如果你在構建自己的協議， &lt;strong&gt;建議將 NAT 穿透作為一個獨立實體，與主協議並行運行&lt;/strong&gt;，二者僅，僅是共享 socket 的關係，如下圖所示，這將帶來很大幫助：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-deep-integration.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-deep-integration.png&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;h3&gt;1.3.2 保底方式：中繼&lt;/h3&gt;
&lt;p&gt;在某些場景中，直接訪問 socket 這一條件可能很難滿足。&lt;/p&gt;
&lt;p&gt;退而求其次的一個方式是設置一個 local proxy（本地代理），主協議與這個 proxy 通信 ，後者來完成 NAT 穿透，將包中繼（relay）給對端。這種方式增加了一個額外的間接層 ，但好處是：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;仍然能獲得 NAT 穿透，&lt;/li&gt;&lt;li&gt;&lt;strong&gt;不需要對已有的應用程序做任何改動&lt;/strong&gt;。&lt;/li&gt;&lt;/ol&gt;
&lt;h2&gt;1.4 挑戰：有狀態防火牆和 NAT 設備&lt;/h2&gt;
&lt;p&gt;有了以上鋪墊，下面就從最基本的原則開始，一步步看如何實現一個企業級的 NAT 穿透方案。&lt;/p&gt;
&lt;p&gt;我們的&lt;strong&gt;目標&lt;/strong&gt;是：&lt;strong&gt;在兩個設備之間通過 UDP 實現雙向通信&lt;/strong&gt;， 有了這個基礎，上層的其他協議（WireGuard, QUIC, WebRTC 等）就能做一些更酷的事情。&lt;/p&gt;
&lt;p&gt;但即便這個看似最基本的功能，在實現上也要解決&lt;strong&gt;兩個障礙&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;有狀態防火牆&lt;/li&gt;&lt;li&gt;NAT 設備&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;有狀態防火牆是以上兩個問題中相對比較容易解決的。實際上，&lt;strong&gt;大部分 NAT 設備都自帶了一個有狀態防火牆&lt;/strong&gt;， 因此要解決第二個問題，必須先解決有第一個問題。&lt;/p&gt;
&lt;p&gt;有狀態防火牆具體有很多種類型，有些你可能見過：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Windows Defender firewall&lt;/li&gt;&lt;li&gt;Ubuntu’s ufw (using iptables/​nftables)&lt;/li&gt;&lt;li&gt;BSD/​macOS &lt;code&gt;pf&lt;/code&gt;&lt;/li&gt;&lt;li&gt;AWS Security Groups（&lt;strong&gt;安全組&lt;/strong&gt;）&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;2.1 有狀態防火牆&lt;/h2&gt;
&lt;h3&gt;2.1.1 默認行為（策略）&lt;/h3&gt;
&lt;p&gt;以上防火牆的配置都是很靈活的，但大部分配置默認都是如下行為：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;允許所有出向連接&lt;/strong&gt;（allows all 「outbound」 connections）&lt;/li&gt;&lt;li&gt;&lt;strong&gt;禁止所有入向連接&lt;/strong&gt;（blocks all 「inbound」 connections）&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;可能有少量例外規則，例如 allowing inbound SSH。&lt;/p&gt;
&lt;h3&gt;2.1.2 如何區分入向和出向包&lt;/h3&gt;
&lt;p&gt;連接（connection）和方向（direction）都是協議設計者頭腦中的概念，到了 &lt;strong&gt;物理傳輸層，每個連接都是雙向的&lt;/strong&gt;；允許所有的包雙向傳輸。 那&lt;strong&gt;防火牆是如何區分哪些是入向包、哪些是出向包的呢&lt;/strong&gt;？ 這就要回到&lt;strong&gt;「有狀態」（stateful）&lt;/strong&gt;這三個字了：有狀態防火牆會記錄它，看到的每個包，當收到下一個包時，會利用這些信息（狀態）來判斷應該做什麼。&lt;/p&gt;
&lt;p&gt;對 UDP 來説，規則很簡單：如果防火牆之前看到過一個出向包（outbound），就會允許，相應的入向包（inbound）通過，以下圖為例：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-firewalls-1a.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-firewalls-1a.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;筆記本電腦中自帶了一個防火牆，當該防火牆看到從這台機器出去的 &lt;code&gt;2.2.2.2:1234 -&amp;gt; 5.5.5.5:5678&lt;/code&gt; 包時，就會記錄一下：&lt;code&gt;5.5.5.5:5678 -&amp;gt; 2.2.2.2:1234&lt;/code&gt; 入向包應該放行。 &lt;strong&gt;這裏的邏輯&lt;/strong&gt;是：我們信任的世界（即筆記本）想主動與 &lt;code&gt;5.5.5.5:5678&lt;/code&gt; 通信，因此應該放行（allow）其回包路徑。&lt;/p&gt;

&lt;blockquote&gt;某些&lt;strong&gt;非常&lt;/strong&gt;寬鬆的防火牆只要看到有從 &lt;code&gt;2.2.2.2:1234&lt;/code&gt; 出去的包，就，會允許所有從外部進入 &lt;code&gt;2.2.2.2:1234&lt;/code&gt; 的流量。這種防火牆對我們的 NAT 穿透來説非，常友好，但已經越來越少見了。&lt;/blockquote&gt;

&lt;h2&gt;2.2 防火牆朝向（face-off）與穿透方案&lt;/h2&gt;
&lt;h3&gt;2.2.1 防火牆朝向相同&lt;/h3&gt;
&lt;h4&gt;場景特點：服務端 IP 可直接訪問&lt;/h4&gt;
&lt;p&gt;在 NAT 穿透場景中，以上默認規則對 UDP 流量的影響不大 —— 只要&lt;strong&gt;路徑上所有防火牆的「朝向」是一樣的&lt;/strong&gt;。 一般來説，從內網訪問公網上的某個服務器都屬於這種情況。&lt;/p&gt;
&lt;p&gt;我們唯一的要求是：&lt;strong&gt;連接必須是由防火牆後面的機器發起的&lt;/strong&gt;。這是因為，在它主動和別人通信之前，沒人能主動和它通信，如下圖所示：&lt;/p&gt;
&lt;h4&gt;穿透方案：客戶端直連服務端，或 hub-​and-​spoke 拓撲&lt;/h4&gt;
&lt;p&gt;&lt;img alt=&quot;nat-firewalls-2.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-firewalls-2.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;但上圖是&lt;strong&gt;假設了&lt;/strong&gt;通信雙方中，其中一端&lt;strong&gt;（服務端）是能直接訪問到的&lt;/strong&gt;。 在 VPN 場景中，這就形成了所謂的 &lt;strong&gt;hub-​and-​spoke 拓撲&lt;/strong&gt;：中心的 hub 沒有任何防火牆策略，誰都能訪問到； 防火牆後面的 spokes 連接到 hub。如下圖所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-firewalls-3.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-firewalls-3.png&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;2.2.2 防火牆朝向不同&lt;/h3&gt;
&lt;h4&gt;場景特點：服務端 IP 不可直接訪問&lt;/h4&gt;
&lt;p&gt;但如果兩個「客戶端」想直連，以上方式就不行了，此時兩邊的防火牆相向而立，如下圖所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-firewalls-4.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-firewalls-4.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;根據前面的討論，這種情況意味着：&lt;strong&gt;兩邊要同時發起連接請求&lt;/strong&gt;，但也意味着，兩邊都無法發起有效請求，因為對方先發起請求才能在它的防火牆上打開一條縫讓我們進去！ 如何破解這個問題呢？一種方式是&lt;strong&gt;讓用戶重新配置一邊或兩邊的防火牆，打開一個端口&lt;/strong&gt;， 允許對方的流量進來。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;這顯然對用戶不友好，在像 Tailscale 這樣的 mesh 網絡中的擴展性也不好，在 mesh 網絡中，我們假設對端會以一定的粒度在公網上移動。&lt;/li&gt;&lt;li&gt;此外，在很多情況下用戶也沒有防火牆的控制權限：例如在咖啡館或機場中，連接的路，由器是不受你控制的（否則你可能就有麻煩了）。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;因此，我們需要尋找一種不用重新配置防火牆的方式。&lt;/p&gt;
&lt;h4&gt;穿透方案：兩邊同時主動建連，在本地防火牆為對方打開一個洞&lt;/h4&gt;
&lt;p&gt;解決的思路還是先重新審視前面提到的有狀態防火牆規則：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;對於 UDP，其規則（邏輯）是：&lt;strong&gt;包必須先出去才能進來&lt;/strong&gt;（packets must flow out before packets can flow back in）。&lt;/li&gt;&lt;li&gt;注意，這裏除了要滿足包的 IP 和端口要匹配這一條件之外，&lt;strong&gt;並沒有要求包必須是相關的&lt;/strong&gt;（related）。 換句話説，只要某些包帶着正確的源和目的地址出去了，&lt;strong&gt;任何看起來像是響應的包都會被防火牆放進來&lt;/strong&gt; —— 即使對端根本沒收到你發出去的包。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;因此，要穿透這些有狀態防火牆，我們只需要&lt;strong&gt;共享一些信息：讓兩端提前知道對方使用的 ip:port&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;手動靜態配置是一種方式，但顯然擴展性不好；&lt;/li&gt;&lt;li&gt;我們開發了一個 &lt;a href=&quot;https://tailscale.com/blog/how-tailscale-works/#the-control-plane-key-exchange-and-coordination&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;coordination server&lt;/a&gt;， 以靈活、安全的方式來同步 &lt;code&gt;ip:port&lt;/code&gt; 信息。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;有了對方的 &lt;code&gt;ip:port&lt;/code&gt; 信息之後，兩端開始給對方發送 UDP 包。在這個過程中，我們預，料到某些包將會被丟棄。因此，雙方&lt;strong&gt;必須要接受某些包會丟失的事實&lt;/strong&gt;， 因此如果是重要信息，你必須自己準備好重傳。對 UDP 來説丟包是可接受的，但這裏尤其需要接受。&lt;/p&gt;
&lt;p&gt;來看一下具體建連（穿透）過程：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;如圖所示，筆記本出去的第一包，&lt;code&gt;2.2.2.2:1234 -&amp;gt; 7.7.7.7:5678&lt;/code&gt;，穿過 Windows Defender 防火牆進入到公網。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-firewalls-5a.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-firewalls-5a.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;對方的防火牆會將這個包攔截掉，因為它沒有 &lt;code&gt;7.7.7.7:5678 -&amp;gt; 2.2.2.2:1234&lt;/code&gt; 的流量記錄。 但另一方面，Windows Defender 此時已經記錄了出向連接，因此會允許 &lt;code&gt;7.7.7.7:5678 -&amp;gt; 2.2.2.2:1234&lt;/code&gt; 的應答包進來。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;接着，第一個 &lt;code&gt;7.7.7.7:5678 -&amp;gt; 2.2.2.2:1234&lt;/code&gt; 穿過它自己的防火牆到達公網。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-firewalls-5b.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-firewalls-5b.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;到達客戶端側時，Windows Defender &lt;strong&gt;認為這是剛才出向包的應答包，因此就放行它進入了！&lt;/strong&gt; 此外，右側的防火牆此時也記錄了：&lt;code&gt;2.2.2.2:1234 -&amp;gt; 7.7.7.7:5678&lt;/code&gt; 的包應該放行。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;筆記本收到服務器發來的包之後，發送一個包作為應答。這個包穿過 Windows Defender 防火牆，和服務端防火牆（因為這是對服務端發送的包的應答包），達到服務端。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-firewalls-5c.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-firewalls-5c.png&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;成功！這樣我們就建立了一個&lt;strong&gt;穿透兩個相向防火牆&lt;/strong&gt;的雙向通信連接。 而初看之下，這項任務似乎是不可能完成的。&lt;/p&gt;
&lt;h2&gt;2.3 關於穿透防火牆的一些思考&lt;/h2&gt;
&lt;p&gt;穿透防火牆並非永遠這麼輕鬆，有時會受一些第三方系統的間接影響，需要仔細處理。 那穿透防火牆需要注意什麼呢？重要的一點是：&lt;strong&gt;通信雙方必須幾乎同時發起通信&lt;/strong&gt;， 這樣才能在路徑上的防火牆打開一條縫，而且兩端還都是活着的。&lt;/p&gt;
&lt;h3&gt;2.3.1 雙向主動建連：旁路信道&lt;/h3&gt;
&lt;p&gt;如何實現「同時」呢？一種方式是兩端不斷重試，但顯然這種方式很浪費資源。假如雙方都，知道何時開始建連就好了。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;這聽上去是&lt;strong&gt;雞生蛋蛋生雞的問題&lt;/strong&gt;了：&lt;strong&gt;雙方想要通信，必須先提前通個信&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;
&lt;p&gt;但實際上，我們可以通過&lt;strong&gt;旁路信道&lt;/strong&gt;（side channel）來達到這個目的 ，並且這個旁路信道並不需要很 fancy：它可以有幾秒鐘的延遲、只需要傳送幾 KB 的，信息，因此即使是一個配置非常低的虛擬機，也能為幾千台機器提供這樣的旁路通信服務。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在遙遠的過去，我曾用 XMPP 聊天消息作為旁路，效果非常不錯。&lt;/li&gt;&lt;li&gt;另一個例子是 WebRTC，它需要你提供一個自己的「信令信道」（signalling channel， 這個詞也暗示了 WebRTC 的 IP telephony ancestry），並將其配置到 WebRTC API。&lt;/li&gt;&lt;li&gt;在 Tailscale，我們的協調服務器（coordination server）和 DERP (Detour Encrypted Routing Protocol) 服務器集羣是我們的旁路信道。&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;h3&gt;2.3.2 非活躍連接被防火牆清理&lt;/h3&gt;
&lt;p&gt;有狀態防火牆內存通常比較有限，因此會定期清理不活躍的連接（UDP 常見的是 30s）， 因此要保持連接 alive 的話需要定期通信，否則就會被防火牆關閉，為避免這個問題， 我們，&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;要麼定期向對方發包來 keepalive，&lt;/li&gt;&lt;li&gt;要麼有某種帶外方式來按需重建連接。&lt;/li&gt;&lt;/ol&gt;
&lt;h3&gt;2.3.3 問題都解決了？不，挑戰剛剛開始&lt;/h3&gt;
&lt;p&gt;對於防火牆穿透來説， 我們&lt;strong&gt;並不需要關心路徑上有幾堵牆&lt;/strong&gt; —— 只要它們是有狀態防火牆且允許出，向連接，這種同時發包（simultaneous transmission）機制就能穿透任意多層防火牆。 這一點對我們來説非常友好，因為只需要實現一個邏輯，然後能適用於任何地方了。&lt;/p&gt;
&lt;p&gt;…對嗎？&lt;/p&gt;
&lt;p&gt;其實，&lt;strong&gt;不完全對&lt;/strong&gt;。這個機制有效的前提是：我們能&lt;strong&gt;提前知道對方的 ip:port&lt;/strong&gt;。 而這就涉及到了我們今天的主題：NAT，它會使前面我們剛獲得的一點滿足感頓時消失。&lt;/p&gt;
&lt;p&gt;下面，&lt;strong&gt;進入本文正題&lt;/strong&gt;。&lt;/p&gt;
&lt;h2&gt;3.1 NAT 設備與有狀態防火牆&lt;/h2&gt;
&lt;p&gt;可以認為 NAT 設備是一個&lt;strong&gt;增強版的有狀態防火牆&lt;/strong&gt;，雖然它的增強功能，對於本文場景來説並不受歡迎：除了前面提到的有狀態攔截/放行功能之外，它們還會在數據包經過時修改這些包。&lt;/p&gt;
&lt;h2&gt;3.2 NAT 穿透與 SNAT/​DNAT&lt;/h2&gt;
&lt;p&gt;具體來説，NAT 設備能完成某種類型的網絡地址轉換，例如，替換源或目的 IP 地址或端口。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;討論連接問題和 NAT 穿透問題時&lt;/strong&gt;，我們&lt;strong&gt;只會受 source NAT —— SNAT 的影響&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;DNAT 不會影響 NAT 穿透。&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;3.3 SNAT 的意義：解決 IPv4 地址短缺問題&lt;/h2&gt;
&lt;p&gt;SNAT 最常見的使用場景是&lt;strong&gt;將很多設備連接到公網，而只使用少數幾個公網 IP&lt;/strong&gt;。 例如對於消費級路由器，會將所有設備的（私有） IP 地址映射為&lt;strong&gt;單個&lt;/strong&gt;連接到公網的 IP 地址。&lt;/p&gt;
&lt;p&gt;這種方式存在的意義是：我們有遠多於可用公網 IP 數量的設備需要連接到公網，（至少，對 IPv4 來説如此，IPv6 的情況後面會討論）。NAT 使多個設備能共享同一 IP 地址，因，此即使面臨 IPv4 地址短缺的問題，我們仍然能不斷擴張互聯網的規模。&lt;/p&gt;
&lt;h2&gt;3.4 SNAT 過程：以家用路由器為例&lt;/h2&gt;
&lt;p&gt;假設你的筆記本連接到家裏的 WiFi，下面看一下它連接到公網某個服務器時的情形：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;筆記本發送 UDP packet &lt;code&gt;192.168.0.20:1234 -&amp;gt; 7.7.7.7:5678&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-overview-1.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-overview-1.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;這一步就好像筆記本有一個公網 IP 一樣，但源地址 &lt;code&gt;192.168.0.20&lt;/code&gt; 是私有地址， 只能出現在私有網絡，公網不認，收到這樣的包時它不知道如何應答。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;家用路由器出場，執行 SNAT。&lt;/p&gt;
&lt;p&gt;包經過路由器時，路由器發現這是一個它沒有見過的新會話（session）。 它知道 &lt;code&gt;192.168.0.20&lt;/code&gt; 是私有 IP，公網無法給這樣的地址回包，但它有辦法解決：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;在它&lt;strong&gt;自己的公網 IP 上挑一個可用的 UDP 端口&lt;/strong&gt;，例如 &lt;code&gt;2.2.2.2:4242&lt;/code&gt;，&lt;/li&gt;&lt;li&gt;然後創建一個 &lt;em&gt;NAT mapping&lt;/em&gt;：&lt;code&gt;192.168.0.20:1234&lt;/code&gt; &lt;code&gt;&amp;lt;--&amp;gt;&lt;/code&gt; &lt;code&gt;2.2.2.2:4242&lt;/code&gt;，&lt;/li&gt;&lt;li&gt;然後將包發到公網，此時源地址變成了 &lt;code&gt;2.2.2.2:4242&lt;/code&gt; 而不是原來的 &lt;code&gt;192.168.0.20:1234&lt;/code&gt;。因此服務端看到的是轉換之後地址，&lt;/li&gt;&lt;li&gt;接下來，每個能匹配到這條映射規則的包，都會被路由器改寫 IP 和，端口。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;&lt;img alt=&quot;nat-overview-2.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-overview-2.png&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;反向路徑是類似的，路由器會執行相反的地址轉換，將 &lt;code&gt;2.2.2.2:4242&lt;/code&gt; 變回 &lt;code&gt;192.168.0.20:1234&lt;/code&gt;。對於筆記本來説，它根本感知不知道這正反兩次變換過程。&lt;/p&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;這裏是拿家用路由器作為例子，但&lt;strong&gt;辦公網的原理是一樣的&lt;/strong&gt;。不同之處在，於，辦公網的 NAT 可能有多台設備組成（高可用、容量等目的），而且它們有不止一個公，網 IP 地址可用，因此在選擇可用的公網 &lt;code&gt;ip:port&lt;/code&gt; 來做映射時，選擇空間更大，能支持，更多客戶端。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-overview-3.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-overview-3.png&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;3.5 SNAT 給穿透帶來的挑戰&lt;/h2&gt;
&lt;p&gt;現在我們遇到了與前面有狀態防火牆類似的情況，但這次是 NAT 設備：&lt;strong&gt;通信雙方，不知道對方的 ip:port 是什麼&lt;/strong&gt;，因此&lt;strong&gt;無法主動建連&lt;/strong&gt;，如下圖所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-stun-1.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-stun-1.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;但這次比有狀態防火牆更糟糕，嚴格來説，&lt;strong&gt;在雙方發包之前，根本無法確定（自己及對方的）ip:port 信息&lt;/strong&gt;，因為 &lt;strong&gt;只有出向包經過路由器之後才會產生 NAT mapping&lt;/strong&gt;（即，可以被對方連接的 &lt;code&gt;ip:port&lt;/code&gt; 信息）。&lt;/p&gt;
&lt;p&gt;因此我們又回到了與防火牆遇到的問題，並且情況更糟糕：&lt;strong&gt;雙方都需要主動和對，方建連，但又不知道對方的公網地址是多少&lt;/strong&gt;，只有當對方先説話之後，我們才能拿到它的地址信息。&lt;/p&gt;
&lt;p&gt;如何破解以上死鎖呢？這就輪到 &lt;a href=&quot;https://en.wikipedia.org/wiki/STUN&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;STUN&lt;/a&gt; 登場了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/STUN&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;STUN&lt;/a&gt; 既是一些對 NAT 設備行為的詳細研究，也是一種協助 NAT 穿透的協議。本文主要關注 STUN 協議。&lt;/p&gt;
&lt;h2&gt;4.1 STUN 原理&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;STUN 基於一個簡單的觀察&lt;/strong&gt;：從一個會被 NAT 的客戶端訪問公網服務器時， 服務器看到的是 &lt;strong&gt;NAT 設備的公網 ip:port 地址&lt;/strong&gt;，而非該 &lt;strong&gt;客戶端的局域網 ip:port 地址&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;也就是説，服務器能告訴客戶端&lt;strong&gt;它看到的客戶端的 ip:port 是什麼&lt;/strong&gt;。 因此，只要將這個信息以某種方式告訴通信對端（peer），後者就知道該和哪個地址建連了！ 這樣就又&lt;strong&gt;簡化為前面的防火牆穿透問題了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本質上這就是 &lt;strong&gt;STUN 協議的工作原理&lt;/strong&gt;，如下圖所示：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;筆記本向 STUN 服務器發送一個請求：「從你的角度看，我的地址什麼？」&lt;/li&gt;&lt;li&gt;STUN 服務器返回一個響應：「我看到你的 UDP 包是從這個地址來的：&lt;code&gt;ip:port&lt;/code&gt;」。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;nat-stun-2.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-stun-2.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;The STUN protocol has a bunch more stuff in it — there’s a way of obfuscating the &lt;code&gt;ip:port&lt;/code&gt;
 in the response to stop really broken NATs from mangling the packet’s 
payload, and a whole authentication mechanism that only really gets used
 by TURN and ICE, sibling protocols to STUN that we’ll talk about in a 
bit. We can ignore all of that stuff for address discovery.&lt;/blockquote&gt;

&lt;h2&gt;4.2 為什麼 NAT 穿透邏輯和主協議要共享同一個 socket&lt;/h2&gt;
&lt;p&gt;理解了 STUN 原理，也就能理解為什麼我們在文章開頭説，如果 &lt;strong&gt;要實現自己的 NAT 穿透邏輯和主協議，就必須讓二者共享同一個 socket&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;每個 socket 在 NAT 設備上都對應一個映射關係（私網地址 -&amp;gt; 公網地址），&lt;/li&gt;&lt;li&gt;STUN 服務器只是&lt;strong&gt;輔助&lt;/strong&gt;穿透的基礎設施，&lt;/li&gt;&lt;li&gt;與 STUN 服務器通信之後，在 NAT 及防火牆設備上打開了一個連接，允許入向包進來（回憶前面內容， &lt;strong&gt;只要目的地址對，UDP 包就能進來&lt;/strong&gt;，不管這些包是不是從 STUN 服務器來的），&lt;/li&gt;&lt;li&gt;因此，接下來只要將這個地址告訴我們的通信對端（peer），讓它往這個地址發包，就能實現穿透了。&lt;/li&gt;&lt;/ol&gt;
&lt;h2&gt;4.3 STUN 的問題：不能穿透所有 NAT 設備（例如企業級 NAT 網關）&lt;/h2&gt;
&lt;p&gt;有了 STUN，我們的&lt;strong&gt;穿透目的似乎已經實現了&lt;/strong&gt;：每台機器都通過 STUN 來獲取自己的私網 socket 對應的公網 &lt;code&gt;ip:port&lt;/code&gt;，然後把這個信息告訴對端，然後兩端，同時發起穿透防火牆的嘗試，後面的過程就和上一節介紹的防火牆穿透一樣了，&lt;strong&gt;對嗎&lt;/strong&gt;？&lt;/p&gt;
&lt;p&gt;答案是：&lt;strong&gt;看情況&lt;/strong&gt;。某些情況下確實如此，但有些情況下卻不行。通常來説，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;對於大部分&lt;strong&gt;家用路由器場景&lt;/strong&gt;，這種方式是沒問題的；&lt;/li&gt;&lt;li&gt;但對於一些&lt;strong&gt;企業級 NAT 網關&lt;/strong&gt;來説，這種方式無法奏效。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;NAT 設備的説明書上越強調它的安全性，STUN 方式失敗的可能性就越高。（但注意，從實際意義上來説， &lt;strong&gt;NAT 設備在任何方面都並不會增強網絡的安全性&lt;/strong&gt;，但這不是本文重點，因此不展開。）&lt;/p&gt;
&lt;h2&gt;4.4 重新審視 STUN 的前提&lt;/h2&gt;
&lt;p&gt;再次審視前面&lt;strong&gt;關於 STUN 的假設&lt;/strong&gt;：當 STUN 服務器告訴客戶端在公網看來它的地址是 &lt;code&gt;2.2.2.2:4242&lt;/code&gt; 時，那所有目的地址是 &lt;code&gt;2.2.2.2:4242&lt;/code&gt; 的包就都能穿透防火牆到達該客戶端。&lt;/p&gt;
&lt;p&gt;這也正是問題所在：&lt;strong&gt;這一點並不總是成立&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;某些 NAT 設備的行為與我們假設的一致，它們的有狀態防火牆組件只要看到有客戶端自己，發起的出向包，就會允許相應的入向包進入；因此只要利用 STUN 功能，再加上兩端同時，發起防火牆穿透，就能把連接打通；&lt;/p&gt;

&lt;blockquote&gt;in theory, there are also NAT devices that are super 
relaxed, and don’t ship with stateful firewall stuff at all. In those, 
you don’t even need simultaneous transmission, the STUN request gives 
you an internet &lt;code&gt;ip:port&lt;/code&gt; that anyone can connect to with no further ceremony. If such devices do still exist, they’re increasingly rare.&lt;/blockquote&gt;

&lt;/li&gt;&lt;li&gt;
&lt;p&gt;另外一些 NAT 設備就要困難很多了，它會&lt;strong&gt;針對每個目的地址來生成一條相應的映射關係&lt;/strong&gt;。 在這樣的設備上，如果我們用相同的 socket 來分別發送數據包到 &lt;code&gt;5.5.5.5:1234&lt;/code&gt; and &lt;code&gt;7.7.7.7:2345&lt;/code&gt;，我們就會得到 &lt;code&gt;2.2.2.2&lt;/code&gt; 上的兩個不同的端口，每個目的地址對應一個。 如果反向包的端口用的不對，包就無法通過防火牆。如下圖所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-stun-3.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-stun-3.png&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;知道 NAT 設備的行為並不是完全一樣之後，我們來引入一些正式術語。&lt;/p&gt;
&lt;h2&gt;5.1 早期術語&lt;/h2&gt;
&lt;p&gt;如果之前接觸過 NAT 穿透，可能會聽説過下面這些名詞：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;「Full Cone」&lt;/li&gt;&lt;li&gt;「Restricted Cone」&lt;/li&gt;&lt;li&gt;「Port-​Restricted Cone」&lt;/li&gt;&lt;li&gt;「Symmetric」 NATs&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;這些都是 NAT 穿透領域的早期術語。&lt;/p&gt;
&lt;p&gt;但其實這些術語&lt;strong&gt;相當讓人困惑&lt;/strong&gt;。我每次都要，查一下 Restricted Cone NAT 
是什麼意思。從實際經驗來看，我並不是唯一對此感到困惑的人。 例如，如今互聯網上將 「easy」 NAT 歸類為 Full 
Cone，而實際上它們更應該歸類為 Port-​Restricted Cone。&lt;/p&gt;
&lt;h2&gt;5.2 近期研究與新術語&lt;/h2&gt;
&lt;p&gt;最近的一些研究和 RFC 已經提出了一些更準確的術語。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;首先，它們明確瞭如下事實：&lt;strong&gt;NAT 設備的行為差異表現在多個維度&lt;/strong&gt;， 而並非只有早期研究中所説的 「cone」 這一個維度，因此&lt;strong&gt;基於 「cone」 來劃分類別並不是很有幫助&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;其次，新研究和新術語能&lt;strong&gt;更準確地描述 NAT 在做什麼&lt;/strong&gt;。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;前面提到的所謂 &lt;strong&gt;「easy」 和 「hard」 NAT，只在一個維度有不同&lt;/strong&gt;：NAT 映射是否考慮到目的地址信息。 &lt;a href=&quot;https://tools.ietf.org/html/rfc4787&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;RFC 4787&lt;/a&gt; 中，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;將 &lt;strong&gt;easy NAT 及其變種&lt;/strong&gt;稱為 「Endpoint-​Independent Mapping」 (&lt;strong&gt;EIM，終點無關的映射&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;但是，從&lt;strong&gt;「命名很難」&lt;/strong&gt;這一程序員界的偉大傳統來説，EIM 這個詞其實，也並不是 100% 準確，因為這種 NAT 仍然依賴 endpoint，只不過依賴的是源 endpoint：每個 source &lt;code&gt;ip:port&lt;/code&gt; 對應一個映射 —— 否則你的包就會和別人的包混在一起，導致混亂。&lt;/p&gt;
&lt;p&gt;嚴格來説，EIM 應該稱為 「Destination Endpoint Independent Mapping」 (DEIM?)， 但這個名字太拗口了，而且按照慣例，Endpoint 永遠指的是 Destination Endpoint。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;將 &lt;strong&gt;hard NAT 以及變種&lt;/strong&gt;稱為 「Endpoint-​Dependent Mapping」（&lt;strong&gt;EDM，終點相關的映射&lt;/strong&gt;） 。&lt;/p&gt;
&lt;p&gt;EDM 中還有一個子類型，依據是隻根據 dst_​ip 做映射，還是根據 dst_​ip + dst_​port 做映射。 對於 NAT 穿透來説，這種區分對來説是一樣的：它們&lt;strong&gt;都會導致 STUN 方式不可用&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;5.3 老的 cone 類型劃分&lt;/h2&gt;
&lt;p&gt;你可能會有疑問：根據是否依賴 endpoint 這一條件，只能組合出兩種可能，那為什麼傳，統分類中會有四種 cone 類型呢？答案是 &lt;strong&gt;cone 包含了兩個正交維度的 NAT 行為&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;NAT 映射行為&lt;/strong&gt;：前面已經介紹過了，&lt;/li&gt;&lt;li&gt;&lt;strong&gt;有狀態防火牆行為&lt;/strong&gt;：與前者類似，也是分為與 endpoint 相關還是無關兩種類型。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;因此最終組合如下：&lt;/p&gt;
&lt;p&gt;NAT Cone Types&lt;/p&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;th&gt;&lt;br /&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Endpoint 無關 NAT mapping&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Endpoint 相關 NAT mapping (all types)&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Endpoint 無關防火牆&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Full Cone NAT&lt;/td&gt;
&lt;td&gt;N/​A*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Endpoint 相關防火牆 (dst. IP only)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Restricted Cone NAT&lt;/td&gt;
&lt;td&gt;N/​A*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Endpoint 相關防火牆 (dst. IP+port)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Port-​Restricted Cone NAT&lt;/td&gt;
&lt;td&gt;Symmetric NAT&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;分解到這種程度之後就可以看出，&lt;strong&gt;cone 類型對 NAT 穿透場景來説並沒有什麼意義&lt;/strong&gt;。 我們關心的只有一點：是否是 Symmetric —— 換句話説，一個 NAT 設備是 EIM 還是 EDM 類型的。&lt;/p&gt;
&lt;h2&gt;5.4 針對 NAT 穿透場景：簡化 NAT 分類&lt;/h2&gt;
&lt;p&gt;以上討論可知，雖然理解防火牆的具體行為很重要，但對於編寫 NAT 穿透代碼來説，這一點並不重要。 我們的&lt;strong&gt;兩端同時發包&lt;/strong&gt;方式（simultaneous transmission trick）能 &lt;strong&gt;有效穿透以上三種類型的防火牆&lt;/strong&gt;。在真實場景中， 我們主要在處理的是 IP-​and-​port endpoint-​dependent 防火牆。&lt;/p&gt;
&lt;p&gt;因此，對於實際 NAT 穿透實現，我們可以將以上分類簡化成：&lt;/p&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;th&gt;&lt;br /&gt;&lt;/th&gt;
&lt;th&gt;Endpoint-​Independent NAT mapping&lt;/th&gt;
&lt;th&gt;Endpoint-​Dependent NAT mapping (dst. IP only)&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Firewall is yes&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Easy NAT&lt;/td&gt;
&lt;td&gt;Hard NAT&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;5.5 更多 NAT 規範（RFC）&lt;/h2&gt;
&lt;p&gt;想了解更多新的 NAT 術語，可參考&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;RFC &lt;a href=&quot;https://tools.ietf.org/html/rfc4787&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;4787&lt;/a&gt; (NAT Behavioral Requirements for UDP)&lt;/li&gt;&lt;li&gt;RFC &lt;a href=&quot;https://tools.ietf.org/html/rfc5382&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;5382&lt;/a&gt; (for TCP)&lt;/li&gt;&lt;li&gt;RFC &lt;a href=&quot;https://tools.ietf.org/html/rfc5508&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;5508&lt;/a&gt; (for ICMP)&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;如果自己實現 NAT，那應該（should）遵循這些 RFC 的規範，這樣才能使你的 NAT 行為符合業界慣例，與其他廠商的設備或軟件良好兼容。&lt;/p&gt;
&lt;h2&gt;6.1 問題回顧與保底方式（中繼）&lt;/h2&gt;
&lt;p&gt;補完基礎知識（尤其是定義了什麼是 hard NAT）之後，回到我們的 NAT 穿透主題。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第 1~4 節已經解決了 STUN 和防火牆穿透的問題，&lt;/li&gt;&lt;li&gt;但 &lt;strong&gt;hard NAT 對我們來説是個大問題&lt;/strong&gt;，只要路徑上出現一個這種設備，前面的方案就行不通了。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;準備放棄了嗎？ 這才&lt;strong&gt;進入 NAT 真正有挑戰的部分&lt;/strong&gt;：如果已經試過了前面介紹的所有方式，仍然不能穿透，我們該怎麼辦呢？&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;實際上，確實有很多 NAT 實現在這種情況下都會選擇放棄，向用戶報一個&lt;strong&gt;「無法連接」&lt;/strong&gt;之類的錯誤。&lt;/li&gt;&lt;li&gt;但對我們來説，這麼快就放棄顯然是不可接受的 —— 解決不了連通性問題，Tailscale 就沒有存在的意義。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;我們的保底解決方式是：創建一個&lt;strong&gt;中繼連接&lt;/strong&gt;（relay）實現雙方的無障礙地通信。 但是，中繼方式性能不是很差嗎？這要看具體情況：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果能直連，那顯然沒必要用中繼方式；&lt;/li&gt;&lt;li&gt;但如果無法直連，而中繼路徑又非常接近雙方直連的真實路徑，並且帶寬足夠大，那中，繼方式並不會明顯降低通信質量。延遲肯定會增加一點，帶寬會佔用一些，但 &lt;strong&gt;相比完全連接不上，還是更能讓用戶接受的&lt;/strong&gt;。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;不過要注意：我們只有在無法直連時才會選擇中繼方式。實際場景中，&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;對於大部分網絡，我們都能通過前面介紹的方式實現直連，&lt;/li&gt;&lt;li&gt;剩下的長尾用中繼方式來解決，並不算一個很糟的方式。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;此外，某些網絡會阻止 NAT 穿透，其影響比這種 hard NAT 大多了。例如，我們觀察到 UC Berkeley guest WiFi
 禁止除 DNS 流量之外的所有 outbound UDP 流量。 不管用什麼 NAT 
黑科技，都無法繞過這個攔截。因此我們終歸還是需要一些可靠的 fallback 機制。&lt;/p&gt;
&lt;h2&gt;6.2 中繼協議：TURN、DERP&lt;/h2&gt;
&lt;p&gt;有多種中繼實現方式。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TURN&lt;/strong&gt; (Traversal Using Relays around NAT)：經典方式，核心理念是&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;用戶&lt;/strong&gt;（人）先去公網上的 TURN 服務器認證，成功後後者會告訴你：「我已經為你分配了 ip:port，接下來將為你中繼流量」，&lt;/li&gt;&lt;li&gt;然後將這個 ip:port 地址告訴對方，讓它去連接這個地址，接下去就是非常簡單的客戶端/服務器通信模型了。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;Tailscale 並不使用 TURN。這種協議&lt;strong&gt;用起來並不是很好&lt;/strong&gt;，而且與 STUN 不同， 它沒有真正的交互性，因為互聯網上並沒有公開的 TURN 服務器。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;DERP (Detoured Encrypted Routing Protocol)&lt;/p&gt;
&lt;p&gt;這是我們創建的一個協議，&lt;a href=&quot;https://tailscale.com/blog/how-tailscale-works/#encrypted-tcp-relays-derp&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;DERP&lt;/a&gt;，&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;它是一個&lt;strong&gt;通用目的包中繼協議，運行在 HTTP 之上&lt;/strong&gt;，而大部分網絡都是允許 HTTP 通信的。&lt;/li&gt;&lt;li&gt;它根據目的公鑰（destination’s public key）來中繼加密的流量（encrypted payloads）。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;前面也簡單提到過，DERP 既是我們在 NAT 穿透失敗時的保底通信方式（此時的角色，與 TURN 
類似），也是在其他一些場景下幫助我們完成 NAT 穿透的旁路信道。 換句話説，它既是我們的保底方式，也是有更好的穿透鏈路時，幫助我們進行連接升 
級（upgrade to a peer-​to-​peer connection）的基礎設施。&lt;/p&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;h2&gt;6.3 小結&lt;/h2&gt;
&lt;p&gt;有了「中繼」這種保底方式之後，我們穿透的成功率大大增加了。 如果此時不再閲讀本文接下來的內容，而是把上面介紹的穿透方式都實現了，我預計：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;90% 的情況下，你都能實現直連穿透；&lt;/li&gt;&lt;li&gt;剩下的 10% 裏，用中繼方式能穿透&lt;strong&gt;一些&lt;/strong&gt;（some）；&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;這已經算是一個「足夠好」的穿透實現了。&lt;/p&gt;
&lt;p&gt;如果你並不滿足於「足夠好」，那我們可以做的事情還有很多！&lt;/p&gt;
&lt;p&gt;本節將介紹一些五花八門的 tricks，在某些特殊場景下會幫到我們。單獨使用這項技術都，無法解決 NAT 穿透問題，但將它們巧妙地組合起來，我們能更加接近 100% 的穿透成功率。&lt;/p&gt;
&lt;h2&gt;7.1 穿透 hard NAT：暴力端口掃描&lt;/h2&gt;
&lt;p&gt;回憶 hard NAT 中遇到的問題，如下圖所示，關鍵問題是：easy NAT 不知道該往 hard NAT 方的哪個 &lt;code&gt;ip:port&lt;/code&gt; 發包。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-birthday-attack-1.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-birthday-attack-1.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;但&lt;strong&gt;必須&lt;/strong&gt;要往正確的 &lt;code&gt;ip:port&lt;/code&gt; 發包，才能穿透防火牆，實現雙向互通。 怎麼辦呢？&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;首先，我們能知道 hard NAT 的&lt;strong&gt;一些&lt;/strong&gt; &lt;code&gt;ip:port&lt;/code&gt;，因為我們有 STUN 服務器。&lt;/p&gt;
&lt;p&gt;這裏先假設我們獲得的這些 IP 地址都是正確的（這一點並不總是成立，但這裏先這麼假，設。而實際上，大部分情況下這一點都是成立的，如果對此有興趣，可以參考 REQ-​2 in &lt;a href=&quot;https://tools.ietf.org/html/rfc4787&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;RFC 4787&lt;/a&gt;）。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;IP 地址確定了，剩下的就是端口了。總共有 65535 中可能，我們能&lt;strong&gt;遍歷這個端口範圍&lt;/strong&gt;嗎？&lt;/p&gt;
&lt;p&gt;如果發包速度是 100 packets/s，那最壞情況下，需要 &lt;strong&gt;10 分鐘&lt;/strong&gt;來找到正確的端口。 還是那句話，這雖然不是最優的，但總比連不上好。&lt;/p&gt;
&lt;p&gt;這很像是端口掃描（事實上，確實是），實際中可能會觸發對方的網絡入侵檢測軟件。&lt;/p&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;h2&gt;7.2 基於生日悖論改進暴力掃描：hard side 多開端口 + easy side 隨機探測&lt;/h2&gt;
&lt;p&gt;利用 &lt;a href=&quot;https://en.wikipedia.org/wiki/Birthday_problem&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;birthday paradox&lt;/a&gt; 算法， 我們能對端口掃描進行改進。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;上一節的基本前提是：hard side 只打開一個端口，然後 easy side 暴力掃描 65535 個端口來尋找這個端口；&lt;/li&gt;&lt;li&gt;這裏的改進是：在 hard size 開多個端口，例如 256 個（即同時打開 256 個 socket，目的地址都是 easy side 的 &lt;code&gt;ip:port&lt;/code&gt;）， 然後 easy side 隨機探測這邊的端口。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;這裏省去算法的數學模型，如果你對實現幹興趣，可以看看我寫的 &lt;a href=&quot;https://github.com/danderson/nat-birthday-paradox&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;python calculator&lt;/a&gt;。 計算過程是「經典」生日悖論的一個小變種。 下面是隨着 easy side random probe 次數（假設 hard size 256 個端口）的變化，兩邊打開的端口有重合（即通信成功）的概率：&lt;/p&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;th&gt;隨機探測次數&lt;/th&gt;
&lt;th&gt;成功概率&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;174&lt;/td&gt;
&lt;td&gt;50%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;256&lt;/td&gt;
&lt;td&gt;64%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1024&lt;/td&gt;
&lt;td&gt;98%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2048&lt;/td&gt;
&lt;td&gt;99.9%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;根據以上結果，如果還是假設 100 ports/​s 這樣相當溫和的探測速率，那 &lt;strong&gt;2 秒鐘就有約 50% 的成功概率&lt;/strong&gt;。 即使非常不走運，我們仍然能在 &lt;strong&gt;20s 時幾乎 100% 穿透成功&lt;/strong&gt;，而此時&lt;strong&gt;只探測了總端口空間的 4%&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;非常好！雖然這種 hard NAT 給我們帶來了嚴重的穿透延遲，但最終結果仍然是成功的。 那麼，如果是兩個 hard NAT，我們還能處理嗎？&lt;/p&gt;
&lt;h2&gt;7.3 雙 hard NAT 場景&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&quot;nat-birthday-attack-2.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-birthday-attack-2.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;這種情況下仍然可以用前面的 &lt;strong&gt;多端口+隨機探測&lt;/strong&gt; 方式，但成功概率要低很多了：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;每次通過一台 hard NAT 去探測對方的端口（目的端口）時，我們&lt;strong&gt;自己同時也生成了一個隨機源端口&lt;/strong&gt;，&lt;/li&gt;&lt;li&gt;這意味着我們的搜索空間變成了二維 &lt;code&gt;{src port, dst port}&lt;/code&gt; 對，而不再是之前的一維 dst port 空間。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;這裏我們也不就具體計算展開，只告訴結果：仍然&lt;strong&gt;假設目的端打開 256 個端口，從源端發起 2048 次（20 秒）&lt;/strong&gt;， 成功的概率是：&lt;strong&gt;0.01%&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果你之前學過生日悖論，就並不會對這個結果感到驚訝。理論上來説，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;要達到 &lt;strong&gt;99.9% 的成功率&lt;/strong&gt;，我們需要兩邊各進行&lt;strong&gt;170,000 次&lt;/strong&gt;探測 —— 如果還是以 100 packets/​sec 的速度，就需要 &lt;strong&gt;28 分鐘&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;要達到 &lt;strong&gt;50% 的成功率&lt;/strong&gt;，「只」需要 54,000 packets，也就是 &lt;strong&gt;9 分鐘&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;如果不使用生日悖論方式，而且&lt;strong&gt;暴力窮舉，需要 1.2 年時間&lt;/strong&gt;！&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;對於某些應用來説，28 分鐘可能仍然是一個可接受的時間&lt;/strong&gt;。用半個小時暴力穿透 NAT 之後， 這個連接就可以一直用着 —— 除非 NAT 設備重啓，那樣就需要再次花半個小時穿透建個新連接。但對於，交互式應用來説，這樣顯然是不可接受的。&lt;/p&gt;
&lt;p&gt;更糟糕的是，如果去看常見的辦公網路由器，你會震驚於它的 active session low limit 有多麼低。 例如，一台 Juniper SRX 300 &lt;strong&gt;最多支持 64,000 active sessions&lt;/strong&gt;。 也就是説，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果我們想創建&lt;strong&gt;一個&lt;/strong&gt;成功的穿透連接，&lt;strong&gt;就會把它的整張 session 表打爆&lt;/strong&gt; （因為我們要暴力探測 65535 個端口，每次探測都是一條新連接記錄）！ 這顯然要求這台路由器能&lt;strong&gt;從容優雅地處理過載的情況&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;這只是創建一條連接帶來的影響！如果 20 台機器同時對這台路由器發起穿透呢？&lt;strong&gt;絕對的災難！&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;至此，我們通過這種方式穿透了比之前更難一些的網絡拓撲。這是一個很大的成就，因為 &lt;strong&gt;家用路由器一般都是 easy NAT，hard NAT 一般都是辦公網路由器或雲 NAT 網關&lt;/strong&gt;。 這意味着這種方式能幫我們解決&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;home-to-office（家-&amp;gt;辦公室）&lt;/li&gt;&lt;li&gt;home-​to-​cloud （家-&amp;gt;雲）&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;的場景，以及一部分&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;office-​to-​cloud （辦公室-&amp;gt;雲）&lt;/li&gt;&lt;li&gt;cloud-​to-​cloud （雲-&amp;gt;辦公室）&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;場景。&lt;/p&gt;
&lt;h2&gt;7.4 控制端口映射（port mapping）過程：UPnP/NAT-PMP/PCP 協議&lt;/h2&gt;
&lt;p&gt;如果我們能&lt;strong&gt;讓 NAT 設備的行為簡單點&lt;/strong&gt;，不要把事情搞這麼複雜，那建，立連接（穿透）就會簡單很多。真有這樣的好事嗎？還真有，有專門的一種協議叫 &lt;strong&gt;端口映射協議&lt;/strong&gt;（port mapping protocols）。通過這種協議禁用掉前面，遇到的那些亂七八糟的東西之後，我們將得到一個非常簡單的「請求-響應」。&lt;/p&gt;
&lt;p&gt;下面是三個具體的端口映射協議：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://openconnectivity.org/developer/specifications/upnp-resources/upnp/internet-gateway-device-igd-v-2-0/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;UPnP IGD&lt;/a&gt; (Universal Plug’n’Play Internet Gateway Device)&lt;/p&gt;
&lt;p&gt;最老的端口控制協議， 誕生於 1990s 晚期，因此使用了很多上世紀 90 年代的技術 （XML、SOAP、&lt;strong&gt;multicast HTTP over UDP —— 對，HTTP over UDP&lt;/strong&gt; ），而且很難準確和安全地實現這個協議。但以前很多路由器都內置了 UPnP 協議， 現在仍然很多。&lt;/p&gt;
&lt;p&gt;請求和響應：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;「你好，請將我的 &lt;code&gt;lan-ip:port&lt;/code&gt; 轉發到公網（WAN）」，&lt;/li&gt;&lt;li&gt;「好的，我已經為你分配了一個公網映射 &lt;code&gt;wan-ip:port&lt;/code&gt; 」。&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;NAT-​PMP&lt;/p&gt;
&lt;p&gt;UPnP IGD 出來幾年之後，Apple 推出了一個功能類似的協議，名為 &lt;a href=&quot;https://tools.ietf.org/html/rfc6886&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;NAT-​PMP&lt;/a&gt; (NAT Port Mapping Protocol)。&lt;/p&gt;
&lt;p&gt;但與 UPnP 不同，這個協議&lt;strong&gt;只&lt;/strong&gt;做端口轉發，不管是在客戶端還是服務端，實現起來都非常簡單。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;PCP&lt;/p&gt;
&lt;p&gt;稍後一點，又出現了 NAT-​PMP v2 版，並起了個新名字&lt;a href=&quot;https://tools.ietf.org/html/rfc6887&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;PCP&lt;/a&gt; (Port Control Protocol)。&lt;/p&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;因此要更好地實現穿透，可以&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;先判斷本地的默認網關上是否啓用了 UPnP IGD, NAT-​PMP and PCP&lt;/strong&gt;，&lt;/li&gt;&lt;li&gt;
&lt;p&gt;如果探測發現其中任何一種協議有響應，我們就&lt;strong&gt;申請一個公網端口映射&lt;/strong&gt;，&lt;/p&gt;
&lt;p&gt;可以將這理解為一個&lt;strong&gt;加強版 STUN&lt;/strong&gt;：我們不僅能發現自己的公網 &lt;code&gt;ip:port&lt;/code&gt;，而且能指示我們的 NAT 設備對我們的通信對端友好一些 —— 但並不是為這個端口修改或添加防火牆規則。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;接下來，任何到達我們 NAT 設備的、地址是我們申請的端口的包，都會被設備轉發到我們。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;但我們&lt;strong&gt;不能假設這個協議一定可用&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;本地 NAT 設備可能不支持這個協議；&lt;/li&gt;&lt;li&gt;設備支持但默認禁用了，或者沒人知道還有這麼個功能，因此從來沒開過；&lt;/li&gt;&lt;li&gt;
&lt;p&gt;安全策略要求關閉這個特性。&lt;/p&gt;
&lt;p&gt;這一點非常常見，因為 UPnP 協議曾曝出一些高危漏洞（後面都修復了，因此如果是較新的設備，可以安全地使用 UPnP —— 
如果實現沒問題）。 不幸的是，某些設備的配置中，UPnP, NAT-PMP，PCP 是放在一個開關裏的（可能，統稱為 「UPnP」 
功能），一開全開，一關全關。因此如果有人擔心 UPnP 的安全性，他連另，外兩個也用不了。&lt;/p&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;最後，終歸來説，&lt;strong&gt;只要這種協議可用，就能有效地減少一次 NAT&lt;/strong&gt;，大大方便建連過程。 但接下來看一些不常見的場景。&lt;/p&gt;
&lt;h2&gt;7.5 多 NAT 協商（Negotiating numerous NATs）&lt;/h2&gt;
&lt;p&gt;目前為止，我們看到的客戶端和服務端都各只有一個 NAT 設備。如果有多個 NAT 設備會，怎麼樣？例如下面這種拓撲：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-multiple-layers.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-multiple-layers.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;這個例子比較簡單，不會給穿透帶來太大問題。包從客戶端 A &lt;strong&gt;經過多次 NAT&lt;/strong&gt; 到達公網的過程，與前面分析的&lt;strong&gt;穿過多層有狀態防火牆&lt;/strong&gt;是一樣的：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;額外的這層（NAT 設備）&lt;strong&gt;對客戶端和服務端來説都不可見&lt;/strong&gt;，我們的穿，透技術也不關心中間到底經過了多少層設備。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;真正有影響的其實只是最後一層設備&lt;/strong&gt;，因為對端需要在這一層設備上，找到入口讓包進來。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;具體來説，真正有影響的是端口轉發協議。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;客戶端使用這種協議分配端口時，為我們分配端口的是最靠近客戶端的這層 NAT 設備；&lt;/li&gt;&lt;li&gt;而我們期望的是讓最離客戶端最遠的那層 NAT 來分配，否則我們得到的就是一個網絡中間層分配的 &lt;code&gt;ip:port&lt;/code&gt;，對端是用不了的；&lt;/li&gt;&lt;li&gt;不幸的是，&lt;strong&gt;這幾種協議都不能遞歸地&lt;/strong&gt;告訴我們下一層 NAT 設備是多少 —— 雖然可以用 traceroute 之類的工具來探測網絡路徑，再加上，猜路上的設備是不是 NAT 設備（嘗試發送 NAT 請求） —— 但這個就看運氣了。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;這就是為什麼互聯網上充斥着大量的文章説 &lt;strong&gt;double-​NAT 有多糟糕&lt;/strong&gt;，以，及警告用戶為保持後向兼容不要使用 double-NAT。但實際上，double-NAT &lt;strong&gt;對於絕大部分，互聯網應用來説都是不可見的（透明的）&lt;/strong&gt;，因為大部分應用並不需要主動地做這種 NAT 穿，透。&lt;/p&gt;
&lt;p&gt;但我也絕不是在建議你在自己的網絡中設置 double-​NAT。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;破壞了端口映射協議之後，某些視頻遊戲的多人（multiplayer）模式就會無法使用，&lt;/li&gt;&lt;li&gt;也可能會使你的 IPv6 網絡無法派上用場，後者是不用 NAT 就能雙向直連的一個好方案。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;但如果 double-​NAT 並不是你能控制的，那除了不能用到這種端口映射協議之外，其他大部分東西都是不受影響的。&lt;/p&gt;
&lt;p&gt;double-​NAT 的故事到這裏就結束了嗎？—— 並沒有，而且更大型的 double-​NAT 場景將展現在我們面前。&lt;/p&gt;
&lt;h2&gt;7.6 運營商級 NAT 帶來的問題&lt;/h2&gt;
&lt;p&gt;即使用 NAT 來解決 IPv4 地址不夠的問題，地址仍然是不夠用的，ISP（互聯網服務提供商） 顯然，無法為每個家庭都分配一個公網 IP 地址。那怎麼解決這個問題呢？ISP 的做法是&lt;strong&gt;不夠了就再嵌套一層 NAT&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;家用路由器將你的客戶端 SNAT 到一個 「intermediate」 IP 然後發送到運營商網絡，&lt;/li&gt;&lt;li&gt;ISP’s network 中的 NAT 設備再將這些 intermediate IPs 映射到少量的公網 IP。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;後面這種 NAT 就稱為「運營商級 NAT」（&lt;strong&gt;carrier-​grade NAT&lt;/strong&gt;，或稱電信級 NAT），縮寫 CGNAT。如下圖所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-cgnat-1.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-cgnat-1.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;CGNAT 對 NAT 穿透來説是一個大麻煩。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在此之前，辦公網用戶要快速實現 NAT 穿透，只需在他們的路由器上手動設置端口映射就行了。&lt;/li&gt;&lt;li&gt;但有了 CGNAT 之後就不管用了，因為你無法控制運營商的 CGNAT！&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;好消息是：這其實是 double-​NAT 的一個小變種，因此前面介紹的解決方式大部分還仍然是適用的。 
某些東西可能會無法按預期工作，但只要肯給 ISP 交錢，這些也都能解決。 除了 port mapping 
protocols，其他我們已經介紹的所有東西在 CGNAT 裏都是適用的。&lt;/p&gt;
&lt;h3&gt;新挑戰：同一 CGNAT 側直連，STUN 不可用&lt;/h3&gt;
&lt;p&gt;但我們確實遇到了一個新挑戰：如何直連兩個在同一 CGNAT 但不同家用路由器中的對端呢？如下圖所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-cgnat-2.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-cgnat-2.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在這種情況下，STUN 就無法正常工作了&lt;/strong&gt;：STUN 看到的是客戶端在公網（CGNAT 後面）看到的地址， 而我們想獲得的是在 「middle network」 中的 &lt;code&gt;ip:port&lt;/code&gt;，這才是對端真正需要的地址，&lt;/p&gt;
&lt;h3&gt;解決方案：如果端口映射協議能用：一端做端口映射&lt;/h3&gt;
&lt;p&gt;怎麼辦呢？&lt;/p&gt;
&lt;p&gt;如果你想到了端口映射協議，那恭喜，答對了！&lt;strong&gt;如果 peer 中任何一個 NAT 支持端口映射協議&lt;/strong&gt;， 對我們就能實現穿透，因為它分配的 &lt;code&gt;ip:port&lt;/code&gt; 正是對端所需要的信息。&lt;/p&gt;
&lt;p&gt;這裏諷刺的是：double-NAT（指 CGNAT）破壞了端口映射協議，但在這裏又救了我們！ 當然，我們假設這些協議一定可用，因為 CGNAT ISP 傾向於在它們的家用路由器側關閉，這些功能，已避免軟件得到「錯誤的」結果，產生混淆。&lt;/p&gt;
&lt;h3&gt;解決方案：如果端口映射協議不能用：NAT hairpin 模式&lt;/h3&gt;
&lt;p&gt;如果不走運，NAT 上沒有端口映射功能怎麼辦？&lt;/p&gt;
&lt;p&gt;讓我們回到基於 STUN 的技術，看會發生什麼。兩端在 CGNAT 的同一側，假設 STUN 告訴我們 A 的地址是 &lt;code&gt;2.2.2.2:1234&lt;/code&gt;，B 的地址是 &lt;code&gt;2.2.2.2:5678&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;那麼接下來的問題是：如果 A 向 &lt;code&gt;2.2.2.2:5678&lt;/code&gt; 發包會怎麼樣？期望的 CGNAT 行為是：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;執行 A 的 NAT 映射規則，即對 &lt;code&gt;2.2.2.2:1234 -&amp;gt; 2.2.2.2:5678&lt;/code&gt; 進行 SNAT。&lt;/li&gt;&lt;li&gt;注意到目的地址 &lt;code&gt;2.2.2.2:5678&lt;/code&gt; 匹配到的是 B 的入向 NAT 映射，因此接着對這個包執行 DNAT，將目的 IP 改成 B 的私有地址。&lt;/li&gt;&lt;li&gt;通過 CGNAT 的 internal 接口（而不是 public 接口，對應公網）將包發給 B。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;這種 NAT 行為有個專門的術語，叫 &lt;strong&gt;hairpinning&lt;/strong&gt;（直譯為髮卡，意思，是像髮卡一樣，沿着一邊上去，然後從另一邊繞回來），&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;hairpin-icon.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/hairpin-icon.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;大家應該猜到的一個事實是：&lt;strong&gt;不是所以 NAT 都支持 hairpin 模式&lt;/strong&gt;。 實際上，大量 well-​behaved NAT 設備都不支持 hairpin 模式，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;因為它們都有 &lt;strong&gt;「只有 src_​ip 是私有地址且 dst_​ip 是公網地址的包才會經過我」&lt;/strong&gt; 之類的假設。&lt;/li&gt;&lt;li&gt;因此對於這種目的地址不是公網、需要讓路由器把包再轉回內網的包，它們會&lt;strong&gt;直接丟棄&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;這些邏輯甚至是直接實現在路由芯片中的，因此除非升級硬件，否則單靠軟件編程無法改變這種行為。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Hairpin 是所有 NAT 設備的特性（支持或不支持），並不是 CGNAT 獨有的。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;在大部分情況下，這個特性對我們的 NAT 穿透目的來説都是無所謂的，因為我們期望中 &lt;strong&gt;兩個 LAN NAT 設備會直接通信，不會再向上繞到它們的默認網關 CGNAT 來解決這個問題&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Hairpin 特性可有可無這件事有點遺憾，這可能也是為什麼 hairpin 功能經常 broken 的原因。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;一旦必須涉及到 CGNAT，那 hairpinning 對連接性來説就至關重要了。&lt;/p&gt;
&lt;p&gt;Hairpinning 使內網連接的行為與公網連接的行為完成一致，因此我們無需關心目的，地址類型，也不用知曉自己是否在一台 CGNAT 後面。&lt;/p&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;如果 hairpinning 和 port mapping protocols 都不可用，那隻能降級到中繼模式了&lt;/strong&gt;。&lt;/p&gt;
&lt;h2&gt;7.7 全 IPv6 網絡：理想之地，但並非問題全無&lt;/h2&gt;
&lt;p&gt;行文至此，一些讀者可能已經對着屏幕咆哮：&lt;strong&gt;不要再用 IPv4 了！&lt;/strong&gt; 花這麼多時間精力解決這些沒意義的東西，還不如直接換成 IPv6！&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;的確，之所以有這些亂七八糟的東西，就是因為 IPv4 地址不夠了，我們&lt;strong&gt;一直在用越來越複雜的 NAT 來給 IPv4 續命&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;如果 IP 地址夠用，無需 NAT 就能讓世界上的每個設備都有一個自己的公網 IP 地址，這些問題不就解決了嗎？&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;簡單來説，是的，這也正是 IPv6 能做的事情。但是，也只説對了一半：在理想的全 IPv6 世界中，所有這些東西會變得更加簡單，但我們面臨的&lt;strong&gt;問題並不會完全消失&lt;/strong&gt; —— 因為&lt;strong&gt;有狀態防火牆仍然還是存在的&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;辦公室中的電腦可能有一個公網 IPv6 地址，但你們公司肯定會架設一個防火牆，只允許，你的電腦主動訪問公網，而不允許反向主動建連。&lt;/li&gt;&lt;li&gt;其他設備上的防火牆也仍然存在，應用類似的規則。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;因此，我們仍然會用到&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;本文最開始介紹的防火牆穿透技術，以及&lt;/li&gt;&lt;li&gt;幫助我們獲取自己的公網 &lt;code&gt;ip:port&lt;/code&gt; 信息的旁路信道&lt;/li&gt;&lt;li&gt;仍然需要在某些場景下 fallback 到中繼模式，例如 fallback 到最通用的 HTTP 中繼，協議，以繞過某些網絡禁止 outbound UDP 的問題。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;但我們現在可以拋棄 &lt;strong&gt;STUN、生日悖論、端口映射協議、hairpin&lt;/strong&gt; 等等東西了。 這是一個好消息！&lt;/p&gt;
&lt;h3&gt;全球 IPv4/​IPv6 部署現狀&lt;/h3&gt;
&lt;p&gt;另一個更加嚴峻的現實問題是：當前並不是一個全 IPv6 世界。目前世界上&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;大部分還是 IPv4，&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.google.com/intl/en/ipv6/statistics.html&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;大約 33% 是 IPv6&lt;/a&gt;，而且分佈極度不均勻，因此某些，通信對所在的可能是 100% IPv6，也可能是 0%，或二者之間。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;不幸的是，這意味着，IPv6 **還**無法作為我們的解決方案。 就目前來説，它只是我們的工具箱中的一個備選。對於某些 peer 
來説，它簡直是完美工，具，但對其他 peer 來説，它是用不了的。如果目標是「任何情況下都能穿透（連接） 成功」，那我們就仍然需要 
IPv4+NAT 那些東西。&lt;/p&gt;
&lt;h3&gt;新場景：NAT64/DNS64&lt;/h3&gt;
&lt;p&gt;IPv4/​IPv6 共存也引出了一個新的場景：NAT64 設備。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nat-ipv6.png&quot; src=&quot;https://arthurchiao.art/assets/img/nat-traversal/nat-ipv6.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;前面介紹的都是 NAT44 設備：它們將一個 IPv4 地址轉換成另一 IPv4 地址。 NAT64 從名字可以看出，是將一個內側 
IPv6 地址轉換成一個外側 IPv4 地址。 利用 DNS64 設備，我們能將 IPv4 DNS 應答給 IPv6 
網絡，這樣對終端來説，它看到的就是一個，全 IPv6 網絡，而仍然能訪問 IPv4 公網。&lt;/p&gt;

&lt;blockquote&gt;Incidentally, you can extend this naming scheme 
indefinitely. There have been some experiments with NAT46; you could 
deploy NAT66 if you enjoy chaos; and some RFCs use NAT444 for 
carrier-​grade NAT.&lt;/blockquote&gt;

&lt;p&gt;如果需要處理 DNS 問題，那這種方式工作良好。例如，如果連接到 google.com，將這個域名解析成 IP 地址的過程會涉及到 DNS64 設備，它又會進一步 involve NAT64 設備，但後一步對用戶來説是無感知的。&lt;/p&gt;
&lt;p&gt;但&lt;strong&gt;對於 NAT 和防火牆穿透來説，我們會關心每個具體的 IP 地址和端口&lt;/strong&gt;。&lt;/p&gt;
&lt;h3&gt;解決方案：CLAT (Customer-​side transLATor)&lt;/h3&gt;
&lt;p&gt;如果設備支持 CLAT (Customer-​side translator — from Customer XLAT)，那我們就很幸運：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;CLAT 假裝操作系統有直接 IPv4 連接，而背後使用的是 NAT64&lt;/strong&gt;，以對應用程序無感知。 在有 CLAT 的設備上，我們無需做任何特殊的事情。&lt;/li&gt;&lt;li&gt;CLAT &lt;strong&gt;在移動設備上非常常見&lt;/strong&gt;，但在桌面電腦、筆記本和服務器上非常少見， 因此在後者上，必須自己做 CLAT 做的事情：檢測 NAT64+DNS64 的存在，然後正確地使用它們。&lt;/li&gt;&lt;/ul&gt;
&lt;h3&gt;解決方案：CLAT 不存在時，手動穿透 NAT64 設備&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;首先檢測是否存在 NAT64+DNS64。&lt;/p&gt;
&lt;p&gt;方法很簡單：向 &lt;code&gt;ipv4only.arpa.&lt;/code&gt; 發送一個 DNS 請求。這個域名會解析，到一個已知的、固定的 IPv4 地址，而且是&lt;strong&gt;純 IPv4 地址&lt;/strong&gt;。如果得到的，是一個 IPv6 地址，就可以判斷有 DNS64 服務器做了轉換，而它必然會用到 NAT64。這樣，就能判斷出 NAT64 的前綴是多少。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;此後，要向 IPv4 地址發包時，發送格式為&lt;code&gt;{NAT64 prefix + IPv4 address}&lt;/code&gt; 的 IPv6 包。 類似地，收到來源格式為 &lt;code&gt;{NAT64 prefix + IPv4 address}&lt;/code&gt; 的包時，就是 IPv4 流量。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;接下來，通過 NAT64 網絡與 STUN 通信來獲取自己在 NAT64 上的公網 &lt;code&gt;ip:port&lt;/code&gt;，接，下來就回到經典的 NAT 穿透問題了 —— 除了需要多做一點點事情。&lt;/p&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;幸運的是，如今的大部分 v6-​only 網絡都是移動運營商網絡，而幾乎所有手機都支持 CLAT。 運營 v6-​only 網絡的 
ISPs 會在他們給你的路由器上部署 CLAT，因此最後你其實不需要做什麼事情。 但如果想實現 100% 
穿透，就需要解決這種邊邊角角的問題，即必須顯式支持從 v6-​only 網絡連接 v4-​only 對端。&lt;/p&gt;
&lt;h2&gt;7.8 將所有解決方式集成到 ICE 協議&lt;/h2&gt;
&lt;h3&gt;針對具體場景，該選擇哪種穿透方式？&lt;/h3&gt;
&lt;p&gt;至此，我們的 NAT 穿透之旅終於快結束了。我們已經覆蓋了有狀態防火牆、簡單和高級 NAT、IPv4 和 IPv6。只要將以上解決方式都實現了，NAT 穿透的目的就達到了！&lt;/p&gt;
&lt;p&gt;但是，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;對於給定的 peer，如何判斷改用哪種方式呢？&lt;/li&gt;&lt;li&gt;如何判斷這是一個簡單有狀態防火牆的場景，還是該用到生日悖論算法，還是需要手動處理 NAT64 呢？&lt;/li&gt;&lt;li&gt;還是通信雙方在一個 WiFi 網絡下，連防火牆都沒有，因此不需要任何操作呢？&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;早期 NAT 穿透&lt;/strong&gt;比較簡單，能讓我們&lt;strong&gt;精確判斷出 peer 之間的路徑特點&lt;/strong&gt;，然後針對性地採用相應的解決方式。 但後面，網絡工程師和 NAT 設備開發工程師引入了一些新理念，給路徑判斷造成很大困難。因此，我們需要簡化客戶端側的思考（判斷邏輯）。&lt;/p&gt;
&lt;p&gt;這就要提到 Interactive Connectivity Establishment (ICE，交換式連接建立) 協議了。 與 STUN/​TURN 類似，ICE 來自&lt;strong&gt;電信領域&lt;/strong&gt;，因此其 RFC 充滿了 SIP、SDP、信令會話、撥號等等電話術語。 但如果忽略這些領域術語，我們會看到它&lt;strong&gt;描述了一個極其優雅的判斷最佳連接路徑的算法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;真的？這個算法是：&lt;strong&gt;每種方法都試一遍，然後選擇最佳的那個方法&lt;/strong&gt;。就是這個算法，驚喜嗎？&lt;/p&gt;
&lt;p&gt;來更深入地看一下這個算法。&lt;/p&gt;
&lt;h3&gt;ICE (Interactive Connectivity Establishment) 算法&lt;/h3&gt;
&lt;p&gt;這裏的討論不會嚴格遵循 ICE spec，因此如果是在自己實現一個可互操作的 ICE 客戶端，應該通讀&lt;a href=&quot;https://tools.ietf.org/html/rfc8445&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;RFC 8445&lt;/a&gt;, 根據它的描述來實現。這裏忽略所有電信術語，只關注核心的算法邏輯， 並提供幾個在 ICE 規範允許範圍的靈活建議。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;為實現和某個 peer 的通信，首先需要確定我們自己用的（客戶端側）這個 socket 的地址， 這是一個列表，至少應該包括：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;我們自己的 IPv6 &lt;code&gt;ip:ports&lt;/code&gt;&lt;/li&gt;&lt;li&gt;我們自己的 IPv4 LAN &lt;code&gt;ip:ports&lt;/code&gt;（局域網地址）&lt;/li&gt;&lt;li&gt;通過 STUN 服務器獲取到的我們自己的 IPv4 WAN &lt;code&gt;ip:ports&lt;/code&gt;（&lt;strong&gt;公網地址&lt;/strong&gt;，可能會經過 NAT64 轉換）&lt;/li&gt;&lt;li&gt;通過端口映射協議獲取到的我們自己的 IPv4 WAN &lt;code&gt;ip:port&lt;/code&gt;（NAT 設備的&lt;strong&gt;端口映射協議分配的公網地址&lt;/strong&gt;）&lt;/li&gt;&lt;li&gt;運營商提供給我們的 endpoints（例如，&lt;strong&gt;靜態配置的端口轉發&lt;/strong&gt;）&lt;/li&gt;&lt;/ol&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;通過旁路信道與 peer 互換這個列表。兩邊都拿到對方的列表後，就開始互相探測對方提供的地址。 &lt;strong&gt;列表中地址沒有優先級&lt;/strong&gt;，也就是説，如果對方給的了 15 個地址，那我們應該把這 15 個地址都探測一遍。&lt;/p&gt;
&lt;p&gt;這些&lt;strong&gt;探測包有兩個目的&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;打開防火牆，穿透 NAT&lt;/strong&gt;，也就是本文一直在介紹的內容；&lt;/li&gt;&lt;li&gt;&lt;strong&gt;健康檢測&lt;/strong&gt;。我們在不斷交換（最好是已認證的）「ping/pong」 包，來檢測某個特定的路徑是不是端到端通的。&lt;/li&gt;&lt;/ol&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;最後，一小會兒之後，從可用的備選地址中（根據某些條件）選擇「最佳」的那個，任務完成！&lt;/p&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;這個算法的優美之處在於：只要選擇最佳線路（地址）的算法是正確的，那就總能獲得最佳路徑。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ICE 會預先對這些備選地址進行排序（通常：LAN &amp;gt; WAN &amp;gt; WAN+NAT），但用戶也可以自己指定這個排序行為。&lt;/li&gt;&lt;li&gt;從 v0.100.0 開始，Tailscale 從原來的 hardcode 優先級切換成了根據 round-​trip latency 的方式，它大部分情況下排序的結果和 &lt;code&gt;LAN &amp;gt; WAN &amp;gt; WAN+NAT&lt;/code&gt; 是一致的。 但相比於靜態排序，我們是動態計算每條路徑應該屬於哪個類別。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;ICE spec 將協議組織為兩個階段：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;探測階段&lt;/li&gt;&lt;li&gt;通信階段&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;但不一定要嚴格遵循這兩個步驟的順序。在 Tailscale，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;我們發現更優的路徑之後就會自動切換過去，&lt;/li&gt;&lt;li&gt;所有的連接都是先選擇 DERP 模式（中繼模式）。這意味着連接立即就能建立（&lt;strong&gt;優先級最低但 100% 能成功的模式&lt;/strong&gt;），用戶不用任何等待，&lt;/li&gt;&lt;li&gt;然後並行進行路徑發現。通常幾秒鐘之後，我們就能發現一條更優路徑，然後將現有連接透明升級（upgrade）過去。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;但有一點需要關心：非對稱路徑。ICE 花了一些精力來保證通信雙方選擇的是相同的網絡，路徑，這樣才能保證這條路徑上有雙向流量，能保持防火牆和
 NAT 設備的連接一直處於 open 狀態。 
自己實現的話，其實並不需要花同樣大的精力來實現這個保證，但需要確保你所有使用的所有路徑上，都有雙向流量。 
這個目標就很簡單了，只需要定期在所有已使用的路徑上發 ping/pong 就行了。&lt;/p&gt;
&lt;h3&gt;健壯性與降級&lt;/h3&gt;
&lt;p&gt;要實現健壯性，還需要檢測當前已選擇的路徑是否已經失敗了（例如，NAT 設備維護清掉了所有狀態）， 如果失敗了就要&lt;strong&gt;降級（downgrade）到其他路徑&lt;/strong&gt;。這裏有兩種方式：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;持續探測所有路徑，維護一個降級時會用的備用地址列表；&lt;/li&gt;&lt;li&gt;
&lt;p&gt;&lt;strong&gt;直接降級到保底的中繼模式&lt;/strong&gt;，然後再通過路徑探測升級到更好的路徑。&lt;/p&gt;
&lt;p&gt;考慮到發生降級的概率是非常小的，因此這種方式可能是&lt;strong&gt;更經濟&lt;/strong&gt;的。&lt;/p&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;h2&gt;7.9 安全&lt;/h2&gt;
&lt;p&gt;最後需要提到安全。&lt;/p&gt;
&lt;p&gt;本文的所有內容都假設：我們使用的&lt;strong&gt;上層協議已經有了自己的安全機制&lt;/strong&gt;（ 例如 QUIC 協議有 TLS 證書，WireGuard 協議有自己的公鑰）。 如果還沒有安全機制，那顯然是要立即補上的。一旦動態切換路徑，&lt;strong&gt;基於 IP 的安全機制就是無用的了&lt;/strong&gt; （IP 協議最開始就沒怎麼考慮安全性），至少要有&lt;strong&gt;端到端的認證&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;嚴格來説，如果上層協議有安全機制，那即使收到是欺騙性的 ping/​pong 流量，問題都不大， 最壞的情況也就是&lt;strong&gt;攻擊者誘導兩端通過他們的系統來中繼流量&lt;/strong&gt;。 而有了端到端安全機制，這並不是一個大問題（取決於你的威脅模型）。&lt;/li&gt;&lt;li&gt;但出於謹慎考慮，最好還是對路徑發現的包也做認證和加密。具體如何做可以諮詢你們的應用安全工程師。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;我們終於完成了 NAT 穿透的目標！&lt;/p&gt;
&lt;p&gt;如果實現了以上提到的所有技術，你將得到一個業內領先的 NAT 穿透軟件，能在絕大多數場景下實現端到端直連。 如果直連不了，還可以降級到保底的中繼模式（對於長尾來説只能靠中繼了）。&lt;/p&gt;
&lt;p&gt;但這些工作相當複雜！其中一些問題研究起來很有意思，但很難做到完全正確，尤其是那些，非常邊邊角角的場景，真正出現的概率極小，但解決它們所需花費的經歷又極大。 不過，這種工作只需要做一次，一旦解決了，你就具備了某種超級能力： 探索令人激動的、相對還比較嶄新的&lt;strong&gt;端到端應用&lt;/strong&gt;（peer-​to-​peer applications）世界。&lt;/p&gt;
&lt;h2&gt;8.1 跨公網，端到端直連&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;去中心化軟件&lt;/strong&gt;領域中的許多有趣想法，簡化之後其實都變成了 &lt;strong&gt;跨過公網（互聯網）實現端到端直連&lt;/strong&gt; 這一問題，開始時可能覺得很簡單，但真正做才，發現比想象中難多了。現在知道如何解決這個問題了，動手開做吧！&lt;/p&gt;
&lt;h2&gt;8.2 結束語之 TL; DR&lt;/h2&gt;
&lt;p&gt;實現健壯的 NAT 穿透需要下列基礎：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;一種基於 UDP 的協議；&lt;/li&gt;&lt;li&gt;能在程序內直接訪問 socket；&lt;/li&gt;&lt;li&gt;有一個與 peer 通信的旁路信道；&lt;/li&gt;&lt;li&gt;若干 STUN 服務器；&lt;/li&gt;&lt;li&gt;一個保底用的中繼網絡（可選，但強烈推薦）&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;然後需要：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;遍歷所有的 &lt;code&gt;ip:port&lt;/code&gt;；&lt;/li&gt;&lt;li&gt;查詢 STUN 服務器來獲取自己的公網 &lt;code&gt;ip:port&lt;/code&gt; 信息，以及判斷自己這一側的 NAT 的「難度」（difficulty）；&lt;/li&gt;&lt;li&gt;使用 port mapping 協議來獲取更多的公網 &lt;code&gt;ip:ports&lt;/code&gt;；&lt;/li&gt;&lt;li&gt;檢查 NAT64，通過它獲取自己的公網 &lt;code&gt;ip:port&lt;/code&gt;；&lt;/li&gt;&lt;li&gt;將自己的所有公網 &lt;code&gt;ip:ports&lt;/code&gt; 信息通過旁路信道與 peer 交換，以及某些加密祕鑰來保證通信安全；&lt;/li&gt;&lt;li&gt;通過保底的中繼方式與對方開始通信（可選，這樣連接能快速建立）&lt;/li&gt;&lt;li&gt;如果有必要/想這麼做，探測對方的提供的所有 &lt;code&gt;ip:port&lt;/code&gt;，以及執行生日攻擊（birthday attacks）來穿透 harder NAT；&lt;/li&gt;&lt;li&gt;發現更優路徑之後，透明升級到該路徑；&lt;/li&gt;&lt;li&gt;如果當前路徑斷了，降級到其他可用的路徑；&lt;/li&gt;&lt;li&gt;確保所有東西都是加密的，並且有端到端認證。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://arthurchiao.art/blog/everything-about-pki-zh/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;« [譯] 寫給工程師：關於證書（certificate）和公鑰基礎設施（PKI）的一切（SmallStep, 2018）&lt;/a&gt; &lt;a href=&quot;https://arthurchiao.art/blog/formal-requirements-for-virtualizable-arch-zh/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;[譯] [論文] 可虛擬化第三代（計算機）架構的規範化條件（ACM, 1974） »&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;&lt;p style=&quot;text-indent: 0;&quot;&gt;&lt;a href=&quot;https://arthurchiao.art/blog/how-nat-traversal-works-zh/&quot; target=&quot;_blank&quot;&gt;https://arthurchiao.art/blog/how-nat-traversal-works-zh/&lt;/a&gt;&lt;/p&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻牆技術博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;訂閲地址及社交帳號&lt;/a&gt;&lt;/div&gt;</description>
                <link>https://www.chinagfw.org/2023/08/nat.html</link>
                <author>noreply@blogger.com (pompei)</author>
                <thr:total>0</thr:total>
            </item>
            <item>
                <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-7297187847024007686</guid>
                <pubDate>Sun, 06 Aug 2023 13:39:00 +0000</pubDate>
                <atom:updated>2023-08-18T23:55:15.990+08:00</atom:updated>
                <title>Warp: 一種安全的跨平台文件共享應用</title>
                <description>&lt;div class=&quot;flex flex-col gap-4 px-1 my-4&quot;&gt;&lt;br /&gt;via &lt;a href=&quot;https://here.news/post/11dc8243-b3a8-4fc2-8818-6be51e86b724/warp-%E4%B8%80%E7%A7%8D%E5%AE%89%E5%85%A8%E7%9A%84%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E5%BA%94%E7%94%A8&quot;&gt;here.news&lt;/a&gt;&lt;br /&gt;&lt;div class=&quot;SinglePost_SinglePost__3in7m&quot;&gt;&lt;p&gt;在 Linux 和 Windows 之間安全地共享文件的無縫方式？試試這個！&lt;/p&gt;&lt;p&gt;在我們的首次嘗試系列文章中，我們發現了一種在 Linux 和 Windows 系統之間傳輸文件的安全高效方法。&lt;/p&gt;&lt;p&gt;一個名為「Warp」的工具，是 GNOME Circle 的一部分，包含擴展 GNOME 生態系統的應用程序。Warp 通過互聯網或本地網絡實現文件的無縫傳輸。&lt;/p&gt;&lt;p&gt;讓我們來看看它。&lt;/p&gt;&lt;h2&gt;Warp：概述⭐&lt;/h2&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/56e93ef3-e574-4ed4-9fd7-010abe3abf31_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/56e93ef3-e574-4ed4-9fd7-010abe3abf31_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;Warp 主要用 Rust 編程語言編寫，是一個基於 GTK 的文件傳輸應用，使用「Magic Wormhole」協議在互聯網/本地網絡上進行文件傳輸。&lt;/p&gt;&lt;p&gt;&lt;b&gt;所有文件傳輸都是加密的，接收者必須使用基於單詞的代碼來訪問文件，以防止任何濫用。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;允許我向您展示它是如何工作的。&lt;/p&gt;&lt;p&gt;當您第一次啓動應用程序時，您會看到一個歡迎屏幕和一個關於 Warp 的簡短介紹。&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/db14772c-b7a0-4b8c-8af1-0fd444b01503_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/db14772c-b7a0-4b8c-8af1-0fd444b01503_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;繼續後，您將進入「發送」菜單，可以選擇要發送的文件或文件夾。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;📋您還可以將文件和文件夾拖放到應用程序中。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Warp 發送文件頁面的屏幕截圖&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/870dfce4-0a86-4def-b506-4752544f36c5_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/870dfce4-0a86-4def-b506-4752544f36c5_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;處理後，將顯示一個屏幕，其中包含文本和二維碼形式的傳輸代碼。您必須將其安全發送給接收者，他們可以開始下載文件。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;📋由於 Warp 是一個跨平台應用，您可以在 Linux 和 Windows 系統之間發送文件。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Warp 傳輸代碼頁面的屏幕截圖&lt;/p&gt;&lt;p&gt;那麼，接收方看起來如何呢？&lt;/p&gt;&lt;p&gt;好吧，他們必須進入「接收」菜單，將傳輸代碼粘貼到文本框中。他們還可以掃描二維碼將確切文本複製到其設備上。&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/a351dbb3-664d-4735-b213-23e333fa14c8_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/a351dbb3-664d-4735-b213-23e333fa14c8_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;在粘貼代碼並單擊「接收文件」後，Warp 將開始連接到發送者的設備。&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/410b8d28-5db6-41b5-976e-a5b0ff362c65_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/410b8d28-5db6-41b5-976e-a5b0ff362c65_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果成功，您將看到「已連接到對等」狀態。如果沒有，發送者或接收者的系統/網絡出現問題。&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/64f37190-832e-43d0-8700-ab6f2e391f2f_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/64f37190-832e-43d0-8700-ab6f2e391f2f_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;成功連接後，接收者可以選擇「接受」將其保存到系統的「下載」文件夾中，或者選擇「另存為」將其保存到自己選擇的位置。&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/5c4ba2a4-079d-43a0-8811-328df20236ab_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/5c4ba2a4-079d-43a0-8811-328df20236ab_image_image.png&quot; /&gt;&lt;/div&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/84164c51-268a-42c9-834e-674c49610a9c_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/84164c51-268a-42c9-834e-674c49610a9c_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;就是這樣。當文件傳輸完成時，接收者將看到以下屏幕：&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/bc3f05be-21f8-4ba2-a5af-2d02b72afd1b_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/bc3f05be-21f8-4ba2-a5af-2d02b72afd1b_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;用戶還可以進入三條絲帶圖標下的「首選項」菜單，訪問高級設置，如設置 Rendezvous/Transit 服務器 URL 或將代碼字數設置為更長的字數以增強安全性。&lt;/p&gt;&lt;div data-file=&quot;&quot; data-filetype=&quot;image/png&quot; data-url=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/c6e898fa-6432-4b3f-93b8-82da35bf7ce5_image_image.png&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/c6e898fa-6432-4b3f-93b8-82da35bf7ce5_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;關於 Warp 就是這些；它非常簡單，工作得很好。&lt;/p&gt;&lt;h2&gt;📥 獲取 Warp&lt;/h2&gt;&lt;p&gt;Warp 適用於 Linux 和 Windows；您可以在其 &lt;a href=&quot;https://gitlab.gnome.org/World/warp?ref=news.itsfoss.com&quot; target=&quot;_blank&quot;&gt;GitLab 頁面上&lt;/a&gt;選擇所需的軟件包或查看源代碼。&lt;/p&gt;&lt;p&gt;對於 Linux 用戶，您可以從 &lt;a href=&quot;https://flathub.org/apps/app.drey.Warp?ref=news.itsfoss.com&quot; target=&quot;_blank&quot;&gt;Flathub&lt;/a&gt; 獲取它。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻牆技術博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;訂閲地址及社交帳號&lt;/a&gt;&lt;/div&gt;</description>
                <link>https://www.chinagfw.org/2023/08/warp.html</link>
                <author>noreply@blogger.com (pompei)</author>
                <thr:total>0</thr:total>
            </item>
            <item>
                <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-6950766207067496610</guid>
                <pubDate>Tue, 01 Aug 2023 05:33:00 +0000</pubDate>
                <atom:updated>2023-08-11T21:07:12.935+08:00</atom:updated>
                <title>備用翻牆方案：eSIM</title>
                <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;div class=&quot;css-901oao r-18jsvk2 r-37j5jr r-1inkyih r-16dba41 r-135wba7 r-bcqeeo r-bnwqim r-qvutc0&quot; data-testid=&quot;tweetText&quot; dir=&quot;auto&quot; id=&quot;id__j3is3nz31o&quot; lang=&quot;zh&quot;&gt;&lt;span class=&quot;css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0&quot;&gt;via &lt;a href=&quot;https://twitter.com/machan_47291/status/1685964261191995392&quot;&gt;https://twitter.com/machan_47291/status/1685964261191995392&amp;nbsp;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;css-901oao r-18jsvk2 r-37j5jr r-1inkyih r-16dba41 r-135wba7 r-bcqeeo r-bnwqim r-qvutc0&quot; data-testid=&quot;tweetText&quot; dir=&quot;auto&quot; id=&quot;id__j3is3nz31o&quot; lang=&quot;zh&quot;&gt;&lt;span class=&quot;css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0&quot;&gt;&amp;nbsp; &lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;css-901oao r-18jsvk2 r-37j5jr r-1inkyih r-16dba41 r-135wba7 r-bcqeeo r-bnwqim r-qvutc0&quot; data-testid=&quot;tweetText&quot; dir=&quot;auto&quot; id=&quot;id__j3is3nz31o&quot; lang=&quot;zh&quot;&gt;&lt;span class=&quot;css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;div class=&quot;css-901oao r-18jsvk2 r-37j5jr r-1inkyih r-16dba41 r-135wba7 r-bcqeeo r-bnwqim r-qvutc0&quot; data-testid=&quot;tweetText&quot; dir=&quot;auto&quot; id=&quot;id__j3is3nz31o&quot; lang=&quot;zh&quot;&gt;&lt;span class=&quot;css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0&quot;&gt;研究了下 esim 卡，發現用這玩意翻牆實在太簡單了，去 play store 下載一個能利用 esim 相關技術提供上網服務的 app，例如 eskimo（這軟件還送你 1.5G 流量），直接就相當於獲得一個國外手機卡，馬上就可以翻牆。難怪國產手機到目前都不支持 esim，原來是在這裏卡了脖子&lt;/span&gt;&lt;span class=&quot;css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;css-901oao r-18jsvk2 r-37j5jr r-1inkyih r-16dba41 r-135wba7 r-bcqeeo r-bnwqim r-qvutc0&quot; data-testid=&quot;tweetText&quot; dir=&quot;auto&quot; id=&quot;id__j3is3nz31o&quot; lang=&quot;zh&quot;&gt;&lt;span class=&quot;css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;css-901oao r-18jsvk2 r-37j5jr r-1inkyih r-16dba41 r-135wba7 r-bcqeeo r-bnwqim r-qvutc0&quot; data-testid=&quot;tweetText&quot; dir=&quot;auto&quot; id=&quot;id__j3is3nz31o&quot; lang=&quot;zh&quot;&gt;&lt;span class=&quot;css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0&quot;&gt;&amp;nbsp;購買 pixel 手機的理由又加一！&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;p&gt;&amp;nbsp;隨後有人&lt;a href=&quot;https://twitter.com/_ooT00Too_/status/1686204689988395009&quot;&gt;評論&lt;/a&gt;：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;提醒下，Pixel 系列不要用 DJB 的 eSIM，無法 share 上網。 &lt;br /&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;更有人相信&lt;a href=&quot;https://twitter.com/rsrs7777777/status/1686200061376749570&quot;&gt;GFW 不會坐視不管&lt;/a&gt;：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;sim 卡流量走運營商 network，如果看 ip 會看到分配的是運營商所在地 ip，這個洞早晚得堵上 &lt;br /&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;div class=&quot;css-901oao r-18jsvk2 r-37j5jr r-1inkyih r-16dba41 r-135wba7 r-bcqeeo r-bnwqim r-qvutc0&quot; data-testid=&quot;tweetText&quot; dir=&quot;auto&quot; id=&quot;id__j3is3nz31o&quot; lang=&quot;zh&quot;&gt;&lt;span class=&quot;css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0&quot;&gt;&lt;/span&gt;&lt;/div&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻牆技術博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;訂閲地址及社交帳號&lt;/a&gt;&lt;/div&gt;</description>
                <link>https://www.chinagfw.org/2023/08/esim.html</link>
                <author>noreply@blogger.com (pompei)</author>
                <thr:total>0</thr:total>
            </item>
            <item>
                <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-3754559668612090464</guid>
                <pubDate>Tue, 01 Aug 2023 05:28:00 +0000</pubDate>
                <atom:updated>2023-08-11T21:07:04.827+08:00</atom:updated>
                <title>T-Mobile 原生手機卡購買激活教程，eSIM 激活教程，改 3 美元套餐，轉入手機靚號</title>
                <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;p&gt;via &lt;a href=&quot;https://itangtalk.com/tmobile/&quot; target=&quot;_blank&quot;&gt;https://itangtalk.com/tmobile/&lt;/a&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;今天向大家介紹一張全新的美國手機卡，美國&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;預付費卡。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;128hsld.jpg&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/128hsld.jpg&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;首先這張卡是&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile 原生手機卡&lt;/a&gt;，是預付費卡，不需要去進行實名認證。&lt;/p&gt;
&lt;p&gt;這張卡默認的套餐是月租 10 美元，其中包含 1000 條短信和 1000 分鐘通話。當然這些短信和通話，只限於和美國手機號碼進行通訊使用。可以説這個價格能夠有這麼多的免費用量還是挺香的。&lt;/p&gt;
&lt;p&gt;但是這張卡在國內使用默認的套餐，有個致命的問題，它無法進行國際漫遊。所以説這張卡在中國是沒有信號的。&lt;/p&gt;
&lt;p&gt;那麼在中國沒有信號，我們要如何去使用這張卡呢？這個時候就不得不提到&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通話的功能。所謂的&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通話，就是我們在一些比較偏僻的地方或者説地下室，很有可能沒有手機信號，但是這個時候的話如果有&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;，我們就可以把手機連接到&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;，然後通過&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;再和手機的基站進行通訊。這樣的話就能夠達到正常使用的效果了。&lt;/p&gt;
&lt;p&gt;目前支持&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通話的手機很多，比如説 iPhone 5C 以上的機型基本上都是支持&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通話的，包括中國大陸國行的 iPhone，也是支持&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通話的。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;KZpIBR.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/KZpIBR.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;而安卓手機，像國產的一些大部分手機都是不支持&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通話的。小米和華為的個別型號是支持的。&lt;/p&gt;
&lt;p&gt;這樣的話，即使這張卡在中國沒有信號，我們也可以通過連接&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;，使用&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通話來使用這張卡。&lt;/p&gt;
&lt;p&gt;如果僅僅是上面我講的，只能在中國使用 10 美元的無漫遊套餐，那麼這張卡的吸引力，其實並沒有那麼大。促使我開始深入研究這張卡的動力是：&lt;/p&gt;
&lt;p&gt;其實這張卡是可以聯繫客服，手動轉成月租三美元的手機卡，甚至有小夥伴分享可以轉成零月租的手機卡。&lt;/p&gt;
&lt;p&gt;轉成三美元的卡之後，首先第一個優點就是它的月租非常低，三美元的月租包含，30 條短信和 30 分鐘的美國本地通話。其次，它還是可以在&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通話的環境下正常使用，而且轉成三美元的套餐之後，它是可以國際漫遊的，也就是説在中國是有信號的了。&lt;/p&gt;
&lt;p&gt;這個時候其實就和之前介紹的 Ultra &lt;a href=&quot;https://itangtalk.com/paygo/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;PayGo&lt;/a&gt;卡是一樣的了。&lt;/p&gt;
&lt;p&gt;這張卡的購買渠道一共有兩種。一種是可以通過國內的電商平台，包括我自己的&lt;a href=&quot;https://shop.itangtalk.com/products/t-mobile10?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;自營商店平台&lt;/a&gt;，也有這張實體卡的出售。&lt;/p&gt;
&lt;p&gt;第二種渠道是，如果説我們的手機支持&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;，我們其實可以去下載 T-Mobile 的官方 APP，然後去訂購下載&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;卡，這樣就不需要再去額外購買實體的手機卡了。&lt;/p&gt;
&lt;p&gt;即使我們已經購買了實體卡，也可以聯繫客服轉換成&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;接下來就向大家演示一下，如何去購買&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;的原生手機卡，包括在官網訂購&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;，如何去激活手機卡，如何去改套餐。希望能夠幫到大家。&lt;/p&gt;
&lt;p&gt;我們可以先來到 T-Mobile 的官網，一起了解一下他們家的原生手機卡。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;6jiwAM.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/6jiwAM.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;首先，他們家的手機卡主要分為兩種。一種是後付費，這種需要人在美國並且有美國的身份才可以申請，需要實名認證。&lt;/p&gt;
&lt;p&gt;另外一種就是預付費卡，不需要實名認證，只要購買卡片交錢就可以使用，沒有那麼多繁瑣的流程。我們這次講的就是預付費卡。&lt;/p&gt;
&lt;p&gt;我們直接去點擊預付費卡。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;hVXqMN.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/hVXqMN.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;然後跳轉到這個界面。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;lbPpfV.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/lbPpfV.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;在這裏，我們可以去輸入自己手機的 IMEI 號碼。IMEI 相當於手機的一個身份證號，我們可以點擊這個感嘆號，它提示我們在撥號界面撥打*#06#，就可以看到 IMEI。&lt;/p&gt;
&lt;p&gt;然後我們在這個地方輸入我們的 IMEI，然後檢查一下我們的手機能否使用 T-Mobile 的手機卡。我這邊顯示是可以使用的。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;NbP0Rx.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/NbP0Rx.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;接下來去確認一下，我們的手機是否有鎖，像美國一些合約機可能無法正常使用。我們直接勾選無鎖就可以了。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;XCCQGM.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/XCCQGM.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;下一步有三個選項：&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;JklmgD.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/JklmgD.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;第一個是激活&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;卡，如果我們的手機支持&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;，可以通過&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;的官方 APP 直接訂購&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;，不需要再購買實體手機卡；&lt;/p&gt;
&lt;p&gt;第二種是直接在官網訂購實體的 SIM 卡，它會把這個實體的 SIM 卡郵寄給我們；&lt;/p&gt;
&lt;p&gt;第三種是已經購買過了，卡已在手，直接激活。我們在這裏輸入 SIM 卡的卡號進行直接激活。&lt;/p&gt;
&lt;p&gt;接下來，我將按照這三種流程一一向大家分解如何操作。&lt;/p&gt;
&lt;h2&gt;T-​Mobile 手機卡&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;購買&lt;/h2&gt;
&lt;p&gt;首先我們要在支持&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;的手機上面去下載，T-Mobile 的預付費卡&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;這個 APP。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;WoGVcG.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/WoGVcG.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;下載完成後打開 APP，它會檢測手機是否支持&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;，如果不支持將無法繼續。&lt;/p&gt;
&lt;p&gt;如果支持，我們在 APP 裏輸入想要綁定的郵箱。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;WQX0rA.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/WQX0rA.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;然後輸入要激活的手機號碼的區號。比如説，我想要一個洛杉磯的手機號碼，那麼我輸入洛杉磯的區號 90001，然後點擊下一步，再點擊確認。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;Az0Xih.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/Az0Xih.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;接下來我們選擇套餐。建議直接選擇最便宜的 10 美元的套餐，因為前面的 60 美元和 50 美元套餐都是無限的短信、語音和流量，但在中國是無法使用流量的。所以 10 美元的套餐就夠了。不過，如果你想要無限的語音和短信，可以選擇 15 美元的套餐。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;RKo2qJ.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/RKo2qJ.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;選擇完成後點擊繼續，然後同意一下協議。&lt;/p&gt;
&lt;p&gt;接下來，我們需要輸入&lt;a href=&quot;https://itangtalk.com/tag/us-bank&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;銀行卡號&lt;/a&gt;進行付款。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;5K4sEM.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/5K4sEM.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;我用的是&lt;a href=&quot;https://itangtalk.com/tag/us-bank/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;美國銀行的信用卡&lt;/a&gt;來支付，但是網上有小夥伴反饋，使用國內發行的 Visa 或者萬事達卡也是可以的。然後選擇美國作為國家，輸一下賬單的地址。&lt;/p&gt;
&lt;p&gt;接下來非常關鍵的一步，是要創建一個 PIN。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;DUOqsE.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/DUOqsE.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;這個 PIN 非常重要，無論是登錄賬戶還是使用手機卡都需要用到。設置完成後點擊下一步，然後確認信息沒有問題，最後點擊完成支付。系統會處理支付。&lt;/p&gt;
&lt;p&gt;接下來，我們要跳轉到安裝&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;的步驟。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;EjKCSG.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/EjKCSG.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;我們點擊繼續，然後自定義一個標籤，我選擇「T-Mobile」，然後點擊繼續。現在我們可以看到已經生成了一個號碼，&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;已經安裝成功了。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;Y6Pow8.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/Y6Pow8.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img alt=&quot;9qdhzQ.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/9qdhzQ.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;接下來我們點開手機的設置，點擊蜂窩網絡，可以看到&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;的卡，但是信號欄是沒有信號的。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;U5jufs.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/U5jufs.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img alt=&quot;gwEwJy.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/gwEwJy.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;我們需要去激活&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通話的功能。我們直接點擊&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通話，然後選擇啓用。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;UwAZMe.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/UwAZMe.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;接下來會跳出一個窗口，如果你和我一樣遇到錯誤提示的話，是因為我們的網絡不好。這時候需要通過開啓代理才可以。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;BmZf39.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/BmZf39.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;我們打開了美國代理，我們再次點擊，可以看到已經成功跳出來輸入地址的界面。在這裏，我們隨便輸入一個美國地址就可以了。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;pduCgB.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/pduCgB.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;輸入完成後點擊保存。需要注意的是，保存完成後一定要點擊右下角的關閉按鈕，不要點擊左上角的取消按鈕。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;aPkWli.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/aPkWli.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;之前我操作了好幾次都沒有成功，主要原因就是點擊了取消，這樣會取消設置&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通話。只有點擊關閉才是確定設置了&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通話。&lt;/p&gt;
&lt;p&gt;點擊完關閉後，我們回到設置的界面，就可以看到&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通話已經成功打開了。此時，我們就可以收到 T-Mobile 發來的賬戶激活成功的信息了。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;k2ekwv.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/k2ekwv.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img alt=&quot;Udjpw6.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/Udjpw6.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;以上就是&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;的購買、下載和安裝的教程。&lt;/p&gt;
&lt;h2&gt;購買&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;的三個要點&lt;/h2&gt;
&lt;p&gt;購買&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;有三個非常關鍵的點：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;首先，手機要支持&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;。目前所有的國行手機都不支持，需要有美版、港版等其他支持&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;的海外版手機才可以。&lt;/li&gt;&lt;li&gt;其次，第二個難點是我們在購買時必須要有一個&lt;a href=&quot;https://itangtalk.com/tag/us-bank/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;外幣信用卡&lt;/a&gt;，這樣才能夠去付款。&lt;/li&gt;&lt;li&gt;第三個是在激活&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通話時，必須要有科學上網的環境，這樣才能打開輸入地址的界面去激活&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通話進行使用。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;接下來我們繼續向大家演示，如果我有實體手機卡，要如何去激活賬戶進行操作。&lt;/p&gt;
&lt;p&gt;好的，現在我們回到&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile 的官網&lt;/a&gt;，然後我們先演示如何去訂購一張實體的手機卡。如果你有美國的地址，而且不希望從別人那裏購買手機卡，想要一張全新的話，那麼可以選擇直接在官網進行訂購。&lt;/p&gt;
&lt;p&gt;我們點擊這裏的選擇。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;ml8xZN.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/ml8xZN.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;然後選擇「我是新用戶」。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;Q9h76D.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/Q9h76D.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;在這裏，我們選擇套餐。首先給我們展示的是無限流量和語音的套餐，我們不需要，直接點擊「有限流量套餐」，然後選擇最便宜的 10 美元的套餐就可以了。然後點擊選擇。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;MbVAB2.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/MbVAB2.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;在這個界面，我們可以看到一共需要支付 20 美元，其中 10 美元是購買卡的費用，另外 10 美元是第 1 個月的月租。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;yG1Jzn.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/yG1Jzn.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;確認完成後，點擊「開始結算」。&lt;/p&gt;
&lt;p&gt;接下來，在這裏去創建一個&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;的賬號。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;D45iLD.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/D45iLD.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;輸入自己的郵箱，然後設置一個賬號的 PIN。接着，輸入自己的名字和收貨地址。輸入完成後，繼續付款。&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;就會把實體的手機卡寄送到我們的地址。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;5bHRAb.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/5bHRAb.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;等我們收到這張實體的手機卡後，就可以去進行激活了。&lt;/p&gt;
&lt;p&gt;接下來我們演示實體手機卡的激活和使用。&lt;/p&gt;
&lt;p&gt;好的，我們還是回到這個頁面，在這裏輸入自己 SIM 卡的卡號，也就是卡片背面的二維碼上面的號碼。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;7FdjGR.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/7FdjGR.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;輸入完成後點擊選擇，然後頁面會跳轉到去付款的頁面，和之前操作是一樣的。關鍵是付 10 美元去激活這個卡片。&lt;/p&gt;
&lt;p&gt;當我們支付完 10 美元后，就可以看到我們的手機號碼了。我們把卡插到手機裏，依然是沒有信號的，需要我們開啓&lt;a href=&quot;https://itangtalk.com/%5BWiFi%5D(https://itangtalk.com/wifi-calling/)-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Wi-​Fi&lt;/a&gt;通話，具體流程和&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;開通是一樣的。&lt;/p&gt;
&lt;p&gt;接下來我們去註冊&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;的賬戶。需要注意的是在這個過程中需要全程開啓美國代理，如果沒有開啓，直接用國內 IP 的話，可能是打不開這個網站。&lt;/p&gt;
&lt;p&gt;我們點擊註冊。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;XT59Nr.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/XT59Nr.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;接着輸入自己的美國手機號碼，點擊下一步。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;ODNNyn.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/ODNNyn.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;在這裏去輸入自己的名字，郵箱，電話號碼，並設置一個 T-Mobile 賬戶的密碼。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;pWHQH8.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/pWHQH8.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;接下來要進行郵箱驗證碼的驗證。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;DCAnVb.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/DCAnVb.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;完成郵箱驗證後，我們要進行手機卡的驗證。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;SyzCPq.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/SyzCPq.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;在這步操作時，我們需要先把手機卡插在手機上，或者打開&lt;a href=&quot;https://itangtalk.com/sim-esim/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eSIM&lt;/a&gt;，並保持&lt;a href=&quot;https://itangtalk.com/wifi-calling/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;WiFi&lt;/a&gt;通話連接的狀態，這樣才能收到系統發給我們的六位數字驗證碼。&lt;/p&gt;
&lt;p&gt;輸入驗證碼後點擊繼續，然後再輸入之前設置的 PIN。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;0NfBPf.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/0NfBPf.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;這裏會問是否要設置谷歌驗證賬戶，我們可以選擇不設置。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;DJCmCQ.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/DJCmCQ.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;接下來就順利登錄到後台了。&lt;/p&gt;
&lt;p&gt;在後台的界面中，我們可以看到我們當前的手機號碼套餐還有可用的餘額。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;xA2SSj.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/xA2SSj.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;在我的賬戶裏，我們可以修改一些信息。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;RPy623.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/RPy623.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;設置一個安全問題，充值或者打開自動充值，這樣就不會因為忘記充話費而導致賬戶暫停。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;HUhk6b.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/HUhk6b.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;這些設置都比較簡單，大家可以自己進去操作一下。&lt;/p&gt;
&lt;h2&gt;轉移號碼教程&lt;/h2&gt;
&lt;p&gt;接下來想重點和大家分享的就是如何去轉入自己已有的號碼，或者説如何去更換號碼。&lt;/p&gt;
&lt;p&gt;點擊左上角的「支持」。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;dNTqWI.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/dNTqWI.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;然後選擇「賬戶」。在賬戶頁面中，我們可以選擇「更換手機號碼」。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;WNyStr.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/WNyStr.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;這個時候要輸入我們舊號碼的轉移信息。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;gJxoTJ.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/gJxoTJ.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;如果沒有舊號碼，那麼可以選擇繼續使用&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;隨機分配給我們的號碼。或者也可以購買一個號碼。&lt;/p&gt;
&lt;p&gt;購買美國手機號碼現在主要有兩種途徑：一種是購買&lt;a href=&quot;https://itangtalk.com/google-voice/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Google Voice&lt;/a&gt;，然後轉移到這張卡，具體方法大家可以看我之前做的視頻教程。轉移之後&lt;a href=&quot;https://itangtalk.com/google-voice/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Google Voice&lt;/a&gt;的運營商就會變成 T-Mobile，不再是虛擬號碼；&lt;/p&gt;
&lt;p&gt;另外一種方式是直接在之前推薦過的，&lt;a href=&quot;https://www.numberbarn.com/?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;NumberBarn&lt;/a&gt;網站上購買號碼。也是可以轉移成功的。&lt;/p&gt;
&lt;p&gt;購買完號碼後，我們會得到四個關鍵的信息：手機號碼、賬戶號碼，&lt;a href=&quot;https://itangtalk.com/google-voice/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Google Voice&lt;/a&gt;的手機號碼和賬戶號碼是一樣的，但其他運營商的話大部分是不一樣的、PIN，以及之前舊號碼的郵編。&lt;/p&gt;
&lt;p&gt;全部輸入完成後，我們點擊繼續。如果輸入後無法繼續的話，可能是因為我們的 IP 問題，這時候嘗試更換美國 IP 就可以了。然後我們繼續輸入這些信息後，就可以順利地將我們之前的號碼轉移到這張新卡上面了。&lt;/p&gt;
&lt;p&gt;下面向大家説明一下如何去更改套餐。&lt;/p&gt;
&lt;p&gt;目前有四個渠道可以要求修改套餐：&lt;/p&gt;
&lt;p&gt;1.打客服電話，要求人工客服&lt;a href=&quot;https://itangtalk.com/tmobile/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;877–464-8646&lt;/a&gt;把套餐改成三美元，如果説不行就掛掉，重新聯繫下一個客服。&lt;/p&gt;
&lt;p&gt;2.關注&lt;a href=&quot;https://twitter.com/TMobileHelp?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile Twitter&lt;/a&gt;，然後發私信，提出相同的要求，如果説不行就退出，過一會兒重新聯繫下一個客服。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;QEbeKG.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/QEbeKG.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img alt=&quot;uF7p7R.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/uF7p7R.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;3.關注&lt;a href=&quot;https://www.facebook.com/TMobile/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile Facebook&lt;/a&gt;，然後發私信，提出相同的要求，如果説不行就退出，過一會兒重新聯繫下一個客服。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;d6JHTA.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/d6JHTA.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;4.第四種方式是隱藏模式，我們可以來到&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile 官網&lt;/a&gt;，在最下面的用戶條款中有説明。&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;iqhxX1.png&quot; src=&quot;https://img.itangtalk.com/file/itangtalk/2023/07/iqhxX1.png&quot; /&gt;&lt;br /&gt;&lt;/figure&gt;
&lt;p&gt;如果我們賬戶內有餘額，但是不足以支付 10 美元的月租，那麼在 120 天之後，我們的卡就會自動轉為月租 3 美元的套餐了。所以我們只需要在激活卡片後，賬戶充值 3–9 美元之間的任意金額，然後躺平 120 天就可以了。&lt;/p&gt;
&lt;p&gt;使用這種模式轉套餐，需要注意的是，因為從第二個月開始，我們實際上就已經是欠費狀態了，所以這個卡我們是無法正常使用的，只能接受系統短信。在 120 天之後，變成 3 美元的套餐了，我們就可以正常使用這張卡了。&lt;/p&gt;
&lt;p&gt;我自己是通過&lt;a href=&quot;https://www.facebook.com/TMobile/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile Facebook&lt;/a&gt;客服更換成功，提出要求後，客服二話沒説就給改了，後台馬上可以看到套餐下個月生效。&lt;/p&gt;
&lt;p&gt;總結起來的話，推薦使用&lt;a href=&quot;https://twitter.com/TMobileHelp?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;和&lt;a href=&quot;https://www.facebook.com/TMobile/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Facebook&lt;/a&gt;私信的方法。電話客服普遍等待時間比較長，英語不會的小夥伴更是不適用。還不如就直接扔條私信給客服，慢慢等迴應就可以了。&lt;/p&gt;
&lt;p&gt;更改套餐並不困難，需要的是耐心和毅力，就是不停地與客服進行溝通和嘗試。如果一個客服無法幫助你，就換下一個客服繼續嘗試。我打算在一個月的時間內慢慢聯繫客服去解決這個問題。然而，經過我的實際測試，第二天聯繫了七八個客服後，終於碰到了一個可以幫我修改套餐的客服。大家可以參考一下我的經驗。&lt;/p&gt;
&lt;p&gt;最後總結一下，&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;的三美元套餐，與 Ultra&lt;a href=&quot;https://itangtalk.com/paygo/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;PayGo&lt;/a&gt;的三美元套餐。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;最明顯的區別是&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;三美元套餐，只包含 30 條短信和 30 分鐘通話，而 Ultra &lt;a href=&quot;https://itangtalk.com/paygo/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;PayGo&lt;/a&gt;有 100 分鐘通話和 100 條短信。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;允許在後台查看所有操作和賬單明細，而 Ultra &lt;a href=&quot;https://itangtalk.com/paygo/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;PayGo&lt;/a&gt;不提供賬單明細，只能看到每月扣費總額。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;原生卡的充值金額是可選的，從 1 美元到 300 美元都可以，而 Ultra &lt;a href=&quot;https://itangtalk.com/paygo/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;PayGo&lt;/a&gt;只能充值 5、10、20 這三種面值，相對而言不太靈活。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;的三美元套餐是絕版套餐，由&lt;a href=&quot;https://prepaid.t-mobile.com/home?ref=itangtalk.com&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;T-​Mobile&lt;/a&gt;官方提供服務，相對而言客服服務也較好。而 Ultra &lt;a href=&quot;https://itangtalk.com/paygo/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;PayGo&lt;/a&gt;提供的客服服務質量一般，但是勝在有中文客服電話，適合英語不好的小夥伴。&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;hr /&gt;&lt;p style=&quot;text-indent: 0;&quot;&gt;&lt;br /&gt;&lt;/p&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻牆技術博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;訂閲地址及社交帳號&lt;/a&gt;&lt;/div&gt;</description>
                <link>https://www.chinagfw.org/2023/08/t-mobileesim3.html</link>
                <author>noreply@blogger.com (pompei)</author>
                <thr:total>0</thr:total>
            </item>
            <item>
                <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-1611700167891167683</guid>
                <pubDate>Sun, 30 Jul 2023 12:34:00 +0000</pubDate>
                <atom:updated>2023-08-06T21:38:52.255+08:00</atom:updated>
                <title>中國封鎖全球網絡審查項目 OONI，影響測量數據提交和訪問</title>
                <description>&lt;p data-pm-slice=&quot;0 0 []&quot;&gt;近日，&lt;a href=&quot;https://ooni.org/post/2023-china-blocks-ooni/&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;全球網絡審查分析項目 OONI 發佈公告&lt;/a&gt;：&lt;/p&gt;&lt;p&gt;鑑於我們的工作和工具主要圍繞測量和揭示中國和世界各地的互聯網審查，而中國擁有全球最先進和普遍的互聯網審查水平，這並不令人意外。然而，我們不確定為什麼中國決定在此特定時刻開始封鎖我們（&lt;b&gt;而不是幾年前&lt;/b&gt;），因為自 2014 年以來，我們已經從中國收集到了 OONI 的測量數據。OONI 在中國的封鎖時間（似乎始於 2023 年 7 月 7 日）使我們認為這可能與我們最近在 2023 年 6 月底關於 F-Droid 在中國的封鎖有關。但是我們還在 2019 年報告了中國封鎖維基百科的情況（以及其他關於中國審查的報告），當時中國並沒有封鎖我們的服務。&lt;/p&gt;&lt;p&gt;雖然我們過去曾注意到其他國家嘗試封鎖我們的服務（這就是為什麼我們在 OONI Probe 中添加了後端代理支持，以規避對我們服務的任何意外或故意封鎖），但這是我們首次看到由此導致的 OONI 測量覆蓋範圍大幅下降。&lt;/p&gt;&lt;p&gt;在這份報告中，我們分享了關於中國封鎖 OONI 服務的 OONI 數據。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;封鎖 OONI 網站&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;從 2023 年 7 月 7 日開始，中國的幾個網絡似乎封鎖了我們的網站（ooni.org）的訪問。以下圖表彙總了過去一個月內在中國網絡中對 ooni.org 進行測試的 OONI 測量覆蓋範圍。&lt;/p&gt;&lt;p&gt;從上圖可以看出，所有測量在 2023 年 7 月 7 日失敗，此後收集的大多數測量要麼失敗，要麼出現異常。雖然測量通常被註釋為「失敗」，當 OONI Probe 實驗無法按預期執行時（例如由於錯誤），這些測量也可能是審查的症狀。同時，當測量出現互聯網審查的跡象時，它們被註釋為「異常」（儘管可能會出現誤報）。&lt;/p&gt;&lt;p&gt;值得注意的是，在此之前，從中國對 ooni.org 的測試收集的 OONI 測量顯示 ooni.org 在中國的測試網絡上是可訪問的。只有 2023 年 7 月 4 日的一次測量出現異常（因為 DNS 查詢導致超時錯誤），但這個單獨的測量並不能提供關於審查的強烈信號（因為 DNS 解析返回了正確的 IP 地址）。&lt;/p&gt;&lt;p&gt;如果我們擴展在中國對 ooni.org 的測量覆蓋範圍的日期範圍（從今年年初開始），我們可以更清楚地看到以前的大多數測量都是成功的（偶爾會有一些異常），而從 2023 年 7 月 7 日開始，失敗和異常測量的比例增加了（如下圖所示）。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://ooni.org/post/2023-china-blocks-ooni/images/image1.png&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;image1_hu8959f9e31213f67bfc81716700490062_692998_1000x800_fit_box_3.png&quot; src=&quot;https://ooni.org/post/2023-china-blocks-ooni/images/image1_hu8959f9e31213f67bfc81716700490062_692998_1000x800_fit_box_3.png&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;strong&gt;&lt;/strong&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;上圖不僅表明中國在 2023 年 7 月 7 日開始封鎖對 ooni.org 的訪問，還表明他們可能還開始封鎖我們的後端服務，阻止 OONI 測量的提交。與之前的幾個月相比，過去兩週的測量覆蓋範圍下降，這一點暗示了這一點。我們將在報告的下一部分進一步探討這個問題。&lt;/p&gt;&lt;p&gt;使用我們的 Web 連接性 v0.5 實驗收集的數據説明瞭 https://ooni.org 的封鎖情況。查詢密鑰顯示使用系統和 8.8.8.8:53/udp 解析器進行 DNS 查找返回以下表中的值。&lt;/p&gt;&lt;p&gt;IP 地址 	AS 號碼 	組織&lt;/p&gt;&lt;p&gt;2a03:2880:f12c:183:face:b00c:0:25de 	32934 	Facebook, Inc.&lt;/p&gt;&lt;p&gt;202.160.130.52 	13414 	Twitter Inc.&lt;/p&gt;&lt;p&gt;111.243.214.169 	3462 	Chunghwa Telecom Co., Ltd.&lt;/p&gt;&lt;p&gt;2001::caa0:80d2 	N/A（bogon） 	N/A（bogon）&lt;/p&gt;&lt;p&gt;前三個 IP 地址顯然對於 ooni.org 域名是錯誤的（託管在 AS16509 上），第四個 IP 地址是一個 bogon IP 地址（即不應該出現在公共 IP 網絡上的 IP 地址）。向 DNS 查詢注入屬於大公司（如 Facebook）的似乎隨機的 IP 地址以審查 DNS 查詢是中國防火牆的典型做法。&lt;/p&gt;&lt;p&gt;OONI 數據顯示測試助手無法連接到第二個和第三個 IP 地址。由於第四個 IP 地址是 bogon，測試助手甚至不會嘗試建立連接。測試助手可以連接到第一個 IP 地址，但顯然 TLS 握手失敗，因為給定的 Facebook IP 地址無法為 ooni.org 域名顯示有效的 X.509 證書。&lt;/p&gt;&lt;p&gt;除了嘗試使用 TLS 驗證探測到的 IP 地址外，測試助手還為域名提供了有效的 IP 地址。在此測量實例中，測試助手將 99.83.231.61 和 75.2.60.5 返回給探測器。反過來，探測器使用這兩個地址，但在 TLS 握手期間都失敗了。&lt;/p&gt;&lt;p&gt;我們的 DNS-over-UDP 客戶端在接收到第一個響應後會等待一段時間以獲取重複的 DNS 響應。在此測量中，我們收到了發送到 8.8.8.8:53/udp 公共 DNS 解析器的每個 DNS 查詢的兩個重複響應。以下表格顯示了我們收到的額外響應（其中第一個接收到的響應為 1，第一個重複響應為 2，依此類推）。&lt;/p&gt;&lt;p&gt;域名 	類型 	計數 	地址 	AS 號碼 	組織&lt;/p&gt;&lt;p&gt;&lt;a data-link-auto=&quot;&quot; href=&quot;https://ooni.org&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;ooni.org&lt;/a&gt; 	AAAA 	2 	[ 2001::a27d:601 ] 	N/A（bogon） 	N/A（bogon）&lt;/p&gt;&lt;p&gt;&lt;a data-link-auto=&quot;&quot; href=&quot;https://ooni.org&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;ooni.org&lt;/a&gt; 	A 	2 	[ 108.160.165.173 ] 	19679 	Dropbox Inc&lt;/p&gt;&lt;p&gt;&lt;a data-link-auto=&quot;&quot; href=&quot;https://ooni.org&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;ooni.org&lt;/a&gt; 	AAAA 	3 	None 	N/A 	N/A&lt;/p&gt;&lt;p&gt;&lt;a data-link-auto=&quot;&quot; href=&quot;https://ooni.org&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;ooni.org&lt;/a&gt; 	A 	3 	[ 75.2.60.5, 99.83.231.61 ] 	16509 	Amazon&lt;/p&gt;&lt;p&gt;每個查詢的第三個響應（第二個重複響應）包含正確的結果。這一事實強烈暗示存在中間盒子在合法響應到達探測器之前對查詢進行響應，這是中國防火牆的眾所周知的審查特性。&lt;/p&gt;&lt;p&gt;總結一下，我們得出結論，&lt;a data-link-auto=&quot;&quot; href=&quot;https://ooni.org/被 DNS 注入和 TLS 幹擾的方式封鎖。DNS 封鎖包括注入包含無效 IP 地址的響應。TLS 封鎖包括幹擾 TLS 握手並重置 TCP 連接。&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;https://ooni.org/被 DNS 注入和 TLS 幹擾的方式封鎖。DNS 封鎖包括注入包含無效 IP 地址的響應。TLS 封鎖包括幹擾 TLS 握手並重置 TCP 連接。&lt;/a&gt;&lt;/p&gt;&lt;p&gt;此外，OONI 數據顯示&lt;a data-link-auto=&quot;&quot; href=&quot;https://ooni.torproject.org/也被封鎖。封鎖此 URL 的方法與上述封鎖 https://ooni.org/的方法相同，我們觀察到 DNS 注入和連接重置對 TLS 握手的幹擾。&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;https://ooni.torproject.org/也被封鎖。封鎖此 URL 的方法與上述封鎖 https://ooni.org/的方法相同，我們觀察到 DNS 注入和連接重置對 TLS 握手的幹擾。&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;封鎖 OONI Probe&lt;/b&gt;&lt;/p&gt;&lt;p&gt;中國似乎還試圖阻止 OONI Probe 用戶提交測量數據。首先，這一點可以從過去兩週中國 OONI 測量覆蓋範圍的大幅持續下降中推斷出來。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://ooni.org/post/2023-china-blocks-ooni/images/image1.png&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;image1_hu8959f9e31213f67bfc81716700490062_692998_1000x800_fit_box_3.png&quot; src=&quot;https://ooni.org/post/2023-china-blocks-ooni/images/image1_hu8959f9e31213f67bfc81716700490062_692998_1000x800_fit_box_3.png&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;strong&gt;&lt;/strong&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;測量覆蓋範圍的下降表明，中國的大多數 OONI Probe 用戶可能無法再提交測量數據進行發佈。這一點尤其表明，以前每天從中國收集到的測量數據量更大，並且過去兩週內測量覆蓋範圍的下降一直持續存在。我們還觀察到從 2023 年 7 月 7 日開始的 Web 連接性測量失敗數量的總體增加，這與 ooni.org 封鎖開始的日期相關。&lt;/p&gt;&lt;p&gt;要封鎖 OONI Probe，中國的 ISP 必須封鎖我們的後端服務，阻止 OONI Probe 用戶提交測量數據。因此，我們分析了通過使用 Snowflake 作為代理收集的與我們的 API 和測試助手相關的 OONI 數據。&lt;/p&gt;&lt;p&gt;以下表格總結了我們的發現。&lt;/p&gt;&lt;p&gt;測量 	目標域名 	bogons 	錯誤地址 	TCP/IP 封鎖 	TLS 封鎖&lt;/p&gt;&lt;p&gt;數據 	&lt;a data-link-auto=&quot;&quot; href=&quot;https://api.ooni.io&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;api.ooni.io&lt;/a&gt; 	✔️ 	✔️ 		✔️&lt;/p&gt;&lt;p&gt;數據 	&lt;a data-link-auto=&quot;&quot; href=&quot;https://0.th.ooni.org&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;0.th.ooni.org&lt;/a&gt; 	✔️ 	✔️ 		✔️&lt;/p&gt;&lt;p&gt;數據 	&lt;a data-link-auto=&quot;&quot; href=&quot;https://1.th.ooni.org&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;1.th.ooni.org&lt;/a&gt; 	✔️ 	✔️ 		✔️&lt;/p&gt;&lt;p&gt;數據 	&lt;a data-link-auto=&quot;&quot; href=&quot;https://2.th.ooni.org&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;2.th.ooni.org&lt;/a&gt; 	✔️ 	✔️ 		✔️&lt;/p&gt;&lt;p&gt;數據 	&lt;a data-link-auto=&quot;&quot; href=&quot;https://3.th.ooni.org&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;3.th.ooni.org&lt;/a&gt; 		✔️ 	✔️ 	✔️&lt;/p&gt;&lt;p&gt;數據 	&lt;a data-link-auto=&quot;&quot; href=&quot;https://dkyhjv0wpi2dk.cloudfront.net&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;dkyhjv0wpi2dk.cloudfront.net&lt;/a&gt; 				✔️&lt;/p&gt;&lt;p&gt;bogons、錯誤地址和 TLS 封鎖的審查條件與上述封鎖&lt;a data-link-auto=&quot;&quot; href=&quot;https://ooni.org/的情況完全相同。實際上，我們可以將封鎖 https://ooni.org/的特徵描述為 bogons、錯誤地址和 TLS 封鎖。TCP/IP 封鎖的審查條件表示我們無法建立 TLS 連接。成功表示我們可以成功與服務器通信。&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;https://ooni.org/的情況完全相同。實際上，我們可以將封鎖 https://ooni.org/的特徵描述為 bogons、錯誤地址和 TLS 封鎖。TCP/IP 封鎖的審查條件表示我們無法建立 TLS 連接。成功表示我們可以成功與服務器通信。&lt;/a&gt;&lt;/p&gt;&lt;p&gt;api.ooni.io、0.th.ooni.org、1.th.ooni.org 和 2.th.ooni.org 域名的封鎖方式與 ooni.org 的封鎖方式相同。&lt;/p&gt;&lt;p&gt;3.th.ooni.org 域名與 ooni.org 不同之處在於 DNS 響應不包含 bogons，而只包含與 3.th.ooni.org 域名無關的 IP 地址。此外，測試助手的 IP 地址也被 TCP/IP 封鎖。我們不清楚為什麼他們選擇通過 IP 封鎖此測試助手，而沒有對其他測試助手採取同樣的措施。&lt;/p&gt;&lt;p&gt;通過手動測試，我們確認了 SNI 3.th.ooni.org 也被過濾，並且過濾規則似乎適用於 ooni.org 或 ooni.io 的任何子域名。&lt;/p&gt;&lt;p&gt;最後，我們的 cloudfront 端點 dkyhjv0wpi2dk.cloudfront.net 只在 TLS 握手期間被封鎖。本地解析器返回的所有 IP 地址都是合法的。&lt;/p&gt;&lt;p&gt;規避&lt;/p&gt;&lt;p&gt;為了使全球範圍內的 OONI Probe 用戶能夠規避對我們服務的意外或故意封鎖，OONI Probe 移動應用程序包括後端代理設置。通過這些設置，您可以啓用 Psiphon 或使用自定義代理提交 OONI 測量數據。&lt;/p&gt;&lt;p&gt;中國的 OONI Probe 用戶可以在 Android 上安裝 Orbot 並配置其使用 Snowflake。然後，他們可以編輯 OONI Probe 移動應用程序的後端代理設置，將其設置為使用自定義代理，並將其指向 127.0.0.1:9050。&lt;/p&gt;&lt;p&gt;具體而言，可以通過以下步驟完成：&lt;/p&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li&gt;從 Play 商店安裝 Orbot 或從 GitHub 下載 APK。&lt;/li&gt;&lt;li&gt;打開 Orbot 並啓用「使用橋接」選項。&lt;/li&gt;&lt;li&gt;選擇「通過其他使用 Snowflake 的 Tor 用戶連接（方法 1-快速）」，然後點擊返回按鈕。&lt;/li&gt;&lt;li&gt;通過點擊大洋蔥標誌啓動 Orbot，並等待它啓動。&lt;/li&gt;&lt;li&gt;在 OONI Probe 中進入設置-&amp;gt; OONI 後端代理。&lt;/li&gt;&lt;li&gt;選擇「自定義代理」，並將主機名設置為 127.0.0.1，端口設置為 9050。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;如果您運行 OONI Probe，現在應該能夠使用 Orbot 和 Snowflake 提交測量數據進行發佈。&lt;/p&gt;&lt;p&gt;重要提示：運行 OONI Probe 可能存在風險，尤其是在中國。現在中國的 ISP 正在封鎖 OONI 服務，因此在中國運行 OONI Probe 可能會引起更多關注並帶來更大的風險。&lt;/p&gt;&lt;p&gt;&lt;b&gt;結論&lt;/b&gt;&lt;/p&gt;&lt;p&gt;自 2014 年以來，OONI 測量數據已經從中國收集，記錄了該國先進和普遍的互聯網審查水平。最近封鎖我們的後端服務意味着在中國運行 OONI Probe 現在更加困難（可能也更加危險），導致過去幾周 OONI 測量覆蓋範圍的顯著下降。&lt;/p&gt;&lt;p&gt;我們對此封鎖特別擔憂，因為來自中國的 OONI 數據已經成為該國互聯網審查的大型開放數據集。從 2014 年至今，收集了來自 193 個網絡的 800 多萬個測量數據，OONI 數據為過去 9 年中國的互聯網審查情況提供了獨特的見解。如果 OONI 封鎖繼續下去，將限制研究人員今後研究中國互聯網審查的能力。&lt;/p&gt;&lt;p&gt;因此，這一封鎖突出了我們需要改進規避能力的問題。雖然 OONI Probe 包括用於規避意外或故意封鎖的後端代理設置，但還需要更多工作來提高 OONI Probe 的韌性，以確保在被審查的環境中仍然可以進行審查測量。&lt;/p&gt;&lt;p&gt;致謝&lt;/p&gt;&lt;p&gt;我們感謝過去 9 年在中國運行 OONI Probe 的所有人。&lt;/p&gt;&lt;p&gt;&lt;a data-link-auto=&quot;&quot; href=&quot;https://ooni.org/post/2023-china-blocks-ooni/&quot; rel=&quot;noopener noreferrer nofollow&quot; target=&quot;_blank&quot;&gt;https://ooni.org/post/2023-china-blocks-ooni/&lt;/a&gt;&lt;/p&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻牆技術博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;訂閲地址及社交帳號&lt;/a&gt;&lt;/div&gt;</description>
                <link>https://www.chinagfw.org/2023/07/ooni.html</link>
                <author>noreply@blogger.com (pompei)</author>
                <thr:total>0</thr:total>
            </item>
            <item>
                <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-5311980598164035378</guid>
                <pubDate>Sun, 30 Jul 2023 12:21:00 +0000</pubDate>
                <atom:updated>2023-08-01T13:26:58.616+08:00</atom:updated>
                <title>到底一台服務器上最多能創建多少個 TCP 連接</title>
                <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;p&gt;via &lt;a href=&quot;https://plantegg.github.io/2020/11/30/%E4%B8%80%E5%8F%B0%E6%9C%BA%E5%99%A8%E4%B8%8A%E6%9C%80%E5%A4%9A%E8%83%BD%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%B0%91%E4%B8%AATCP%E8%BF%9E%E6%8E%A5/&quot; target=&quot;_blank&quot;&gt;https://plantegg.github.io/2020/11/30/%E4%B8%80%E5%8F%B0%E6%9C%BA%E5%99%A8%E4%B8%8A%E6%9C%80%E5%A4%9A%E8%83%BD%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%B0%91%E4%B8%AATCP%E8%BF%9E%E6%8E%A5/&lt;/a&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;blockquote&gt;經常聽到有同學説一台機器最多能創建 65535 個 TCP 連接，這其實是錯誤的理解，為什麼會有這個錯誤的理解呢？&lt;/blockquote&gt;

&lt;h2&gt;port range&lt;/h2&gt;
&lt;p&gt;我們都知道 linux 下本地隨機端口範圍由參數控制，也就是 listen、connect 時候如果沒有指定本地端口，那麼就從下面的 port range 中隨機取一個可用的&lt;/p&gt;
&lt;figure&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;br /&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;# cat /​proc/​sys/​net/​ipv4/​ip_​local_​port_​range&lt;/p&gt;
&lt;p&gt;2000 65535&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/figure&gt;
&lt;p&gt;port range 的上限是 65535，所以也經常看到這個&lt;strong&gt;誤解&lt;/strong&gt;：一台機器上最多能創建 65535 個 TCP 連接&lt;/p&gt;
&lt;h2&gt;到底一台機器上最多能創建多少個 TCP 連接&lt;/h2&gt;
&lt;p&gt;先説&lt;strong&gt;結論&lt;/strong&gt;：在內存、文件句柄足夠的話可以創建的連接是&lt;strong&gt;沒有限制&lt;/strong&gt;的（每個 TCP 連接至少要消耗一個文件句柄）。&lt;/p&gt;
&lt;p&gt;那麼/​proc/​sys/​net/​ipv4/​ip_​local_​port_​range 指定的端口範圍到底是什麼意思呢？&lt;/p&gt;
&lt;p&gt;核心規則：&lt;strong&gt;一個 TCP 連接只要保證四元組 (src-ip src-​port dest-​ip dest-port) 唯一就可以了，而不是要求 src port 唯一&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;後面所講都遵循這個規則，所以在心裏反覆默唸：&lt;strong&gt;四元組唯一&lt;/strong&gt; 五個大字，就能分析出來到底能創建多少 TCP 連接了。&lt;/p&gt;
&lt;p&gt;比如如下這個機器上的 TCP 連接實際狀態：&lt;/p&gt;
&lt;figure&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;br /&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;# netstat –ant |grep 18089&lt;/p&gt;
&lt;p&gt;tcp 0 0 192.168.1.79:18089 192.168.1.79:22 ESTABLISHED&lt;/p&gt;
&lt;p&gt;tcp 0 0 192.168.1.79:18089 192.168.1.79:18080 ESTABLISHED&lt;/p&gt;
&lt;p&gt;tcp 0 0 192.168.0.79:18089 192.168.0.79:22 TIME_​WAIT&lt;/p&gt;
&lt;p&gt;tcp 0 0 192.168.1.79:22 192.168.1.79:18089 ESTABLISHED&lt;/p&gt;
&lt;p&gt;tcp 0 0 192.168.1.79:18080 192.168.1.79:18089 ESTABLISHED&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/figure&gt;
&lt;p&gt;從前三行可以清楚地看到 18089 被用了三次，第一第二行 src-ip、dest-ip 也是重複的，但是 dest port 不一樣，第三行的 src-port 還是 18089，但是 src-ip 變了。他們的四元組均不相同。&lt;/p&gt;
&lt;p&gt;所以一台機器能創建的 TCP 連接是沒有限制的，而 ip_local_port_range 是指沒有 bind 的時候 OS 隨機分配端口的範圍，但是分配到的端口要同時滿足五元組唯一，這樣
 ip_​local_​port_​range 
限制的是連同一個目標（dest-ip 和 dest-port 一樣）的 port 的數量（請忽略本地多網卡的情況，因為 dest-ip 為以後 route 只會選用一個本地 ip）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;那麼為什麼大家有這樣的誤解呢？&lt;/strong&gt;我總結了下，大概是以下兩個原因讓大家誤解了：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果是 listen 服務，那麼肯定端口不能重複使用，這樣就跟我們的誤解對應上了，一個服務器上最多能監聽 65535 個端口。比如 nginx 監聽了 80 端口，那麼 tomcat 就沒法再監聽 80 端口了，這裏的 80 端口只能監聽一次。&lt;/li&gt;&lt;li&gt;另外如果我們要連的 server 只有一個，比如：1.1.1.1:80 ，同時本機只有一個 ip 的話，那麼這個時候即使直接調 connect 也只能創建出 65535 個連接，因為四元組中的三個是固定的了。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;我們在創建連接前，經常會先調 bind，bind 後可以調 listen 當做服務端監聽，也可以直接調 connect 當做 client 來連服務端。&lt;/p&gt;
&lt;p&gt;bind(ip,port=0) 
的時候是讓系統綁定到某個網卡和自動分配的端口，此時系統沒有辦法確定接下來這個 socket 是要去 connect 還是 listen. 
如果是 listen 的話，那麼肯定是不能出現端口衝突的，如果是 connect 的話，只要滿足 4 元組唯一即可。在這種情況下，系統只能儘可能滿足更強的要求，就是先要求端口不能衝突，即使之後去 connect 的時候四元組是唯一的。&lt;/p&gt;
&lt;p&gt;比如 Nginx HaProxy envoy 這些軟件在創建到 upstream 的連接時，都會用 bind(0) 的方式, 導致到不同目的的連接無法複用同一個 src port，這樣後端的最大連接數受限於 local_port_range。&lt;/p&gt;

&lt;blockquote&gt;Linux 4.2 後的內核增加了 IP_BIND_ADDRESS_NO_PORT 這個 socket option 來解決這個問題，將 src port 的選擇延後到 connect 的時候&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;a href=&quot;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=90c337da1524863838658078ec34241f45d8394d&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;IP_​BIND_​ADDRESS_​NO_​PORT (since Linux 4.2)&lt;/a&gt;&lt;br /&gt;Inform
 the kernel to not reserve an ephemeral port when using bind(2) with a 
port number of 0. The port will later be automatically chosen at 
connect(2) time, in a way that allows sharing a source port as long as 
the 4-​tuple is unique.&lt;/blockquote&gt;

&lt;p&gt;但如果我只是個 client 端，只需要連接 server 建立連接，也就不需要 bind，直接調 connect 就可以了，這個時候只要保證四元組唯一就行。&lt;/p&gt;
&lt;p&gt;bind() 的時候內核是還不知道四元組的，只知道 src_ip、src_port，所以這個時候單網卡下 src_port 是沒法重複的，但是 connect() 的時候已經知道了四元組的全部信息，所以只要保證四元組唯一就可以了，那麼這裏的 src_port 完全是可以重複使用的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://plantegg.github.io/images/951413iMgBlog/640-20220224103024676.png&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;640-20220224103024676.png&quot; src=&quot;https://plantegg.github.io/images/951413iMgBlog/640-20220224103024676.png&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;是不是加上了 SO_REUSEADDR、SO_REUSEPORT 就能重用端口了呢？&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;TCP SO_​REUSEADDR&lt;/h2&gt;
&lt;p&gt;文檔描述：&lt;/p&gt;

&lt;blockquote&gt;SO_​REUSEADDR Indicates that the rules used in validating 
addresses supplied in a bind(2) call should allow reuse of local 
addresses. For AF_​INET sockets this means that a socket may bind, 
except when there is an active listening socket bound to the address. 
When the listening socket is bound to INADDR_​ANY with a specific port 
then it is not possible to bind to this port for any local address. 
Argument is an integer boolean flag.&lt;/blockquote&gt;

&lt;p&gt;從這段文檔中我們可以知道三個事：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;使用這個參數後，bind 操作是可以重複使用 local address 的，注意，這裏説的是 local address，即 ip 加端口組成的本地地址，也就是兩個本地地址，如果有任意 ip 或端口部分不一樣，它們本身就是可以共存的，不需要使用這個參數。&lt;/li&gt;&lt;li&gt;當 local address 被一個處於 listen 狀態的 socket 使用時，加上該參數也不能重用這個地址。&lt;/li&gt;&lt;li&gt;當處於 listen 狀態的 socket 監聽的本地地址的 ip 部分是 INADDR_ANY，即表示監聽本地的所有 ip，即使使用這個參數，也不能再 bind 包含這個端口的任意本地地址，這個和 2 中描述的其實是一樣的。&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;==SO_​REUSEADDR 可以用本地相同的 (sip, sport) 去連 connect 遠程的不同的（dip、dport）//而 SO_​REUSEPORT 主要是解決 Server 端的 port 重用==&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/YWzuKBK3TMclejeN2ziAvQ&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;SO_​REUSEADDR 還可以重用 TIME_​WAIT 狀態的 port&lt;/a&gt;, 在程序崩潰後之前的 TCP 連接會進入到 TIME_WAIT 狀態，需要一段時間才能釋放，如果立即重啓就會拋出 Address Already in use 的錯誤導致啓動失敗。這時候可以通過在調用 bind 函數之前設置 SO_REUSEADDR 來解決。&lt;/p&gt;

&lt;blockquote&gt;What exactly does SO_​REUSEADDR do?&lt;/blockquote&gt;
&lt;blockquote&gt;This socket option tells the kernel that even if this port 
is busy (in the TIME_​WAIT state), go ahead and reuse it anyway. If it 
is busy, but with another state, you will still get an address already 
in use error. It is useful if your server has been shut down, and then 
restarted right away while sockets are still active on its port. You 
should be aware that if any unexpected data comes in, it may confuse 
your server, but while this is possible, it is not likely.&lt;/blockquote&gt;
&lt;blockquote&gt;It has been pointed out that 「A socket is a 5 tuple (proto, 
local addr, local port, remote addr, remote port). SO_REUSEADDR just 
says that you can reuse local addresses. The 5 tuple still must be 
unique!」 This is true, and this is why it is very unlikely that 
unexpected data will ever be seen by your server. The danger is that 
such a 5 tuple is still floating around on the net, and while it is 
bouncing around, a new connection from the same client, on the same 
system, happens to get the same remote port.&lt;/blockquote&gt;

&lt;p&gt;By setting &lt;code&gt;SO_REUSEADDR&lt;/code&gt; user informs the kernel of an 
intention to share the bound port with anyone else, but only if it 
doesn’t cause a conflict on the protocol layer. There are at least three
 situations when this flag is useful:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Normally after binding to a port and stopping a server it’s 
neccesary to wait for a socket to time out before another server can 
bind to the same port. With &lt;code&gt;SO_REUSEADDR&lt;/code&gt; set it’s possible to rebind immediately, even if the socket is in a &lt;code&gt;TIME_WAIT&lt;/code&gt; state.&lt;/li&gt;&lt;li&gt;When one server binds to &lt;code&gt;INADDR_ANY&lt;/code&gt;, say &lt;code&gt;0.0.0.0:1234&lt;/code&gt;, it’s impossible to have another server binding to a specific address like &lt;code&gt;192.168.1.21:1234&lt;/code&gt;. With &lt;code&gt;SO_REUSEADDR&lt;/code&gt; flag this behaviour is allowed.&lt;/li&gt;&lt;li&gt;When using the bind before connect trick only a single connection 
can use a single outgoing source port. With this flag, it’s possible for
 many connections to reuse the same source port, given that they connect
 to different destination addresses.&lt;/li&gt;&lt;/ol&gt;
&lt;h2&gt;TCP SO_​REUSEPORT&lt;/h2&gt;
&lt;p&gt;SO_REUSEPORT 主要用來解決驚羣、性能等問題。通過多個進程、線程來監聽同一端口，進來的連接通過內核來 hash 分發做到負載均衡，避免驚羣。&lt;/p&gt;

&lt;blockquote&gt;SO_​REUSEPORT is also useful for eliminating the 
try-​10-​times-​to-​bind hack in ftpd’s data connection setup routine. 
Without SO_​REUSEPORT, only one ftpd thread can bind to TCP (lhost, 
lport, INADDR_​ANY, 0) in preparation for connecting back to the client.
 Under conditions of heavy load, there are more threads colliding here 
than the try-​10-​times hack can accomodate. With SO_​REUSEPORT, things 
work nicely and the hack becomes unnecessary.&lt;/blockquote&gt;

&lt;p&gt;SO_REUSEPORT 使用場景：linux kernel 3.9 
引入了最新的 SO_REUSEPORT 選項，使得多進程或者多線程創建多個綁定同一個 ip:port 的監聽 socket，提高服務器的接收鏈接的併發能力,程序的擴展性更好；此時需要設置 SO_REUSEPORT（&lt;strong&gt;注意所有進程都要設置才生效&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;setsockopt(listenfd, SOL_​SOCKET, SO_REUSEPORT,(const void *)&amp;amp;reuse , sizeof(int));&lt;/p&gt;
&lt;p&gt;目的：每一個進程有一個獨立的監聽 socket，並且 bind 相同的 ip:port，獨立的 listen() 和 accept()；提高接收連接的能力。（例如 nginx 多進程同時監聽同一個 ip:port）&lt;/p&gt;

&lt;blockquote&gt;(a) on Linux SO_​REUSEPORT is meant to be used &lt;em&gt;purely&lt;/em&gt;
 for load balancing multiple incoming UDP packets or incoming TCP 
connection requests across multiple sockets belonging to the same app. 
ie. it’s a work around for machines with a lot of cpus, handling heavy 
load, where a single listening socket becomes a bottleneck because of 
cross-​thread contention on the in-​kernel socket lock (and state).&lt;/blockquote&gt;
&lt;blockquote&gt;(b) set IP_​BIND_​ADDRESS_​NO_​PORT socket option for tcp sockets before binding to a specific source ip&lt;br /&gt;with port 0 if you’re going to use the socket for connect() rather then listen() this allows the kernel&lt;br /&gt;to delay allocating the source port until connect() time at which point it is much cheaper&lt;/blockquote&gt;

&lt;p&gt;Ephemeral Port Range 就是我們前面所説的 Port Range（/proc/sys/net/ipv4/ip_local_port_range）&lt;/p&gt;

&lt;blockquote&gt;A TCP/​IPv4 connection consists of two endpoints, and each 
endpoint consists of an IP address and a port number. Therefore, when a 
client user connects to a server computer, an established connection can
 be thought of as the 4-​tuple of (server IP, server port, client IP, 
client port).&lt;/blockquote&gt;
&lt;blockquote&gt;Usually three of the four are readily known – client machine
 uses its own IP address and when connecting to a remote service, the 
server machine’s IP address and service port number are required.&lt;/blockquote&gt;
&lt;blockquote&gt;What is not immediately evident is that when a connection is
 established that the client side of the connection uses a port number. 
Unless a client program explicitly requests a specific port number, the 
port number used is an ephemeral port number.&lt;/blockquote&gt;
&lt;blockquote&gt;Ephemeral ports are temporary ports assigned by a machine’s 
IP stack, and are assigned from a designated range of ports for this 
purpose. When the connection terminates, the ephemeral port is available
 for reuse, although most IP stacks won’t reuse that port number until 
the entire pool of ephemeral ports have been used.&lt;/blockquote&gt;
&lt;blockquote&gt;So, if the client program reconnects, it will be assigned a different ephemeral port number for its side of the new connection.&lt;/blockquote&gt;

&lt;h2&gt;linux 如何選擇 Ephemeral Port&lt;/h2&gt;
&lt;p&gt;有資料説是隨機從 Port Range 選擇 port，有的説是順序選擇，那麼實際驗證一下。&lt;/p&gt;
&lt;p&gt;如下測試代碼：&lt;/p&gt;
&lt;figure&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;br /&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;#include &amp;lt;stdio.h&amp;gt; /​/​printf&lt;/p&gt;
&lt;p&gt;#include &amp;lt;stdlib.h&amp;gt; /​/​atoi&lt;/p&gt;
&lt;p&gt;#include &amp;lt;unistd.h&amp;gt; /​/​close&lt;/p&gt;
&lt;p&gt;#include &amp;lt;arpa/inet.h&amp;gt; /​/​ntohs&lt;/p&gt;
&lt;p&gt;#include &amp;lt;sys/socket.h&amp;gt; /​/​connect, socket&lt;/p&gt;
&lt;p&gt;void sample() {&lt;/p&gt;
&lt;p&gt;/​/​Create socket&lt;/p&gt;
&lt;p&gt;int sockfd;&lt;/p&gt;
&lt;p&gt;if (sockfd = socket(AF_INET, SOCK_​STREAM, 0), –1 == sockfd) {&lt;/p&gt;
&lt;p&gt;perror(「socket」);&lt;/p&gt;
&lt;p&gt;/​/​Connect to remote. This does NOT actually send a packet.&lt;/p&gt;
&lt;p&gt;const struct sockaddr_​in raddr = {&lt;/p&gt;
&lt;p&gt;.sin_​family = AF_​INET,&lt;/p&gt;
&lt;p&gt;.sin_​port = htons(8080), /​/​arbitrary remote port&lt;/p&gt;
&lt;p&gt;.sin_​addr = htonl(INADDR_ANY) /​/​arbitrary remote host&lt;/p&gt;
&lt;p&gt;if (-1 == connect(sockfd, (const struct sockaddr *)&amp;amp;raddr, sizeof(raddr))) {&lt;/p&gt;
&lt;p&gt;perror(「connect」);&lt;/p&gt;
&lt;p&gt;/​/​Display selected ephemeral port&lt;/p&gt;
&lt;p&gt;const struct sockaddr_​in laddr;&lt;/p&gt;
&lt;p&gt;socklen_​t laddr_​len = sizeof(laddr);&lt;/p&gt;
&lt;p&gt;if (-1 == getsockname(sockfd, (struct sockaddr *)&amp;amp;laddr, &amp;amp;laddr_​len)) {&lt;/p&gt;
&lt;p&gt;perror(「getsockname」);&lt;/p&gt;
&lt;p&gt;printf(「local port: %i\n」, ntohs(laddr.sin_port));&lt;/p&gt;
&lt;p&gt;/​/​Close socket&lt;/p&gt;
&lt;p&gt;close(sockfd);&lt;/p&gt;
&lt;p&gt;int main() {&lt;/p&gt;
&lt;p&gt;for (int i = 0; i &amp;lt; 5; i++) {&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/figure&gt;
&lt;p&gt;bind 邏輯測試代碼&lt;/p&gt;
&lt;figure&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;br /&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;#include &amp;lt;netinet/in.h&amp;gt;&lt;/p&gt;
&lt;p&gt;#include &amp;lt;arpa/inet.h&amp;gt;&lt;/p&gt;
&lt;p&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/p&gt;
&lt;p&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/p&gt;
&lt;p&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/p&gt;
&lt;p&gt;#include &amp;lt;errno.h&amp;gt;&lt;/p&gt;
&lt;p&gt;#include &amp;lt;string.h&amp;gt;&lt;/p&gt;
&lt;p&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/p&gt;
&lt;p&gt;#include &amp;lt;time.h&amp;gt;&lt;/p&gt;
&lt;p&gt;void test_​bind(){&lt;/p&gt;
&lt;p&gt;int listenfd = 0, connfd = 0;&lt;/p&gt;
&lt;p&gt;struct sockaddr_​in serv_​addr;&lt;/p&gt;
&lt;p&gt;char sendBuff[1025];&lt;/p&gt;
&lt;p&gt;time_​t ticks;&lt;/p&gt;
&lt;p&gt;socklen_​t len;&lt;/p&gt;
&lt;p&gt;listenfd = socket(AF_INET, SOCK_​STREAM, 0);&lt;/p&gt;
&lt;p&gt;memset(&amp;amp;serv_addr, ‘0’, sizeof(serv_addr));&lt;/p&gt;
&lt;p&gt;memset(sendBuff, ‘0’, sizeof(sendBuff));&lt;/p&gt;
&lt;p&gt;serv_addr.sin_family = AF_​INET;&lt;/p&gt;
&lt;p&gt;serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);&lt;/p&gt;
&lt;p&gt;serv_addr.sin_port = htons(0);&lt;/p&gt;
&lt;p&gt;bind(listenfd, (struct sockaddr*)&amp;amp;serv_addr, sizeof(serv_addr));&lt;/p&gt;
&lt;p&gt;len = sizeof(serv_addr);&lt;/p&gt;
&lt;p&gt;if (getsockname(listenfd, (struct sockaddr *)&amp;amp;serv_​addr, &amp;amp;len) == –1) {&lt;/p&gt;
&lt;p&gt;perror(「getsockname」);&lt;/p&gt;
&lt;p&gt;printf(「port number %d\n」, ntohs(serv_addr.sin_port)); //只是挑選到了 port，在系統層面保留，tcp 連接還沒有，netstat 是看不到的&lt;/p&gt;
&lt;p&gt;int main(int argc, char *argv[])&lt;/p&gt;
&lt;p&gt;for (int i = 0; i &amp;lt; 5; i++) {&lt;/p&gt;
&lt;p&gt;test_​bind();&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/figure&gt;
&lt;h3&gt;3.10.0–327.ali2017.alios7.x86_64&lt;/h3&gt;
&lt;p&gt;編譯後，執行 (3.10.0–327.ali2017.alios7.x86_64)：&lt;/p&gt;
&lt;figure&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;br /&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;#date; ./​client &amp;amp;&amp;amp; echo 「+++++++」 ; ./​client &amp;amp;&amp;amp; 
sleep 0.1 ; echo 「——-」 &amp;amp;&amp;amp; ./​client &amp;amp;&amp;amp; sleep 10; date; 
./​client &amp;amp;&amp;amp; echo 「+++++++」 ; ./​client &amp;amp;&amp;amp; sleep 0.1 
&amp;amp;&amp;amp; echo 「******」; ./​client;&lt;/p&gt;
&lt;p&gt;Fri Nov 27 10:52:52 CST 2020&lt;/p&gt;
&lt;p&gt;local port: 17448&lt;/p&gt;
&lt;p&gt;local port: 17449&lt;/p&gt;
&lt;p&gt;local port: 17451&lt;/p&gt;
&lt;p&gt;local port: 17452&lt;/p&gt;
&lt;p&gt;local port: 17453&lt;/p&gt;
&lt;p&gt;local port: 17455&lt;/p&gt;
&lt;p&gt;local port: 17456&lt;/p&gt;
&lt;p&gt;local port: 17457&lt;/p&gt;
&lt;p&gt;local port: 17458&lt;/p&gt;
&lt;p&gt;local port: 17460&lt;/p&gt;
&lt;p&gt;local port: 17475&lt;/p&gt;
&lt;p&gt;local port: 17476&lt;/p&gt;
&lt;p&gt;local port: 17477&lt;/p&gt;
&lt;p&gt;local port: 17478&lt;/p&gt;
&lt;p&gt;local port: 17479&lt;/p&gt;
&lt;p&gt;Fri Nov 27 10:53:02 CST 2020&lt;/p&gt;
&lt;p&gt;local port: 17997&lt;/p&gt;
&lt;p&gt;local port: 17998&lt;/p&gt;
&lt;p&gt;local port: 17999&lt;/p&gt;
&lt;p&gt;local port: 18000&lt;/p&gt;
&lt;p&gt;local port: 18001&lt;/p&gt;
&lt;p&gt;local port: 18002&lt;/p&gt;
&lt;p&gt;local port: 18003&lt;/p&gt;
&lt;p&gt;local port: 18004&lt;/p&gt;
&lt;p&gt;local port: 18005&lt;/p&gt;
&lt;p&gt;local port: 18006&lt;/p&gt;
&lt;p&gt;local port: 18010&lt;/p&gt;
&lt;p&gt;local port: 18011&lt;/p&gt;
&lt;p&gt;local port: 18012&lt;/p&gt;
&lt;p&gt;local port: 18013&lt;/p&gt;
&lt;p&gt;local port: 18014&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/figure&gt;
&lt;p&gt;從測試看起來 linux 下端口選擇跟時間有關係，起始端口肯定是順序增加，起始端口應該是在 Ephemeral Port 範圍內並且和時間戳綁定的某個值（也是遞增的），即使沒有使用任何端口，起始端口也會隨時間增加而增加。&lt;/p&gt;
&lt;h3&gt;4.19.91–19.1.al7.x86_64&lt;/h3&gt;
&lt;p&gt;換個內核版本編譯後，執行 (4.19.91–19.1.al7.x86_64)：&lt;/p&gt;
&lt;figure&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;br /&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;$date; ./​client &amp;amp;&amp;amp; echo 「+++++++」 ; ./​client &amp;amp;&amp;amp; 
sleep 0.1 ; echo 「——-」 &amp;amp;&amp;amp; ./​client &amp;amp;&amp;amp; sleep 10; date; 
./​client &amp;amp;&amp;amp; echo 「+++++++」 ; ./​client &amp;amp;&amp;amp; sleep 0.1 
&amp;amp;&amp;amp; echo 「******」; ./​client;&lt;/p&gt;
&lt;p&gt;Fri Nov 27 14:10:47 CST 2020&lt;/p&gt;
&lt;p&gt;local port: 7890&lt;/p&gt;
&lt;p&gt;local port: 7892&lt;/p&gt;
&lt;p&gt;local port: 7894&lt;/p&gt;
&lt;p&gt;local port: 7896&lt;/p&gt;
&lt;p&gt;local port: 7898&lt;/p&gt;
&lt;p&gt;local port: 7900&lt;/p&gt;
&lt;p&gt;local port: 7902&lt;/p&gt;
&lt;p&gt;local port: 7904&lt;/p&gt;
&lt;p&gt;local port: 7906&lt;/p&gt;
&lt;p&gt;local port: 7908&lt;/p&gt;
&lt;p&gt;local port: 7910&lt;/p&gt;
&lt;p&gt;local port: 7912&lt;/p&gt;
&lt;p&gt;local port: 7914&lt;/p&gt;
&lt;p&gt;local port: 7916&lt;/p&gt;
&lt;p&gt;local port: 7918&lt;/p&gt;
&lt;p&gt;Fri Nov 27 14:10:57 CST 2020&lt;/p&gt;
&lt;p&gt;local port: 7966&lt;/p&gt;
&lt;p&gt;local port: 7968&lt;/p&gt;
&lt;p&gt;local port: 7970&lt;/p&gt;
&lt;p&gt;local port: 7972&lt;/p&gt;
&lt;p&gt;local port: 7974&lt;/p&gt;
&lt;p&gt;local port: 7976&lt;/p&gt;
&lt;p&gt;local port: 7978&lt;/p&gt;
&lt;p&gt;local port: 7980&lt;/p&gt;
&lt;p&gt;local port: 7982&lt;/p&gt;
&lt;p&gt;local port: 7984&lt;/p&gt;
&lt;p&gt;local port: 7988&lt;/p&gt;
&lt;p&gt;local port: 7990&lt;/p&gt;
&lt;p&gt;local port: 7992&lt;/p&gt;
&lt;p&gt;local port: 7994&lt;/p&gt;
&lt;p&gt;local port: 7996&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/figure&gt;
&lt;p&gt;以上測試時的參數&lt;/p&gt;
&lt;figure&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;br /&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;$cat /​proc/​sys/​net/​ipv4/​ip_​local_​port_​range&lt;/p&gt;
&lt;p&gt;1024 65535&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/figure&gt;
&lt;p&gt;將 1024 改成 1025 後，分配出來的都是奇數端口了：&lt;/p&gt;
&lt;figure&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;br /&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;$cat /​proc/​sys/​net/​ipv4/​ip_​local_​port_​range&lt;/p&gt;
&lt;p&gt;local port: 1033&lt;/p&gt;
&lt;p&gt;local port: 1025&lt;/p&gt;
&lt;p&gt;local port: 1027&lt;/p&gt;
&lt;p&gt;local port: 1029&lt;/p&gt;
&lt;p&gt;local port: 1031&lt;/p&gt;
&lt;p&gt;local port: 1033&lt;/p&gt;
&lt;p&gt;local port: 1025&lt;/p&gt;
&lt;p&gt;local port: 1027&lt;/p&gt;
&lt;p&gt;local port: 1029&lt;/p&gt;
&lt;p&gt;local port: 1031&lt;/p&gt;
&lt;p&gt;local port: 1033&lt;/p&gt;
&lt;p&gt;local port: 1025&lt;/p&gt;
&lt;p&gt;local port: 1027&lt;/p&gt;
&lt;p&gt;local port: 1029&lt;/p&gt;
&lt;p&gt;local port: 1031&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/figure&gt;
&lt;p&gt;之所以都是偶數端口，是因為 port_range 從偶數開始, 每次從++變到+2 的&lt;a href=&quot;https://github.com/plantegg/linux/commit/1580ab63fc9a03593072cc5656167a75c4f1d173&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;原因&lt;/a&gt;，connect 挑選隨機端口時都是在起始端口的基礎上+2，而 bind 挑選隨機端口的起始端口是系統 port_range 起始端口+1（這樣和 connect 錯開），然後每次仍然嘗試+2，這樣 connect 和 bind 基本一個用偶數另外一個就用奇數，一旦不夠了再嘗試使用另外一組&lt;/p&gt;
&lt;figure&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;br /&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;$cat /​proc/​sys/​net/​ipv4/​ip_​local_​port_​range&lt;/p&gt;
&lt;p&gt;$./​bind &amp;amp; —bind 程序隨機挑選 5 個端口&lt;/p&gt;
&lt;p&gt;port number 1039&lt;/p&gt;
&lt;p&gt;port number 1043&lt;/p&gt;
&lt;p&gt;port number 1045&lt;/p&gt;
&lt;p&gt;port number 1041&lt;/p&gt;
&lt;p&gt;port number 1047 –用完所有奇數端口&lt;/p&gt;
&lt;p&gt;$./​bind &amp;amp; –繼續挑選偶數端口&lt;/p&gt;
&lt;p&gt;port number 1044&lt;/p&gt;
&lt;p&gt;port number 1042&lt;/p&gt;
&lt;p&gt;port number 1046&lt;/p&gt;
&lt;p&gt;port number 0 –實在沒有了&lt;/p&gt;
&lt;p&gt;port number 0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/figure&gt;
&lt;p&gt;可見 4.19 內核下每次 port 是+2，在 3.10 內核版本中是+1. 並且都是遞增的，同時即使 port 不使用，也會隨着時間的變化這個起始 port 增大。&lt;/p&gt;
&lt;p&gt;Port Range 有點像雷達轉盤數字，時間就像是雷達上的掃描指針，這個指針不停地旋轉，如果這個時候剛好有應用要申請 Port，那麼就從指針正好指向的 Port 開始向後搜索可用 port&lt;/p&gt;
&lt;h2&gt;tcp_​max_​tw_​buckets&lt;/h2&gt;
&lt;p&gt;tcp_​max_​tw_​buckets: 在 TIME_​WAIT 數量等於 tcp_​max_​tw_​buckets 時，新的連接斷開不再進入 TIME_WAIT 階段，而是直接斷開，並打印 warnning.&lt;/p&gt;
&lt;p&gt;實際測試發現，在 TIME_​WAIT 數量等於 tcp_​max_​tw_​buckets 時 
新的連接仍然可以不斷地創建和斷開，這個參數大小不會影響性能，只是影響 TIME_WAIT 數量的展示（當然 TIME_​WAIT 
太多導致 local port 不夠除外）, 這個值設置小一點會避免出現端口不夠的情況&lt;/p&gt;

&lt;blockquote&gt;tcp_​max_​tw_​buckets — INTEGER&lt;br /&gt;Maximal number of 
timewait sockets held by system simultaneously.If this number is 
exceeded time-​wait socket is immediately destroyed and warning is 
printed. This limit exists only to prevent simple DoS attacks, you &lt;em&gt;must&lt;/em&gt;
 not lower the limit artificially, but rather increase it (probably, 
after increasing installed memory), if network conditions require more 
than default value.&lt;/blockquote&gt;

&lt;p&gt;SO_​LINGER 選項&lt;strong&gt;用來設置延遲關閉的時間，等待套接字發送緩衝區中的數據發送完成&lt;/strong&gt;。 沒有設置該選項時，在調用 close() 後，在發送完 FIN 後會立即進行一些清理工作並返回。 如果設置了 SO_LINGER 選項，並且等待時間為正值，則在清理之前會等待一段時間。&lt;/p&gt;
&lt;p&gt;如果把延時設置為 0 時，Socket 就丟棄數據，並向對方發送一個 &lt;code&gt;RST&lt;/code&gt; 來終止連接，因為走的是 RST 包，所以就不會有 &lt;code&gt;TIME_WAIT&lt;/code&gt; 了。&lt;/p&gt;

&lt;blockquote&gt;This option specifies how the &lt;code&gt;close&lt;/code&gt; function operates for a connection-​oriented protocol (for TCP, but not for UDP). By default, &lt;code&gt;close&lt;/code&gt;
 returns immediately, but ==if there is any data still remaining in the 
socket send buffer, the system will try to deliver the data to the 
peer==.&lt;/blockquote&gt;

&lt;p&gt;SO_​LINGER 有三種情況&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;l_​onoff 為 false（0）， 那麼 l_​linger 的值沒有意義，socket 主動調用 close 時會立即返回，操作系統會將殘留在緩衝區中的數據發送到對端，並按照正常流程關閉 (交換 FIN-ACK），最後連接進入&lt;code&gt;TIME_WAIT&lt;/code&gt;狀態。&lt;strong&gt;這是默認情況&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;l_​onoff 為 true（非 0）， l_​linger 為 0，主動調用 close 的一方也是立刻返回，但是這時 TCP 會丟棄發送緩衝中的數據，而且不是按照正常流程關閉連接（不發送 FIN 包），直接發送&lt;code&gt;RST&lt;/code&gt;，連接不會進入 time_​wait 狀態，對端會收到 &lt;code&gt;java.net.SocketException: Connection reset&lt;/code&gt;異常&lt;/li&gt;&lt;li&gt;l_​onoff 為 true（非 0）， l_​linger 也為非 0，這表示 &lt;code&gt;SO_LINGER&lt;/code&gt;選項生效，並且超時時間大於零，這時調用 close 的線程被阻塞，TCP 會發送緩衝區中的殘留數據，這時有兩種可能的情況： &lt;ul&gt;&lt;li&gt;數據發送完畢，收到對方的 ACK，然後進行連接的正常關閉（交換 FIN-ACK）&lt;/li&gt;&lt;li&gt;超時，未發送完成的數據被丟棄，連接發送&lt;code&gt;RST&lt;/code&gt;進行非正常關閉&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;figure&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;br /&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;struct linger {&lt;/p&gt;
&lt;p&gt;int l_​onoff; /​* 0=off, nonzero=on */​&lt;/p&gt;
&lt;p&gt;int l_​linger; /​* linger time, POSIX specifies units as seconds */​&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/figure&gt;
&lt;h3&gt;NIO 下設置 SO_​LINGER 的錯誤案例&lt;/h3&gt;
&lt;p&gt;在使用 NIO 時，最好不設置&lt;code&gt;SO_LINGER&lt;/code&gt;。比如 Tomcat 服務端接收到請求創建新連接時，做了這樣的設置：&lt;/p&gt;
&lt;figure&gt;
&lt;table border=&quot;1&quot; style=&quot;width: 100%;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;br /&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;SocketChannel.setOption(SocketOption.SO_LINGER, 1000)&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;SO_LINGER&lt;/code&gt;的單位為&lt;code&gt;秒&lt;/code&gt;！在網絡環境比較好的時候，例如客戶端、服務器都部署在同一個機房，close 雖然會被阻塞，但時間極短可以忽略。但當網絡環境不那麼好時，例如存在丟包、較長的網絡延遲，buffer 中的數據一直無法發送成功，那麼問題就出現了：&lt;code&gt;close 會被阻塞較長的時間，從而直接或間接引起 NIO 的 IO 線程被阻塞&lt;/code&gt;，服務器會不響應，不能處理 accept、read、write 等任何 IO 事件。也就是應用頻繁出現掛起現象。解決方法就是刪掉這個設置，close 時立即返回，由操作系統接手後面的工作。&lt;/p&gt;
&lt;p&gt;這時會看到如下連接狀態&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://plantegg.github.io/images/951413iMgBlog/image-20220721100246598.png&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;image-20220721100246598.png&quot; src=&quot;https://plantegg.github.io/images/951413iMgBlog/image-20220721100246598.png&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以及對應的堆棧&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://plantegg.github.io/images/951413iMgBlog/image-20220721100421130.png&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;image-20220721100421130.png&quot; src=&quot;https://plantegg.github.io/images/951413iMgBlog/image-20220721100421130.png&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;查看其中一個 IO 線程等待的鎖，發現鎖是被 HTTP 線程持有。這個線程正在執行&lt;code&gt;preClose0&lt;/code&gt;，就是在這裏等待連接的關閉&lt;a href=&quot;https://plantegg.github.io/images/951413iMgBlog/image-20220721100446521.png&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;image-20220721100446521.png&quot; src=&quot;https://plantegg.github.io/images/951413iMgBlog/image-20220721100446521.png&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;每次 HTTP 線程在關閉連接被阻塞時，同時持有了&lt;code&gt;SocketChannelImpl&lt;/code&gt;的對象鎖，而 IO 線程在把這個連接移除出它的 selector 管理隊列時，也要獲得同一個&lt;code&gt;SocketChannelImpl&lt;/code&gt;的對象鎖。IO 線程就這麼一次次的被阻塞，悲劇的無以復加。有些 NIO 框架會讓 IO 線程去做 close，這時候就更加悲劇了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;總之這裏的錯誤原因有兩點：1）網絡狀態不好；2）錯誤理解了 l_linger 的單位，是秒，不是毫秒。 在這兩個原因的共同作用下導致了數據遲遲不能發送完畢，l_linger 超時又需要很久，所以服務會出現一直阻塞的狀態。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;為什麼要有 time_​wait 狀態&lt;/h2&gt;

&lt;blockquote&gt;TIME-​WAIT — represents waiting for enough time to pass to 
be sure the remote TCP received the acknowledgment of its connection 
termination request.&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://plantegg.github.io/images/951413iMgBlog/image-20220721093116395.png&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;image-20220721093116395.png&quot; src=&quot;https://plantegg.github.io/images/951413iMgBlog/image-20220721093116395.png&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這個案例來自騰訊 7 層網關團隊，網關用的 Nginx，請求轉發給後面的被代理機器 (RS:real server)，發現 sys CPU 異常高，CPU 都用在搜索可用端口.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://plantegg.github.io/images/951413iMgBlog/640-8259033.png&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;640-8259033.png&quot; src=&quot;https://plantegg.github.io/images/951413iMgBlog/640-8259033.png&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://plantegg.github.io/images/951413iMgBlog/640-20221112211814567.png&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;640-20221112211814567.png&quot; src=&quot;https://plantegg.github.io/images/951413iMgBlog/640-20221112211814567.png&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;local port 不夠的時候 inet_​hash_​connect 中的 spin_​lock 會消耗過高的 sys（特別注意 4.6 內核後 local port 分奇偶數，每次 loop+2，所以更容易觸發 port 不夠的場景）&lt;/p&gt;
&lt;p&gt;核心原因總結: 4.6 後內核把本地端口分成奇偶數，奇數給 connect, 
偶數給 listen，本來端口有 6 萬，這樣 connect 只剩下 3 萬，當這 3 萬用完後也不會報找不到本地可用端口的錯誤 (這裏報錯可能更好)，而是在奇數裏找不到就找偶數裏的，每次都這樣。
 
沒改以前，總共 6 萬端口，用掉 3 萬，不分奇偶的話那麼每找兩個端口就有一個能用，也就是 50% 的概率。但是改了新的實現方案後，每次先要找奇數的 3 萬個，全部在用，然後到偶數裏繼續找到第 30001 個才是可用的，也就是找到的概率變成了 3 萬分之一，一下子複雜度高了 15000 倍，不慢才怪
 如果你對&lt;/p&gt;
&lt;p&gt;我的看法，這個分奇偶數的實現就是坑爹貨，在內核裏胡亂搞，為了一個小場景搞崩大多數正常場景，真沒必要，當然我這是事後諸葛亮，如果當時這種 feature 拿給我看我也會認為很不錯，想不到這個坑點！&lt;/p&gt;
&lt;p&gt;listen port search 消耗 CPU 異常高&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://plantegg.github.io/images/951413iMgBlog/640-9840722.jpeg&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;640-9840722.jpeg&quot; src=&quot;https://plantegg.github.io/images/951413iMgBlog/640-9840722.jpeg&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在正常的情況下，服務器的 listen port 數量，大概就是幾 w 個這樣的量級。這種量級下，一個 port 對應一個 socket，哈希桶大小為 32 是可以接受的。&lt;/p&gt;
&lt;p&gt;然而在內核支持了 reuseport 並且被廣泛使用後，情況就不一樣了，&lt;strong&gt;在多進程架構裏，listen port 對應的 socket 數量，是會被幾十倍的放大的。&lt;/strong&gt;以應用層監聽了 5000 個端口，reuseport
 使用了 50 個 cpu 核心為例，5000*50/32 約等於 7812，意味着每次握手包到來時，光是查找 listen 
socket，就需要遍歷 7800 多次。隨着機器硬件性能越來越強，應用層使用的 cpu 數量增多，這個問題還會繼續加劇。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正因為上述原因，並且我們現網機器開啓了 reuseport，在端口數量較多的機器裏，inet_lookup_listener 的哈希桶大小太小，遍歷過程消耗了 cpu，導致出現了函數熱點。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;短連接的開銷&lt;/h2&gt;
&lt;p&gt;用 ab 通過短連接走 lo 網卡壓本機 nginx，CPU0 是 ab 進程，CPU3/4 是 Nginx 服務，可以看到 si 非常高，QPS 2.2 萬&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://plantegg.github.io/images/951413iMgBlog/image-20220627154822263.png&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;image-20220627154822263.png&quot; src=&quot;https://plantegg.github.io/images/951413iMgBlog/image-20220627154822263.png&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;再將 ab 改用長連接來壓，可以看到 si、sy 都有下降，並且 si 下降到短連接的 20%，QPS 還能提升到 5.2 萬&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://plantegg.github.io/images/951413iMgBlog/image-20220627154931495.png&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;image-20220627154931495.png&quot; src=&quot;https://plantegg.github.io/images/951413iMgBlog/image-20220627154931495.png&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主要是內存開銷 (如圖，來源見水印)，另外就是每個連接都會佔用一個文件句柄，可以通過參數來設置：fs.nr_open、nofile（其實 nofile 還分 soft 和 hard） 和 fs.file-max&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://plantegg.github.io/images/951413iMgBlog/640-20220413134252639&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;640-20220413134252639&quot; src=&quot;https://plantegg.github.io/images/951413iMgBlog/640-20220413134252639&quot; /&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;從上圖可以看到：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;沒有收發數據的時候收發 buffer 不用提前分配，3K 多點的內存是指一個連接的元信息數據空間，不包含傳輸數據的內存 buffer&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;客戶端發送數據後，會根據數據大小分配 send buffer（一般不超過 wmem，默認 kernel 會根據系統內存壓力來調整 send buffer 大小)&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;server 端 kernel 收到數據後存放在 rmem 中，應用讀走後就會釋放對應的 rmem&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;rmem 和 wmem 都不會重用，用時分配用完釋放&lt;/p&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;可見，內核在 socket 內存開銷優化上採取了不少方法:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;內核會盡量及時回收發送緩存區、接收緩存區，但高版本做的更好&lt;/li&gt;&lt;li&gt;發送接收緩存區最小並一定不是 rmem 內核參數裏的最小值，實際大部分時間都是 0&lt;/li&gt;&lt;li&gt;其它狀態下，例如對於 TIME_WAIT 還會回收非必要的 socket_​alloc 等對象&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;A 進程選擇某個端口，並設置了 reuseaddr 
opt（表示其它進程還能繼續用這個端口），這時 B 進程選了這個端口，並且 bind 了，B 進程用完後把這個 bind 的端口釋放了，但是如果 A 
進程一直不釋放這個端口對應的連接，那麼這個端口會一直在內核中記錄被 bind 用掉了（能 bind 的端口 
是 65535 個，四元組不重複的連接你理解可以無限多），這樣的端口越來越多後，剩下可供 A 
進程發起連接的本地隨機端口就越來越少了 (也就是本來 A 進程選擇端口是按四元組的，但因為前面所説的原因，導致不按四元組了，只按端口本身這個一元組來排重)，這時會造成新建連接的時候這個四元組高概率重複，一般這個時候對端大概率還在
 time_wait 狀態，會忽略掉握手 syn 包並回復 ack ，進而造成建連接卡頓的現象&lt;/p&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;在內存、文件句柄足夠的話一台服務器上可以創建的 TCP 連接數量是沒有限制的&lt;/li&gt;&lt;li&gt;SO_​REUSEADDR 主要用於快速重用 TIME_WAIT 狀態的 TCP 端口，避免服務重啓就會拋出 Address Already in use 的錯誤&lt;/li&gt;&lt;li&gt;SO_REUSEPORT 主要用來解決驚羣、性能等問題&lt;/li&gt;&lt;li&gt;全局範圍可以用 net.ipv4.tcp_max_tw_buckets = 50000 來限制總 time_​wait 數量，但是會掩蓋問題&lt;/li&gt;&lt;li&gt;local port 的選擇是遞增搜索的，搜索起始 port 隨時間增加也變大&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;參考資料&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000002396411&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;https://segmentfault.com/a/1190000002396411&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/a364572/article/details/40628171&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;linux 中 TCP 的 socket、bind、listen、connect 和 accept 的實現&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ops.tips/blog/how-linux-tcp-introspection/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;How Linux allows TCP introspection The inner workings of bind and listen on Linux.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://idea.popcount.org/2014-04-03-bind-before-connect/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;https://idea.popcount.org/2014–04-03-bind-before-connect/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/C-Eeoeh9GHxugF4J30fz1A&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;TCP 連接中客戶端的端口號是如何確定的？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/plantegg/linux/commit/9b3312bf18f6873e67f1f51dab3364c95c9dc54c&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;對應 4.19 內核代碼解析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.cloudflare.com/how-to-stop-running-out-of-ephemeral-ports-and-start-to-love-long-lived-connections/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;How to stop running out of ephemeral ports and start to love long-​lived connections&lt;/a&gt;&lt;/p&gt;&lt;hr /&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;翻牆技術博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;訂閲地址及社交帳號&lt;/a&gt;&lt;/div&gt;</description>
                <link>https://www.chinagfw.org/2023/07/tcp.html</link>
                <author>noreply@blogger.com (pompei)</author>
                <thr:total>0</thr:total>
            </item>
            <item>
                <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-7336789949329270707</guid>
                <pubDate>Thu, 27 Jul 2023 04:13:00 +0000</pubDate>
                <atom:updated>2023-07-27T12:13:51.626+08:00</atom:updated>
                <title>谷歌提議對網絡進行 DRM - 破壞開放性</title>
                <description>&lt;div class=&quot;SinglePost_SinglePost__3in7m&quot;&gt;&lt;h2&gt;via &lt;a href=&quot;https://here.news/post/64c1eb5f39cc7a79010a22c1&quot;&gt;https://here.news/post/64c1eb5f39cc7a79010a22c1&lt;/a&gt;&lt;br /&gt;&lt;/h2&gt;&lt;p&gt;&lt;a class=&quot;hidden md:block text-[20px] text-primary font-medium leading-[25px] no-underline&quot; href=&quot;https://here.news/explore&quot;&gt;&lt;svg fill=&quot;none&quot; height=&quot;24&quot; viewbox=&quot;0 0 25 24&quot; width=&quot;25&quot;
                    xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/p&gt;&lt;div data-tooltip-content=&quot;1µ to post&quot; data-tooltip-id=&quot;globalTooltip&quot;&gt;&lt;img alt=&quot;Picked image&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/e25d1f74-e4c7-42eb-9b1f-fc1404b204f2_image_image.png&quot; /&gt;&lt;/div&gt;&lt;p&gt;谷歌試圖鞏固 Chrome 在網絡標準上的壟斷地位，阻止廣告攔截，摧毀 Firefox 和較小的 Chromium 和 WebKit 分支，並提高其廣告收入。&lt;/p&gt;&lt;p&gt;此（擬議中的）API 允許網站從「認證者」那裏請求「認證」，以驗證客戶端環境。谷歌可以通過將 Chrome 作為認證者來利用這一點，從而巧妙地提升 Chrome 在 Firefox 等其他瀏覽器上的優勢。這是偽裝成的供應商鎖定！&lt;/p&gt;&lt;p&gt;「認證者」決定您的設備和/或瀏覽器是否足夠「值得信賴」-這是由您試圖訪問的網站定義的。&lt;/p&gt;&lt;p&gt;它專門設計用於摧毀開放網絡，拒絕您使用任何您想使用的瀏覽器，在任何操作系統上。&lt;/p&gt;&lt;p&gt;另一個擔憂在於限制廣告攔截器。通過 Manifest v3，谷歌打算限制 Chrome 擴展中的廣告攔截功能。結合 WEI API，谷歌可能會在瀏覽體驗、壟斷和廣告收入方面獲得更多控制權。&lt;/p&gt;&lt;p&gt;這個 API 幾乎沒有什麼好處，但可能最終會傷害到小型瀏覽器分支、修改過的 Android/iOS 手機、定製 Linux 發行版、用戶隱私（通過向認證者提供更多數據點並限制隱私工具）、用戶體驗（通過破壞廣告攔截）。&lt;/p&gt;&lt;p&gt;提案的官方 GitHub 鏈接：&lt;a href=&quot;https://github.com/RupertBenWiser/Web-Environment-Integrity&quot; target=&quot;_blank&quot;&gt;https://github.com/RupertBenWiser/Web-Environment-Integrity&lt;/a&gt; （大家去查看問題和 PRs）&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;翻牆技術博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;訂閲地址及社交帳號&lt;/a&gt;&lt;/div&gt;
                </description>
                <link>https://www.chinagfw.org/2023/07/drm.html</link>
                <author>noreply@blogger.com (pompei)</author>
                <thr:total>0</thr:total>
            </item>
            <item>
                <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-723930248903429566</guid>
                <pubDate>Mon, 24 Jul 2023 14:07:00 +0000</pubDate>
                <atom:updated>2023-07-24T22:07:52.387+08:00</atom:updated>
                <title>家人的 Apple ID 開了雙重認證，仍然被釣魚，求大佬解惑，也順便給大家提個醒</title>
                <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;div class=&quot;cell&quot;&gt;
&lt;div class=&quot;topic_content&quot;&gt;&lt;div class=&quot;markdown_body&quot;&gt;&lt;h3&gt;via &lt;a href=&quot;https://www.v2ex.com/t/959041&quot;&gt;https://www.v2ex.com/t/959041&lt;/a&gt; &lt;br /&gt;&lt;/h3&gt;&lt;h3&gt;時間線&lt;/h3&gt;
&lt;p&gt;7 月 12 晚上發生的事情，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;23:33 ，丈母孃的手機突然被抹掉了資料，變成出廠設置的狀態。&lt;/li&gt;&lt;li&gt;23:35 ，她拿手機找我給她看看，我以為是蘋果系統問題，開始給她重新設置。&lt;/li&gt;&lt;li&gt;23:36 ，在設置的過程中，手機陸續收到了短信通知，我發現其中有銀行、支付等字樣。&lt;/li&gt;&lt;li&gt;23:37 ，開始意識到事情不太對，趕緊聯繫銀行和微信支付凍結。&lt;/li&gt;&lt;li&gt;23:40 ，等到凍結完畢，已經產生了 20 多筆訂單，共計 1.6w 。&lt;/li&gt;&lt;li&gt;23:50 ，報警之後，到社區派出所立案。&lt;/li&gt;&lt;li&gt;01:10 ，立案過程中，我在 Apple Store 的退款渠道提交了退款。&lt;/li&gt;&lt;/ul&gt;
&lt;h3&gt;被盜經過&lt;/h3&gt;
&lt;p&gt;之前一直以為開了雙重認證就高枕無憂，經過排查後，基本確定是被釣魚了：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;丈母孃曾經在某 App 購買虛擬商品，App Store 綁定了微信免密支付。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;7 月 11 號下午，丈母孃在 Apple Store 上下載了一個叫 「菜譜大全」 的 App ，它的登錄方式是 Apple ID 授權，這一步如果沒有開啓 iCloud+ 隱藏郵件地址的話，Apple ID 賬號就會泄露，如圖&lt;br /&gt;
&lt;img alt=&quot;&quot; class=&quot;embedded_image&quot; rel=&quot;noreferrer&quot; src=&quot;https://i.imgur.com/cexSIbrl.jpg&quot; /&gt; &lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;接着，會出來一個跟 App Store 長得非常像的密碼輸入框，大家如果經常安裝 App ，人臉識別失敗的時候，就會有這個密碼輸入框，不熟悉 App Store 登錄流程的話，很容易中招，如圖&lt;br /&gt;
&lt;img alt=&quot;&quot; class=&quot;embedded_image&quot; rel=&quot;noreferrer&quot; src=&quot;https://i.imgur.com/2HPmhH2l.jpg&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;有了 Apple ID 的賬號和密碼，就可以登錄了，這一步我跟丈母孃反覆確認了，她沒有見過雙重認證的彈窗。 &lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;登錄之後，他會把自己的號碼，加入雙重認證的信任號碼中，目的是為了後續的登錄可以通過自己認證，如圖
&lt;img alt=&quot;&quot; class=&quot;embedded_image&quot; rel=&quot;noreferrer&quot; src=&quot;https://i.imgur.com/E9BvCjsl.jpg&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;到這一步，他已經掌握了受害者 Apple ID 的所有權限。&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;
&lt;p&gt;接下來，盜號者並不會直接用 Apple ID 下單支付，而是會創建一個家庭共享，加入另一個賬號，由這個賬號購買 App 中的虛擬商品，如圖&lt;br /&gt;
&lt;img alt=&quot;&quot; class=&quot;embedded_image&quot; rel=&quot;noreferrer&quot; src=&quot;https://i.imgur.com/MKN9oFWl.jpg&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;h3&gt;疑問&lt;/h3&gt;
&lt;p&gt;整個釣魚過程，我有一點不太理解，在開啓了雙重認證的情況下，除非我丈母孃主動輸入驗證碼，否則即使對方拿到了 Apple ID 的賬號密碼，應該也無法登錄才對，這裏請大佬幫忙解惑。&lt;/p&gt;
&lt;h3&gt;嘗試退款&lt;/h3&gt;
&lt;p&gt;我在 Apple 400 客服嘗試了多種方式，最終都失敗了:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在 &lt;a href=&quot;http://reportaproblem.apple.com&quot; rel=&quot;nofollow&quot;&gt;reportaproblem.apple.com&lt;/a&gt; 頁面申請退款，申請後聯繫客服告知被拒絕。&lt;/li&gt;&lt;li&gt;找負責 App Store 訂單的客服，要求升級高級顧問，告知這是最終結果，升級也沒有意義，被拒絕。&lt;/li&gt;&lt;li&gt;找負責 Apple ID 的客服，曲線救國，要求查詢 Apple ID 被盜的問題，被告知查不到記錄。&lt;/li&gt;&lt;li&gt;由負責 Apple ID 的高級顧問轉到負責 App Store 訂單的高級顧問，和該顧問扯皮了 2 小時，被拒絕。&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;目前還能嘗試的方式：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;打 12315 反饋&lt;/li&gt;&lt;li&gt;在工信部違法和不良信息舉報中心投訴&lt;/li&gt;&lt;li&gt;起訴蘋果&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;subtle&quot;&gt;
&lt;span class=&quot;fade&quot;&gt;第 1 條附言 &amp;nbsp;·&amp;nbsp; &lt;span title=&quot;2023-07-23 22:34:11 +08:00&quot;&gt;23 小時 29 分鐘前&lt;/span&gt;&lt;/span&gt;
&lt;div class=&quot;sep5&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;topic_content&quot;&gt;補充一下：&lt;br /&gt;抹除設備是為了防止盜號者在支付的時候，受害者微信出現支付通知。&lt;br /&gt;評論區有大佬提到，如果這個 APP 有截屏，可以截到雙重認證的彈窗並上傳，並不需要 Apple ID 所有者主動提供驗證碼。&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;subtle&quot;&gt;
&lt;span class=&quot;fade&quot;&gt;第 2 條附言 &amp;nbsp;·&amp;nbsp; &lt;span title=&quot;2023-07-23 23:05:29 +08:00&quot;&gt;22 小時 57 分鐘前&lt;/span&gt;&lt;/span&gt;
&lt;div class=&quot;sep5&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;topic_content&quot;&gt;這個 App 的權限只有兩個：Siri 與搜索，無線數據&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;subtle&quot;&gt;
&lt;span class=&quot;fade&quot;&gt;第 3 條附言 &amp;nbsp;·&amp;nbsp; &lt;span title=&quot;2023-07-24 11:05:02 +08:00&quot;&gt;10 小時 58 分鐘前&lt;/span&gt;&lt;/span&gt;
&lt;div class=&quot;sep5&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;topic_content&quot;&gt;抓包看了下，app 會訪問這個 &lt;a href=&quot;http://app.yime888.com&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;app.yime888.com&lt;/a&gt; ，有沒有大佬有興趣爆破一下。&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;subtle&quot;&gt;
&lt;span class=&quot;fade&quot;&gt;第 4 條附言 &amp;nbsp;·&amp;nbsp; &lt;span title=&quot;2023-07-24 13:27:35 +08:00&quot;&gt;8 小時 35 分鐘前&lt;/span&gt;&lt;/span&gt;
&lt;div class=&quot;sep5&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;topic_content&quot;&gt;89 樓的大佬，給了一個繞過雙重認證的思路，感覺是比較靠譜的。&lt;/div&gt;
&lt;/div&gt;

&lt;span class=&quot;fade&quot;&gt;第 5 條附言 &amp;nbsp;·&amp;nbsp; &lt;span title=&quot;2023-07-24 15:14:46 +08:00&quot;&gt;6 小時 48 分鐘前&lt;/span&gt;&lt;/span&gt;
&lt;div class=&quot;sep5&quot;&gt;&lt;/div&gt;
感謝各位大佬，目前差不多搞清楚對方是如何繞過雙重認證的：&lt;br /&gt;對方在 App 內置了一個 Webview ，然後訪問 &lt;a href=&quot;http://appleid.apple.com/sign-in&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;appleid.apple.com/sign-in&lt;/a&gt; ，這一步系統會出現 Apple ID 的彈窗，如果人臉識別通過了或者輸入了正確的密碼，這個頁面就登錄了（可以理解為在內置的 safafi 打開了 Apple ID 的登錄頁面）。&lt;br /&gt;&lt;br /&gt;接下來會出現密碼彈窗，受害者輸入密碼之後，這個 Webview 可以注入一些 js 獲取到 Cookie ，然後訪問 &lt;a href=&quot;http://appleid.apple.com/account/manage&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;appleid.apple.com/account/manage&lt;/a&gt; ，通過一些自動接收驗證碼的機制，配合 Cookie 和密碼，就可以在受害者 Apple ID 的信任號碼中加入他自己的號碼，用來接收雙重認證的短信 &lt;div class=&quot;blogger-post-footer&quot;&gt;翻牆技術博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;訂閲地址及社交帳號&lt;/a&gt;&lt;/div&gt;</description>
                <link>https://www.chinagfw.org/2023/07/apple-id.html</link>
                <author>noreply@blogger.com (pompei)</author>
                <thr:total>0</thr:total>
            </item>
            <item>
                <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-4646238239211693982</guid>
                <pubDate>Mon, 17 Jul 2023 08:47:00 +0000</pubDate>
                <atom:updated>2023-07-17T16:47:35.506+08:00</atom:updated>
                <title> 中國的網絡行為在海底光纜生態系統中得到體現</title>
                <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;via &lt;a href=&quot;https://here.news/post/64b4fffa791292e41eb8d586&quot;&gt;https://here.news/post/64b4fffa791292e41eb8d586&lt;/a&gt; &lt;br /&gt;&lt;br /&gt;隨着世界渴望數字化，實現經濟一體化和超越邊界，全球第二大經濟體中國不能置身事外。但中國在網絡空間的行動顯示了中國打算以一種不同的方式進行數字化過程。中國在數字化和網絡安全方面制定國際規範的意圖可以從其對網絡空間變化的看法和反應中得到體現。中國在網絡空間中對「數字主權」的理解正在為全球數字治理設定平行標準，這些標準基於封閉和不互動的網絡空間。&lt;br /&gt;&lt;br /&gt;嵌入水下的海底光纜是運行網絡空間的基礎，通常似乎不受此類行動的影響。但中國在網絡領域的三個具體特點在海底光纜生態系統中也得到延續。&lt;br /&gt;&lt;br /&gt;中國知道，特別是在發展中國家和欠發達國家，成本效益優先於質量。習近平於 2015 年提出的數字絲綢之路戰略旨在幫助參與國發展和提升數字基礎設施。為了建立這個數字生態系統，中國公司如中興、大華、華為等在西亞和北非國家備受青睞，因為它們提供低成本的服務，推動了數字絲綢之路的實現。同樣，中國的海底光纜公司華為海洋網絡有限公司（HMN Tech）也以更低的成本提供光纜製造、鋪設、維護和修復服務。儘管成立於 2008 年，HMN Tech 已經獲得全球四分之一的光纜維護和修復合同，併成為最快的海底光纜鋪設公司。儘管由於美國的祕密外交，中國在 Sea-Me-We 6 光纜的投標過程中失去了競標，但其最終報價只有原始報價的三分之一。&lt;br /&gt;&lt;br /&gt;此外，基於價格，中國滿足了全球南方國家的需求，這些國家更有可能成為中國製定數字標準的一方。除了其周邊地區之外，HMN Tech 的幾乎所有海底光纜項目都位於全球南方。&lt;br /&gt;&lt;br /&gt;中國確保與全球數字網絡的最小整合，以維護其數字主權。中國的「防火長城」是各種技術和政府政策的產物，禁止大量數據進入中國的數字空間。儘管中國渴望保留來自其他國家流入其領土的最大信息量，但它不希望將自己整合並將自己的信息提供給全球數字網絡，以確保數據安全和數據隱私的幌子下。對從其數字空間流出的數據有非常嚴格的監管。它在海底光纜生態系統中也保持着同樣的行為。世界上最大的經濟體美國有大約 85 條海底光纜登陸其海岸，而全球第二大經濟體中國只有大約 19 條這樣的海底光纜。較少的海底光纜意味着更少的數據交換和較慢的數據傳播。雖然中國的公司 HMN Tech 正在全球範圍內開展約 134 個海底光纜項目，但中國在其領土上目前只計劃在不久的將來鋪設 4 條海底光纜，與國際海底光纜網絡的整合較少。這是對數字主權的延伸。&lt;br /&gt;&lt;br /&gt;中國的私營公司，特別是那些包含對維護中國穩定和安全至關重要的信息的公司，在後台受到政府的嚴格控制。一直有傳言稱電信製造公司華為與共產黨有關聯，導致一些國家擔心通過華為的設備進行監視和間諜活動而退出華為的 5G 試驗。這種強大的政府控制在海底光纜生態系統中也得到延續。當 HMN Tech 在 SeaMeWe-6 光纜的投標過程中失敗時，中國兩家電信巨頭中國移動和中國電信退出了該項目，作為反對的標誌。同樣，政府還向 HMN Tech 提供了鉅額補貼，以承擔一項價值 5 億美元的項目，該項目將連接亞洲、中東和歐洲，併成為 SeaMeWe-6 項目的競爭對手。&lt;br /&gt;&lt;br /&gt;一些人認為，中國通過竊聽海底光纜進行間諜活動的擔憂是誇大其詞的。但是，仔細審查這些從網絡空間延伸到海底光纜的連續性，暗示了在海底光纜生態系統中可能出現類似情況的未來可能性。據稱，華為的監視設備曾對其他國家的政府機構進行監視。有報告暗示全球範圍內發生了類似的監視事件。&lt;br /&gt;&lt;br /&gt;儘管故意切斷海底光纜幹擾全球數字數據流尚未成為常態，但全球數字化需求的增加和對海底光纜架構的重視已經在中美技術戰爭中開闢了一個新的戰線。最近，中國據稱破壞了馬祖島的海底光纜，對台灣外島進行了約六週的信息封鎖。如果通過這些海底光纜流動的信息可以停止，那麼也可以提取。信息的停止和提取的致命組合可以在權力動態中產生巨大的轉變，因為數據成為最尖鋭的雙刃劍之一。瞭解這些反映是重要的，以便預測中國在海底光纜生態系統中的行為，其重要性將在不久的將來倍增。&lt;br /&gt;&lt;/span&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻牆技術博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;訂閲地址及社交帳號&lt;/a&gt;&lt;/div&gt;</description>
                <link>https://www.chinagfw.org/2023/07/blog-post.html</link>
                <author>noreply@blogger.com (pompei)</author>
                <thr:total>0</thr:total>
            </item>
            <item>
                <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-1365889382429842171</guid>
                <pubDate>Tue, 11 Jul 2023 04:05:00 +0000</pubDate>
                <atom:updated>2023-07-11T12:05:29.478+08:00</atom:updated>
                <title>DNS 隧道可以實現 DoH 和 DoT</title>
                <description>&lt;p&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;via: &lt;a href=&quot;https://github.com/net4people/bbs/issues/30&quot;&gt;https://github.com/net4people/bbs/issues/30&lt;/a&gt; &lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;dnstt 是一種新的 DNS 隧道，可以與 DNS over HTTPS 和 DNS over TLS 解析器一起使用，根據 Turbo Tunnel 的理念設計。&lt;br /&gt;&lt;br /&gt;https://www.bamsoftware.com/software/dnstt/&lt;br /&gt;&lt;br /&gt;git clone https://www.bamsoftware.com/git/dnstt.git&lt;br /&gt;&lt;br /&gt;&lt;b&gt;它與其他 DNS 隧道有何不同？&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 它可以與 DNS over HTTPS（DoH）和 DNS over TLS（DoT）解析器一起使用，這使得網絡觀察者更難以判斷是否使用了隧道。&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 它嵌入了一個適當的可靠性和會話協議（KCP+smux）。客戶端和服務器可以同時發送和接收數據，客戶端無需等待一個查詢接收到響應後再發送下一個查詢。同時進行多個查詢有助於提高性能。（這就是 Turbo Tunnel 的概念。）&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 它使用 Noise 協議對隧道進行端到端的加密和認證，與 DoH/DoT 加密分開。&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;notranslate&quot;&gt;&lt;code class=&quot;notranslate&quot;&gt;.------.  |            .--------.               .------.
|tunnel|  |            | public |               |tunnel|
|client|&amp;lt;---DoH/DoT---&amp;gt;|resolver|&amp;lt;---UDP DNS---&amp;gt;|server|
&#39;------&#39;  |c           &#39;--------&#39;               &#39;------&#39;
   |      |e                                       |
.------.  |n                                    .------.
|local |  |s                                    |remote|
| app  |  |o                                    | app  |
&#39;------&#39;  |r                                    &#39;------&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;這樣的 DNS 隧道對於繞過審查是有用的。想象一下，一個審查者可以觀察到客戶端⇔解析器的連接，但無法觀察到解析器⇔服務器的連接（圖中的垂直線）。傳統基於 UDP 的 DNS 隧道通常被認為很容易被檢測到，因為它們生成的 DNS 消息的格式不同尋常，而且每個 DNS 消息必須帶有隧道服務器的域名標記，因為中間的遞歸解析器需要知道將它們轉發到哪裏。但是使用 DoH 或 DoT，客戶端⇔解析器的 DNS 消息是加密的，因此審查者不能輕易地看到正在使用隧道。（當然，根據加密流量的數量和時序可能仍然可能啓發式地檢測到隧道，僅僅加密本身並不能解決這個問題。）&lt;br /&gt;&lt;br /&gt;我希望這個軟件發佈可以展示這種類型的隧道設計的潛力。目前，該軟件不提供 TUN/TAP 網絡接口，甚至不提供 SOCKS 或 HTTP 代理接口。它只是將本地 TCP 套接字連接到遠程 TCP 套接字。不過，您可以相對容易地設置它以像普通的 SOCKS 或 HTTP 代理一樣工作，見下文。&lt;br /&gt;DNS 區設置&lt;br /&gt;&lt;br /&gt;DNS 隧道通過使隧道服務器充當特定 DNS 區的權威解析器來工作。中間的解析器通過將該區域的子域的查詢轉發到隧道服務器來充當代理。要設置 DNS 隧道，您需要一個域名和一個可以運行服務器的主機。&lt;br /&gt;&lt;br /&gt;假設您的域名是 example.com，您的主機的 IP 地址是 203.0.113.2 和 2001:db8::2。轉到您的域名註冊商的配置面板，並添加三個新記錄：&lt;br /&gt;&lt;br /&gt;A&amp;nbsp;&amp;nbsp;&amp;nbsp; tns.example.com&amp;nbsp;&amp;nbsp;&amp;nbsp; 指向 203.0.113.2&lt;br /&gt;AAAA&amp;nbsp;&amp;nbsp;&amp;nbsp; tns.example.com&amp;nbsp;&amp;nbsp;&amp;nbsp; 指向 2001:db8::2&lt;br /&gt;NS&amp;nbsp;&amp;nbsp;&amp;nbsp; t.example.com&amp;nbsp;&amp;nbsp;&amp;nbsp; 由 tns.example.com 管理&lt;br /&gt;&lt;br /&gt;tns 和 t 標籤可以是任何您想要的內容，但 tns 標籤不應是 t 標籤的子域（該子域下的所有內容都保留給隧道負載）。t 標籤應該很短，因為 DNS 消息中的空間有限，而且域名佔用其中的一部分。&lt;br /&gt;隧道服務器設置&lt;br /&gt;&lt;br /&gt;在服務器主機上運行以下命令；即在上面的示例中的 tns.example.com / 203.0.113.2 / 2001:db8::2 上運行。&lt;br /&gt;&lt;br /&gt;cd dnstt-server&lt;br /&gt;go build&lt;br /&gt;&lt;br /&gt;首先，您需要為端到端隧道加密生成加密密鑰。&lt;br /&gt;&lt;br /&gt;./dnstt-server -gen-key -privkey-file server.key -pubkey-file server.pub&lt;br /&gt;privkey 寫入 server.key&lt;br /&gt;pubkey 寫入 server.pub&lt;br /&gt;&lt;br /&gt;現在運行服務器。127.0.0.1:8000 是將轉發隧道流的 TCP 地址（圖中的「遠程應用程序」）。&lt;br /&gt;&lt;br /&gt;./dnstt-server -udp :5300 -privkey-file server.key t.example.com 127.0.0.1:8000&lt;br /&gt;&lt;br /&gt;隧道服務器需要在端口 53 上可訪問。您可以直接綁定到端口 53（-udp :53），但這需要您以 root 身份運行服務器。最好像上面顯示的那樣在非特權端口上運行服務器，並使用端口轉發將端口 53 轉發到它。在 Linux 上，以下命令將端口 53 轉發到端口 5300：&lt;br /&gt;&lt;br /&gt;sudo iptables -I INPUT -p udp --dport 5300 -j ACCEPT&lt;br /&gt;sudo iptables -t nat -I PREROUTING -i eth0 -p udp --dport 53 -j REDIRECT --to-ports 5300&lt;br /&gt;sudo ip6tables -I INPUT -p udp --dport 5300 -j ACCEPT&lt;br /&gt;sudo ip6tables -t nat -I PREROUTING -i eth0 -p udp --dport 53 -j REDIRECT --to-ports 5300&lt;br /&gt;&lt;br /&gt;您還需要為隧道服務器連接到的內容提供一些內容。它可以是代理服務器或其他任何內容。為了測試，您可以使用 Ncat 監聽器：&lt;br /&gt;&lt;br /&gt;sudo apt install ncat&lt;br /&gt;ncat -lkv 127.0.0.1 8000&lt;br /&gt;&lt;br /&gt;隧道客戶端設置&lt;br /&gt;&lt;br /&gt;cd dnstt-client&lt;br /&gt;go build&lt;br /&gt;&lt;br /&gt;將服務器上的 server.pub（公鑰文件）複製到客戶端。您不需要在客戶端上使用 server.key（私鑰文件）。&lt;br /&gt;&lt;br /&gt;選擇一個 DoH 或 DoT 解析器。這裏有一個 DoH 解析器的列表：&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; https://github.com/curl/curl/wiki/DNS-over-HTTPS#publicly-available-servers&lt;br /&gt;&lt;br /&gt;以及這裏有一個 DoT 解析器的列表：&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; https://dnsprivacy.org/wiki/display/DP/DNS+Privacy+Public+Resolvers#DNSPrivacyPublicResolvers-DNS-over-TLS%28DoT%29&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; https://dnsencryption.info/imc19-doe.html&lt;br /&gt;&lt;br /&gt;要使用 DoH 解析器，請使用-doh 選項：&lt;br /&gt;&lt;br /&gt;./dnstt-client -doh https://doh.example/dns-query -pubkey-file server.pub t.example.com 127.0.0.1:7000&lt;br /&gt;&lt;br /&gt;對於 DoT，請使用-dot：&lt;br /&gt;&lt;br /&gt;./dnstt-client -dot dot.example:853 -pubkey-file server.pub t.example.com 127.0.0.1:7000&lt;br /&gt;&lt;br /&gt;127.0.0.1:7000 指定了隧道的客戶端端口。連接到該端口的任何內容（圖中的「本地應用程序」）將通過解析器進行隧道傳輸，並連接到隧道服務器上的 127.0.0.1:8000。您可以使用 Ncat 客戶端測試它；運行此命令，您在客戶端終端中鍵入的任何內容都將顯示在服務器上，反之亦然。&lt;br /&gt;&lt;br /&gt;ncat -v 127.0.0.1 7000&lt;br /&gt;&lt;br /&gt;如何創建標準代理&lt;br /&gt;&lt;br /&gt;您可以通過使隧道服務器轉發到標準代理服務器來使隧道工作像普通的代理服務器。我發現使用 Ncat 的 HTTP 代理服務器模式很方便。&lt;br /&gt;&lt;br /&gt;ncat -lkv --proxy-type http 127.0.0.1 3128&lt;br /&gt;./dnstt-server -udp :5300 -privkey-file server.key t.example.com 127.0.0.1:3128&lt;br /&gt;&lt;br /&gt;在客戶端上，將您的應用程序配置為使用隧道的本地端口（127.0.0.1:7000）作為 HTTP/HTTPS 代理：&lt;br /&gt;&lt;br /&gt;./dnstt-client -doh https://doh.example/dns-query -pubkey-file server.pub t.example.com 127.0.0.1:7000&lt;br /&gt;curl -x http://127.0.0.1:7000/ https://example.com/&lt;br /&gt;&lt;br /&gt;我嘗試使用 Firefox 通過 DNS 隧道連接到 Ncat HTTP 代理，它可以正常工作。&lt;br /&gt;本地測試&lt;br /&gt;&lt;br /&gt;如果您只想看看它是如何工作的，而不想費心設置 DNS 區域或網絡服務器，您可以在本地主機上運行隧道的兩端。這種方式使用明文 UDP DNS，所以不用説，跨互聯網使用這樣的配置是不隱蔽的。因為在這種情況下沒有中間解析器，您可以使用任何您想要的域名；只需在客戶端和服務器上保持一致即可。&lt;br /&gt;&lt;br /&gt;./dnstt-server -gen-key -privkey-file server.key -pubkey-file server.pub&lt;br /&gt;./dnstt-server -udp 127.0.0.1:5300 -privkey-file server.key t.example.com 127.0.0.1:8000&lt;br /&gt;ncat -lkv 127.0.0.1 8000&lt;br /&gt;&lt;br /&gt;./dnstt-client -udp 127.0.0.1:5300 -pubkey-file server.pub t.example.com 127.0.0.1:7000&lt;br /&gt;ncat -v 127.0.0.1 7000&lt;br /&gt;&lt;br /&gt;當它工作時，您將在服務器上看到如下的日誌消息：&lt;br /&gt;&lt;br /&gt;2020/04/20 01:48:58 pubkey 0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff&lt;br /&gt;2020/04/20 01:49:00 begin session 468d274a&lt;br /&gt;2020/04/20 01:49:03 begin stream 468d274a:3&lt;br /&gt;&lt;br /&gt;以及在客戶端上看到如下的日誌消息：&lt;br /&gt;&lt;br /&gt;2020/04/20 01:49:00 MTU 134&lt;br /&gt;2020/04/20 01:49:00 begin session 468d274a&lt;br /&gt;2020/04/20 01:49:03 begin stream 468d274a:3&lt;br /&gt;&lt;br /&gt;注意事項&lt;br /&gt;&lt;br /&gt;對於外部觀察者來説，DoH 或 DoT 隧道是隱蔽的，但對於中間的解析器來説並非如此。如果解析器想要阻止您使用隧道，他們可以很容易地做到，只需不遞歸解析隧道服務器的 DNS 區域的請求。然而，隧道仍然對惡意解析器的竊聽或篡改是安全的；解析器可以拒絕服務，但無法更改或讀取隧道的內容。&lt;br /&gt;&lt;br /&gt;出於技術原因，該隧道要求解析器支持至少 1232 字節的 UDP 負載大小，這比 DNS 保證的最小值 512 要大。我懷疑大多數公共的 DoH 或 DoT 服務器都滿足這個要求，但我沒有進行過調查或其他任何操作。&lt;br /&gt;&lt;br /&gt;我沒有進行任何系統性能測試，但我對 Google、Cloudflare 和 Quad9 解析器進行了一些初步測試。使用 Google 和 Cloudflare 時，通過 Ncat 傳輸文件時，我可以獲得超過 100 KB/s 的下載速度。Cloudflare 的 DoH 解析器偶爾會發送「400 Bad Request」響應（當隧道客戶端看到這樣的意外狀態碼時，它會自動限制自身的速度）。Quad9 解析器的性能似乎明顯不如其他解析器，但我不知道原因。&lt;br /&gt;&lt;/span&gt; &lt;/p&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;翻牆技術博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;訂閲地址及社交帳號&lt;/a&gt;&lt;/div&gt;</description>
                <link>https://www.chinagfw.org/2023/07/dns-dohdot.html</link>
                <author>noreply@blogger.com (pompei)</author>
                <thr:total>0</thr:total>
            </item>
            <item>
                <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-8090901627736432729</guid>
                <pubDate>Thu, 29 Jun 2023 04:49:00 +0000</pubDate>
                <atom:updated>2023-06-29T12:49:53.141+08:00</atom:updated>
                <title>中國如何缺席 ChatGPT 盛宴</title>
                <description>&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;

&lt;/span&gt;&lt;h2 style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: calc(1.16667rem); font-weight: 600; line-height: calc(1.42857); margin-bottom: 24px; margin-top: calc(3.33333rem); text-align: center; visibility: visible; white-space: normal;&quot;&gt;原文已刪除，存檔頁面： &lt;a href=&quot;https://web.archive.org/web/20230209093123/https://mp.weixin.qq.com/s/V4D72elC8ezY1gDtjaZEUg&quot;&gt;https://web.archive.org/web/20230209093123/https://mp.weixin.qq.com/s/V4D72elC8ezY1gDtjaZEUg&lt;/a&gt;&lt;/h2&gt;&lt;h2 style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: calc(1.16667rem); font-weight: 600; line-height: calc(1.42857); margin-bottom: 24px; margin-top: calc(3.33333rem); text-align: center; visibility: visible; white-space: normal;&quot;&gt;&lt;img alt=&quot;Image&quot; class=&quot;css-9pa8cd&quot; draggable=&quot;true&quot; src=&quot;https://pbs.twimg.com/media/FogtpCfaIAQIGIS?format=jpg&amp;amp;name=small&quot; /&gt; &lt;br /&gt;&lt;/h2&gt;&lt;p style=&quot;visibility: visible;&quot;&gt;&lt;span style=&quot;caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; text-align: start; visibility: visible;&quot;&gt;目錄：&lt;/span&gt;&lt;br style=&quot;visibility: visible;&quot; /&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot; style=&quot;caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin-left: auto; margin-right: auto; margin-top: calc(1.66667rem); padding-left: 2.2222rem; text-align: start; visibility: visible; white-space: normal;&quot;&gt;&lt;li style=&quot;box-sizing: border-box; visibility: visible;&quot;&gt;&lt;p style=&quot;visibility: visible;&quot;&gt;ChatGPT 編年史&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; visibility: visible;&quot;&gt;&lt;p style=&quot;visibility: visible;&quot;&gt;我們如何錯過 GPT 盛宴&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; visibility: visible;&quot;&gt;&lt;p style=&quot;visibility: visible;&quot;&gt;GPT 大語言模型能實現 AGI 嗎&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; visibility: visible;&quot;&gt;&lt;p style=&quot;visibility: visible;&quot;&gt;連載話題預告&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 1rem; font-weight: 600; line-height: calc(1.66667); margin-bottom: 24px; margin-top: calc(1.66667rem); text-align: center; visibility: visible; white-space: normal;&quot;&gt;&lt;span style=&quot;font-size: 20px; visibility: visible;&quot;&gt;ChatGPT 編年史&lt;/span&gt;&lt;/h3&gt;&lt;section style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: 16px auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;我們來梳理一個時間軸。ChatGPT 是對話式 UI + GPT–3.5 系列模型，我們以最具代表性的論文、模型、API 為主線，梳理到今天。&lt;/section&gt;&lt;section style=&quot;line-height: normal; margin: 0px 0px 8px; text-align: justify; text-indent: 0em;&quot;&gt;&lt;br /&gt;&lt;/section&gt;&lt;section style=&quot;margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;2020 之前&lt;/span&gt;&lt;/section&gt;&lt;section style=&quot;margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 2017 年 6 月，Google 發佈 Transformer 論文。&lt;/span&gt;&lt;/section&gt;&lt;section style=&quot;margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 2017 年 6 月，7 月，OpenAI 發佈人類喜好的強化學習算法、PPO 算法，都是 ChatGPT 用到的算法。&lt;/span&gt;&lt;/section&gt;&lt;section style=&quot;margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 2018 年 6 月，OpenAI 發佈 GPT-1.&lt;/span&gt;&lt;/section&gt;&lt;section style=&quot;margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 2018 年 11 月，Google 發佈 BERT，此後 NLP 領域主要基於這個框架研究下游任務。&lt;/span&gt;&lt;/section&gt;&lt;section style=&quot;margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 2019 年 2 月，OpenAI 發佈 GPT-2，OpenAI 獲得了自信，此後專注於 GPT.&lt;/span&gt;&lt;/section&gt;&lt;section style=&quot;line-height: normal;&quot;&gt;&lt;br /&gt;&lt;/section&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;2020 年&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 年初，Covid-19 爆發。&lt;strong&gt;中國閉關&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 1 月，OpenAI 發佈語言模型的 Scaling Law（概念：模型能力跟參數規模、數據規模強相關），OpenAI 獲得了在數據和參數規模上 Scaling-up 的信心。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 5 月，GPT-3 論文發佈。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 6 月，&lt;strong&gt;GPT-3 API 發佈&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 9 月，ChatGPT 的關鍵原型算法相關論文發佈。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 12 月，歐洲機構發佈用於 GPT-3 復現的開源數據集。&lt;/span&gt;&lt;/p&gt;&lt;section style=&quot;line-height: normal;&quot;&gt;&lt;br /&gt;&lt;/section&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;2021 年&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 7 月，OpenAI 發佈 Copilot 原型算法。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 8 月，Codex API 發佈。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 11 月，&lt;strong&gt;GPT-3 API Public Release，不對中國開放&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- &lt;strong&gt;中國閉關&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;section style=&quot;line-height: normal;&quot;&gt;&lt;br /&gt;&lt;/section&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;2022 年&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;-
 1 月，GPT-3.5 API 
(text-davinci-002) 發佈，該模型經過 Github 代碼的訓練加持，推理能力顯著提升（該假設的因果關係待學術界論證），經過 Alignment 技術的加持，Follow 人類指令的能力顯著提升，輸出結果有用性和無害性顯著提升。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 3 月，GPT-3.5 論文發佈，公開 Alignment 算法。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 5 月，OpenAI Codex 已經被 70 個應用使用，包括微軟收購的 Github 的 Copilot.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 8 月，Stability AI 開源 StableDiffusion，文生圖的算法的效果可用、速度可行、代碼開源同時發生，引爆圖片生成。一時間，在中國，AIGC 似乎就是圖片生成的代名詞。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 9 月，Sequoia Capital 發佈 Generative AI: A Creative New World 博客。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 中國研究人員和開發者，沒有 OpenAI 的 API 權限。但圖片生成卻人人都可以嘗試，於是互聯網似乎只注意到了圖片生成，對 GPT 大語言模型的關注度進一步下降。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;-
 經過接近一年的 API 接入和 UI 探索、近一年的思維鏈（Chain of Thought）等 Prompt 
Engineering 技術試錯、模型加速等技術（如 Flash 
Attention、Fixed-Point）帶來的成本和延遲下降，GPT-3.5 的模型潛力得到開發（變得 Better、Faster and 
Cheaper）, Copy.ai, Jasper 等文本生成類公司的產品逐漸成熟。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 11 月，OpenAI 發佈 GPT3.5 API 的新模型 (text-davinci-003).&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- &lt;strong&gt;12 月 1 日，ChatGPT 發佈&lt;/strong&gt;。Musk 等名流開始談論 ChatGPT，引爆英文互聯網。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 12 月初，中國互聯網的自媒體逐漸開始討論 ChatGPT，主要以翻譯 twitter 的方式。知乎上有學者開始反思。一週後，關注指數下降，兩個月來只剩下 AI 自媒體把 ChatGPT 作為自己的主要關注內容。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- &lt;strong&gt;中國閉關&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;section style=&quot;line-height: normal;&quot;&gt;&lt;br /&gt;&lt;/section&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;2023 年&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 1 月，微軟宣佈投資 OpenAI 數十億美元，並將 GPT 加入全家桶。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- 2 月，中國春節結束，微軟和 Google 你方唱罷我登場，納斯達克財報季，AI 被反覆提起。中國互聯網是認識微軟的，ChatGPT 引爆中國互聯網，關注指數飆升。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: normal; margin-bottom: 8px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;- &lt;strong&gt;中國開放&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;值得注意的是，&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;中國因為疫情閉關的三年，正是 OpenAI 的 GPT 發展、壯大、產品化的三年。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 1rem; font-weight: 600; line-height: calc(1.66667); margin-bottom: 24px; margin-top: calc(1.66667rem); text-align: center; text-size-adjust: auto; white-space: normal;&quot;&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;我們如何錯過 GPT 盛宴？&lt;/span&gt;&lt;/h3&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin-bottom: 0px; margin-left: auto; margin-right: auto; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;歷史回顧完了，那麼為什麼我們（中國，尤其是 AI 社區）沒有更早地意識到，OpenAI 技術在應用層面的突破性？&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;意識到問題需要同時具備哪些條件：&lt;/p&gt;&lt;section style=&quot;line-height: 1.6em; margin: 1.66667px 0px 0px; text-align: left; text-indent: 0em;&quot;&gt;&lt;span style=&quot;color: #1a1a1a; font-size: 16px; letter-spacing: normal; text-decoration: none;&quot;&gt;1. 能夠看且懂 OpenAI、DeepMind、Google 等機構的論文（代表人羣：研究員）&lt;/span&gt;&lt;/section&gt;&lt;section style=&quot;line-height: 1.6em; margin: 1.66667px 0px 0px; text-align: left; text-indent: 0em;&quot;&gt;&lt;span style=&quot;color: #1a1a1a; font-size: 16px; letter-spacing: normal; text-decoration: none;&quot;&gt; 2. 能夠使用 OpenAI 的 API 探索論文裏的模型 （代表人羣：研究員裏的嚐鮮者）&lt;/span&gt;&lt;/section&gt;&lt;section style=&quot;line-height: 1.6em; margin: 1.66667px 0px 0px; text-align: left; text-indent: 0em;&quot;&gt;&lt;span style=&quot;color: #1a1a1a; font-size: 16px; letter-spacing: normal; text-decoration: none;&quot;&gt; 3. 對硅谷的敏感性，經常看大家在用 OpenAI 的 API 做什麼產品 （代表人羣：VC）&lt;/span&gt;&lt;/section&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;這三類人在中國，我們粗估一下，第一類，大概有 1/100,000，第二類大概是第一類裏的 1/1,000，第三類大概是 1/1,000,000. 三個條件，缺少一個，都無法意識到 OpenAI 發展到哪一步了。&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;有哪個團隊彙集了這三種人，並且他們有充分的碰撞？有哪個人是具備了這三種屬性？&lt;/span&gt;&amp;nbsp;雪上加霜的是，&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;研究人員三年來被封在國內&lt;/span&gt;，沒有出國參加過學術會議交流，甚至我猜很多人連線上會議都沒有參加，很多東西我們從論文上是看不到的。&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;我們繼續深挖。第一類人羣中，又分成 NLP（自然語言處理）研究人員，其他 AI 研究人員（比如計算機視覺、語音識別、機器學習）。&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;中國 NLP 的研究羣體裏，基本上是把語言模型（尤其是 BERT，而不是 GPT）拿去應用在 NLP 的各種下游任務上，在學術界就是刷榜發論文，在工業界，就是拿去做客服機器人、寫稿機器人、角色扮演機器人，研究方法也完全不同於 GPT 精髓——Scaling-up 和 Alignment。&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;（幾乎）沒有人是把大語言模型（LLM）當做通用人工智能（AGI）的一種可能性來研究的。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;其他 AI 研究人員，比如計算機視覺，大部分人還是專注在圖像上，即使是用 Transformer，也是解決圖像的問題，比如用 Transformer 來做自動駕駛、圖像生成等。即使是 Tesla
 AutoPilot 的 AI 主管 Karpathy。Karpathy 在 2022 年上半年從 Tesla 裸辭，以獨立研究員的身份，投身於大語言模型。&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;Karpathy 曾經説他過去十年癡迷於 AI 中取得最快進展的方向，並且曾經對語言模型非常感興趣，但是卻忽視了 scaling
 up 的力量，那就是簡單的 Objective（next word）+簡單的結構（Transformer）+ 足夠的參數+足夠的數據 (web 
text)，一個語言模型可以湧現出在小規模狀態下看不到的能力，他曾像其他人一樣（他應該指早期的 OpenAI），一度以為強化學習是 AGI 的路徑，到頭來卻發現大語言模型是看起來最有希望的路徑。在此之前，語言模型的研究人員，把精力過多地放在了具體任務上。&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;再説 AI 領域的另一個重要羣體——計算機視覺（Computer
 
Vision) 羣體。在 2012 年開始的深度學習浪潮裏，計算機視覺一直是應用最廣、商業化最成功的方向，吸引了太多 AI 研究員的精力，從圖像分類、檢測、分割到識別，從圖像到視頻，從高層視覺到底層視覺，我們在卷積神經網絡上卷出了一個又一個新高度。一個 YOLO 目標檢測框架，被迭代到原作者都放棄了，還有人給推到了 v7 版本。最具代表性的是計算機視覺的登月工程——自動駕駛，它需要成像、識別、合成、建圖、規劃等幾乎所有的視覺 AI 技術加持，從 CNN 時代到 Transformer 時代，不斷地拉更多的人下水，但直到今天，全自動駕駛的方案仍未收斂。馬斯克定義的問題是對的，自動駕駛是一個 real-world
 AI 問題，但顯然特斯拉的方案並沒有為全自動駕駛準備好。&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;NLP 圈的小家碧玉，CV 圈的隔行隔山，疫情閉關三年，互聯網信息不通。這些因素疊加起來，整個中文世界，形成了一個信息繭房。10 年來，我們以為自己積攢的 AI 算法、數據、應用的優勢，如今變成中美巨大的鴻溝。這個時候，我們甚至沒有一個新聞調查，把這件事的來龍去脈，挖它個底朝天。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;另一個問題是，&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;我們的中文互聯網不足以提供高質量的訓練數據&lt;/span&gt;。什麼是高質量的數據？比如維基百科、高質量的活躍論壇、專業新聞、學術論文、高質量代碼、圖書。&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;我們看看 GPT–3 的訓練數據是什麼。權重最大的數據集是 OpenWebText（開源版本）,數據是從 Reddit 論壇上收集的 URL，再把內容抓取下來。Common Crawl 是一個開放的互聯網數據存檔（英文佔一半，&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;中文大概 5%&lt;/span&gt;）。其他一些代表性的數據包括 Wikipedia 維基百科，Books 開放圖書，Stack
 Exchange 技術問答社區，Github 
代碼，ArXiv 論文，RealNew 新聞存檔，PubMed 醫療數據。可以看到，由中文互聯網產生的數據，比例低到可以忽略。這也是困擾很多試圖訓練中文大模型的問題，但實際上，ChatGPT 的用中文溝通的能力，已經遠超那些專門的中文大語言模型了，背後原因是 GPT 隱式學到的翻譯能力。&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;沒有好的中文數據，我們就只能搭全球互聯網的數據順風車。&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;上面這些優質數據的產生，需要開放的社區，我們似乎無解。&lt;/span&gt;&lt;/p&gt;&lt;h3 style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 1rem; font-weight: 600; line-height: calc(1.66667); margin-bottom: 24px; margin-top: 24px; text-align: center; text-size-adjust: auto; white-space: normal;&quot;&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;GPT 大語言模型能實現 AGI 嗎？&lt;/span&gt;&lt;/h3&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin-bottom: 0px; margin-left: auto; margin-right: auto; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;基於 GPT 的 LLM，僅僅依賴語言，大概率無法實現 AGI，而只是」通往 AGI 的高速公路的一個出口（Yann
 
Lecun）「。但 LLM 足以把互聯網基礎設施搞個天翻地覆，它同時具備了 Logic 和 Memory。Logic 是推理能力，Memory 是對高頻知識的記憶，顯然 Memory 可以分為片上和片外，片上有限，片外無限。下一步，我們只需要專注於把 LLM 的 Logic 推到極致，把大部分低頻 Memory
 
offload 到模型以外，配以搜索等查詢技術，就可以實現對整個互聯網前後端的重構。我們遠遠沒有吃盡 scaling-law 的紅利，限制我們的，只有集成電路的摩爾定律和製造能力、能源的價格、數據的獲取。&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;集成電路方面，以 Chiplet 為代表的系統摩爾定律還不夠，人們需要能夠 scaling-up 的 Foundry。&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;能源方面，太陽能和風能 + 能源存儲能夠解決很多問題，更加激動人心的是以 Helion 為代表的核聚變技術，則有機會把能源價格降低一個量級，然後更多。&lt;/p&gt;&lt;p style=&quot;box-sizing: border-box; caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: NittiGrotesk, Keyboard, sans-serif; font-size: 18px; margin: calc(1.66667rem) auto 0px; text-align: start; text-size-adjust: auto; white-space: normal;&quot;&gt;數據方面，目前的 GPT 模型依賴互聯網文本數據，這會用盡，沒關係，現實世界的數據是無限的。&lt;/p&gt; &lt;div class=&quot;blogger-post-footer&quot;&gt;翻牆技術博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;訂閲地址及社交帳號&lt;/a&gt;&lt;/div&gt;</description>
                <link>https://www.chinagfw.org/2023/06/chatgpt.html</link>
                <author>noreply@blogger.com (pompei)</author>
                <thr:total>0</thr:total>
            </item>
            <item>
                <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-8350892200322034371</guid>
                <pubDate>Tue, 20 Jun 2023 06:05:00 +0000</pubDate>
                <atom:updated>2023-06-20T14:05:10.753+08:00</atom:updated>
                <title> 你不能相信 Google</title>
                <description>&lt;p&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;via &lt;a href=&quot;https://world.hey.com/dhh/you-can-t-trust-google-f7d64064&quot;&gt;https://world.hey.com/dhh/you-can-t-trust-google-f7d64064&lt;/a&gt; &lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;大衞·海涅梅爾·漢森&lt;br /&gt;&lt;br /&gt;2023 年 6 月 19 日&lt;br /&gt;如果 Google 找不到能夠通過廣告以數十億的規模直接盈利的方法，他們最終會消除你關心的每一項服務。他們在產品或服務業務上從根本上無法成功，因為產品和服務對 Google 來説並無利可圖，廣告才是。&lt;br /&gt;&lt;br /&gt;你可以從多個方面看到這種重點，但我最喜歡的是以客戶服務為鏡。在客戶服務方面，Google 一直表現得非常糟糕，因為幫助某人解決 Workspaces 甚至 Google Cloud 平台上的問題從來不會像幫助廣告商霸佔你的注意力那樣利潤豐厚。&lt;br /&gt;&lt;br /&gt;這是一個永恆的觀察，但我現在提到它是為了慶祝 Google 剛剛關閉他們的域名註冊商 Google Domains。在九年的經營中，它將在三個月內毫不矜持地消失（並將殘骸出售給 Squarespace）。這是一個每年營業額達 1.8 億美元，為 1000 萬個域名提供服務的業務！&lt;br /&gt;&lt;br /&gt;Google Home / Nest 的閉著死走也並不足取。Google 在將近十年前收購了 Nest，卻在其產品組合上做得比什麼都不做還要糟糕。就在幾年前，他們關閉了 Nest Secure，導致那些購買這一系統的人明年得到一堆磚石。而原本應該取而代之的優秀 Nest 應用程式的 Google Home 應用程式已成為數年的尷尬和忽視。&lt;br /&gt;&lt;br /&gt;鑒於這樣的歷史，為什麼還有人會信任 Google 在廣告以外的產品和服務呢？這涉及從 Workspaces 到 Gmail for Domains 再到 Google Cloud 平台的所有領域。只要這家公司進行一次重大的重組，或者提拔任一高層，它就有可能摧毀其中的任何一個。&lt;br /&gt;&lt;br /&gt;我只是想説，你最好有個備用計劃。如何備份你的協作、你的郵件、你的家庭安全系統。任何一個標有「Made by Google」的產品都暗指下面有「直到我們不再在乎」這樣的解釋。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;/p&gt;&lt;p&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;==========&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; color: #333333; font-size: 16px; line-height: 24px;&quot;&gt;關於 David Heinemeier Hansson&lt;br /&gt;作為 37signals 公司的共同所有者和首席技術官，為那些處於劣勢地位的人們創建了 Basecamp 和 HEY。創建了 Ruby on Rails。著有《REWORK》、《It Doesn&#39;t Have to Be Crazy at Work》和《REMOTE》。作為一名賽車手在勒芒賽車比賽中獲勝。作為反托拉斯倡導者與大型科技壟斷公司作鬥爭。投資于丹麥的初創企業。&lt;br /&gt;&lt;/span&gt; &lt;/p&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;翻牆技術博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;訂閲地址及社交帳號&lt;/a&gt;&lt;/div&gt;</description>
                <link>https://www.chinagfw.org/2023/06/google.html</link>
                <author>noreply@blogger.com (pompei)</author>
                <thr:total>0</thr:total>
            </item>
            <item>
                <guid isPermaLink="false">tag:blogger.com,1999:blog-5500297126185736776.post-6659314781463108026</guid>
                <pubDate>Wed, 31 May 2023 04:19:00 +0000</pubDate>
                <atom:updated>2023-05-31T12:19:11.677+08:00</atom:updated>
                <title>IPVM 發現大華公司銷售抗議者/橫幅報警設備，並隨後刪除證據 - Here News</title>
                <description>&lt;p&gt;&lt;span face=&quot;&amp;quot;hiragino sans gb&amp;quot; , &amp;quot;microsoft yahei&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif&quot; style=&quot;background-color: white; font-size: 16px; line-height: 24px;&quot;&gt;

via &lt;a href=&quot;https://here.news/post/6476c93a4e793c181e076867&quot;&gt;https://here.news/post/6476c93a4e793c181e076867&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;政治抗議活動在中華人民共和國很快被鎮壓，最近的北京「橋人橫幅」尤為著名。大華公司提供了一種技術解決方案，利用人工智能分析自動檢測和報告抗議橫幅和抗議者的面部特徵給中國公安機關。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;img alt=&quot;55f3c1d1-c394-4c33-aa07-2d92da91054b_application_1.png&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/55f3c1d1-c394-4c33-aa07-2d92da91054b_application_1.png&quot; style=&quot;display: block; max-width: 100%;&quot; /&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;IPVM 還發現英飛凌也列出了具有這種分析功能的攝像頭。IPVM 是第一個報道這種解決方案存在的機構。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;大華在 IPVM 聯繫後不久刪除了所有證據。關於中國對抗議者、記者以及宗教/民族少數羣體的警報，請參見：&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;大華和英飛凌都未回覆置評請求。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;strong&gt;「橫幅報警」AI 平台&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;大華的「巨靈」AI 平台於 2021 年推出，提供多種分析功能，如檢測工地上的安全帽、室內吸煙、工人閒置時間等。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;其中一項解決方案名為「拉橫幅」，列在「社會治安」類別下，會對任何檢測到的抗議橫幅產生報警：&lt;/p&gt;&lt;blockquote style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;在指定區域內，如果檢測到人舉橫幅並持續一定時間，則會產生報警[強調添加] 指定區域內，檢測到人舉橫幅且持續一定時間則產生報警&lt;/blockquote&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;大華進行了一次系統演示，演示的左上角用英文單詞「banner_​alarm」進行標註。演示還顯示，抗議者的面部特徵會自動被檢測和記錄，作為同一解決方案的一部分：&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;img alt=&quot;c2204c14-5477-46fe-8b1a-97d3200d3eee_application_1.png&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/c2204c14-5477-46fe-8b1a-97d3200d3eee_application_1.png&quot; style=&quot;display: block; max-width: 100%;&quot; /&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;此標語寫着：「戰 70 天，拼在寒冬，贏下」（戰 70 天，拼在寒冬，贏下）。IPVM 在大華的演示中沒有找到此標語的其他提及。目前尚不清楚這是否指涉特定事件，或者僅用於演示目的。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;strong&gt;沒有 OCR 證據&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;大華的系統中並未提到光學字符識別（OCR），即沒有證據表明該系統能夠自動識別橫幅上的口號，或者僅設定為僅對特定詞語或口號發出警報。從概念上講，技術上講，這並不難實現，因為 OCR 技術已經得到廣泛應用，而且橫幅往往較大，易於攝像頭處理。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;strong&gt;服務於中國當局&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;大華使用「社會治安」和「社會治理」這些術語來描述該解決方案，表明該解決方案針對警察和中國其他相關機構的使用，因為這些術語在中國特定用於描述通過詳細的刑法規定來維護公共秩序的行動。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;strong&gt;2020 年的演示，2023 年可用&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;IPVM 發現這些抗議者警報在 2023 年 5 月實時可用，儘管可能已經提供了多年，因為橫幅圖像的時間戳顯示為 2020 年 11 月。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;strong&gt;用於城市廣場、道路、大廳&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;大華的解決方案表示，它適用於「室內大廳或室外較空曠的廣場、道路和其他場景」。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;strong&gt;以 100–500 像素為目標&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;大華的解決方案還指出，它自動檢測「在 1080P 分辨率下大小在 100 到 500 像素的橫幅或標語牌」。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;strong&gt;英飛凌等公司也提供相同的功能&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;英飛凌的兩款攝像頭也包括「拉橫幅檢測」功能：VH311-B5 5MP 槍式攝像頭和 VS211-​A60B-​AJ0-​T 8MP 槍式攝像頭。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;strong&gt;中國抗議背景&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;儘管中華人民共和國憲法第 35 條保障了集會自由，但抗議者和舉着橫幅的人常常因中華人民共和國反對「擾亂公共秩序」和「妨礙社會管理」的廣泛法律而被逮捕。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;儘管如此，在中華人民共和國，展開橫幅抗議（「拉橫幅」）仍經常被用來表達訴求，例如 2016 年湖南地區教師因未支付工資而舉行抗議活動，要求當局「依法保障教師待遇」。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;img alt=&quot;25d49d2f-5831-4bbc-b363-502357ae2f7a_application_1.png&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/25d49d2f-5831-4bbc-b363-502357ae2f7a_application_1.png&quot; style=&quot;display: block; max-width: 100%;&quot; /&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;更為著名的是，中國在 2022 年爆發的反封控抗議活動就是由一名在北京展開橫幅、呼籲「我們不想要封控，我們要自由」的抗議者啓發而起。該抗議者當場被逮捕，至今下落不明。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;a href=&quot;https://youtu.be/lguW9FjLKC0&quot; rel=&quot;noreferrer noopener&quot; style=&quot;color: black;&quot; target=&quot;_blank&quot;&gt;https://youtu.be/lguW9FjLKC0&lt;/a&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;strong&gt;中國橫幅看起來相似&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;與美國和歐洲不同，中國的抗議標語通常相當相似，這使得構建能夠自動檢測它們的視頻分析更加容易。IPVM 找到了一個訓練數據庫，裏面有 100 張不同橫幅的圖片，專門用於創建這種分析功能。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;img alt=&quot;60e4230e-d37e-4b1a-9e58-18cca86d350e_application_1.png&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/60e4230e-d37e-4b1a-9e58-18cca86d350e_application_1.png&quot; style=&quot;display: block; max-width: 100%;&quot; /&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;strong&gt;與海康威視的比較&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;海康威視也向中華人民共和國警方提供了抗議者警報：&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;海康威視的平台列出了與「非法集會、遊行、示威」和「聚眾」相關的報警功能，IPVM 和《衞報》在 2022 年報道了這一情況。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;海康威視的警報不是由視頻分析驅動的，而是與現有警察系統集成，用於跟蹤抗議者，特別是「信訪人」，這個羣體在中華人民共和國受到密切監控。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;strong&gt;大華刪除證據&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;在 IPVM 聯繫大華之前，「社會治安」類別下列出了「拉橫幅」的檢測功能：&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;img alt=&quot;b4511988-d86d-4451-a4b9-039b95325b1b_application_1.png&quot; src=&quot;https://storage.googleapis.com/artifacts.phonic-jetty-356702.appspot.com/medias/b4511988-d86d-4451-a4b9-039b95325b1b_application_1.png&quot; style=&quot;display: block; max-width: 100%;&quot; /&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;然而，大華在 IPVM 聯繫之後很快將該解決方案從其網站上刪除，即「Unfurled Banners」（拉橫幅）不再顯示。IPVM 預料到了這一點，並存檔了大華的網頁。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;a href=&quot;https://ipvm.com/reports/dahua-protestor-alarms&quot; rel=&quot;noreferrer noopener&quot; style=&quot;color: black;&quot; target=&quot;_blank&quot;&gt;https://ipvm.com/reports/dahua-protestor-alarms&lt;/a&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;這對於大華來説並不是新鮮事，因為該公司有刪除自己網站上證據的歷史，例如大華召開習近平學習會後隨即刪除（2021 年）和大華自定義中國軍隊視頻管理系統，刪除證據（2022 年）。&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;&lt;strong&gt;大華和英飛凌未回覆&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-text-stroke-width: 0px; font-family: sans-serif; font-size: 12.8px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: 400; letter-spacing: normal; overflow-wrap: break-word; text-align: start; text-decoration-color: initial; text-decoration-style: initial; text-decoration-thickness: initial; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;&quot;&gt;大華和英飛凌均未對我們的多次置評請求作出迴應。IPVM 在 5 月 25 日（大華）和 5 月 26 日（英飛凌）首次聯繫這些公司，即在我們發表文章之前的 4 到 5 天。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;翻牆技術博客&lt;a href=&quot;http://www.chinagfw.org/2013/09/blog-post.html&quot;&gt;訂閲地址及社交帳號&lt;/a&gt;&lt;/div&gt;</description>
                <link>https://www.chinagfw.org/2023/05/ipvm-here-news.html</link>
                <author>noreply@blogger.com (pompei)</author>
                <thr:total>0</thr:total>
            </item>
        </channel>
    </rss>